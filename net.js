const getTensorMetadata = (safetensorBuffer) => {
      const metadataLength = Number(new DataView(safetensorBuffer.buffer).getBigUint64(0, true));
      const metadata = JSON.parse(new TextDecoder("utf8").decode(safetensorBuffer.subarray(8, 8 + metadataLength)));
      return Object.fromEntries(Object.entries(metadata).filter(([k, v]) => k !== "__metadata__").map(([k, v]) => [k, {...v, data_offsets: v.data_offsets.map(x => 8 + metadataLength + x)}]));
    };

  const getSafetensorParts = async () => {
    let parts = [];

    parts.push(new Uint8Array(await (await fetch('https://softwired.nyc3.digitaloceanspaces.com/sd/net_part0.safetensors')).arrayBuffer()));
    parts.push(new Uint8Array(await (await fetch('https://softwired.nyc3.digitaloceanspaces.com/sd/net_part1.safetensors')).arrayBuffer()));
    parts.push(new Uint8Array(await (await fetch('https://softwired.nyc3.digitaloceanspaces.com/sd/net_part2.safetensors')).arrayBuffer()));
    parts.push(new Uint8Array(await (await fetch('https://softwired.nyc3.digitaloceanspaces.com/sd/net_part3.safetensors')).arrayBuffer()));

    return parts;
  }


  const getTensorBuffer = (safetensorParts, tensorMetadata, key) => {
    let selectedPart = 0;
    let counter = 0;
    let partStartOffsets = [1131408336, 2227518416, 3308987856, 4265298864];
    let correctedOffsets = tensorMetadata.data_offsets;
    let prev_offset = 0;

    for (let start of partStartOffsets) {
      prev_offset = (counter == 0) ? 0 : partStartOffsets[counter-1];

      if (tensorMetadata.data_offsets[0] < start) {
        selectedPart = counter;
        correctedOffsets = [correctedOffsets[0]-prev_offset, correctedOffsets[1]-prev_offset];
        break;
      }

      counter++;
    }

    let allZero = true;
    let out = safetensorParts[selectedPart].subarray(...correctedOffsets);

    for (let i = 0; i < out.length; i++) {
        if (out[i] !== 0) {
            allZero = false;
            break;
        }
    }

    if (allZero) {
        console.log("Error: weight '" + key + "' is all zero.");
    }

    return safetensorParts[selectedPart].subarray(...correctedOffsets);
  }
    
  const createEmptyBuf = (device, size) => {
      return device.createBuffer({size, usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST });
  };

  const createWeightBuf = (device, size, data) => {
    const buf = device.createBuffer({ mappedAtCreation: true, size, usage: GPUBufferUsage.STORAGE });
    new Uint8Array(buf.getMappedRange()).set(data);
    buf.unmap();
    return buf;
  };

  const addComputePass = (device, commandEncoder, pipeline, bufs, workgroup) => {
    const bindGroup = device.createBindGroup({layout: pipeline.getBindGroupLayout(0), entries: bufs.map((buffer, index) => ({ binding: index, resource: { buffer } }))});
    const passEncoder = commandEncoder.beginComputePass();
    passEncoder.setPipeline(pipeline);
    passEncoder.setBindGroup(0, bindGroup);
    passEncoder.dispatchWorkgroups(...workgroup);
    passEncoder.end();
  };
    var text_modelModel = function() {
    
    const E_77_772_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 77 */
  let gidx1 = i32(gindex.x); /* 772 */
  let lidx2 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx1*(64))+(lidx2*(4))]);
  var  val1 = f32(data1[(gidx1*(64))+(lidx2*(4))+(1)]);
  var  val2 = f32(data1[(gidx1*(64))+(lidx2*(4))+(2)]);
  var  val3 = f32(data1[(gidx1*(64))+(lidx2*(4))+(3)]);
  var  val4 = f32(data2[gidx0]);
  data0[(gidx0*(49408))+(gidx1*(64))+(lidx2*(4))] = ((1.0f)-(f32(val0<val4)+f32(val4<val0)));
  data0[(gidx0*(49408))+(gidx1*(64))+(lidx2*(4))+(1)] = ((1.0f)-(f32(val1<val4)+f32(val4<val1)));
  data0[(gidx0*(49408))+(gidx1*(64))+(lidx2*(4))+(2)] = ((1.0f)-(f32(val2<val4)+f32(val4<val2)));
  data0[(gidx0*(49408))+(gidx1*(64))+(lidx2*(4))+(3)] = ((1.0f)-(f32(val3<val4)+f32(val4<val3)));
}`;

const r_77_16_193_16_64_4_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 77 */
  let gidx1 = i32(gindex.y); /* 16 */
  let gidx2 = i32(gindex.x); /* 193 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(49408))+(gidx2*(256))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(49408))+(gidx2*(256))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(49408))+(gidx2*(256))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(49408))+(gidx2*(256))+(ridx0*(4))+(3)]);
    var  val4 = f32(data2[(gidx1*(48))+(gidx2*(196608))+(lidx3*(3))+(ridx0*(3072))]);
    var  val5 = f32(data2[(gidx1*(48))+(gidx2*(196608))+(lidx3*(3))+(ridx0*(3072))+(768)]);
    var  val6 = f32(data2[(gidx1*(48))+(gidx2*(196608))+(lidx3*(3))+(ridx0*(3072))+(1536)]);
    var  val7 = f32(data2[(gidx1*(48))+(gidx2*(196608))+(lidx3*(3))+(ridx0*(3072))+(2304)]);
    var  val8 = f32(data2[(gidx1*(48))+(gidx2*(196608))+(lidx3*(3))+(ridx0*(3072))+(1)]);
    var  val9 = f32(data2[(gidx1*(48))+(gidx2*(196608))+(lidx3*(3))+(ridx0*(3072))+(769)]);
    var  val10 = f32(data2[(gidx1*(48))+(gidx2*(196608))+(lidx3*(3))+(ridx0*(3072))+(1537)]);
    var  val11 = f32(data2[(gidx1*(48))+(gidx2*(196608))+(lidx3*(3))+(ridx0*(3072))+(2305)]);
    var  val12 = f32(data2[(gidx1*(48))+(gidx2*(196608))+(lidx3*(3))+(ridx0*(3072))+(2)]);
    var  val13 = f32(data2[(gidx1*(48))+(gidx2*(196608))+(lidx3*(3))+(ridx0*(3072))+(770)]);
    var  val14 = f32(data2[(gidx1*(48))+(gidx2*(196608))+(lidx3*(3))+(ridx0*(3072))+(1538)]);
    var  val15 = f32(data2[(gidx1*(48))+(gidx2*(196608))+(lidx3*(3))+(ridx0*(3072))+(2306)]);
    acc0 = fma(val0,val4,acc0);
    acc0 = fma(val1,val5,acc0);
    acc0 = fma(val2,val6,acc0);
    acc0 = fma(val3,val7,acc0);
    acc1 = fma(val0,val8,acc1);
    acc1 = fma(val1,val9,acc1);
    acc1 = fma(val2,val10,acc1);
    acc1 = fma(val3,val11,acc1);
    acc2 = fma(val0,val12,acc2);
    acc2 = fma(val1,val13,acc2);
    acc2 = fma(val2,val14,acc2);
    acc2 = fma(val3,val15,acc2);
  }
  data0[(gidx0*(148224))+(gidx1*(9264))+gidx2+(lidx3*(579))] = acc0;
  data0[(gidx0*(148224))+(gidx1*(9264))+gidx2+(lidx3*(579))+(193)] = acc1;
  data0[(gidx0*(148224))+(gidx1*(9264))+gidx2+(lidx3*(579))+(386)] = acc2;
}`;

const r_77_77 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@compute @workgroup_size(1) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 77 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (77); ridx0++) {
    acc0 = (select((0.0f),(1.0f),f32(((gidx0*((-1)))+(ridx0*((-1))))<((-75)))!=0.)+acc0);
  }
  data0[gidx0] = (acc0+((-1.0f)));
}`;

const E_77_77 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(1) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 77 */
  let gidx1 = i32(gindex.x); /* 77 */
  var  val0 = f32(data1[gidx1]);
  var  val1 = f32(data2[gidx0]);
  data0[(gidx0*(77))+gidx1] = ((1.0f)-(f32(val0<val1)+f32(val1<val0)));
}`;

const r_77_16_16_77_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 77 */
  let gidx1 = i32(gindex.x); /* 16 */
  let lidx2 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  for(var ridx0 = (0); ridx0 < (77); ridx0++) {
    var  val0 = f32(data1[(gidx0*(77))+ridx0]);
    var  val1 = f32(data2[(gidx1*(48))+(lidx2*(3))+(ridx0*(768))]);
    var  val2 = f32(data2[(gidx1*(48))+(lidx2*(3))+(ridx0*(768))+(1)]);
    var  val3 = f32(data2[(gidx1*(48))+(lidx2*(3))+(ridx0*(768))+(2)]);
    acc0 = fma(val0,val1,acc0);
    acc1 = fma(val0,val2,acc1);
    acc2 = fma(val0,val3,acc2);
  }
  data0[(gidx0*(768))+(gidx1*(48))+(lidx2*(3))] = acc0;
  data0[(gidx0*(768))+(gidx1*(48))+(lidx2*(3))+(1)] = acc1;
  data0[(gidx0*(768))+(gidx1*(48))+(lidx2*(3))+(2)] = acc2;
}`;

const r_1848_32_193 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 1848 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (193); ridx0++) {
    var  val0 = f32(data1[(gidx0*(6176))+(lidx1*(193))+ridx0]);
    acc0 = (val0+acc0);
  }
  var  val1 = f32(data2[(gidx0*(32))+lidx1]);
  data0[(gidx0*(32))+lidx1] = (acc0+val1);
}`;

const r_77_16_48 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 77 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (48); ridx0++) {
    var  val0 = f32(data1[(gidx0*(768))+(lidx1*(48))+ridx0]);
    acc0 = (val0+acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val1 = f32(temp[ridx1]);
    acc1 = (val1+acc1);
  }
  data0[gidx0] = (acc1*(0.0013020833333333333f));
}`;

const r_77_16_48n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 77 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (48); ridx0++) {
    var  val0 = f32(data1[(gidx0*(768))+(lidx1*(48))+ridx0]);
    var  val1 = f32(data2[gidx0]);
    var  alu0 = (val0-val1);
    acc0 = fma(alu0,alu0,acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val2 = f32(temp[ridx1]);
    acc1 = (val2+acc1);
  }
  data0[gidx0] = sqrt(((1.0f)/((acc1*(0.0013020833333333333f))+(1e-05f))));
}`;

const E_77_16_16_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 77 */
  let gidx1 = i32(gindex.x); /* 16 */
  let lidx2 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(768))+(gidx1*(48))+(lidx2*(3))]);
  var  val1 = f32(data1[(gidx0*(768))+(gidx1*(48))+(lidx2*(3))+(1)]);
  var  val2 = f32(data1[(gidx0*(768))+(gidx1*(48))+(lidx2*(3))+(2)]);
  var  val3 = f32(data2[gidx0]);
  var  val4 = f32(data3[gidx0]);
  var  val5 = f32(data4[(gidx1*(48))+(lidx2*(3))]);
  var  val6 = f32(data4[(gidx1*(48))+(lidx2*(3))+(1)]);
  var  val7 = f32(data4[(gidx1*(48))+(lidx2*(3))+(2)]);
  var  val8 = f32(data5[(gidx1*(48))+(lidx2*(3))]);
  var  val9 = f32(data5[(gidx1*(48))+(lidx2*(3))+(1)]);
  var  val10 = f32(data5[(gidx1*(48))+(lidx2*(3))+(2)]);
  data0[(gidx0*(768))+(gidx1*(48))+(lidx2*(3))] = (((val0-val3)*val4*val5)+val8);
  data0[(gidx0*(768))+(gidx1*(48))+(lidx2*(3))+(1)] = (((val1-val3)*val4*val6)+val9);
  data0[(gidx0*(768))+(gidx1*(48))+(lidx2*(3))+(2)] = (((val2-val3)*val4*val7)+val10);
}`;

const r_77_16_16_192_4_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 77 */
  let gidx1 = i32(gindex.x); /* 16 */
  let lidx2 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  for(var ridx0 = (0); ridx0 < (192); ridx0++) {
    var  val0 = f32(data1[(gidx0*(768))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(768))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(768))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(768))+(ridx0*(4))+(3)]);
    var  val4 = f32(data2[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))]);
    var  val5 = f32(data2[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(1)]);
    var  val6 = f32(data2[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(2)]);
    var  val7 = f32(data2[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(3)]);
    var  val8 = f32(data2[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(768)]);
    var  val9 = f32(data2[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(769)]);
    var  val10 = f32(data2[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(770)]);
    var  val11 = f32(data2[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(771)]);
    var  val12 = f32(data2[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(1536)]);
    var  val13 = f32(data2[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(1537)]);
    var  val14 = f32(data2[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(1538)]);
    var  val15 = f32(data2[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(1539)]);
    acc0 = fma(val0,val4,acc0);
    acc0 = fma(val1,val5,acc0);
    acc0 = fma(val2,val6,acc0);
    acc0 = fma(val3,val7,acc0);
    acc1 = fma(val0,val8,acc1);
    acc1 = fma(val1,val9,acc1);
    acc1 = fma(val2,val10,acc1);
    acc1 = fma(val3,val11,acc1);
    acc2 = fma(val0,val12,acc2);
    acc2 = fma(val1,val13,acc2);
    acc2 = fma(val2,val14,acc2);
    acc2 = fma(val3,val15,acc2);
  }
  var  val16 = f32(data3[(gidx1*(48))+(lidx2*(3))]);
  var  val17 = f32(data3[(gidx1*(48))+(lidx2*(3))+(1)]);
  var  val18 = f32(data3[(gidx1*(48))+(lidx2*(3))+(2)]);
  data0[(gidx0*(768))+(gidx1*(48))+(lidx2*(3))] = (acc0+val16);
  data0[(gidx0*(768))+(gidx1*(48))+(lidx2*(3))+(1)] = (acc1+val17);
  data0[(gidx0*(768))+(gidx1*(48))+(lidx2*(3))+(2)] = (acc2+val18);
}`;

const r_77_77n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@compute @workgroup_size(1) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 77 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (77); ridx0++) {
    acc0 = (select((0.0f),(1.0f),f32(((gidx0*((-1)))+(ridx0*((-1))))<((-75)))!=0.)+acc0);
  }
  data0[gidx0] = (acc0+((-2.0f)));
}`;

const E_77_77n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(1) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 77 */
  let gidx1 = i32(gindex.x); /* 77 */
  var  val0 = f32(data1[gidx1]);
  var  val1 = f32(data2[gidx0]);
  data0[(gidx0*(77))+gidx1] = select((0.0f),(-0x1.fffffep+127f),((1.0f)-f32(val0<val1))!=0.);
}`;

const r_77_77_4_16_4_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(4) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 77 */
  let gidx1 = i32(gindex.x); /* 77 */
  let lidx2 = i32(lindex.x); /* 4 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  for(var ridx0 = (0); ridx0 < (16); ridx0++) {
    var  val0 = f32(data1[(gidx0*(768))+(lidx2*(192))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(768))+(lidx2*(192))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(768))+(lidx2*(192))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(768))+(lidx2*(192))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(768))+(lidx2*(192))+(ridx0*(4))+(64)]);
    var  val5 = f32(data1[(gidx0*(768))+(lidx2*(192))+(ridx0*(4))+(65)]);
    var  val6 = f32(data1[(gidx0*(768))+(lidx2*(192))+(ridx0*(4))+(66)]);
    var  val7 = f32(data1[(gidx0*(768))+(lidx2*(192))+(ridx0*(4))+(67)]);
    var  val8 = f32(data1[(gidx0*(768))+(lidx2*(192))+(ridx0*(4))+(128)]);
    var  val9 = f32(data1[(gidx0*(768))+(lidx2*(192))+(ridx0*(4))+(129)]);
    var  val10 = f32(data1[(gidx0*(768))+(lidx2*(192))+(ridx0*(4))+(130)]);
    var  val11 = f32(data1[(gidx0*(768))+(lidx2*(192))+(ridx0*(4))+(131)]);
    var  val12 = f32(data2[(gidx1*(768))+(lidx2*(192))+(ridx0*(4))]);
    var  val13 = f32(data2[(gidx1*(768))+(lidx2*(192))+(ridx0*(4))+(1)]);
    var  val14 = f32(data2[(gidx1*(768))+(lidx2*(192))+(ridx0*(4))+(2)]);
    var  val15 = f32(data2[(gidx1*(768))+(lidx2*(192))+(ridx0*(4))+(3)]);
    var  val16 = f32(data2[(gidx1*(768))+(lidx2*(192))+(ridx0*(4))+(64)]);
    var  val17 = f32(data2[(gidx1*(768))+(lidx2*(192))+(ridx0*(4))+(65)]);
    var  val18 = f32(data2[(gidx1*(768))+(lidx2*(192))+(ridx0*(4))+(66)]);
    var  val19 = f32(data2[(gidx1*(768))+(lidx2*(192))+(ridx0*(4))+(67)]);
    var  val20 = f32(data2[(gidx1*(768))+(lidx2*(192))+(ridx0*(4))+(128)]);
    var  val21 = f32(data2[(gidx1*(768))+(lidx2*(192))+(ridx0*(4))+(129)]);
    var  val22 = f32(data2[(gidx1*(768))+(lidx2*(192))+(ridx0*(4))+(130)]);
    var  val23 = f32(data2[(gidx1*(768))+(lidx2*(192))+(ridx0*(4))+(131)]);
    acc0 = fma(val0,val12,acc0);
    acc0 = fma(val1,val13,acc0);
    acc0 = fma(val2,val14,acc0);
    acc0 = fma(val3,val15,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
  }
  var  val24 = f32(data3[(gidx0*(77))+gidx1]);
  data0[(gidx0*(77))+gidx1+(lidx2*(17787))] = ((acc0*(0.125f))+val24);
  data0[(gidx0*(77))+gidx1+(lidx2*(17787))+(5929)] = ((acc1*(0.125f))+val24);
  data0[(gidx0*(77))+gidx1+(lidx2*(17787))+(11858)] = ((acc2*(0.125f))+val24);
}`;

const r_231_4_77 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(4) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 231 */
  let lidx1 = i32(lindex.x); /* 4 */
  var  acc0 = -0x1.fffffep+127f;
  for(var ridx0 = (0); ridx0 < (77); ridx0++) {
    var  val0 = f32(data1[(gidx0*(308))+(lidx1*(77))+ridx0]);
    acc0 = max(val0,acc0);
  }
  data0[(gidx0*(4))+lidx1] = acc0;
}`;

const E_77_77_4_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(4) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 77 */
  let gidx1 = i32(gindex.x); /* 77 */
  let lidx2 = i32(lindex.x); /* 4 */
  var  val0 = f32(data1[(gidx0*(924))+gidx1+(lidx2*(231))]);
  var  val1 = f32(data1[(gidx0*(924))+gidx1+(lidx2*(231))+(77)]);
  var  val2 = f32(data1[(gidx0*(924))+gidx1+(lidx2*(231))+(154)]);
  var  val3 = f32(data2[(gidx0*(12))+(lidx2*(3))]);
  var  val4 = f32(data2[(gidx0*(12))+(lidx2*(3))+(1)]);
  var  val5 = f32(data2[(gidx0*(12))+(lidx2*(3))+(2)]);
  data0[(gidx0*(924))+gidx1+(lidx2*(231))] = exp2(((val0-val3)*(1.4426950408889634f)));
  data0[(gidx0*(924))+gidx1+(lidx2*(231))+(77)] = exp2(((val1-val4)*(1.4426950408889634f)));
  data0[(gidx0*(924))+gidx1+(lidx2*(231))+(154)] = exp2(((val2-val5)*(1.4426950408889634f)));
}`;

const r_231_4_77n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(4) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 231 */
  let lidx1 = i32(lindex.x); /* 4 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (77); ridx0++) {
    var  val0 = f32(data1[(gidx0*(308))+(lidx1*(77))+ridx0]);
    acc0 = (val0+acc0);
  }
  data0[(gidx0*(4))+lidx1] = acc0;
}`;

const E_231_77_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(4) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 231 */
  let gidx1 = i32(gindex.x); /* 77 */
  let lidx2 = i32(lindex.x); /* 4 */
  var  val0 = f32(data1[(gidx0*(308))+gidx1+(lidx2*(77))]);
  var  val1 = f32(data2[(gidx0*(4))+lidx2]);
  data0[(gidx0*(308))+gidx1+(lidx2*(77))] = (val0/val1);
}`;

const r_3_77_4_16_77_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,4) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 3 */
  let gidx1 = i32(gindex.x); /* 77 */
  let lidx2 = i32(lindex.y); /* 4 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (77); ridx0++) {
    var  val0 = f32(data1[(gidx0*(23716))+(gidx1*(77))+(lidx2*(5929))+ridx0]);
    var  val1 = f32(data2[(gidx0*(256))+(lidx2*(64))+(lidx3*(4))+(ridx0*(768))]);
    var  val2 = f32(data2[(gidx0*(256))+(lidx2*(64))+(lidx3*(4))+(ridx0*(768))+(1)]);
    var  val3 = f32(data2[(gidx0*(256))+(lidx2*(64))+(lidx3*(4))+(ridx0*(768))+(2)]);
    var  val4 = f32(data2[(gidx0*(256))+(lidx2*(64))+(lidx3*(4))+(ridx0*(768))+(3)]);
    acc0 = fma(val0,val1,acc0);
    acc1 = fma(val0,val2,acc1);
    acc2 = fma(val0,val3,acc2);
    acc3 = fma(val0,val4,acc3);
  }
  data0[(gidx0*(19712))+(gidx1*(64))+(lidx2*(4928))+(lidx3*(4))] = acc0;
  data0[(gidx0*(19712))+(gidx1*(64))+(lidx2*(4928))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(19712))+(gidx1*(64))+(lidx2*(4928))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(19712))+(gidx1*(64))+(lidx2*(4928))+(lidx3*(4))+(3)] = acc3;
}`;

const r_77_16_16_192_4_3n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 77 */
  let gidx1 = i32(gindex.x); /* 16 */
  let lidx2 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  for(var ridx0 = (0); ridx0 < (192); ridx0++) {
    var  val0 = f32(data2[((ridx0*(4))%(64))+((ridx0/(16))*(4928))+(gidx0*(64))]);
    var  val1 = f32(data2[(((ridx0*(4))+(1))%(64))+((ridx0/(16))*(4928))+(gidx0*(64))]);
    var  val2 = f32(data2[(((ridx0*(4))+(2))%(64))+((ridx0/(16))*(4928))+(gidx0*(64))]);
    var  val3 = f32(data2[(((ridx0*(4))+(3))%(64))+((ridx0/(16))*(4928))+(gidx0*(64))]);
    var  val4 = f32(data3[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))]);
    var  val5 = f32(data3[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(1)]);
    var  val6 = f32(data3[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(2)]);
    var  val7 = f32(data3[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(3)]);
    var  val8 = f32(data3[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(768)]);
    var  val9 = f32(data3[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(769)]);
    var  val10 = f32(data3[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(770)]);
    var  val11 = f32(data3[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(771)]);
    var  val12 = f32(data3[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(1536)]);
    var  val13 = f32(data3[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(1537)]);
    var  val14 = f32(data3[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(1538)]);
    var  val15 = f32(data3[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(1539)]);
    acc0 = fma(val0,val4,acc0);
    acc0 = fma(val1,val5,acc0);
    acc0 = fma(val2,val6,acc0);
    acc0 = fma(val3,val7,acc0);
    acc1 = fma(val0,val8,acc1);
    acc1 = fma(val1,val9,acc1);
    acc1 = fma(val2,val10,acc1);
    acc1 = fma(val3,val11,acc1);
    acc2 = fma(val0,val12,acc2);
    acc2 = fma(val1,val13,acc2);
    acc2 = fma(val2,val14,acc2);
    acc2 = fma(val3,val15,acc2);
  }
  var  val16 = f32(data1[(gidx0*(768))+(gidx1*(48))+(lidx2*(3))]);
  var  val17 = f32(data1[(gidx0*(768))+(gidx1*(48))+(lidx2*(3))+(1)]);
  var  val18 = f32(data1[(gidx0*(768))+(gidx1*(48))+(lidx2*(3))+(2)]);
  var  val19 = f32(data4[(gidx1*(48))+(lidx2*(3))]);
  var  val20 = f32(data4[(gidx1*(48))+(lidx2*(3))+(1)]);
  var  val21 = f32(data4[(gidx1*(48))+(lidx2*(3))+(2)]);
  data0[(gidx0*(768))+(gidx1*(48))+(lidx2*(3))] = (val16+(acc0+val19));
  data0[(gidx0*(768))+(gidx1*(48))+(lidx2*(3))+(1)] = (val17+(acc1+val20));
  data0[(gidx0*(768))+(gidx1*(48))+(lidx2*(3))+(2)] = (val18+(acc2+val21));
}`;

const r_77_64_16_192_4_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 77 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  for(var ridx0 = (0); ridx0 < (192); ridx0++) {
    var  val0 = f32(data1[(gidx0*(768))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(768))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(768))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(768))+(ridx0*(4))+(3)]);
    var  val4 = f32(data2[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))]);
    var  val5 = f32(data2[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(1)]);
    var  val6 = f32(data2[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(2)]);
    var  val7 = f32(data2[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(3)]);
    var  val8 = f32(data2[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(768)]);
    var  val9 = f32(data2[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(769)]);
    var  val10 = f32(data2[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(770)]);
    var  val11 = f32(data2[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(771)]);
    var  val12 = f32(data2[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(1536)]);
    var  val13 = f32(data2[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(1537)]);
    var  val14 = f32(data2[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(1538)]);
    var  val15 = f32(data2[(gidx1*(36864))+(lidx2*(2304))+(ridx0*(4))+(1539)]);
    acc0 = fma(val0,val4,acc0);
    acc0 = fma(val1,val5,acc0);
    acc0 = fma(val2,val6,acc0);
    acc0 = fma(val3,val7,acc0);
    acc1 = fma(val0,val8,acc1);
    acc1 = fma(val1,val9,acc1);
    acc1 = fma(val2,val10,acc1);
    acc1 = fma(val3,val11,acc1);
    acc2 = fma(val0,val12,acc2);
    acc2 = fma(val1,val13,acc2);
    acc2 = fma(val2,val14,acc2);
    acc2 = fma(val3,val15,acc2);
  }
  var  val16 = f32(data3[(gidx1*(48))+(lidx2*(3))]);
  var  val17 = f32(data3[(gidx1*(48))+(lidx2*(3))+(1)]);
  var  val18 = f32(data3[(gidx1*(48))+(lidx2*(3))+(2)]);
  var  alu0 = (acc0+val16);
  var  alu1 = (acc1+val17);
  var  alu2 = (acc2+val18);
  data0[(gidx0*(3072))+(gidx1*(48))+(lidx2*(3))] = (alu0*((1.0f)/((1.0f)+exp2((alu0*(1.702f)*((-1.4426950408889634f)))))));
  data0[(gidx0*(3072))+(gidx1*(48))+(lidx2*(3))+(1)] = (alu1*((1.0f)/((1.0f)+exp2((alu1*(1.702f)*((-1.4426950408889634f)))))));
  data0[(gidx0*(3072))+(gidx1*(48))+(lidx2*(3))+(2)] = (alu2*((1.0f)/((1.0f)+exp2((alu2*(1.702f)*((-1.4426950408889634f)))))));
}`;

const r_77_16_16_768_4_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 77 */
  let gidx1 = i32(gindex.x); /* 16 */
  let lidx2 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  for(var ridx0 = (0); ridx0 < (768); ridx0++) {
    var  val0 = f32(data2[(gidx0*(3072))+(ridx0*(4))]);
    var  val1 = f32(data2[(gidx0*(3072))+(ridx0*(4))+(1)]);
    var  val2 = f32(data2[(gidx0*(3072))+(ridx0*(4))+(2)]);
    var  val3 = f32(data2[(gidx0*(3072))+(ridx0*(4))+(3)]);
    var  val4 = f32(data3[(gidx1*(147456))+(lidx2*(9216))+(ridx0*(4))]);
    var  val5 = f32(data3[(gidx1*(147456))+(lidx2*(9216))+(ridx0*(4))+(1)]);
    var  val6 = f32(data3[(gidx1*(147456))+(lidx2*(9216))+(ridx0*(4))+(2)]);
    var  val7 = f32(data3[(gidx1*(147456))+(lidx2*(9216))+(ridx0*(4))+(3)]);
    var  val8 = f32(data3[(gidx1*(147456))+(lidx2*(9216))+(ridx0*(4))+(3072)]);
    var  val9 = f32(data3[(gidx1*(147456))+(lidx2*(9216))+(ridx0*(4))+(3073)]);
    var  val10 = f32(data3[(gidx1*(147456))+(lidx2*(9216))+(ridx0*(4))+(3074)]);
    var  val11 = f32(data3[(gidx1*(147456))+(lidx2*(9216))+(ridx0*(4))+(3075)]);
    var  val12 = f32(data3[(gidx1*(147456))+(lidx2*(9216))+(ridx0*(4))+(6144)]);
    var  val13 = f32(data3[(gidx1*(147456))+(lidx2*(9216))+(ridx0*(4))+(6145)]);
    var  val14 = f32(data3[(gidx1*(147456))+(lidx2*(9216))+(ridx0*(4))+(6146)]);
    var  val15 = f32(data3[(gidx1*(147456))+(lidx2*(9216))+(ridx0*(4))+(6147)]);
    acc0 = fma(val0,val4,acc0);
    acc0 = fma(val1,val5,acc0);
    acc0 = fma(val2,val6,acc0);
    acc0 = fma(val3,val7,acc0);
    acc1 = fma(val0,val8,acc1);
    acc1 = fma(val1,val9,acc1);
    acc1 = fma(val2,val10,acc1);
    acc1 = fma(val3,val11,acc1);
    acc2 = fma(val0,val12,acc2);
    acc2 = fma(val1,val13,acc2);
    acc2 = fma(val2,val14,acc2);
    acc2 = fma(val3,val15,acc2);
  }
  var  val16 = f32(data1[(gidx0*(768))+(gidx1*(48))+(lidx2*(3))]);
  var  val17 = f32(data1[(gidx0*(768))+(gidx1*(48))+(lidx2*(3))+(1)]);
  var  val18 = f32(data1[(gidx0*(768))+(gidx1*(48))+(lidx2*(3))+(2)]);
  var  val19 = f32(data4[(gidx1*(48))+(lidx2*(3))]);
  var  val20 = f32(data4[(gidx1*(48))+(lidx2*(3))+(1)]);
  var  val21 = f32(data4[(gidx1*(48))+(lidx2*(3))+(2)]);
  data0[(gidx0*(768))+(gidx1*(48))+(lidx2*(3))] = (val16+(acc0+val19));
  data0[(gidx0*(768))+(gidx1*(48))+(lidx2*(3))+(1)] = (val17+(acc1+val20));
  data0[(gidx0*(768))+(gidx1*(48))+(lidx2*(3))+(2)] = (val18+(acc2+val21));
}`;

    return {
      "setup": async (device, safetensor) => {
        const metadata = getTensorMetadata(safetensor[0]);

        const buf_0 = createEmptyBuf(device, 15217664);;
    const buf_1 = createWeightBuf(device, 197632, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.embeddings.token_embedding.vocab_counter'], 'cond_stage_model.transformer.text_model.embeddings.token_embedding.vocab_counter'));
    const input0 = createEmptyBuf(device, 308);;
    const buf_2 = createEmptyBuf(device, 45652992);;
    const buf_3 = createWeightBuf(device, 151781376, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.embeddings.token_embedding.weight'], 'cond_stage_model.transformer.text_model.embeddings.token_embedding.weight'));
    const buf_4 = createEmptyBuf(device, 236544);;
    const buf_5 = createWeightBuf(device, 308, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.embeddings.position_embedding.vocab_counter'], 'cond_stage_model.transformer.text_model.embeddings.position_embedding.vocab_counter'));
    const buf_6 = createWeightBuf(device, 236544, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.embeddings.position_embedding.weight'], 'cond_stage_model.transformer.text_model.embeddings.position_embedding.weight'));
    const buf_7 = createEmptyBuf(device, 236544);;
    const buf_8 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.layer_norm1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.0.layer_norm1.weight'));
    const buf_9 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.layer_norm1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.0.layer_norm1.bias'));
    const buf_10 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.q_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.q_proj.weight'));
    const buf_11 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.q_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.q_proj.bias'));
    const buf_12 = createEmptyBuf(device, 236544);;
    const buf_13 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.k_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.k_proj.weight'));
    const buf_14 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.k_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.k_proj.bias'));
    const buf_15 = createEmptyBuf(device, 308);;
    const buf_16 = createEmptyBuf(device, 23716);;
    const buf_17 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.v_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.v_proj.weight'));
    const buf_18 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.v_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.v_proj.bias'));
    const buf_19 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.out_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.out_proj.weight'));
    const buf_20 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.out_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.0.self_attn.out_proj.bias'));
    const buf_21 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.layer_norm2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.0.layer_norm2.weight'));
    const buf_22 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.layer_norm2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.0.layer_norm2.bias'));
    const buf_23 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.mlp.fc1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.0.mlp.fc1.weight'));
    const buf_24 = createWeightBuf(device, 12288, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.mlp.fc1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.0.mlp.fc1.bias'));
    const buf_25 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.mlp.fc2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.0.mlp.fc2.weight'));
    const buf_26 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.0.mlp.fc2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.0.mlp.fc2.bias'));
    const buf_27 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.layer_norm1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.1.layer_norm1.weight'));
    const buf_28 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.layer_norm1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.1.layer_norm1.bias'));
    const buf_29 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.q_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.q_proj.weight'));
    const buf_30 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.q_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.q_proj.bias'));
    const buf_31 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.k_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.k_proj.weight'));
    const buf_32 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.k_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.k_proj.bias'));
    const buf_33 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.v_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.v_proj.weight'));
    const buf_34 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.v_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.v_proj.bias'));
    const buf_35 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.out_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.out_proj.weight'));
    const buf_36 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.out_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.1.self_attn.out_proj.bias'));
    const buf_37 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.layer_norm2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.1.layer_norm2.weight'));
    const buf_38 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.layer_norm2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.1.layer_norm2.bias'));
    const buf_39 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.mlp.fc1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.1.mlp.fc1.weight'));
    const buf_40 = createWeightBuf(device, 12288, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.mlp.fc1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.1.mlp.fc1.bias'));
    const buf_41 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.mlp.fc2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.1.mlp.fc2.weight'));
    const buf_42 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.1.mlp.fc2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.1.mlp.fc2.bias'));
    const buf_43 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.layer_norm1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.2.layer_norm1.weight'));
    const buf_44 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.layer_norm1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.2.layer_norm1.bias'));
    const buf_45 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.q_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.q_proj.weight'));
    const buf_46 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.q_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.q_proj.bias'));
    const buf_47 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.k_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.k_proj.weight'));
    const buf_48 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.k_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.k_proj.bias'));
    const buf_49 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.v_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.v_proj.weight'));
    const buf_50 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.v_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.v_proj.bias'));
    const buf_51 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.out_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.out_proj.weight'));
    const buf_52 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.out_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.2.self_attn.out_proj.bias'));
    const buf_53 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.layer_norm2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.2.layer_norm2.weight'));
    const buf_54 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.layer_norm2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.2.layer_norm2.bias'));
    const buf_55 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.mlp.fc1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.2.mlp.fc1.weight'));
    const buf_56 = createWeightBuf(device, 12288, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.mlp.fc1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.2.mlp.fc1.bias'));
    const buf_57 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.mlp.fc2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.2.mlp.fc2.weight'));
    const buf_58 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.2.mlp.fc2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.2.mlp.fc2.bias'));
    const buf_59 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.layer_norm1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.3.layer_norm1.weight'));
    const buf_60 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.layer_norm1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.3.layer_norm1.bias'));
    const buf_61 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.q_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.q_proj.weight'));
    const buf_62 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.q_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.q_proj.bias'));
    const buf_63 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.k_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.k_proj.weight'));
    const buf_64 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.k_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.k_proj.bias'));
    const buf_65 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.v_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.v_proj.weight'));
    const buf_66 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.v_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.v_proj.bias'));
    const buf_67 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.out_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.out_proj.weight'));
    const buf_68 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.out_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.3.self_attn.out_proj.bias'));
    const buf_69 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.layer_norm2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.3.layer_norm2.weight'));
    const buf_70 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.layer_norm2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.3.layer_norm2.bias'));
    const buf_71 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.mlp.fc1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.3.mlp.fc1.weight'));
    const buf_72 = createWeightBuf(device, 12288, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.mlp.fc1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.3.mlp.fc1.bias'));
    const buf_73 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.mlp.fc2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.3.mlp.fc2.weight'));
    const buf_74 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.3.mlp.fc2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.3.mlp.fc2.bias'));
    const buf_75 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.layer_norm1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.4.layer_norm1.weight'));
    const buf_76 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.layer_norm1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.4.layer_norm1.bias'));
    const buf_77 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.q_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.q_proj.weight'));
    const buf_78 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.q_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.q_proj.bias'));
    const buf_79 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.k_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.k_proj.weight'));
    const buf_80 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.k_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.k_proj.bias'));
    const buf_81 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.v_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.v_proj.weight'));
    const buf_82 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.v_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.v_proj.bias'));
    const buf_83 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.out_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.out_proj.weight'));
    const buf_84 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.out_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.4.self_attn.out_proj.bias'));
    const buf_85 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.layer_norm2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.4.layer_norm2.weight'));
    const buf_86 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.layer_norm2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.4.layer_norm2.bias'));
    const buf_87 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.mlp.fc1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.4.mlp.fc1.weight'));
    const buf_88 = createWeightBuf(device, 12288, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.mlp.fc1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.4.mlp.fc1.bias'));
    const buf_89 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.mlp.fc2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.4.mlp.fc2.weight'));
    const buf_90 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.4.mlp.fc2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.4.mlp.fc2.bias'));
    const buf_91 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.layer_norm1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.5.layer_norm1.weight'));
    const buf_92 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.layer_norm1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.5.layer_norm1.bias'));
    const buf_93 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.q_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.q_proj.weight'));
    const buf_94 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.q_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.q_proj.bias'));
    const buf_95 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.k_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.k_proj.weight'));
    const buf_96 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.k_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.k_proj.bias'));
    const buf_97 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.v_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.v_proj.weight'));
    const buf_98 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.v_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.v_proj.bias'));
    const buf_99 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.out_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.out_proj.weight'));
    const buf_100 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.out_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.5.self_attn.out_proj.bias'));
    const buf_101 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.layer_norm2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.5.layer_norm2.weight'));
    const buf_102 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.layer_norm2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.5.layer_norm2.bias'));
    const buf_103 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.mlp.fc1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.5.mlp.fc1.weight'));
    const buf_104 = createWeightBuf(device, 12288, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.mlp.fc1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.5.mlp.fc1.bias'));
    const buf_105 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.mlp.fc2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.5.mlp.fc2.weight'));
    const buf_106 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.5.mlp.fc2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.5.mlp.fc2.bias'));
    const buf_107 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.layer_norm1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.6.layer_norm1.weight'));
    const buf_108 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.layer_norm1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.6.layer_norm1.bias'));
    const buf_109 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.q_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.q_proj.weight'));
    const buf_110 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.q_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.q_proj.bias'));
    const buf_111 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.k_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.k_proj.weight'));
    const buf_112 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.k_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.k_proj.bias'));
    const buf_113 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.v_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.v_proj.weight'));
    const buf_114 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.v_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.v_proj.bias'));
    const buf_115 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.out_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.out_proj.weight'));
    const buf_116 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.out_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.6.self_attn.out_proj.bias'));
    const buf_117 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.layer_norm2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.6.layer_norm2.weight'));
    const buf_118 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.layer_norm2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.6.layer_norm2.bias'));
    const buf_119 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.mlp.fc1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.6.mlp.fc1.weight'));
    const buf_120 = createWeightBuf(device, 12288, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.mlp.fc1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.6.mlp.fc1.bias'));
    const buf_121 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.mlp.fc2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.6.mlp.fc2.weight'));
    const buf_122 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.6.mlp.fc2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.6.mlp.fc2.bias'));
    const buf_123 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.layer_norm1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.7.layer_norm1.weight'));
    const buf_124 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.layer_norm1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.7.layer_norm1.bias'));
    const buf_125 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.q_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.q_proj.weight'));
    const buf_126 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.q_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.q_proj.bias'));
    const buf_127 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.k_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.k_proj.weight'));
    const buf_128 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.k_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.k_proj.bias'));
    const buf_129 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.v_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.v_proj.weight'));
    const buf_130 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.v_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.v_proj.bias'));
    const buf_131 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.out_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.out_proj.weight'));
    const buf_132 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.out_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.7.self_attn.out_proj.bias'));
    const buf_133 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.layer_norm2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.7.layer_norm2.weight'));
    const buf_134 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.layer_norm2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.7.layer_norm2.bias'));
    const buf_135 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.mlp.fc1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.7.mlp.fc1.weight'));
    const buf_136 = createWeightBuf(device, 12288, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.mlp.fc1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.7.mlp.fc1.bias'));
    const buf_137 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.mlp.fc2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.7.mlp.fc2.weight'));
    const buf_138 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.7.mlp.fc2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.7.mlp.fc2.bias'));
    const buf_139 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.layer_norm1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.8.layer_norm1.weight'));
    const buf_140 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.layer_norm1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.8.layer_norm1.bias'));
    const buf_141 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.q_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.q_proj.weight'));
    const buf_142 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.q_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.q_proj.bias'));
    const buf_143 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.k_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.k_proj.weight'));
    const buf_144 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.k_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.k_proj.bias'));
    const buf_145 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.v_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.v_proj.weight'));
    const buf_146 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.v_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.v_proj.bias'));
    const buf_147 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.out_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.out_proj.weight'));
    const buf_148 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.out_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.8.self_attn.out_proj.bias'));
    const buf_149 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.layer_norm2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.8.layer_norm2.weight'));
    const buf_150 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.layer_norm2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.8.layer_norm2.bias'));
    const buf_151 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.mlp.fc1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.8.mlp.fc1.weight'));
    const buf_152 = createWeightBuf(device, 12288, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.mlp.fc1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.8.mlp.fc1.bias'));
    const buf_153 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.mlp.fc2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.8.mlp.fc2.weight'));
    const buf_154 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.8.mlp.fc2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.8.mlp.fc2.bias'));
    const buf_155 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.layer_norm1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.9.layer_norm1.weight'));
    const buf_156 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.layer_norm1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.9.layer_norm1.bias'));
    const buf_157 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.q_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.q_proj.weight'));
    const buf_158 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.q_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.q_proj.bias'));
    const buf_159 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.k_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.k_proj.weight'));
    const buf_160 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.k_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.k_proj.bias'));
    const buf_161 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.v_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.v_proj.weight'));
    const buf_162 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.v_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.v_proj.bias'));
    const buf_163 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.out_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.out_proj.weight'));
    const buf_164 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.out_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.9.self_attn.out_proj.bias'));
    const buf_165 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.layer_norm2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.9.layer_norm2.weight'));
    const buf_166 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.layer_norm2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.9.layer_norm2.bias'));
    const buf_167 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.mlp.fc1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.9.mlp.fc1.weight'));
    const buf_168 = createWeightBuf(device, 12288, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.mlp.fc1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.9.mlp.fc1.bias'));
    const buf_169 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.mlp.fc2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.9.mlp.fc2.weight'));
    const buf_170 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.9.mlp.fc2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.9.mlp.fc2.bias'));
    const buf_171 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.layer_norm1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.10.layer_norm1.weight'));
    const buf_172 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.layer_norm1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.10.layer_norm1.bias'));
    const buf_173 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.q_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.q_proj.weight'));
    const buf_174 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.q_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.q_proj.bias'));
    const buf_175 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.k_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.k_proj.weight'));
    const buf_176 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.k_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.k_proj.bias'));
    const buf_177 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.v_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.v_proj.weight'));
    const buf_178 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.v_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.v_proj.bias'));
    const buf_179 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.out_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.out_proj.weight'));
    const buf_180 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.out_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.10.self_attn.out_proj.bias'));
    const buf_181 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.layer_norm2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.10.layer_norm2.weight'));
    const buf_182 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.layer_norm2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.10.layer_norm2.bias'));
    const buf_183 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.mlp.fc1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.10.mlp.fc1.weight'));
    const buf_184 = createWeightBuf(device, 12288, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.mlp.fc1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.10.mlp.fc1.bias'));
    const buf_185 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.mlp.fc2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.10.mlp.fc2.weight'));
    const buf_186 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.10.mlp.fc2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.10.mlp.fc2.bias'));
    const buf_187 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.layer_norm1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.11.layer_norm1.weight'));
    const buf_188 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.layer_norm1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.11.layer_norm1.bias'));
    const buf_189 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.q_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.q_proj.weight'));
    const buf_190 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.q_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.q_proj.bias'));
    const buf_191 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.k_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.k_proj.weight'));
    const buf_192 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.k_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.k_proj.bias'));
    const buf_193 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.v_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.v_proj.weight'));
    const buf_194 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.v_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.v_proj.bias'));
    const buf_195 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.out_proj.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.out_proj.weight'));
    const buf_196 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.out_proj.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.11.self_attn.out_proj.bias'));
    const buf_197 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.layer_norm2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.11.layer_norm2.weight'));
    const buf_198 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.layer_norm2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.11.layer_norm2.bias'));
    const buf_199 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.mlp.fc1.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.11.mlp.fc1.weight'));
    const buf_200 = createWeightBuf(device, 12288, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.mlp.fc1.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.11.mlp.fc1.bias'));
    const buf_201 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.mlp.fc2.weight'], 'cond_stage_model.transformer.text_model.encoder.layers.11.mlp.fc2.weight'));
    const buf_202 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.encoder.layers.11.mlp.fc2.bias'], 'cond_stage_model.transformer.text_model.encoder.layers.11.mlp.fc2.bias'));
    const outputs = createEmptyBuf(device, 236544);;
    const buf_203 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.final_layer_norm.weight'], 'cond_stage_model.transformer.text_model.final_layer_norm.weight'));
    const buf_204 = createWeightBuf(device, 3072, getTensorBuffer(safetensor, metadata['cond_stage_model.transformer.text_model.final_layer_norm.bias'], 'cond_stage_model.transformer.text_model.final_layer_norm.bias'));

        
        const gpuWriteBuffer0 = device.createBuffer({size:input0.size, usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE });
        const gpuReadBuffer = device.createBuffer({ size: outputs.size, usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ });

        const kernels = [E_77_772_16_4, r_77_16_193_16_64_4_3, r_77_77, E_77_77, r_77_16_16_77_3, r_1848_32_193, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_16_16_192_4_3, r_77_16_16_192_4_3, r_77_77n1, r_77_77, E_77_77n1, r_77_77_4_16_4_3, r_231_4_77, E_77_77_4_3, r_231_4_77n1, E_231_77_4, r_77_16_16_192_4_3, r_3_77_4_16_77_4, r_77_16_16_192_4_3n1, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_64_16_192_4_3, r_77_16_16_768_4_3, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_16_16_192_4_3, r_77_16_16_192_4_3, r_77_77_4_16_4_3, r_231_4_77, E_77_77_4_3, r_231_4_77n1, E_231_77_4, r_77_16_16_192_4_3, r_3_77_4_16_77_4, r_77_16_16_192_4_3n1, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_64_16_192_4_3, r_77_16_16_768_4_3, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_16_16_192_4_3, r_77_16_16_192_4_3, r_77_77_4_16_4_3, r_231_4_77, E_77_77_4_3, r_231_4_77n1, E_231_77_4, r_77_16_16_192_4_3, r_3_77_4_16_77_4, r_77_16_16_192_4_3n1, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_64_16_192_4_3, r_77_16_16_768_4_3, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_16_16_192_4_3, r_77_16_16_192_4_3, r_77_77_4_16_4_3, r_231_4_77, E_77_77_4_3, r_231_4_77n1, E_231_77_4, r_77_16_16_192_4_3, r_3_77_4_16_77_4, r_77_16_16_192_4_3n1, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_64_16_192_4_3, r_77_16_16_768_4_3, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_16_16_192_4_3, r_77_16_16_192_4_3, r_77_77_4_16_4_3, r_231_4_77, E_77_77_4_3, r_231_4_77n1, E_231_77_4, r_77_16_16_192_4_3, r_3_77_4_16_77_4, r_77_16_16_192_4_3n1, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_64_16_192_4_3, r_77_16_16_768_4_3, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_16_16_192_4_3, r_77_16_16_192_4_3, r_77_77_4_16_4_3, r_231_4_77, E_77_77_4_3, r_231_4_77n1, E_231_77_4, r_77_16_16_192_4_3, r_3_77_4_16_77_4, r_77_16_16_192_4_3n1, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_64_16_192_4_3, r_77_16_16_768_4_3, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_16_16_192_4_3, r_77_16_16_192_4_3, r_77_77_4_16_4_3, r_231_4_77, E_77_77_4_3, r_231_4_77n1, E_231_77_4, r_77_16_16_192_4_3, r_3_77_4_16_77_4, r_77_16_16_192_4_3n1, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_64_16_192_4_3, r_77_16_16_768_4_3, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_16_16_192_4_3, r_77_16_16_192_4_3, r_77_77_4_16_4_3, r_231_4_77, E_77_77_4_3, r_231_4_77n1, E_231_77_4, r_77_16_16_192_4_3, r_3_77_4_16_77_4, r_77_16_16_192_4_3n1, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_64_16_192_4_3, r_77_16_16_768_4_3, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_16_16_192_4_3, r_77_16_16_192_4_3, r_77_77_4_16_4_3, r_231_4_77, E_77_77_4_3, r_231_4_77n1, E_231_77_4, r_77_16_16_192_4_3, r_3_77_4_16_77_4, r_77_16_16_192_4_3n1, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_64_16_192_4_3, r_77_16_16_768_4_3, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_16_16_192_4_3, r_77_16_16_192_4_3, r_77_77_4_16_4_3, r_231_4_77, E_77_77_4_3, r_231_4_77n1, E_231_77_4, r_77_16_16_192_4_3, r_3_77_4_16_77_4, r_77_16_16_192_4_3n1, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_64_16_192_4_3, r_77_16_16_768_4_3, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_16_16_192_4_3, r_77_16_16_192_4_3, r_77_77_4_16_4_3, r_231_4_77, E_77_77_4_3, r_231_4_77n1, E_231_77_4, r_77_16_16_192_4_3, r_3_77_4_16_77_4, r_77_16_16_192_4_3n1, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_64_16_192_4_3, r_77_16_16_768_4_3, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_16_16_192_4_3, r_77_16_16_192_4_3, r_77_77_4_16_4_3, r_231_4_77, E_77_77_4_3, r_231_4_77n1, E_231_77_4, r_77_16_16_192_4_3, r_3_77_4_16_77_4, r_77_16_16_192_4_3n1, r_77_16_48, r_77_16_48n1, E_77_16_16_3, r_77_64_16_192_4_3, r_77_16_16_768_4_3, r_77_16_48, r_77_16_48n1, E_77_16_16_3];
        const piplines = await Promise.all(kernels.map(name => device.createComputePipelineAsync({layout: "auto", compute: { module: device.createShaderModule({ code: name }), entryPoint: "main" }})));

        return async (data0) => {
            const commandEncoder = device.createCommandEncoder();

            await gpuWriteBuffer0.mapAsync(GPUMapMode.WRITE);
    new Float32Array(gpuWriteBuffer0.getMappedRange()).set(data0);
    gpuWriteBuffer0.unmap();
commandEncoder.copyBufferToBuffer(gpuWriteBuffer0, 0, input0, 0, gpuWriteBuffer0.size);

            addComputePass(device, commandEncoder, piplines[0], [buf_0, buf_1, input0], [772, 77, 1]);
        addComputePass(device, commandEncoder, piplines[1], [buf_2, buf_0, buf_3], [193, 16, 77]);
        addComputePass(device, commandEncoder, piplines[2], [buf_0], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[3], [buf_4, buf_5, buf_0], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[4], [buf_0, buf_4, buf_6], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[5], [buf_4, buf_2, buf_0], [1848, 1, 1]);
        addComputePass(device, commandEncoder, piplines[6], [buf_2, buf_4], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[7], [buf_0, buf_4, buf_2], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[8], [buf_7, buf_4, buf_2, buf_0, buf_8, buf_9], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[9], [buf_0, buf_7, buf_10, buf_11], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[10], [buf_12, buf_7, buf_13, buf_14], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[11], [buf_2], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[12], [buf_15], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[13], [buf_16, buf_2, buf_15], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[14], [buf_2, buf_0, buf_12, buf_16], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[15], [buf_12, buf_2], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[16], [buf_0, buf_2, buf_12], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[17], [buf_12, buf_0], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[18], [buf_2, buf_0, buf_12], [77, 231, 1]);
        addComputePass(device, commandEncoder, piplines[19], [buf_0, buf_7, buf_17, buf_18], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[20], [buf_7, buf_2, buf_0], [77, 3, 1]);
        addComputePass(device, commandEncoder, piplines[21], [buf_0, buf_4, buf_7, buf_19, buf_20], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[22], [buf_2, buf_0], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[23], [buf_7, buf_0, buf_2], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[24], [buf_4, buf_0, buf_2, buf_7, buf_21, buf_22], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[25], [buf_2, buf_4, buf_23, buf_24], [64, 77, 1]);
        addComputePass(device, commandEncoder, piplines[26], [buf_4, buf_0, buf_2, buf_25, buf_26], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[27], [buf_2, buf_4], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[28], [buf_0, buf_4, buf_2], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[29], [buf_7, buf_4, buf_2, buf_0, buf_27, buf_28], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[30], [buf_0, buf_7, buf_29, buf_30], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[31], [buf_12, buf_7, buf_31, buf_32], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[32], [buf_2, buf_0, buf_12, buf_16], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[33], [buf_12, buf_2], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[34], [buf_0, buf_2, buf_12], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[35], [buf_12, buf_0], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[36], [buf_2, buf_0, buf_12], [77, 231, 1]);
        addComputePass(device, commandEncoder, piplines[37], [buf_0, buf_7, buf_33, buf_34], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[38], [buf_7, buf_2, buf_0], [77, 3, 1]);
        addComputePass(device, commandEncoder, piplines[39], [buf_0, buf_4, buf_7, buf_35, buf_36], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[40], [buf_2, buf_0], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[41], [buf_7, buf_0, buf_2], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[42], [buf_4, buf_0, buf_2, buf_7, buf_37, buf_38], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[43], [buf_2, buf_4, buf_39, buf_40], [64, 77, 1]);
        addComputePass(device, commandEncoder, piplines[44], [buf_4, buf_0, buf_2, buf_41, buf_42], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[45], [buf_2, buf_4], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[46], [buf_0, buf_4, buf_2], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[47], [buf_7, buf_4, buf_2, buf_0, buf_43, buf_44], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[48], [buf_0, buf_7, buf_45, buf_46], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[49], [buf_12, buf_7, buf_47, buf_48], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[50], [buf_2, buf_0, buf_12, buf_16], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[51], [buf_12, buf_2], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[52], [buf_0, buf_2, buf_12], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[53], [buf_12, buf_0], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[54], [buf_2, buf_0, buf_12], [77, 231, 1]);
        addComputePass(device, commandEncoder, piplines[55], [buf_0, buf_7, buf_49, buf_50], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[56], [buf_7, buf_2, buf_0], [77, 3, 1]);
        addComputePass(device, commandEncoder, piplines[57], [buf_0, buf_4, buf_7, buf_51, buf_52], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[58], [buf_2, buf_0], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[59], [buf_7, buf_0, buf_2], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[60], [buf_4, buf_0, buf_2, buf_7, buf_53, buf_54], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[61], [buf_2, buf_4, buf_55, buf_56], [64, 77, 1]);
        addComputePass(device, commandEncoder, piplines[62], [buf_4, buf_0, buf_2, buf_57, buf_58], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[63], [buf_2, buf_4], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[64], [buf_0, buf_4, buf_2], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[65], [buf_7, buf_4, buf_2, buf_0, buf_59, buf_60], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[66], [buf_0, buf_7, buf_61, buf_62], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[67], [buf_12, buf_7, buf_63, buf_64], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[68], [buf_2, buf_0, buf_12, buf_16], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[69], [buf_12, buf_2], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[70], [buf_0, buf_2, buf_12], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[71], [buf_12, buf_0], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[72], [buf_2, buf_0, buf_12], [77, 231, 1]);
        addComputePass(device, commandEncoder, piplines[73], [buf_0, buf_7, buf_65, buf_66], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[74], [buf_7, buf_2, buf_0], [77, 3, 1]);
        addComputePass(device, commandEncoder, piplines[75], [buf_0, buf_4, buf_7, buf_67, buf_68], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[76], [buf_2, buf_0], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[77], [buf_7, buf_0, buf_2], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[78], [buf_4, buf_0, buf_2, buf_7, buf_69, buf_70], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[79], [buf_2, buf_4, buf_71, buf_72], [64, 77, 1]);
        addComputePass(device, commandEncoder, piplines[80], [buf_4, buf_0, buf_2, buf_73, buf_74], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[81], [buf_2, buf_4], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[82], [buf_0, buf_4, buf_2], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[83], [buf_7, buf_4, buf_2, buf_0, buf_75, buf_76], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[84], [buf_0, buf_7, buf_77, buf_78], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[85], [buf_12, buf_7, buf_79, buf_80], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[86], [buf_2, buf_0, buf_12, buf_16], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[87], [buf_12, buf_2], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[88], [buf_0, buf_2, buf_12], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[89], [buf_12, buf_0], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[90], [buf_2, buf_0, buf_12], [77, 231, 1]);
        addComputePass(device, commandEncoder, piplines[91], [buf_0, buf_7, buf_81, buf_82], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[92], [buf_7, buf_2, buf_0], [77, 3, 1]);
        addComputePass(device, commandEncoder, piplines[93], [buf_0, buf_4, buf_7, buf_83, buf_84], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[94], [buf_2, buf_0], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[95], [buf_7, buf_0, buf_2], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[96], [buf_4, buf_0, buf_2, buf_7, buf_85, buf_86], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[97], [buf_2, buf_4, buf_87, buf_88], [64, 77, 1]);
        addComputePass(device, commandEncoder, piplines[98], [buf_4, buf_0, buf_2, buf_89, buf_90], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[99], [buf_2, buf_4], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[100], [buf_0, buf_4, buf_2], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[101], [buf_7, buf_4, buf_2, buf_0, buf_91, buf_92], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[102], [buf_0, buf_7, buf_93, buf_94], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[103], [buf_12, buf_7, buf_95, buf_96], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[104], [buf_2, buf_0, buf_12, buf_16], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[105], [buf_12, buf_2], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[106], [buf_0, buf_2, buf_12], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[107], [buf_12, buf_0], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[108], [buf_2, buf_0, buf_12], [77, 231, 1]);
        addComputePass(device, commandEncoder, piplines[109], [buf_0, buf_7, buf_97, buf_98], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[110], [buf_7, buf_2, buf_0], [77, 3, 1]);
        addComputePass(device, commandEncoder, piplines[111], [buf_0, buf_4, buf_7, buf_99, buf_100], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[112], [buf_2, buf_0], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[113], [buf_7, buf_0, buf_2], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[114], [buf_4, buf_0, buf_2, buf_7, buf_101, buf_102], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[115], [buf_2, buf_4, buf_103, buf_104], [64, 77, 1]);
        addComputePass(device, commandEncoder, piplines[116], [buf_4, buf_0, buf_2, buf_105, buf_106], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[117], [buf_2, buf_4], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[118], [buf_0, buf_4, buf_2], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[119], [buf_7, buf_4, buf_2, buf_0, buf_107, buf_108], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[120], [buf_0, buf_7, buf_109, buf_110], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[121], [buf_12, buf_7, buf_111, buf_112], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[122], [buf_2, buf_0, buf_12, buf_16], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[123], [buf_12, buf_2], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[124], [buf_0, buf_2, buf_12], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[125], [buf_12, buf_0], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[126], [buf_2, buf_0, buf_12], [77, 231, 1]);
        addComputePass(device, commandEncoder, piplines[127], [buf_0, buf_7, buf_113, buf_114], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[128], [buf_7, buf_2, buf_0], [77, 3, 1]);
        addComputePass(device, commandEncoder, piplines[129], [buf_0, buf_4, buf_7, buf_115, buf_116], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[130], [buf_2, buf_0], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[131], [buf_7, buf_0, buf_2], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[132], [buf_4, buf_0, buf_2, buf_7, buf_117, buf_118], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[133], [buf_2, buf_4, buf_119, buf_120], [64, 77, 1]);
        addComputePass(device, commandEncoder, piplines[134], [buf_4, buf_0, buf_2, buf_121, buf_122], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[135], [buf_2, buf_4], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[136], [buf_0, buf_4, buf_2], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[137], [buf_7, buf_4, buf_2, buf_0, buf_123, buf_124], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[138], [buf_0, buf_7, buf_125, buf_126], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[139], [buf_12, buf_7, buf_127, buf_128], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[140], [buf_2, buf_0, buf_12, buf_16], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[141], [buf_12, buf_2], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[142], [buf_0, buf_2, buf_12], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[143], [buf_12, buf_0], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[144], [buf_2, buf_0, buf_12], [77, 231, 1]);
        addComputePass(device, commandEncoder, piplines[145], [buf_0, buf_7, buf_129, buf_130], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[146], [buf_7, buf_2, buf_0], [77, 3, 1]);
        addComputePass(device, commandEncoder, piplines[147], [buf_0, buf_4, buf_7, buf_131, buf_132], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[148], [buf_2, buf_0], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[149], [buf_7, buf_0, buf_2], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[150], [buf_4, buf_0, buf_2, buf_7, buf_133, buf_134], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[151], [buf_2, buf_4, buf_135, buf_136], [64, 77, 1]);
        addComputePass(device, commandEncoder, piplines[152], [buf_4, buf_0, buf_2, buf_137, buf_138], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[153], [buf_2, buf_4], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[154], [buf_0, buf_4, buf_2], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[155], [buf_7, buf_4, buf_2, buf_0, buf_139, buf_140], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[156], [buf_0, buf_7, buf_141, buf_142], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[157], [buf_12, buf_7, buf_143, buf_144], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[158], [buf_2, buf_0, buf_12, buf_16], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[159], [buf_12, buf_2], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[160], [buf_0, buf_2, buf_12], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[161], [buf_12, buf_0], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[162], [buf_2, buf_0, buf_12], [77, 231, 1]);
        addComputePass(device, commandEncoder, piplines[163], [buf_0, buf_7, buf_145, buf_146], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[164], [buf_7, buf_2, buf_0], [77, 3, 1]);
        addComputePass(device, commandEncoder, piplines[165], [buf_0, buf_4, buf_7, buf_147, buf_148], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[166], [buf_2, buf_0], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[167], [buf_7, buf_0, buf_2], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[168], [buf_4, buf_0, buf_2, buf_7, buf_149, buf_150], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[169], [buf_2, buf_4, buf_151, buf_152], [64, 77, 1]);
        addComputePass(device, commandEncoder, piplines[170], [buf_4, buf_0, buf_2, buf_153, buf_154], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[171], [buf_2, buf_4], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[172], [buf_0, buf_4, buf_2], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[173], [buf_7, buf_4, buf_2, buf_0, buf_155, buf_156], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[174], [buf_0, buf_7, buf_157, buf_158], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[175], [buf_12, buf_7, buf_159, buf_160], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[176], [buf_2, buf_0, buf_12, buf_16], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[177], [buf_12, buf_2], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[178], [buf_0, buf_2, buf_12], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[179], [buf_12, buf_0], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[180], [buf_2, buf_0, buf_12], [77, 231, 1]);
        addComputePass(device, commandEncoder, piplines[181], [buf_0, buf_7, buf_161, buf_162], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[182], [buf_7, buf_2, buf_0], [77, 3, 1]);
        addComputePass(device, commandEncoder, piplines[183], [buf_0, buf_4, buf_7, buf_163, buf_164], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[184], [buf_2, buf_0], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[185], [buf_7, buf_0, buf_2], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[186], [buf_4, buf_0, buf_2, buf_7, buf_165, buf_166], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[187], [buf_2, buf_4, buf_167, buf_168], [64, 77, 1]);
        addComputePass(device, commandEncoder, piplines[188], [buf_4, buf_0, buf_2, buf_169, buf_170], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[189], [buf_2, buf_4], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[190], [buf_0, buf_4, buf_2], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[191], [buf_7, buf_4, buf_2, buf_0, buf_171, buf_172], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[192], [buf_0, buf_7, buf_173, buf_174], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[193], [buf_12, buf_7, buf_175, buf_176], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[194], [buf_2, buf_0, buf_12, buf_16], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[195], [buf_12, buf_2], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[196], [buf_0, buf_2, buf_12], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[197], [buf_12, buf_0], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[198], [buf_2, buf_0, buf_12], [77, 231, 1]);
        addComputePass(device, commandEncoder, piplines[199], [buf_0, buf_7, buf_177, buf_178], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[200], [buf_7, buf_2, buf_0], [77, 3, 1]);
        addComputePass(device, commandEncoder, piplines[201], [buf_0, buf_4, buf_7, buf_179, buf_180], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[202], [buf_2, buf_0], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[203], [buf_7, buf_0, buf_2], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[204], [buf_4, buf_0, buf_2, buf_7, buf_181, buf_182], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[205], [buf_2, buf_4, buf_183, buf_184], [64, 77, 1]);
        addComputePass(device, commandEncoder, piplines[206], [buf_4, buf_0, buf_2, buf_185, buf_186], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[207], [buf_2, buf_4], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[208], [buf_0, buf_4, buf_2], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[209], [buf_7, buf_4, buf_2, buf_0, buf_187, buf_188], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[210], [buf_0, buf_7, buf_189, buf_190], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[211], [buf_12, buf_7, buf_191, buf_192], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[212], [buf_2, buf_0, buf_12, buf_16], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[213], [buf_12, buf_2], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[214], [buf_0, buf_2, buf_12], [77, 77, 1]);
        addComputePass(device, commandEncoder, piplines[215], [buf_12, buf_0], [231, 1, 1]);
        addComputePass(device, commandEncoder, piplines[216], [buf_2, buf_0, buf_12], [77, 231, 1]);
        addComputePass(device, commandEncoder, piplines[217], [buf_0, buf_7, buf_193, buf_194], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[218], [buf_7, buf_2, buf_0], [77, 3, 1]);
        addComputePass(device, commandEncoder, piplines[219], [buf_0, buf_4, buf_7, buf_195, buf_196], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[220], [buf_2, buf_0], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[221], [buf_7, buf_0, buf_2], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[222], [buf_4, buf_0, buf_2, buf_7, buf_197, buf_198], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[223], [buf_2, buf_4, buf_199, buf_200], [64, 77, 1]);
        addComputePass(device, commandEncoder, piplines[224], [buf_4, buf_0, buf_2, buf_201, buf_202], [16, 77, 1]);
        addComputePass(device, commandEncoder, piplines[225], [buf_2, buf_4], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[226], [buf_0, buf_4, buf_2], [77, 1, 1]);
        addComputePass(device, commandEncoder, piplines[227], [outputs, buf_4, buf_2, buf_0, buf_203, buf_204], [16, 77, 1]);
            commandEncoder.copyBufferToBuffer(outputs, 0, gpuReadBuffer, 0, outputs.size);
            const gpuCommands = commandEncoder.finish();
            device.queue.submit([gpuCommands]);

            await gpuReadBuffer.mapAsync(GPUMapMode.READ);
            const resultBuffer = new Float32Array(gpuReadBuffer.size);
            resultBuffer.set(new Float32Array(gpuReadBuffer.getMappedRange()));
            gpuReadBuffer.unmap();
            return resultBuffer;
        }
      } 
    }
  }
  
    var diffusorModel = function() {
    
    const r_2_80_8_8_16_4_3_3_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 80 */
  let gidx2 = i32(gindex.x); /* 8 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (4); ridx0++) {
    var  alu0 = f32((lidx4*((-4)))<(0));
    var  alu1 = f32(((gidx2*((-8)))+(lidx3*((-1))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(ridx0*(4096))+((-65))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(ridx0*(4096))+((-1))]), bool(alu0));
    var  alu2 = f32(((gidx2*(8))+lidx3)<(63));
    var  val2 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(ridx0*(4096))+(63)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(ridx0*(4096))+((-64))]), bool(alu1));
    var  val4 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(ridx0*(4096))]);
    var  val5 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(ridx0*(4096))+(64)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(ridx0*(4096))+((-63))]), bool(alu1));
    var  val7 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(ridx0*(4096))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(ridx0*(4096))+(65)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(ridx0*(4096))+((-62))]), bool(alu1));
    var  val10 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(ridx0*(4096))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(ridx0*(4096))+(66)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(ridx0*(4096))+((-61))]), bool(alu1));
    var  val13 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(ridx0*(4096))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(ridx0*(4096))+(67)]), bool(alu2));
    var  alu3 = f32((lidx4*(4))<(60));
    var  val15 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(ridx0*(4096))+((-60))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(ridx0*(4096))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(ridx0*(4096))+(68)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx1*(144))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx1*(144))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx1*(144))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx1*(144))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx1*(144))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx1*(144))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx1*(144))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx1*(144))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx1*(144))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx1*(144))+(ridx0*(9))+(36)]);
    var  val28 = f32(data2[(gidx1*(144))+(ridx0*(9))+(39)]);
    var  val29 = f32(data2[(gidx1*(144))+(ridx0*(9))+(42)]);
    var  val30 = f32(data2[(gidx1*(144))+(ridx0*(9))+(37)]);
    var  val31 = f32(data2[(gidx1*(144))+(ridx0*(9))+(40)]);
    var  val32 = f32(data2[(gidx1*(144))+(ridx0*(9))+(43)]);
    var  val33 = f32(data2[(gidx1*(144))+(ridx0*(9))+(38)]);
    var  val34 = f32(data2[(gidx1*(144))+(ridx0*(9))+(41)]);
    var  val35 = f32(data2[(gidx1*(144))+(ridx0*(9))+(44)]);
    var  val36 = f32(data2[(gidx1*(144))+(ridx0*(9))+(72)]);
    var  val37 = f32(data2[(gidx1*(144))+(ridx0*(9))+(75)]);
    var  val38 = f32(data2[(gidx1*(144))+(ridx0*(9))+(78)]);
    var  val39 = f32(data2[(gidx1*(144))+(ridx0*(9))+(73)]);
    var  val40 = f32(data2[(gidx1*(144))+(ridx0*(9))+(76)]);
    var  val41 = f32(data2[(gidx1*(144))+(ridx0*(9))+(79)]);
    var  val42 = f32(data2[(gidx1*(144))+(ridx0*(9))+(74)]);
    var  val43 = f32(data2[(gidx1*(144))+(ridx0*(9))+(77)]);
    var  val44 = f32(data2[(gidx1*(144))+(ridx0*(9))+(80)]);
    var  val45 = f32(data2[(gidx1*(144))+(ridx0*(9))+(108)]);
    var  val46 = f32(data2[(gidx1*(144))+(ridx0*(9))+(111)]);
    var  val47 = f32(data2[(gidx1*(144))+(ridx0*(9))+(114)]);
    var  val48 = f32(data2[(gidx1*(144))+(ridx0*(9))+(109)]);
    var  val49 = f32(data2[(gidx1*(144))+(ridx0*(9))+(112)]);
    var  val50 = f32(data2[(gidx1*(144))+(ridx0*(9))+(115)]);
    var  val51 = f32(data2[(gidx1*(144))+(ridx0*(9))+(110)]);
    var  val52 = f32(data2[(gidx1*(144))+(ridx0*(9))+(113)]);
    var  val53 = f32(data2[(gidx1*(144))+(ridx0*(9))+(116)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))] = acc0;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(3)] = acc3;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(4096)] = acc4;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(4097)] = acc5;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(4098)] = acc6;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(4099)] = acc7;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(8192)] = acc8;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(8193)] = acc9;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(8194)] = acc10;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(8195)] = acc11;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(12288)] = acc12;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(12289)] = acc13;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(12290)] = acc14;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(12291)] = acc15;
}`;

const E_2_32_20_4_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 32 */
  let gidx2 = i32(gindex.x); /* 80 */
  let lidx4 = i32(lindex.y); /* 8 */
  let lidx5 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))]);
  var  val1 = f32(data1[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(3)]);
  var  val4 = f32(data2[(gidx1*(10))+(gidx2/(8))]);
  data0[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))] = (val0+val4);
  data0[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(1)] = (val1+val4);
  data0[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(2)] = (val2+val4);
  data0[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(3)] = (val3+val4);
}`;

const r_320_32_64_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 320 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))+(3)]);
    acc0 = (val0+acc0);
    acc0 = (val1+acc0);
    acc0 = (val2+acc0);
    acc0 = (val3+acc0);
  }
  data0[(gidx0*(32))+lidx1] = acc0;
}`;

const r_64_16_10 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 64 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (10); ridx0++) {
    var  val0 = f32(data1[(gidx0*(160))+(lidx1*(10))+ridx0]);
    acc0 = (val0+acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val1 = f32(temp[ridx1]);
    acc1 = (val1+acc1);
  }
  data0[gidx0] = (acc1*(2.44140625e-05f));
}`;

const r_2_2_5_16_8_64_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 2 */
  let gidx2 = i32(gindex.x); /* 5 */
  let lidx3 = i32(lindex.y); /* 16 */
  let lidx4 = i32(lindex.x); /* 8 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(1310720))+(gidx1*(655360))+(gidx2*(8192))+(lidx3*(40960))+(lidx4*(1024))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(1310720))+(gidx1*(655360))+(gidx2*(8192))+(lidx3*(40960))+(lidx4*(1024))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(1310720))+(gidx1*(655360))+(gidx2*(8192))+(lidx3*(40960))+(lidx4*(1024))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(1310720))+(gidx1*(655360))+(gidx2*(8192))+(lidx3*(40960))+(lidx4*(1024))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(1310720))+(gidx1*(655360))+(gidx2*(8192))+(lidx3*(40960))+(lidx4*(1024))+(ridx0*(4))+(256)]);
    var  val5 = f32(data1[(gidx0*(1310720))+(gidx1*(655360))+(gidx2*(8192))+(lidx3*(40960))+(lidx4*(1024))+(ridx0*(4))+(257)]);
    var  val6 = f32(data1[(gidx0*(1310720))+(gidx1*(655360))+(gidx2*(8192))+(lidx3*(40960))+(lidx4*(1024))+(ridx0*(4))+(258)]);
    var  val7 = f32(data1[(gidx0*(1310720))+(gidx1*(655360))+(gidx2*(8192))+(lidx3*(40960))+(lidx4*(1024))+(ridx0*(4))+(259)]);
    var  val8 = f32(data1[(gidx0*(1310720))+(gidx1*(655360))+(gidx2*(8192))+(lidx3*(40960))+(lidx4*(1024))+(ridx0*(4))+(512)]);
    var  val9 = f32(data1[(gidx0*(1310720))+(gidx1*(655360))+(gidx2*(8192))+(lidx3*(40960))+(lidx4*(1024))+(ridx0*(4))+(513)]);
    var  val10 = f32(data1[(gidx0*(1310720))+(gidx1*(655360))+(gidx2*(8192))+(lidx3*(40960))+(lidx4*(1024))+(ridx0*(4))+(514)]);
    var  val11 = f32(data1[(gidx0*(1310720))+(gidx1*(655360))+(gidx2*(8192))+(lidx3*(40960))+(lidx4*(1024))+(ridx0*(4))+(515)]);
    var  val12 = f32(data1[(gidx0*(1310720))+(gidx1*(655360))+(gidx2*(8192))+(lidx3*(40960))+(lidx4*(1024))+(ridx0*(4))+(768)]);
    var  val13 = f32(data1[(gidx0*(1310720))+(gidx1*(655360))+(gidx2*(8192))+(lidx3*(40960))+(lidx4*(1024))+(ridx0*(4))+(769)]);
    var  val14 = f32(data1[(gidx0*(1310720))+(gidx1*(655360))+(gidx2*(8192))+(lidx3*(40960))+(lidx4*(1024))+(ridx0*(4))+(770)]);
    var  val15 = f32(data1[(gidx0*(1310720))+(gidx1*(655360))+(gidx2*(8192))+(lidx3*(40960))+(lidx4*(1024))+(ridx0*(4))+(771)]);
    var  val16 = f32(data2[(gidx1*(160))+(gidx2*(2))+(lidx3*(10))+(lidx4/(4))]);
    var  val17 = f32(data3[(gidx0*(32))+(gidx1*(16))+lidx3]);
    var  alu0 = ((val0+val16)-val17);
    var  alu1 = ((val1+val16)-val17);
    var  alu2 = ((val2+val16)-val17);
    var  alu3 = ((val3+val16)-val17);
    var  alu4 = ((val4+val16)-val17);
    var  alu5 = ((val5+val16)-val17);
    var  alu6 = ((val6+val16)-val17);
    var  alu7 = ((val7+val16)-val17);
    var  alu8 = ((val8+val16)-val17);
    var  alu9 = ((val9+val16)-val17);
    var  alu10 = ((val10+val16)-val17);
    var  alu11 = ((val11+val16)-val17);
    var  alu12 = ((val12+val16)-val17);
    var  alu13 = ((val13+val16)-val17);
    var  alu14 = ((val14+val16)-val17);
    var  alu15 = ((val15+val16)-val17);
    acc0 = fma(alu0,alu0,acc0);
    acc0 = fma(alu1,alu1,acc0);
    acc0 = fma(alu2,alu2,acc0);
    acc0 = fma(alu3,alu3,acc0);
    acc1 = fma(alu4,alu4,acc1);
    acc1 = fma(alu5,alu5,acc1);
    acc1 = fma(alu6,alu6,acc1);
    acc1 = fma(alu7,alu7,acc1);
    acc2 = fma(alu8,alu8,acc2);
    acc2 = fma(alu9,alu9,acc2);
    acc2 = fma(alu10,alu10,acc2);
    acc2 = fma(alu11,alu11,acc2);
    acc3 = fma(alu12,alu12,acc3);
    acc3 = fma(alu13,alu13,acc3);
    acc3 = fma(alu14,alu14,acc3);
    acc3 = fma(alu15,alu15,acc3);
  }
  data0[(gidx0*(5120))+(gidx1*(2560))+(gidx2*(32))+(lidx3*(160))+(lidx4*(4))] = acc0;
  data0[(gidx0*(5120))+(gidx1*(2560))+(gidx2*(32))+(lidx3*(160))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(5120))+(gidx1*(2560))+(gidx2*(32))+(lidx3*(160))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(5120))+(gidx1*(2560))+(gidx2*(32))+(lidx3*(160))+(lidx4*(4))+(3)] = acc3;
}`;

const r_64_16_10n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 64 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (10); ridx0++) {
    var  val0 = f32(data1[(gidx0*(160))+(lidx1*(10))+ridx0]);
    acc0 = (val0+acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val1 = f32(temp[ridx1]);
    acc1 = (val1+acc1);
  }
  data0[gidx0] = sqrt(((1.0f)/((acc1*(2.44140625e-05f))+(1e-05f))));
}`;

const E_80_64_2_4_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,4,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 80 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 4 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(4))+lidx3]);
  var  val5 = f32(data3[(lidx2*(32))+(((gidx0*(4))+lidx3)/(10))]);
  var  val6 = f32(data4[(lidx2*(32))+(((gidx0*(4))+lidx3)/(10))]);
  var  val7 = f32(data5[(gidx0*(4))+lidx3]);
  var  val8 = f32(data6[(gidx0*(4))+lidx3]);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))] = ((((val0+val4)-val5)*val6*val7)+val8);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(1)] = ((((val1+val4)-val5)*val6*val7)+val8);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(2)] = ((((val2+val4)-val5)*val6*val7)+val8);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(3)] = ((((val3+val4)-val5)*val6*val7)+val8);
}`;

const E_2_40_64_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 40 */
  let gidx2 = i32(gindex.x); /* 64 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(1310720))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(1310720))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(1310720))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(1310720))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(gidx1*(8))+lidx3]);
  var  val5 = f32(data3[(gidx0*(32))+(((gidx1*(8))+lidx3)/(10))]);
  var  val6 = f32(data4[(gidx0*(32))+(((gidx1*(8))+lidx3)/(10))]);
  var  val7 = f32(data5[(gidx1*(8))+lidx3]);
  var  val8 = f32(data6[(gidx1*(8))+lidx3]);
  data0[(gidx0*(1310720))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))] = ((1.0f)/((1.0f)+exp2((((((val0+val4)-val5)*val6*val7)+val8)*((-1.4426950408889634f))))));
  data0[(gidx0*(1310720))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)] = ((1.0f)/((1.0f)+exp2((((((val1+val4)-val5)*val6*val7)+val8)*((-1.4426950408889634f))))));
  data0[(gidx0*(1310720))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)] = ((1.0f)/((1.0f)+exp2((((((val2+val4)-val5)*val6*val7)+val8)*((-1.4426950408889634f))))));
  data0[(gidx0*(1310720))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)] = ((1.0f)/((1.0f)+exp2((((((val3+val4)-val5)*val6*val7)+val8)*((-1.4426950408889634f))))));
}`;

const E_20480_32_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 20480 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx1*(4))+(3)]);
  data0[(gidx0*(128))+(lidx1*(4))] = (val0*val4);
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (val1*val5);
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (val2*val6);
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (val3*val7);
}`;

const r_2_80_8_8_16_320_3_3_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 80 */
  let gidx2 = i32(gindex.x); /* 8 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (320); ridx0++) {
    var  alu0 = f32((lidx4*((-4)))<(0));
    var  alu1 = f32(((gidx2*((-8)))+(lidx3*((-1))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+((-65))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+((-1))]), bool(alu0));
    var  alu2 = f32(((gidx2*(8))+lidx3)<(63));
    var  val2 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+(63)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+((-64))]), bool(alu1));
    var  val4 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))]);
    var  val5 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+(64)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+((-63))]), bool(alu1));
    var  val7 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+(65)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+((-62))]), bool(alu1));
    var  val10 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+(66)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+((-61))]), bool(alu1));
    var  val13 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+(67)]), bool(alu2));
    var  alu3 = f32((lidx4*(4))<(60));
    var  val15 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+((-60))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+(68)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx1*(11520))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2880)]);
    var  val28 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2883)]);
    var  val29 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2886)]);
    var  val30 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2881)]);
    var  val31 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2884)]);
    var  val32 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2887)]);
    var  val33 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2882)]);
    var  val34 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2885)]);
    var  val35 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2888)]);
    var  val36 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5760)]);
    var  val37 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5763)]);
    var  val38 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5766)]);
    var  val39 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5761)]);
    var  val40 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5764)]);
    var  val41 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5767)]);
    var  val42 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5762)]);
    var  val43 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5765)]);
    var  val44 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5768)]);
    var  val45 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8640)]);
    var  val46 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8643)]);
    var  val47 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8646)]);
    var  val48 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8641)]);
    var  val49 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8644)]);
    var  val50 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8647)]);
    var  val51 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8642)]);
    var  val52 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8645)]);
    var  val53 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8648)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))] = acc0;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(3)] = acc3;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(4096)] = acc4;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(4097)] = acc5;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(4098)] = acc6;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(4099)] = acc7;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(8192)] = acc8;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(8193)] = acc9;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(8194)] = acc10;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(8195)] = acc11;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(12288)] = acc12;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(12289)] = acc13;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(12290)] = acc14;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(12291)] = acc15;
}`;

const r_160_16_10 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 160 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (10); ridx0++) {
    acc0 = (select((0.0f),(1.0f),f32(((gidx0*((-1)))+(lidx1*((-10)))+(ridx0*((-1))))<((-158)))!=0.)+acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val0 = f32(temp[ridx1]);
    acc1 = (val0+acc1);
  }
  data0[gidx0] = acc1;
}`;

const E_5_8_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 5 */
  let lidx1 = i32(lindex.x); /* 8 */
  var  val0 = f32(data1[0]);
  var  val1 = f32(data2[(gidx0*(32))+(lidx1*(4))]);
  var  val2 = f32(data2[(gidx0*(32))+(lidx1*(4))+(1)]);
  var  val3 = f32(data2[(gidx0*(32))+(lidx1*(4))+(2)]);
  var  val4 = f32(data2[(gidx0*(32))+(lidx1*(4))+(3)]);
  data0[(gidx0*(32))+(lidx1*(4))] = sin(((1.5707963267948966f)-(val0*exp2((((-9.210340371976184f))*(val1+((-1.0f)))*(0.00625f)*(1.4426950408889634f))))));
  data0[(gidx0*(32))+(lidx1*(4))+(1)] = sin(((1.5707963267948966f)-(val0*exp2((((-9.210340371976184f))*(val2+((-1.0f)))*(0.00625f)*(1.4426950408889634f))))));
  data0[(gidx0*(32))+(lidx1*(4))+(2)] = sin(((1.5707963267948966f)-(val0*exp2((((-9.210340371976184f))*(val3+((-1.0f)))*(0.00625f)*(1.4426950408889634f))))));
  data0[(gidx0*(32))+(lidx1*(4))+(3)] = sin(((1.5707963267948966f)-(val0*exp2((((-9.210340371976184f))*(val4+((-1.0f)))*(0.00625f)*(1.4426950408889634f))))));
}`;

const E_5_8_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 5 */
  let lidx1 = i32(lindex.x); /* 8 */
  var  val0 = f32(data1[0]);
  var  val1 = f32(data2[(gidx0*(32))+(lidx1*(4))]);
  var  val2 = f32(data2[(gidx0*(32))+(lidx1*(4))+(1)]);
  var  val3 = f32(data2[(gidx0*(32))+(lidx1*(4))+(2)]);
  var  val4 = f32(data2[(gidx0*(32))+(lidx1*(4))+(3)]);
  data0[(gidx0*(32))+(lidx1*(4))] = sin((val0*exp2((((-9.210340371976184f))*(val1+((-1.0f)))*(0.00625f)*(1.4426950408889634f)))));
  data0[(gidx0*(32))+(lidx1*(4))+(1)] = sin((val0*exp2((((-9.210340371976184f))*(val2+((-1.0f)))*(0.00625f)*(1.4426950408889634f)))));
  data0[(gidx0*(32))+(lidx1*(4))+(2)] = sin((val0*exp2((((-9.210340371976184f))*(val3+((-1.0f)))*(0.00625f)*(1.4426950408889634f)))));
  data0[(gidx0*(32))+(lidx1*(4))+(3)] = sin((val0*exp2((((-9.210340371976184f))*(val4+((-1.0f)))*(0.00625f)*(1.4426950408889634f)))));
}`;

const E_5_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 5 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  val0 = select(f32((0.0f)), f32(data1[(gidx0*(64))+(lidx1*(4))]), bool(f32(((gidx0*(64))+(lidx1*(4)))<(160))));
  var  val1 = select(f32((0.0f)), f32(data1[(gidx0*(64))+(lidx1*(4))+(1)]), bool(f32(((gidx0*(64))+(lidx1*(4)))<(159))));
  var  val2 = select(f32((0.0f)), f32(data1[(gidx0*(64))+(lidx1*(4))+(2)]), bool(f32(((gidx0*(64))+(lidx1*(4)))<(158))));
  var  val3 = select(f32((0.0f)), f32(data1[(gidx0*(64))+(lidx1*(4))+(3)]), bool(f32(((gidx0*(64))+(lidx1*(4)))<(157))));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx0*(64))+(lidx1*(4))+((-160))]), bool(f32(((gidx0*((-64)))+(lidx1*((-4))))<((-159)))));
  var  val5 = select(f32((0.0f)), f32(data2[(gidx0*(64))+(lidx1*(4))+((-159))]), bool(f32(((gidx0*((-64)))+(lidx1*((-4))))<((-158)))));
  var  val6 = select(f32((0.0f)), f32(data2[(gidx0*(64))+(lidx1*(4))+((-158))]), bool(f32(((gidx0*((-64)))+(lidx1*((-4))))<((-157)))));
  var  val7 = select(f32((0.0f)), f32(data2[(gidx0*(64))+(lidx1*(4))+((-157))]), bool(f32(((gidx0*((-64)))+(lidx1*((-4))))<((-156)))));
  data0[(gidx0*(64))+(lidx1*(4))] = (val0+val4);
  data0[(gidx0*(64))+(lidx1*(4))+(1)] = (val1+val5);
  data0[(gidx0*(64))+(lidx1*(4))+(2)] = (val2+val6);
  data0[(gidx0*(64))+(lidx1*(4))+(3)] = (val3+val7);
}`;

const r_80_4_8_40_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,128>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(8,4) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 80 */
  let lidx1 = i32(lindex.y); /* 4 */
  let lidx2 = i32(lindex.x); /* 8 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (40); ridx0++) {
    var  val0 = f32(data1[lidx2+(ridx0*(8))]);
    var  val1 = f32(data2[(gidx0*(5120))+(lidx1*(320))+lidx2+(ridx0*(8))]);
    var  val2 = f32(data2[(gidx0*(5120))+(lidx1*(320))+lidx2+(ridx0*(8))+(1280)]);
    var  val3 = f32(data2[(gidx0*(5120))+(lidx1*(320))+lidx2+(ridx0*(8))+(2560)]);
    var  val4 = f32(data2[(gidx0*(5120))+(lidx1*(320))+lidx2+(ridx0*(8))+(3840)]);
    acc0 = fma(val0,val1,acc0);
    acc1 = fma(val0,val2,acc1);
    acc2 = fma(val0,val3,acc2);
    acc3 = fma(val0,val4,acc3);
  }
  temp[(lidx1*(32))+(lidx2*(4))] = acc0;
  temp[(lidx1*(32))+(lidx2*(4))+(1)] = acc1;
  temp[(lidx1*(32))+(lidx2*(4))+(2)] = acc2;
  temp[(lidx1*(32))+(lidx2*(4))+(3)] = acc3;
  workgroupBarrier();
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  for(var ridx1 = (0); ridx1 < (8); ridx1++) {
    var  val5 = f32(temp[(lidx1*(32))+(ridx1*(4))]);
    var  val6 = f32(temp[(lidx1*(32))+(ridx1*(4))+(1)]);
    var  val7 = f32(temp[(lidx1*(32))+(ridx1*(4))+(2)]);
    var  val8 = f32(temp[(lidx1*(32))+(ridx1*(4))+(3)]);
    acc4 = (val5+acc4);
    acc5 = (val6+acc5);
    acc6 = (val7+acc6);
    acc7 = (val8+acc7);
  }
  var  val9 = f32(data3[(gidx0*(16))+lidx1]);
  var  val10 = f32(data3[(gidx0*(16))+lidx1+(4)]);
  var  val11 = f32(data3[(gidx0*(16))+lidx1+(8)]);
  var  val12 = f32(data3[(gidx0*(16))+lidx1+(12)]);
  var  alu0 = (acc4+val9);
  var  alu1 = (acc5+val10);
  var  alu2 = (acc6+val11);
  var  alu3 = (acc7+val12);
  data0[(gidx0*(16))+lidx1] = (alu0*((1.0f)/((1.0f)+exp2((alu0*((-1.4426950408889634f)))))));
  data0[(gidx0*(16))+lidx1+(4)] = (alu1*((1.0f)/((1.0f)+exp2((alu1*((-1.4426950408889634f)))))));
  data0[(gidx0*(16))+lidx1+(8)] = (alu2*((1.0f)/((1.0f)+exp2((alu2*((-1.4426950408889634f)))))));
  data0[(gidx0*(16))+lidx1+(12)] = (alu3*((1.0f)/((1.0f)+exp2((alu3*((-1.4426950408889634f)))))));
}`;

const r_80_4_8_160_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,128>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(8,4) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 80 */
  let lidx1 = i32(lindex.y); /* 4 */
  let lidx2 = i32(lindex.x); /* 8 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (160); ridx0++) {
    var  val0 = f32(data1[lidx2+(ridx0*(8))]);
    var  val1 = f32(data2[(gidx0*(20480))+(lidx1*(1280))+lidx2+(ridx0*(8))]);
    var  val2 = f32(data2[(gidx0*(20480))+(lidx1*(1280))+lidx2+(ridx0*(8))+(5120)]);
    var  val3 = f32(data2[(gidx0*(20480))+(lidx1*(1280))+lidx2+(ridx0*(8))+(10240)]);
    var  val4 = f32(data2[(gidx0*(20480))+(lidx1*(1280))+lidx2+(ridx0*(8))+(15360)]);
    acc0 = fma(val0,val1,acc0);
    acc1 = fma(val0,val2,acc1);
    acc2 = fma(val0,val3,acc2);
    acc3 = fma(val0,val4,acc3);
  }
  temp[(lidx1*(32))+(lidx2*(4))] = acc0;
  temp[(lidx1*(32))+(lidx2*(4))+(1)] = acc1;
  temp[(lidx1*(32))+(lidx2*(4))+(2)] = acc2;
  temp[(lidx1*(32))+(lidx2*(4))+(3)] = acc3;
  workgroupBarrier();
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  for(var ridx1 = (0); ridx1 < (8); ridx1++) {
    var  val5 = f32(temp[(lidx1*(32))+(ridx1*(4))]);
    var  val6 = f32(temp[(lidx1*(32))+(ridx1*(4))+(1)]);
    var  val7 = f32(temp[(lidx1*(32))+(ridx1*(4))+(2)]);
    var  val8 = f32(temp[(lidx1*(32))+(ridx1*(4))+(3)]);
    acc4 = (val5+acc4);
    acc5 = (val6+acc5);
    acc6 = (val7+acc6);
    acc7 = (val8+acc7);
  }
  data0[(gidx0*(16))+lidx1] = acc4;
  data0[(gidx0*(16))+lidx1+(4)] = acc5;
  data0[(gidx0*(16))+lidx1+(8)] = acc6;
  data0[(gidx0*(16))+lidx1+(12)] = acc7;
}`;

const E_10_32_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 10 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  alu0 = (val0+val4);
  var  alu1 = (val1+val5);
  var  alu2 = (val2+val6);
  var  alu3 = (val3+val7);
  data0[(gidx0*(128))+(lidx1*(4))] = (alu0*((1.0f)/((1.0f)+exp2((alu0*((-1.4426950408889634f)))))));
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (alu1*((1.0f)/((1.0f)+exp2((alu1*((-1.4426950408889634f)))))));
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (alu2*((1.0f)/((1.0f)+exp2((alu2*((-1.4426950408889634f)))))));
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (alu3*((1.0f)/((1.0f)+exp2((alu3*((-1.4426950408889634f)))))));
}`;

const r_20_4_8_160_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,128>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(8,4) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 20 */
  let lidx1 = i32(lindex.y); /* 4 */
  let lidx2 = i32(lindex.x); /* 8 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (160); ridx0++) {
    var  val0 = f32(data1[lidx2+(ridx0*(8))]);
    var  val1 = f32(data2[(gidx0*(20480))+(lidx1*(1280))+lidx2+(ridx0*(8))]);
    var  val2 = f32(data2[(gidx0*(20480))+(lidx1*(1280))+lidx2+(ridx0*(8))+(5120)]);
    var  val3 = f32(data2[(gidx0*(20480))+(lidx1*(1280))+lidx2+(ridx0*(8))+(10240)]);
    var  val4 = f32(data2[(gidx0*(20480))+(lidx1*(1280))+lidx2+(ridx0*(8))+(15360)]);
    acc0 = fma(val0,val1,acc0);
    acc1 = fma(val0,val2,acc1);
    acc2 = fma(val0,val3,acc2);
    acc3 = fma(val0,val4,acc3);
  }
  temp[(lidx1*(32))+(lidx2*(4))] = acc0;
  temp[(lidx1*(32))+(lidx2*(4))+(1)] = acc1;
  temp[(lidx1*(32))+(lidx2*(4))+(2)] = acc2;
  temp[(lidx1*(32))+(lidx2*(4))+(3)] = acc3;
  workgroupBarrier();
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  for(var ridx1 = (0); ridx1 < (8); ridx1++) {
    var  val5 = f32(temp[(lidx1*(32))+(ridx1*(4))]);
    var  val6 = f32(temp[(lidx1*(32))+(ridx1*(4))+(1)]);
    var  val7 = f32(temp[(lidx1*(32))+(ridx1*(4))+(2)]);
    var  val8 = f32(temp[(lidx1*(32))+(ridx1*(4))+(3)]);
    acc4 = (val5+acc4);
    acc5 = (val6+acc5);
    acc6 = (val7+acc6);
    acc7 = (val8+acc7);
  }
  var  val9 = f32(data3[(gidx0*(16))+lidx1]);
  var  val10 = f32(data3[(gidx0*(16))+lidx1+(4)]);
  var  val11 = f32(data3[(gidx0*(16))+lidx1+(8)]);
  var  val12 = f32(data3[(gidx0*(16))+lidx1+(12)]);
  data0[(gidx0*(16))+lidx1] = (acc4+val9);
  data0[(gidx0*(16))+lidx1+(4)] = (acc5+val10);
  data0[(gidx0*(16))+lidx1+(8)] = (acc6+val11);
  data0[(gidx0*(16))+lidx1+(12)] = (acc7+val12);
}`;

const r_2_4_10_8_16_64_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 4 */
  let gidx2 = i32(gindex.x); /* 10 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(4096))+(lidx3*(40960))+(lidx4*(256))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(4096))+(lidx3*(40960))+(lidx4*(256))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(4096))+(lidx3*(40960))+(lidx4*(256))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(4096))+(lidx3*(40960))+(lidx4*(256))+(ridx0*(4))+(3)]);
    var  val4 = f32(data2[(gidx1*(80))+gidx2+(lidx3*(10))]);
    var  val5 = f32(data3[(gidx1*(80))+gidx2+(lidx3*(10))]);
    acc0 = (val0+val4+val5+acc0);
    acc0 = (val1+val4+val5+acc0);
    acc0 = (val2+val4+val5+acc0);
    acc0 = (val3+val4+val5+acc0);
  }
  data0[(gidx0*(5120))+(gidx1*(1280))+(gidx2*(16))+(lidx3*(160))+lidx4] = acc0;
}`;

const E_2_4_640_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 4 */
  let gidx2 = i32(gindex.x); /* 640 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(gidx1*(80))+(lidx3*(10))+(gidx2/(64))]);
  var  val5 = f32(data3[(gidx1*(80))+(lidx3*(10))+(gidx2/(64))]);
  var  val6 = f32(data4[(gidx0*(32))+(gidx1*(8))+lidx3]);
  data0[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))] = ((val0+val4+val5)-val6);
  data0[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))+(1)] = ((val1+val4+val5)-val6);
  data0[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))+(2)] = ((val2+val4+val5)-val6);
  data0[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))+(3)] = ((val3+val4+val5)-val6);
}`;

const r_640_4_8_32_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,128>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(8,4) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 640 */
  let lidx1 = i32(lindex.y); /* 4 */
  let lidx2 = i32(lindex.x); /* 8 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (32); ridx0++) {
    var  val0 = f32(data1[(gidx0*(4096))+(lidx1*(256))+lidx2+(ridx0*(8))]);
    var  val1 = f32(data1[(gidx0*(4096))+(lidx1*(256))+lidx2+(ridx0*(8))+(1024)]);
    var  val2 = f32(data1[(gidx0*(4096))+(lidx1*(256))+lidx2+(ridx0*(8))+(2048)]);
    var  val3 = f32(data1[(gidx0*(4096))+(lidx1*(256))+lidx2+(ridx0*(8))+(3072)]);
    acc0 = fma(val0,val0,acc0);
    acc1 = fma(val1,val1,acc1);
    acc2 = fma(val2,val2,acc2);
    acc3 = fma(val3,val3,acc3);
  }
  temp[(lidx1*(32))+(lidx2*(4))] = acc0;
  temp[(lidx1*(32))+(lidx2*(4))+(1)] = acc1;
  temp[(lidx1*(32))+(lidx2*(4))+(2)] = acc2;
  temp[(lidx1*(32))+(lidx2*(4))+(3)] = acc3;
  workgroupBarrier();
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  for(var ridx1 = (0); ridx1 < (8); ridx1++) {
    var  val4 = f32(temp[(lidx1*(32))+(ridx1*(4))]);
    var  val5 = f32(temp[(lidx1*(32))+(ridx1*(4))+(1)]);
    var  val6 = f32(temp[(lidx1*(32))+(ridx1*(4))+(2)]);
    var  val7 = f32(temp[(lidx1*(32))+(ridx1*(4))+(3)]);
    acc4 = (val4+acc4);
    acc5 = (val5+acc5);
    acc6 = (val6+acc6);
    acc7 = (val7+acc7);
  }
  data0[(gidx0*(16))+lidx1] = acc4;
  data0[(gidx0*(16))+lidx1+(4)] = acc5;
  data0[(gidx0*(16))+lidx1+(8)] = acc6;
  data0[(gidx0*(16))+lidx1+(12)] = acc7;
}`;

const E_80_64_2_4_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,4,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 80 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 4 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(lidx2*(32))+(((gidx0*(4))+lidx3)/(10))]);
  var  val5 = f32(data3[(gidx0*(4))+lidx3]);
  var  val6 = f32(data4[(gidx0*(4))+lidx3]);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))] = ((val0*val4*val5)+val6);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(1)] = ((val1*val4*val5)+val6);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(2)] = ((val2*val4*val5)+val6);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(3)] = ((val3*val4*val5)+val6);
}`;

const E_2_40_64_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 40 */
  let gidx2 = i32(gindex.x); /* 64 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(1310720))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(1310720))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(1310720))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(1310720))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(32))+(((gidx1*(8))+lidx3)/(10))]);
  var  val5 = f32(data3[(gidx1*(8))+lidx3]);
  var  val6 = f32(data4[(gidx1*(8))+lidx3]);
  data0[(gidx0*(1310720))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))] = ((1.0f)/((1.0f)+exp2((((val0*val4*val5)+val6)*((-1.4426950408889634f))))));
  data0[(gidx0*(1310720))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)] = ((1.0f)/((1.0f)+exp2((((val1*val4*val5)+val6)*((-1.4426950408889634f))))));
  data0[(gidx0*(1310720))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)] = ((1.0f)/((1.0f)+exp2((((val2*val4*val5)+val6)*((-1.4426950408889634f))))));
  data0[(gidx0*(1310720))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)] = ((1.0f)/((1.0f)+exp2((((val3*val4*val5)+val6)*((-1.4426950408889634f))))));
}`;

const E_2_32_20_4_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 32 */
  let gidx2 = i32(gindex.x); /* 80 */
  let lidx4 = i32(lindex.y); /* 8 */
  let lidx5 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))]);
  var  val1 = f32(data1[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))]);
  var  val5 = f32(data2[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(3)]);
  var  val8 = f32(data3[(gidx1*(10))+(gidx2/(8))]);
  data0[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))] = (val0+(val4+val8));
  data0[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(1)] = (val1+(val5+val8));
  data0[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(2)] = (val2+(val6+val8));
  data0[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(3)] = (val3+(val7+val8));
}`;

const E_2_4_640_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 4 */
  let gidx2 = i32(gindex.x); /* 640 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(gidx1*(80))+(lidx3*(10))+(gidx2/(64))]);
  var  val5 = f32(data3[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))]);
  var  val6 = f32(data3[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))+(1)]);
  var  val7 = f32(data3[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))+(2)]);
  var  val8 = f32(data3[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))+(3)]);
  var  val9 = f32(data4[(gidx1*(80))+(lidx3*(10))+(gidx2/(64))]);
  var  val10 = f32(data5[(gidx0*(32))+(gidx1*(8))+lidx3]);
  data0[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))] = ((val0+val4+(val5+val9))-val10);
  data0[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))+(1)] = ((val1+val4+(val6+val9))-val10);
  data0[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))+(2)] = ((val2+val4+(val7+val9))-val10);
  data0[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))+(3)] = ((val3+val4+(val8+val9))-val10);
}`;

const r_2_10_64_8_16_80_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 10 */
  let gidx2 = i32(gindex.x); /* 64 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (80); ridx0++) {
    var  val0 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))]);
    var  val1 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(4096)]);
    var  val2 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(8192)]);
    var  val3 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(12288)]);
    var  val4 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(1)]);
    var  val5 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(4097)]);
    var  val6 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(8193)]);
    var  val7 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(12289)]);
    var  val8 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(2)]);
    var  val9 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(4098)]);
    var  val10 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(8194)]);
    var  val11 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(12290)]);
    var  val12 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(3)]);
    var  val13 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(4099)]);
    var  val14 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(8195)]);
    var  val15 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(12291)]);
    var  val16 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(320)]);
    var  val21 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(321)]);
    var  val22 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(322)]);
    var  val23 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(323)]);
    var  val24 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(640)]);
    var  val25 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(641)]);
    var  val26 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(642)]);
    var  val27 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(643)]);
    var  val28 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(960)]);
    var  val29 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(961)]);
    var  val30 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(962)]);
    var  val31 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(963)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))] = acc0;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(3)] = acc3;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(4096)] = acc4;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(4097)] = acc5;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(4098)] = acc6;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(4099)] = acc7;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(8192)] = acc8;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(8193)] = acc9;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(8194)] = acc10;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(8195)] = acc11;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(12288)] = acc12;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(12289)] = acc13;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(12290)] = acc14;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(12291)] = acc15;
}`;

const E_64_80_2_16_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(4,16,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 64 */
  let gidx1 = i32(gindex.x); /* 80 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 16 */
  let lidx4 = i32(lindex.x); /* 4 */
  var  val0 = f32(data1[(gidx0*(64))+(gidx1*(16384))+(lidx2*(1310720))+(lidx3*(4))+(lidx4*(4096))]);
  var  val1 = f32(data1[(gidx0*(64))+(gidx1*(16384))+(lidx2*(1310720))+(lidx3*(4))+(lidx4*(4096))+(1)]);
  var  val2 = f32(data1[(gidx0*(64))+(gidx1*(16384))+(lidx2*(1310720))+(lidx3*(4))+(lidx4*(4096))+(2)]);
  var  val3 = f32(data1[(gidx0*(64))+(gidx1*(16384))+(lidx2*(1310720))+(lidx3*(4))+(lidx4*(4096))+(3)]);
  var  val4 = f32(data2[(gidx1*(4))+lidx4]);
  data0[(gidx0*(20480))+(gidx1*(4))+(lidx2*(1310720))+(lidx3*(1280))+lidx4] = (val0+val4);
  data0[(gidx0*(20480))+(gidx1*(4))+(lidx2*(1310720))+(lidx3*(1280))+lidx4+(320)] = (val1+val4);
  data0[(gidx0*(20480))+(gidx1*(4))+(lidx2*(1310720))+(lidx3*(1280))+lidx4+(640)] = (val2+val4);
  data0[(gidx0*(20480))+(gidx1*(4))+(lidx2*(1310720))+(lidx3*(1280))+lidx4+(960)] = (val3+val4);
}`;

const r_64_32_80_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 64 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (80); ridx0++) {
    var  val0 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))+(320)]);
    var  val5 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))+(321)]);
    var  val6 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))+(322)]);
    var  val7 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))+(323)]);
    var  val8 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))+(640)]);
    var  val9 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))+(641)]);
    var  val10 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))+(642)]);
    var  val11 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))+(643)]);
    var  val12 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))+(960)]);
    var  val13 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))+(961)]);
    var  val14 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))+(962)]);
    var  val15 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))+(963)]);
    acc0 = (val0+acc0);
    acc0 = (val1+acc0);
    acc0 = (val2+acc0);
    acc0 = (val3+acc0);
    acc1 = (val4+acc1);
    acc1 = (val5+acc1);
    acc1 = (val6+acc1);
    acc1 = (val7+acc1);
    acc2 = (val8+acc2);
    acc2 = (val9+acc2);
    acc2 = (val10+acc2);
    acc2 = (val11+acc2);
    acc3 = (val12+acc3);
    acc3 = (val13+acc3);
    acc3 = (val14+acc3);
    acc3 = (val15+acc3);
  }
  data0[(gidx0*(128))+(lidx1*(4))] = (acc0*(0.003125f));
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (acc1*(0.003125f));
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (acc2*(0.003125f));
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (acc3*(0.003125f));
}`;

const r_64_32_80_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 64 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (80); ridx0++) {
    var  val0 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))+(320)]);
    var  val5 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))+(321)]);
    var  val6 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))+(322)]);
    var  val7 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))+(323)]);
    var  val8 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))+(640)]);
    var  val9 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))+(641)]);
    var  val10 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))+(642)]);
    var  val11 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))+(643)]);
    var  val12 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))+(960)]);
    var  val13 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))+(961)]);
    var  val14 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))+(962)]);
    var  val15 = f32(data1[(gidx0*(40960))+(lidx1*(1280))+(ridx0*(4))+(963)]);
    var  val16 = f32(data2[(gidx0*(128))+(lidx1*(4))]);
    var  val17 = f32(data2[(gidx0*(128))+(lidx1*(4))+(1)]);
    var  val18 = f32(data2[(gidx0*(128))+(lidx1*(4))+(2)]);
    var  val19 = f32(data2[(gidx0*(128))+(lidx1*(4))+(3)]);
    var  alu0 = (val0-val16);
    var  alu1 = (val1-val16);
    var  alu2 = (val2-val16);
    var  alu3 = (val3-val16);
    var  alu4 = (val4-val17);
    var  alu5 = (val5-val17);
    var  alu6 = (val6-val17);
    var  alu7 = (val7-val17);
    var  alu8 = (val8-val18);
    var  alu9 = (val9-val18);
    var  alu10 = (val10-val18);
    var  alu11 = (val11-val18);
    var  alu12 = (val12-val19);
    var  alu13 = (val13-val19);
    var  alu14 = (val14-val19);
    var  alu15 = (val15-val19);
    acc0 = fma(alu0,alu0,acc0);
    acc0 = fma(alu1,alu1,acc0);
    acc0 = fma(alu2,alu2,acc0);
    acc0 = fma(alu3,alu3,acc0);
    acc1 = fma(alu4,alu4,acc1);
    acc1 = fma(alu5,alu5,acc1);
    acc1 = fma(alu6,alu6,acc1);
    acc1 = fma(alu7,alu7,acc1);
    acc2 = fma(alu8,alu8,acc2);
    acc2 = fma(alu9,alu9,acc2);
    acc2 = fma(alu10,alu10,acc2);
    acc2 = fma(alu11,alu11,acc2);
    acc3 = fma(alu12,alu12,acc3);
    acc3 = fma(alu13,alu13,acc3);
    acc3 = fma(alu14,alu14,acc3);
    acc3 = fma(alu15,alu15,acc3);
  }
  data0[(gidx0*(128))+(lidx1*(4))] = sqrt(((1.0f)/((acc0*(0.003125f))+(1e-05f))));
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = sqrt(((1.0f)/((acc1*(0.003125f))+(1e-05f))));
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = sqrt(((1.0f)/((acc2*(0.003125f))+(1e-05f))));
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = sqrt(((1.0f)/((acc3*(0.003125f))+(1e-05f))));
}`;

const E_256_5_8_16_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 256 */
  let gidx1 = i32(gindex.x); /* 5 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(3)]);
  var  val4 = f32(data1[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(320)]);
  var  val5 = f32(data1[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(321)]);
  var  val6 = f32(data1[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(322)]);
  var  val7 = f32(data1[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(323)]);
  var  val8 = f32(data1[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(640)]);
  var  val9 = f32(data1[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(641)]);
  var  val10 = f32(data1[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(642)]);
  var  val11 = f32(data1[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(643)]);
  var  val12 = f32(data1[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(960)]);
  var  val13 = f32(data1[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(961)]);
  var  val14 = f32(data1[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(962)]);
  var  val15 = f32(data1[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(963)]);
  var  val16 = f32(data2[(gidx0*(32))+(lidx2*(4))]);
  var  val17 = f32(data2[(gidx0*(32))+(lidx2*(4))+(1)]);
  var  val18 = f32(data2[(gidx0*(32))+(lidx2*(4))+(2)]);
  var  val19 = f32(data2[(gidx0*(32))+(lidx2*(4))+(3)]);
  var  val20 = f32(data3[(gidx0*(32))+(lidx2*(4))]);
  var  val21 = f32(data3[(gidx0*(32))+(lidx2*(4))+(1)]);
  var  val22 = f32(data3[(gidx0*(32))+(lidx2*(4))+(2)]);
  var  val23 = f32(data3[(gidx0*(32))+(lidx2*(4))+(3)]);
  var  val24 = f32(data4[(gidx1*(64))+(lidx3*(4))]);
  var  val25 = f32(data4[(gidx1*(64))+(lidx3*(4))+(1)]);
  var  val26 = f32(data4[(gidx1*(64))+(lidx3*(4))+(2)]);
  var  val27 = f32(data4[(gidx1*(64))+(lidx3*(4))+(3)]);
  var  val28 = f32(data5[(gidx1*(64))+(lidx3*(4))]);
  var  val29 = f32(data5[(gidx1*(64))+(lidx3*(4))+(1)]);
  var  val30 = f32(data5[(gidx1*(64))+(lidx3*(4))+(2)]);
  var  val31 = f32(data5[(gidx1*(64))+(lidx3*(4))+(3)]);
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))] = (((val0-val16)*val20*val24)+val28);
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(1)] = (((val1-val16)*val20*val25)+val29);
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(2)] = (((val2-val16)*val20*val26)+val30);
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(3)] = (((val3-val16)*val20*val27)+val31);
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(320)] = (((val4-val17)*val21*val24)+val28);
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(321)] = (((val5-val17)*val21*val25)+val29);
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(322)] = (((val6-val17)*val21*val26)+val30);
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(323)] = (((val7-val17)*val21*val27)+val31);
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(640)] = (((val8-val18)*val22*val24)+val28);
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(641)] = (((val9-val18)*val22*val25)+val29);
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(642)] = (((val10-val18)*val22*val26)+val30);
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(643)] = (((val11-val18)*val22*val27)+val31);
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(960)] = (((val12-val19)*val23*val24)+val28);
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(961)] = (((val13-val19)*val23*val25)+val29);
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(962)] = (((val14-val19)*val23*val26)+val30);
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(963)] = (((val15-val19)*val23*val27)+val31);
}`;

const r_256_5_8_16_80_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 256 */
  let gidx1 = i32(gindex.x); /* 5 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (80); ridx0++) {
    var  val0 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))+(320)]);
    var  val5 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))+(321)]);
    var  val6 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))+(322)]);
    var  val7 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))+(323)]);
    var  val8 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))+(640)]);
    var  val9 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))+(641)]);
    var  val10 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))+(642)]);
    var  val11 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))+(643)]);
    var  val12 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))+(960)]);
    var  val13 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))+(961)]);
    var  val14 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))+(962)]);
    var  val15 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))+(963)]);
    var  val16 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))+(320)]);
    var  val21 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))+(321)]);
    var  val22 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))+(322)]);
    var  val23 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))+(323)]);
    var  val24 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))+(640)]);
    var  val25 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))+(641)]);
    var  val26 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))+(642)]);
    var  val27 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))+(643)]);
    var  val28 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))+(960)]);
    var  val29 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))+(961)]);
    var  val30 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))+(962)]);
    var  val31 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))+(963)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val0,val20,acc1);
    acc1 = fma(val1,val21,acc1);
    acc1 = fma(val2,val22,acc1);
    acc1 = fma(val3,val23,acc1);
    acc2 = fma(val0,val24,acc2);
    acc2 = fma(val1,val25,acc2);
    acc2 = fma(val2,val26,acc2);
    acc2 = fma(val3,val27,acc2);
    acc3 = fma(val0,val28,acc3);
    acc3 = fma(val1,val29,acc3);
    acc3 = fma(val2,val30,acc3);
    acc3 = fma(val3,val31,acc3);
    acc4 = fma(val4,val16,acc4);
    acc4 = fma(val5,val17,acc4);
    acc4 = fma(val6,val18,acc4);
    acc4 = fma(val7,val19,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val4,val24,acc6);
    acc6 = fma(val5,val25,acc6);
    acc6 = fma(val6,val26,acc6);
    acc6 = fma(val7,val27,acc6);
    acc7 = fma(val4,val28,acc7);
    acc7 = fma(val5,val29,acc7);
    acc7 = fma(val6,val30,acc7);
    acc7 = fma(val7,val31,acc7);
    acc8 = fma(val8,val16,acc8);
    acc8 = fma(val9,val17,acc8);
    acc8 = fma(val10,val18,acc8);
    acc8 = fma(val11,val19,acc8);
    acc9 = fma(val8,val20,acc9);
    acc9 = fma(val9,val21,acc9);
    acc9 = fma(val10,val22,acc9);
    acc9 = fma(val11,val23,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val8,val28,acc11);
    acc11 = fma(val9,val29,acc11);
    acc11 = fma(val10,val30,acc11);
    acc11 = fma(val11,val31,acc11);
    acc12 = fma(val12,val16,acc12);
    acc12 = fma(val13,val17,acc12);
    acc12 = fma(val14,val18,acc12);
    acc12 = fma(val15,val19,acc12);
    acc13 = fma(val12,val20,acc13);
    acc13 = fma(val13,val21,acc13);
    acc13 = fma(val14,val22,acc13);
    acc13 = fma(val15,val23,acc13);
    acc14 = fma(val12,val24,acc14);
    acc14 = fma(val13,val25,acc14);
    acc14 = fma(val14,val26,acc14);
    acc14 = fma(val15,val27,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))] = acc0;
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(3)] = acc3;
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(320)] = acc4;
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(321)] = acc5;
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(322)] = acc6;
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(323)] = acc7;
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(640)] = acc8;
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(641)] = acc9;
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(642)] = acc10;
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(643)] = acc11;
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(960)] = acc12;
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(961)] = acc13;
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(962)] = acc14;
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(963)] = acc15;
}`;

const r_2_8_128_64_8_16_10_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 8 */
  let gidx2 = i32(gindex.x); /* 8192 */
  let lidx4 = i32(lindex.y); /* 8 */
  let lidx5 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (10); ridx0++) {
    var  val0 = f32(data1[(gidx0*(1310720))+(gidx1*(40))+((gidx2/(64))*(10240))+(lidx4*(1280))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(1310720))+(gidx1*(40))+((gidx2/(64))*(10240))+(lidx4*(1280))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(1310720))+(gidx1*(40))+((gidx2/(64))*(10240))+(lidx4*(1280))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(1310720))+(gidx1*(40))+((gidx2/(64))*(10240))+(lidx4*(1280))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(1310720))+(gidx1*(40))+((gidx2/(64))*(10240))+(lidx4*(1280))+(ridx0*(4))+(320)]);
    var  val5 = f32(data1[(gidx0*(1310720))+(gidx1*(40))+((gidx2/(64))*(10240))+(lidx4*(1280))+(ridx0*(4))+(321)]);
    var  val6 = f32(data1[(gidx0*(1310720))+(gidx1*(40))+((gidx2/(64))*(10240))+(lidx4*(1280))+(ridx0*(4))+(322)]);
    var  val7 = f32(data1[(gidx0*(1310720))+(gidx1*(40))+((gidx2/(64))*(10240))+(lidx4*(1280))+(ridx0*(4))+(323)]);
    var  val8 = f32(data1[(gidx0*(1310720))+(gidx1*(40))+((gidx2/(64))*(10240))+(lidx4*(1280))+(ridx0*(4))+(640)]);
    var  val9 = f32(data1[(gidx0*(1310720))+(gidx1*(40))+((gidx2/(64))*(10240))+(lidx4*(1280))+(ridx0*(4))+(641)]);
    var  val10 = f32(data1[(gidx0*(1310720))+(gidx1*(40))+((gidx2/(64))*(10240))+(lidx4*(1280))+(ridx0*(4))+(642)]);
    var  val11 = f32(data1[(gidx0*(1310720))+(gidx1*(40))+((gidx2/(64))*(10240))+(lidx4*(1280))+(ridx0*(4))+(643)]);
    var  val12 = f32(data1[(gidx0*(1310720))+(gidx1*(40))+((gidx2/(64))*(10240))+(lidx4*(1280))+(ridx0*(4))+(960)]);
    var  val13 = f32(data1[(gidx0*(1310720))+(gidx1*(40))+((gidx2/(64))*(10240))+(lidx4*(1280))+(ridx0*(4))+(961)]);
    var  val14 = f32(data1[(gidx0*(1310720))+(gidx1*(40))+((gidx2/(64))*(10240))+(lidx4*(1280))+(ridx0*(4))+(962)]);
    var  val15 = f32(data1[(gidx0*(1310720))+(gidx1*(40))+((gidx2/(64))*(10240))+(lidx4*(1280))+(ridx0*(4))+(963)]);
    var  val16 = f32(data2[(gidx0*(1310720))+(gidx1*(40))+((gidx2%(64))*(20480))+(lidx5*(1280))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx0*(1310720))+(gidx1*(40))+((gidx2%(64))*(20480))+(lidx5*(1280))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx0*(1310720))+(gidx1*(40))+((gidx2%(64))*(20480))+(lidx5*(1280))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx0*(1310720))+(gidx1*(40))+((gidx2%(64))*(20480))+(lidx5*(1280))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx0*(1310720))+(gidx1*(40))+((gidx2%(64))*(20480))+(lidx5*(1280))+(ridx0*(4))+(320)]);
    var  val21 = f32(data2[(gidx0*(1310720))+(gidx1*(40))+((gidx2%(64))*(20480))+(lidx5*(1280))+(ridx0*(4))+(321)]);
    var  val22 = f32(data2[(gidx0*(1310720))+(gidx1*(40))+((gidx2%(64))*(20480))+(lidx5*(1280))+(ridx0*(4))+(322)]);
    var  val23 = f32(data2[(gidx0*(1310720))+(gidx1*(40))+((gidx2%(64))*(20480))+(lidx5*(1280))+(ridx0*(4))+(323)]);
    var  val24 = f32(data2[(gidx0*(1310720))+(gidx1*(40))+((gidx2%(64))*(20480))+(lidx5*(1280))+(ridx0*(4))+(640)]);
    var  val25 = f32(data2[(gidx0*(1310720))+(gidx1*(40))+((gidx2%(64))*(20480))+(lidx5*(1280))+(ridx0*(4))+(641)]);
    var  val26 = f32(data2[(gidx0*(1310720))+(gidx1*(40))+((gidx2%(64))*(20480))+(lidx5*(1280))+(ridx0*(4))+(642)]);
    var  val27 = f32(data2[(gidx0*(1310720))+(gidx1*(40))+((gidx2%(64))*(20480))+(lidx5*(1280))+(ridx0*(4))+(643)]);
    var  val28 = f32(data2[(gidx0*(1310720))+(gidx1*(40))+((gidx2%(64))*(20480))+(lidx5*(1280))+(ridx0*(4))+(960)]);
    var  val29 = f32(data2[(gidx0*(1310720))+(gidx1*(40))+((gidx2%(64))*(20480))+(lidx5*(1280))+(ridx0*(4))+(961)]);
    var  val30 = f32(data2[(gidx0*(1310720))+(gidx1*(40))+((gidx2%(64))*(20480))+(lidx5*(1280))+(ridx0*(4))+(962)]);
    var  val31 = f32(data2[(gidx0*(1310720))+(gidx1*(40))+((gidx2%(64))*(20480))+(lidx5*(1280))+(ridx0*(4))+(963)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val0,val20,acc1);
    acc1 = fma(val1,val21,acc1);
    acc1 = fma(val2,val22,acc1);
    acc1 = fma(val3,val23,acc1);
    acc2 = fma(val0,val24,acc2);
    acc2 = fma(val1,val25,acc2);
    acc2 = fma(val2,val26,acc2);
    acc2 = fma(val3,val27,acc2);
    acc3 = fma(val0,val28,acc3);
    acc3 = fma(val1,val29,acc3);
    acc3 = fma(val2,val30,acc3);
    acc3 = fma(val3,val31,acc3);
    acc4 = fma(val4,val16,acc4);
    acc4 = fma(val5,val17,acc4);
    acc4 = fma(val6,val18,acc4);
    acc4 = fma(val7,val19,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val4,val24,acc6);
    acc6 = fma(val5,val25,acc6);
    acc6 = fma(val6,val26,acc6);
    acc6 = fma(val7,val27,acc6);
    acc7 = fma(val4,val28,acc7);
    acc7 = fma(val5,val29,acc7);
    acc7 = fma(val6,val30,acc7);
    acc7 = fma(val7,val31,acc7);
    acc8 = fma(val8,val16,acc8);
    acc8 = fma(val9,val17,acc8);
    acc8 = fma(val10,val18,acc8);
    acc8 = fma(val11,val19,acc8);
    acc9 = fma(val8,val20,acc9);
    acc9 = fma(val9,val21,acc9);
    acc9 = fma(val10,val22,acc9);
    acc9 = fma(val11,val23,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val8,val28,acc11);
    acc11 = fma(val9,val29,acc11);
    acc11 = fma(val10,val30,acc11);
    acc11 = fma(val11,val31,acc11);
    acc12 = fma(val12,val16,acc12);
    acc12 = fma(val13,val17,acc12);
    acc12 = fma(val14,val18,acc12);
    acc12 = fma(val15,val19,acc12);
    acc13 = fma(val12,val20,acc13);
    acc13 = fma(val13,val21,acc13);
    acc13 = fma(val14,val22,acc13);
    acc13 = fma(val15,val23,acc13);
    acc14 = fma(val12,val24,acc14);
    acc14 = fma(val13,val25,acc14);
    acc14 = fma(val14,val26,acc14);
    acc14 = fma(val15,val27,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(134217728))+(gidx1*(16777216))+((gidx2/(64))*(131072))+((gidx2%(64))*(64))+(lidx4*(16384))+(lidx5*(4))] = (acc0*(0.15811388300841897f));
  data0[(gidx0*(134217728))+(gidx1*(16777216))+((gidx2/(64))*(131072))+((gidx2%(64))*(64))+(lidx4*(16384))+(lidx5*(4))+(1)] = (acc1*(0.15811388300841897f));
  data0[(gidx0*(134217728))+(gidx1*(16777216))+((gidx2/(64))*(131072))+((gidx2%(64))*(64))+(lidx4*(16384))+(lidx5*(4))+(2)] = (acc2*(0.15811388300841897f));
  data0[(gidx0*(134217728))+(gidx1*(16777216))+((gidx2/(64))*(131072))+((gidx2%(64))*(64))+(lidx4*(16384))+(lidx5*(4))+(3)] = (acc3*(0.15811388300841897f));
  data0[(gidx0*(134217728))+(gidx1*(16777216))+((gidx2/(64))*(131072))+((gidx2%(64))*(64))+(lidx4*(16384))+(lidx5*(4))+(4096)] = (acc4*(0.15811388300841897f));
  data0[(gidx0*(134217728))+(gidx1*(16777216))+((gidx2/(64))*(131072))+((gidx2%(64))*(64))+(lidx4*(16384))+(lidx5*(4))+(4097)] = (acc5*(0.15811388300841897f));
  data0[(gidx0*(134217728))+(gidx1*(16777216))+((gidx2/(64))*(131072))+((gidx2%(64))*(64))+(lidx4*(16384))+(lidx5*(4))+(4098)] = (acc6*(0.15811388300841897f));
  data0[(gidx0*(134217728))+(gidx1*(16777216))+((gidx2/(64))*(131072))+((gidx2%(64))*(64))+(lidx4*(16384))+(lidx5*(4))+(4099)] = (acc7*(0.15811388300841897f));
  data0[(gidx0*(134217728))+(gidx1*(16777216))+((gidx2/(64))*(131072))+((gidx2%(64))*(64))+(lidx4*(16384))+(lidx5*(4))+(8192)] = (acc8*(0.15811388300841897f));
  data0[(gidx0*(134217728))+(gidx1*(16777216))+((gidx2/(64))*(131072))+((gidx2%(64))*(64))+(lidx4*(16384))+(lidx5*(4))+(8193)] = (acc9*(0.15811388300841897f));
  data0[(gidx0*(134217728))+(gidx1*(16777216))+((gidx2/(64))*(131072))+((gidx2%(64))*(64))+(lidx4*(16384))+(lidx5*(4))+(8194)] = (acc10*(0.15811388300841897f));
  data0[(gidx0*(134217728))+(gidx1*(16777216))+((gidx2/(64))*(131072))+((gidx2%(64))*(64))+(lidx4*(16384))+(lidx5*(4))+(8195)] = (acc11*(0.15811388300841897f));
  data0[(gidx0*(134217728))+(gidx1*(16777216))+((gidx2/(64))*(131072))+((gidx2%(64))*(64))+(lidx4*(16384))+(lidx5*(4))+(12288)] = (acc12*(0.15811388300841897f));
  data0[(gidx0*(134217728))+(gidx1*(16777216))+((gidx2/(64))*(131072))+((gidx2%(64))*(64))+(lidx4*(16384))+(lidx5*(4))+(12289)] = (acc13*(0.15811388300841897f));
  data0[(gidx0*(134217728))+(gidx1*(16777216))+((gidx2/(64))*(131072))+((gidx2%(64))*(64))+(lidx4*(16384))+(lidx5*(4))+(12290)] = (acc14*(0.15811388300841897f));
  data0[(gidx0*(134217728))+(gidx1*(16777216))+((gidx2/(64))*(131072))+((gidx2%(64))*(64))+(lidx4*(16384))+(lidx5*(4))+(12291)] = (acc15*(0.15811388300841897f));
}`;

const r_2048_32_1024_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 2048 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  acc0 = -0x1.fffffep+127f;
  for(var ridx0 = (0); ridx0 < (1024); ridx0++) {
    var  val0 = f32(data1[(gidx0*(131072))+(lidx1*(4096))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(131072))+(lidx1*(4096))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(131072))+(lidx1*(4096))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(131072))+(lidx1*(4096))+(ridx0*(4))+(3)]);
    acc0 = max(val0,acc0);
    acc0 = max(val1,acc0);
    acc0 = max(val2,acc0);
    acc0 = max(val3,acc0);
  }
  data0[(gidx0*(32))+lidx1] = acc0;
}`;

const E_8192_64_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 8192 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(8))+lidx2]);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))] = exp2(((val0-val4)*(1.4426950408889634f)));
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)] = exp2(((val1-val4)*(1.4426950408889634f)));
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)] = exp2(((val2-val4)*(1.4426950408889634f)));
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)] = exp2(((val3-val4)*(1.4426950408889634f)));
}`;

const r_2048_32_1024_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 2048 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (1024); ridx0++) {
    var  val0 = f32(data1[(gidx0*(131072))+(lidx1*(4096))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(131072))+(lidx1*(4096))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(131072))+(lidx1*(4096))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(131072))+(lidx1*(4096))+(ridx0*(4))+(3)]);
    acc0 = (val0+acc0);
    acc0 = (val1+acc0);
    acc0 = (val2+acc0);
    acc0 = (val3+acc0);
  }
  data0[(gidx0*(32))+lidx1] = acc0;
}`;

const E_8192_64_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 8192 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(8))+lidx2]);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))] = (val0/val4);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)] = (val1/val4);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)] = (val2/val4);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)] = (val3/val4);
}`;

const r_2_2_64_5_4_16_2_1024_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(2,16,4) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 2 */
  let gidx2 = i32(gindex.x); /* 320 */
  let lidx4 = i32(lindex.z); /* 4 */
  let lidx5 = i32(lindex.y); /* 16 */
  let lidx6 = i32(lindex.x); /* 2 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (1024); ridx0++) {
    var  val0 = f32(data1[(gidx0*(134217728))+(gidx1*(67108864))+((gidx2/(5))*(262144))+(lidx4*(16777216))+(lidx5*(16384))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(134217728))+(gidx1*(67108864))+((gidx2/(5))*(262144))+(lidx4*(16777216))+(lidx5*(16384))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(134217728))+(gidx1*(67108864))+((gidx2/(5))*(262144))+(lidx4*(16777216))+(lidx5*(16384))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(134217728))+(gidx1*(67108864))+((gidx2/(5))*(262144))+(lidx4*(16777216))+(lidx5*(16384))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(134217728))+(gidx1*(67108864))+((gidx2/(5))*(262144))+(lidx4*(16777216))+(lidx5*(16384))+(ridx0*(4))+(4096)]);
    var  val5 = f32(data1[(gidx0*(134217728))+(gidx1*(67108864))+((gidx2/(5))*(262144))+(lidx4*(16777216))+(lidx5*(16384))+(ridx0*(4))+(4097)]);
    var  val6 = f32(data1[(gidx0*(134217728))+(gidx1*(67108864))+((gidx2/(5))*(262144))+(lidx4*(16777216))+(lidx5*(16384))+(ridx0*(4))+(4098)]);
    var  val7 = f32(data1[(gidx0*(134217728))+(gidx1*(67108864))+((gidx2/(5))*(262144))+(lidx4*(16777216))+(lidx5*(16384))+(ridx0*(4))+(4099)]);
    var  val8 = f32(data1[(gidx0*(134217728))+(gidx1*(67108864))+((gidx2/(5))*(262144))+(lidx4*(16777216))+(lidx5*(16384))+(ridx0*(4))+(8192)]);
    var  val9 = f32(data1[(gidx0*(134217728))+(gidx1*(67108864))+((gidx2/(5))*(262144))+(lidx4*(16777216))+(lidx5*(16384))+(ridx0*(4))+(8193)]);
    var  val10 = f32(data1[(gidx0*(134217728))+(gidx1*(67108864))+((gidx2/(5))*(262144))+(lidx4*(16777216))+(lidx5*(16384))+(ridx0*(4))+(8194)]);
    var  val11 = f32(data1[(gidx0*(134217728))+(gidx1*(67108864))+((gidx2/(5))*(262144))+(lidx4*(16777216))+(lidx5*(16384))+(ridx0*(4))+(8195)]);
    var  val12 = f32(data1[(gidx0*(134217728))+(gidx1*(67108864))+((gidx2/(5))*(262144))+(lidx4*(16777216))+(lidx5*(16384))+(ridx0*(4))+(12288)]);
    var  val13 = f32(data1[(gidx0*(134217728))+(gidx1*(67108864))+((gidx2/(5))*(262144))+(lidx4*(16777216))+(lidx5*(16384))+(ridx0*(4))+(12289)]);
    var  val14 = f32(data1[(gidx0*(134217728))+(gidx1*(67108864))+((gidx2/(5))*(262144))+(lidx4*(16777216))+(lidx5*(16384))+(ridx0*(4))+(12290)]);
    var  val15 = f32(data1[(gidx0*(134217728))+(gidx1*(67108864))+((gidx2/(5))*(262144))+(lidx4*(16777216))+(lidx5*(16384))+(ridx0*(4))+(12291)]);
    var  val16 = f32(data2[(gidx0*(1310720))+(gidx1*(160))+((gidx2%(5))*(8))+(lidx4*(40))+(lidx6*(4))+(ridx0*(1280))]);
    var  val17 = f32(data2[(gidx0*(1310720))+(gidx1*(160))+((gidx2%(5))*(8))+(lidx4*(40))+(lidx6*(4))+(ridx0*(1280))+(320)]);
    var  val18 = f32(data2[(gidx0*(1310720))+(gidx1*(160))+((gidx2%(5))*(8))+(lidx4*(40))+(lidx6*(4))+(ridx0*(1280))+(640)]);
    var  val19 = f32(data2[(gidx0*(1310720))+(gidx1*(160))+((gidx2%(5))*(8))+(lidx4*(40))+(lidx6*(4))+(ridx0*(1280))+(960)]);
    var  val20 = f32(data2[(gidx0*(1310720))+(gidx1*(160))+((gidx2%(5))*(8))+(lidx4*(40))+(lidx6*(4))+(ridx0*(1280))+(1)]);
    var  val21 = f32(data2[(gidx0*(1310720))+(gidx1*(160))+((gidx2%(5))*(8))+(lidx4*(40))+(lidx6*(4))+(ridx0*(1280))+(321)]);
    var  val22 = f32(data2[(gidx0*(1310720))+(gidx1*(160))+((gidx2%(5))*(8))+(lidx4*(40))+(lidx6*(4))+(ridx0*(1280))+(641)]);
    var  val23 = f32(data2[(gidx0*(1310720))+(gidx1*(160))+((gidx2%(5))*(8))+(lidx4*(40))+(lidx6*(4))+(ridx0*(1280))+(961)]);
    var  val24 = f32(data2[(gidx0*(1310720))+(gidx1*(160))+((gidx2%(5))*(8))+(lidx4*(40))+(lidx6*(4))+(ridx0*(1280))+(2)]);
    var  val25 = f32(data2[(gidx0*(1310720))+(gidx1*(160))+((gidx2%(5))*(8))+(lidx4*(40))+(lidx6*(4))+(ridx0*(1280))+(322)]);
    var  val26 = f32(data2[(gidx0*(1310720))+(gidx1*(160))+((gidx2%(5))*(8))+(lidx4*(40))+(lidx6*(4))+(ridx0*(1280))+(642)]);
    var  val27 = f32(data2[(gidx0*(1310720))+(gidx1*(160))+((gidx2%(5))*(8))+(lidx4*(40))+(lidx6*(4))+(ridx0*(1280))+(962)]);
    var  val28 = f32(data2[(gidx0*(1310720))+(gidx1*(160))+((gidx2%(5))*(8))+(lidx4*(40))+(lidx6*(4))+(ridx0*(1280))+(3)]);
    var  val29 = f32(data2[(gidx0*(1310720))+(gidx1*(160))+((gidx2%(5))*(8))+(lidx4*(40))+(lidx6*(4))+(ridx0*(1280))+(323)]);
    var  val30 = f32(data2[(gidx0*(1310720))+(gidx1*(160))+((gidx2%(5))*(8))+(lidx4*(40))+(lidx6*(4))+(ridx0*(1280))+(643)]);
    var  val31 = f32(data2[(gidx0*(1310720))+(gidx1*(160))+((gidx2%(5))*(8))+(lidx4*(40))+(lidx6*(4))+(ridx0*(1280))+(963)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val0,val20,acc1);
    acc1 = fma(val1,val21,acc1);
    acc1 = fma(val2,val22,acc1);
    acc1 = fma(val3,val23,acc1);
    acc2 = fma(val0,val24,acc2);
    acc2 = fma(val1,val25,acc2);
    acc2 = fma(val2,val26,acc2);
    acc2 = fma(val3,val27,acc2);
    acc3 = fma(val0,val28,acc3);
    acc3 = fma(val1,val29,acc3);
    acc3 = fma(val2,val30,acc3);
    acc3 = fma(val3,val31,acc3);
    acc4 = fma(val4,val16,acc4);
    acc4 = fma(val5,val17,acc4);
    acc4 = fma(val6,val18,acc4);
    acc4 = fma(val7,val19,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val4,val24,acc6);
    acc6 = fma(val5,val25,acc6);
    acc6 = fma(val6,val26,acc6);
    acc6 = fma(val7,val27,acc6);
    acc7 = fma(val4,val28,acc7);
    acc7 = fma(val5,val29,acc7);
    acc7 = fma(val6,val30,acc7);
    acc7 = fma(val7,val31,acc7);
    acc8 = fma(val8,val16,acc8);
    acc8 = fma(val9,val17,acc8);
    acc8 = fma(val10,val18,acc8);
    acc8 = fma(val11,val19,acc8);
    acc9 = fma(val8,val20,acc9);
    acc9 = fma(val9,val21,acc9);
    acc9 = fma(val10,val22,acc9);
    acc9 = fma(val11,val23,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val8,val28,acc11);
    acc11 = fma(val9,val29,acc11);
    acc11 = fma(val10,val30,acc11);
    acc11 = fma(val11,val31,acc11);
    acc12 = fma(val12,val16,acc12);
    acc12 = fma(val13,val17,acc12);
    acc12 = fma(val14,val18,acc12);
    acc12 = fma(val15,val19,acc12);
    acc13 = fma(val12,val20,acc13);
    acc13 = fma(val13,val21,acc13);
    acc13 = fma(val14,val22,acc13);
    acc13 = fma(val15,val23,acc13);
    acc14 = fma(val12,val24,acc14);
    acc14 = fma(val13,val25,acc14);
    acc14 = fma(val14,val26,acc14);
    acc14 = fma(val15,val27,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))] = acc0;
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))+(1)] = acc1;
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))+(2)] = acc2;
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))+(3)] = acc3;
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))+(40)] = acc4;
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))+(41)] = acc5;
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))+(42)] = acc6;
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))+(43)] = acc7;
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))+(80)] = acc8;
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))+(81)] = acc9;
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))+(82)] = acc10;
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))+(83)] = acc11;
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))+(120)] = acc12;
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))+(121)] = acc13;
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))+(122)] = acc14;
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))+(123)] = acc15;
}`;

const r_2_128_5_8_16_80_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 128 */
  let gidx2 = i32(gindex.x); /* 5 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (80); ridx0++) {
    var  val0 = f32(data1[((ridx0*(4))%(40))+((ridx0/(10))*(163840))+(gidx1*(1280))+(lidx3*(160))+(gidx0*(1310720))]);
    var  val1 = f32(data1[(((ridx0*(4))+(1))%(40))+((ridx0/(10))*(163840))+(gidx1*(1280))+(lidx3*(160))+(gidx0*(1310720))]);
    var  val2 = f32(data1[(((ridx0*(4))+(2))%(40))+((ridx0/(10))*(163840))+(gidx1*(1280))+(lidx3*(160))+(gidx0*(1310720))]);
    var  val3 = f32(data1[(((ridx0*(4))+(3))%(40))+((ridx0/(10))*(163840))+(gidx1*(1280))+(lidx3*(160))+(gidx0*(1310720))]);
    var  val4 = f32(data1[((ridx0*(4))%(40))+((ridx0/(10))*(163840))+(gidx1*(1280))+(lidx3*(160))+(gidx0*(1310720))+(40)]);
    var  val5 = f32(data1[(((ridx0*(4))+(1))%(40))+((ridx0/(10))*(163840))+(gidx1*(1280))+(lidx3*(160))+(gidx0*(1310720))+(40)]);
    var  val6 = f32(data1[(((ridx0*(4))+(2))%(40))+((ridx0/(10))*(163840))+(gidx1*(1280))+(lidx3*(160))+(gidx0*(1310720))+(40)]);
    var  val7 = f32(data1[(((ridx0*(4))+(3))%(40))+((ridx0/(10))*(163840))+(gidx1*(1280))+(lidx3*(160))+(gidx0*(1310720))+(40)]);
    var  val8 = f32(data1[((ridx0*(4))%(40))+((ridx0/(10))*(163840))+(gidx1*(1280))+(lidx3*(160))+(gidx0*(1310720))+(80)]);
    var  val9 = f32(data1[(((ridx0*(4))+(1))%(40))+((ridx0/(10))*(163840))+(gidx1*(1280))+(lidx3*(160))+(gidx0*(1310720))+(80)]);
    var  val10 = f32(data1[(((ridx0*(4))+(2))%(40))+((ridx0/(10))*(163840))+(gidx1*(1280))+(lidx3*(160))+(gidx0*(1310720))+(80)]);
    var  val11 = f32(data1[(((ridx0*(4))+(3))%(40))+((ridx0/(10))*(163840))+(gidx1*(1280))+(lidx3*(160))+(gidx0*(1310720))+(80)]);
    var  val12 = f32(data1[((ridx0*(4))%(40))+((ridx0/(10))*(163840))+(gidx1*(1280))+(lidx3*(160))+(gidx0*(1310720))+(120)]);
    var  val13 = f32(data1[(((ridx0*(4))+(1))%(40))+((ridx0/(10))*(163840))+(gidx1*(1280))+(lidx3*(160))+(gidx0*(1310720))+(120)]);
    var  val14 = f32(data1[(((ridx0*(4))+(2))%(40))+((ridx0/(10))*(163840))+(gidx1*(1280))+(lidx3*(160))+(gidx0*(1310720))+(120)]);
    var  val15 = f32(data1[(((ridx0*(4))+(3))%(40))+((ridx0/(10))*(163840))+(gidx1*(1280))+(lidx3*(160))+(gidx0*(1310720))+(120)]);
    var  val16 = f32(data2[(gidx2*(20480))+(lidx4*(1280))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx2*(20480))+(lidx4*(1280))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx2*(20480))+(lidx4*(1280))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx2*(20480))+(lidx4*(1280))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx2*(20480))+(lidx4*(1280))+(ridx0*(4))+(320)]);
    var  val21 = f32(data2[(gidx2*(20480))+(lidx4*(1280))+(ridx0*(4))+(321)]);
    var  val22 = f32(data2[(gidx2*(20480))+(lidx4*(1280))+(ridx0*(4))+(322)]);
    var  val23 = f32(data2[(gidx2*(20480))+(lidx4*(1280))+(ridx0*(4))+(323)]);
    var  val24 = f32(data2[(gidx2*(20480))+(lidx4*(1280))+(ridx0*(4))+(640)]);
    var  val25 = f32(data2[(gidx2*(20480))+(lidx4*(1280))+(ridx0*(4))+(641)]);
    var  val26 = f32(data2[(gidx2*(20480))+(lidx4*(1280))+(ridx0*(4))+(642)]);
    var  val27 = f32(data2[(gidx2*(20480))+(lidx4*(1280))+(ridx0*(4))+(643)]);
    var  val28 = f32(data2[(gidx2*(20480))+(lidx4*(1280))+(ridx0*(4))+(960)]);
    var  val29 = f32(data2[(gidx2*(20480))+(lidx4*(1280))+(ridx0*(4))+(961)]);
    var  val30 = f32(data2[(gidx2*(20480))+(lidx4*(1280))+(ridx0*(4))+(962)]);
    var  val31 = f32(data2[(gidx2*(20480))+(lidx4*(1280))+(ridx0*(4))+(963)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  var  val32 = f32(data3[(gidx2*(64))+(lidx4*(4))]);
  var  val33 = f32(data3[(gidx2*(64))+(lidx4*(4))+(1)]);
  var  val34 = f32(data3[(gidx2*(64))+(lidx4*(4))+(2)]);
  var  val35 = f32(data3[(gidx2*(64))+(lidx4*(4))+(3)]);
  var  val36 = f32(data4[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))]);
  var  val37 = f32(data4[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))+(320)]);
  var  val38 = f32(data4[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))+(640)]);
  var  val39 = f32(data4[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))+(960)]);
  var  val40 = f32(data4[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))+(1)]);
  var  val41 = f32(data4[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))+(321)]);
  var  val42 = f32(data4[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))+(641)]);
  var  val43 = f32(data4[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))+(961)]);
  var  val44 = f32(data4[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))+(2)]);
  var  val45 = f32(data4[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))+(322)]);
  var  val46 = f32(data4[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))+(642)]);
  var  val47 = f32(data4[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))+(962)]);
  var  val48 = f32(data4[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))+(3)]);
  var  val49 = f32(data4[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))+(323)]);
  var  val50 = f32(data4[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))+(643)]);
  var  val51 = f32(data4[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))+(963)]);
  data0[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))] = (acc0+val32+val36);
  data0[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))+(320)] = (acc1+val32+val37);
  data0[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))+(640)] = (acc2+val32+val38);
  data0[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))+(960)] = (acc3+val32+val39);
  data0[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))+(1)] = (acc4+val33+val40);
  data0[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))+(321)] = (acc5+val33+val41);
  data0[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))+(641)] = (acc6+val33+val42);
  data0[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))+(961)] = (acc7+val33+val43);
  data0[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))+(2)] = (acc8+val34+val44);
  data0[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))+(322)] = (acc9+val34+val45);
  data0[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))+(642)] = (acc10+val34+val46);
  data0[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))+(962)] = (acc11+val34+val47);
  data0[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))+(3)] = (acc12+val35+val48);
  data0[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))+(323)] = (acc13+val35+val49);
  data0[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))+(643)] = (acc14+val35+val50);
  data0[(gidx0*(1310720))+(gidx1*(10240))+(gidx2*(64))+(lidx3*(1280))+(lidx4*(4))+(963)] = (acc15+val35+val51);
}`;

const E_1848_32_2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 1848 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(32))+lidx1]);
  var  val1 = f32(data2[(gidx0*(32))+lidx1]);
  data0[(gidx0*(32))+lidx1] = val0;
  data0[(gidx0*(32))+lidx1+(59136)] = val1;
}`;

const r_77_5_2_16_192_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 77 */
  let gidx1 = i32(gindex.x); /* 5 */
  let lidx2 = i32(lindex.y); /* 2 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (192); ridx0++) {
    var  val0 = f32(data1[(gidx0*(1536))+(lidx2*(768))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(1536))+(lidx2*(768))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(1536))+(lidx2*(768))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(1536))+(lidx2*(768))+(ridx0*(4))+(3)]);
    var  val4 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))]);
    var  val5 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(1)]);
    var  val6 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(2)]);
    var  val7 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(3)]);
    var  val8 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(768)]);
    var  val9 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(769)]);
    var  val10 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(770)]);
    var  val11 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(771)]);
    var  val12 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(1536)]);
    var  val13 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(1537)]);
    var  val14 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(1538)]);
    var  val15 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(1539)]);
    var  val16 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(2304)]);
    var  val17 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(2305)]);
    var  val18 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(2306)]);
    var  val19 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(2307)]);
    acc0 = fma(val0,val4,acc0);
    acc0 = fma(val1,val5,acc0);
    acc0 = fma(val2,val6,acc0);
    acc0 = fma(val3,val7,acc0);
    acc1 = fma(val0,val8,acc1);
    acc1 = fma(val1,val9,acc1);
    acc1 = fma(val2,val10,acc1);
    acc1 = fma(val3,val11,acc1);
    acc2 = fma(val0,val12,acc2);
    acc2 = fma(val1,val13,acc2);
    acc2 = fma(val2,val14,acc2);
    acc2 = fma(val3,val15,acc2);
    acc3 = fma(val0,val16,acc3);
    acc3 = fma(val1,val17,acc3);
    acc3 = fma(val2,val18,acc3);
    acc3 = fma(val3,val19,acc3);
  }
  data0[(gidx0*(640))+(gidx1*(64))+(lidx2*(320))+(lidx3*(4))] = acc0;
  data0[(gidx0*(640))+(gidx1*(64))+(lidx2*(320))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(640))+(gidx1*(64))+(lidx2*(320))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(640))+(gidx1*(64))+(lidx2*(320))+(lidx3*(4))+(3)] = acc3;
}`;

const r_2_64_77_8_16_10_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 64 */
  let gidx2 = i32(gindex.x); /* 77 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (10); ridx0++) {
    var  val0 = f32(data1[(gidx0*(1310720))+(gidx1*(20480))+(lidx3*(40))+(lidx4*(1280))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(1310720))+(gidx1*(20480))+(lidx3*(40))+(lidx4*(1280))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(1310720))+(gidx1*(20480))+(lidx3*(40))+(lidx4*(1280))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(1310720))+(gidx1*(20480))+(lidx3*(40))+(lidx4*(1280))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(1310720))+(gidx1*(20480))+(lidx3*(40))+(lidx4*(1280))+(ridx0*(4))+(320)]);
    var  val5 = f32(data1[(gidx0*(1310720))+(gidx1*(20480))+(lidx3*(40))+(lidx4*(1280))+(ridx0*(4))+(321)]);
    var  val6 = f32(data1[(gidx0*(1310720))+(gidx1*(20480))+(lidx3*(40))+(lidx4*(1280))+(ridx0*(4))+(322)]);
    var  val7 = f32(data1[(gidx0*(1310720))+(gidx1*(20480))+(lidx3*(40))+(lidx4*(1280))+(ridx0*(4))+(323)]);
    var  val8 = f32(data1[(gidx0*(1310720))+(gidx1*(20480))+(lidx3*(40))+(lidx4*(1280))+(ridx0*(4))+(640)]);
    var  val9 = f32(data1[(gidx0*(1310720))+(gidx1*(20480))+(lidx3*(40))+(lidx4*(1280))+(ridx0*(4))+(641)]);
    var  val10 = f32(data1[(gidx0*(1310720))+(gidx1*(20480))+(lidx3*(40))+(lidx4*(1280))+(ridx0*(4))+(642)]);
    var  val11 = f32(data1[(gidx0*(1310720))+(gidx1*(20480))+(lidx3*(40))+(lidx4*(1280))+(ridx0*(4))+(643)]);
    var  val12 = f32(data1[(gidx0*(1310720))+(gidx1*(20480))+(lidx3*(40))+(lidx4*(1280))+(ridx0*(4))+(960)]);
    var  val13 = f32(data1[(gidx0*(1310720))+(gidx1*(20480))+(lidx3*(40))+(lidx4*(1280))+(ridx0*(4))+(961)]);
    var  val14 = f32(data1[(gidx0*(1310720))+(gidx1*(20480))+(lidx3*(40))+(lidx4*(1280))+(ridx0*(4))+(962)]);
    var  val15 = f32(data1[(gidx0*(1310720))+(gidx1*(20480))+(lidx3*(40))+(lidx4*(1280))+(ridx0*(4))+(963)]);
    var  val16 = f32(data2[(gidx0*(24640))+(gidx2*(320))+(lidx3*(40))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx0*(24640))+(gidx2*(320))+(lidx3*(40))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx0*(24640))+(gidx2*(320))+(lidx3*(40))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx0*(24640))+(gidx2*(320))+(lidx3*(40))+(ridx0*(4))+(3)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
  }
  data0[(gidx0*(2523136))+(gidx1*(4928))+gidx2+(lidx3*(315392))+(lidx4*(308))] = (acc0*(0.15811388300841897f));
  data0[(gidx0*(2523136))+(gidx1*(4928))+gidx2+(lidx3*(315392))+(lidx4*(308))+(77)] = (acc1*(0.15811388300841897f));
  data0[(gidx0*(2523136))+(gidx1*(4928))+gidx2+(lidx3*(315392))+(lidx4*(308))+(154)] = (acc2*(0.15811388300841897f));
  data0[(gidx0*(2523136))+(gidx1*(4928))+gidx2+(lidx3*(315392))+(lidx4*(308))+(231)] = (acc3*(0.15811388300841897f));
}`;

const r_2048_32_77 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 2048 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  acc0 = -0x1.fffffep+127f;
  for(var ridx0 = (0); ridx0 < (77); ridx0++) {
    var  val0 = f32(data1[(gidx0*(2464))+(lidx1*(77))+ridx0]);
    acc0 = max(val0,acc0);
  }
  data0[(gidx0*(32))+lidx1] = acc0;
}`;

const E_512_77_32_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 512 */
  let gidx1 = i32(gindex.x); /* 77 */
  let lidx2 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(9856))+gidx1+(lidx2*(308))]);
  var  val1 = f32(data1[(gidx0*(9856))+gidx1+(lidx2*(308))+(77)]);
  var  val2 = f32(data1[(gidx0*(9856))+gidx1+(lidx2*(308))+(154)]);
  var  val3 = f32(data1[(gidx0*(9856))+gidx1+(lidx2*(308))+(231)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx2*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx2*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx2*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx2*(4))+(3)]);
  data0[(gidx0*(9856))+gidx1+(lidx2*(308))] = exp2(((val0-val4)*(1.4426950408889634f)));
  data0[(gidx0*(9856))+gidx1+(lidx2*(308))+(77)] = exp2(((val1-val5)*(1.4426950408889634f)));
  data0[(gidx0*(9856))+gidx1+(lidx2*(308))+(154)] = exp2(((val2-val6)*(1.4426950408889634f)));
  data0[(gidx0*(9856))+gidx1+(lidx2*(308))+(231)] = exp2(((val3-val7)*(1.4426950408889634f)));
}`;

const r_2048_32_77n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 2048 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (77); ridx0++) {
    var  val0 = f32(data1[(gidx0*(2464))+(lidx1*(77))+ridx0]);
    acc0 = (val0+acc0);
  }
  data0[(gidx0*(32))+lidx1] = acc0;
}`;

const E_2048_77_32 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2048 */
  let gidx1 = i32(gindex.x); /* 77 */
  let lidx2 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(2464))+gidx1+(lidx2*(77))]);
  var  val1 = f32(data2[(gidx0*(32))+lidx2]);
  data0[(gidx0*(2464))+gidx1+(lidx2*(77))] = (val0/val1);
}`;

const r_2_2_64_5_4_16_2_77_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(2,16,4) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 2 */
  let gidx2 = i32(gindex.x); /* 320 */
  let lidx4 = i32(lindex.z); /* 4 */
  let lidx5 = i32(lindex.y); /* 16 */
  let lidx6 = i32(lindex.x); /* 2 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (77); ridx0++) {
    var  val0 = f32(data1[(gidx0*(2523136))+(gidx1*(1261568))+((gidx2/(5))*(4928))+(lidx4*(315392))+(lidx5*(308))+ridx0]);
    var  val1 = f32(data1[(gidx0*(2523136))+(gidx1*(1261568))+((gidx2/(5))*(4928))+(lidx4*(315392))+(lidx5*(308))+ridx0+(77)]);
    var  val2 = f32(data1[(gidx0*(2523136))+(gidx1*(1261568))+((gidx2/(5))*(4928))+(lidx4*(315392))+(lidx5*(308))+ridx0+(154)]);
    var  val3 = f32(data1[(gidx0*(2523136))+(gidx1*(1261568))+((gidx2/(5))*(4928))+(lidx4*(315392))+(lidx5*(308))+ridx0+(231)]);
    var  val4 = f32(data2[(gidx0*(24640))+(gidx1*(160))+((gidx2%(5))*(8))+(lidx4*(40))+(lidx6*(4))+(ridx0*(320))]);
    var  val5 = f32(data2[(gidx0*(24640))+(gidx1*(160))+((gidx2%(5))*(8))+(lidx4*(40))+(lidx6*(4))+(ridx0*(320))+(1)]);
    var  val6 = f32(data2[(gidx0*(24640))+(gidx1*(160))+((gidx2%(5))*(8))+(lidx4*(40))+(lidx6*(4))+(ridx0*(320))+(2)]);
    var  val7 = f32(data2[(gidx0*(24640))+(gidx1*(160))+((gidx2%(5))*(8))+(lidx4*(40))+(lidx6*(4))+(ridx0*(320))+(3)]);
    acc0 = fma(val0,val4,acc0);
    acc1 = fma(val0,val5,acc1);
    acc2 = fma(val0,val6,acc2);
    acc3 = fma(val0,val7,acc3);
    acc4 = fma(val1,val4,acc4);
    acc5 = fma(val1,val5,acc5);
    acc6 = fma(val1,val6,acc6);
    acc7 = fma(val1,val7,acc7);
    acc8 = fma(val2,val4,acc8);
    acc9 = fma(val2,val5,acc9);
    acc10 = fma(val2,val6,acc10);
    acc11 = fma(val2,val7,acc11);
    acc12 = fma(val3,val4,acc12);
    acc13 = fma(val3,val5,acc13);
    acc14 = fma(val3,val6,acc14);
    acc15 = fma(val3,val7,acc15);
  }
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))] = acc0;
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))+(1)] = acc1;
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))+(2)] = acc2;
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))+(3)] = acc3;
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))+(40)] = acc4;
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))+(41)] = acc5;
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))+(42)] = acc6;
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))+(43)] = acc7;
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))+(80)] = acc8;
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))+(81)] = acc9;
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))+(82)] = acc10;
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))+(83)] = acc11;
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))+(120)] = acc12;
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))+(121)] = acc13;
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))+(122)] = acc14;
  data0[(gidx0*(1310720))+(gidx1*(655360))+((gidx2/(5))*(2560))+((gidx2%(5))*(8))+(lidx4*(163840))+(lidx5*(160))+(lidx6*(4))+(123)] = acc15;
}`;

const r_256_40_8_16_80_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 256 */
  let gidx1 = i32(gindex.x); /* 40 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (80); ridx0++) {
    var  val0 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))+(320)]);
    var  val5 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))+(321)]);
    var  val6 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))+(322)]);
    var  val7 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))+(323)]);
    var  val8 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))+(640)]);
    var  val9 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))+(641)]);
    var  val10 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))+(642)]);
    var  val11 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))+(643)]);
    var  val12 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))+(960)]);
    var  val13 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))+(961)]);
    var  val14 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))+(962)]);
    var  val15 = f32(data1[(gidx0*(10240))+(lidx2*(1280))+(ridx0*(4))+(963)]);
    var  val16 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))+(320)]);
    var  val21 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))+(321)]);
    var  val22 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))+(322)]);
    var  val23 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))+(323)]);
    var  val24 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))+(640)]);
    var  val25 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))+(641)]);
    var  val26 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))+(642)]);
    var  val27 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))+(643)]);
    var  val28 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))+(960)]);
    var  val29 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))+(961)]);
    var  val30 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))+(962)]);
    var  val31 = f32(data2[(gidx1*(20480))+(lidx3*(1280))+(ridx0*(4))+(963)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val0,val20,acc1);
    acc1 = fma(val1,val21,acc1);
    acc1 = fma(val2,val22,acc1);
    acc1 = fma(val3,val23,acc1);
    acc2 = fma(val0,val24,acc2);
    acc2 = fma(val1,val25,acc2);
    acc2 = fma(val2,val26,acc2);
    acc2 = fma(val3,val27,acc2);
    acc3 = fma(val0,val28,acc3);
    acc3 = fma(val1,val29,acc3);
    acc3 = fma(val2,val30,acc3);
    acc3 = fma(val3,val31,acc3);
    acc4 = fma(val4,val16,acc4);
    acc4 = fma(val5,val17,acc4);
    acc4 = fma(val6,val18,acc4);
    acc4 = fma(val7,val19,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val4,val24,acc6);
    acc6 = fma(val5,val25,acc6);
    acc6 = fma(val6,val26,acc6);
    acc6 = fma(val7,val27,acc6);
    acc7 = fma(val4,val28,acc7);
    acc7 = fma(val5,val29,acc7);
    acc7 = fma(val6,val30,acc7);
    acc7 = fma(val7,val31,acc7);
    acc8 = fma(val8,val16,acc8);
    acc8 = fma(val9,val17,acc8);
    acc8 = fma(val10,val18,acc8);
    acc8 = fma(val11,val19,acc8);
    acc9 = fma(val8,val20,acc9);
    acc9 = fma(val9,val21,acc9);
    acc9 = fma(val10,val22,acc9);
    acc9 = fma(val11,val23,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val8,val28,acc11);
    acc11 = fma(val9,val29,acc11);
    acc11 = fma(val10,val30,acc11);
    acc11 = fma(val11,val31,acc11);
    acc12 = fma(val12,val16,acc12);
    acc12 = fma(val13,val17,acc12);
    acc12 = fma(val14,val18,acc12);
    acc12 = fma(val15,val19,acc12);
    acc13 = fma(val12,val20,acc13);
    acc13 = fma(val13,val21,acc13);
    acc13 = fma(val14,val22,acc13);
    acc13 = fma(val15,val23,acc13);
    acc14 = fma(val12,val24,acc14);
    acc14 = fma(val13,val25,acc14);
    acc14 = fma(val14,val26,acc14);
    acc14 = fma(val15,val27,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(81920))+(gidx1*(64))+(lidx2*(10240))+(lidx3*(4))] = acc0;
  data0[(gidx0*(81920))+(gidx1*(64))+(lidx2*(10240))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(81920))+(gidx1*(64))+(lidx2*(10240))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(81920))+(gidx1*(64))+(lidx2*(10240))+(lidx3*(4))+(3)] = acc3;
  data0[(gidx0*(81920))+(gidx1*(64))+(lidx2*(10240))+(lidx3*(4))+(2560)] = acc4;
  data0[(gidx0*(81920))+(gidx1*(64))+(lidx2*(10240))+(lidx3*(4))+(2561)] = acc5;
  data0[(gidx0*(81920))+(gidx1*(64))+(lidx2*(10240))+(lidx3*(4))+(2562)] = acc6;
  data0[(gidx0*(81920))+(gidx1*(64))+(lidx2*(10240))+(lidx3*(4))+(2563)] = acc7;
  data0[(gidx0*(81920))+(gidx1*(64))+(lidx2*(10240))+(lidx3*(4))+(5120)] = acc8;
  data0[(gidx0*(81920))+(gidx1*(64))+(lidx2*(10240))+(lidx3*(4))+(5121)] = acc9;
  data0[(gidx0*(81920))+(gidx1*(64))+(lidx2*(10240))+(lidx3*(4))+(5122)] = acc10;
  data0[(gidx0*(81920))+(gidx1*(64))+(lidx2*(10240))+(lidx3*(4))+(5123)] = acc11;
  data0[(gidx0*(81920))+(gidx1*(64))+(lidx2*(10240))+(lidx3*(4))+(7680)] = acc12;
  data0[(gidx0*(81920))+(gidx1*(64))+(lidx2*(10240))+(lidx3*(4))+(7681)] = acc13;
  data0[(gidx0*(81920))+(gidx1*(64))+(lidx2*(10240))+(lidx3*(4))+(7682)] = acc14;
  data0[(gidx0*(81920))+(gidx1*(64))+(lidx2*(10240))+(lidx3*(4))+(7683)] = acc15;
}`;

const E_256_80_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 256 */
  let gidx1 = i32(gindex.x); /* 80 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(81920))+(gidx1*(16))+(lidx2*(10240))+lidx3+(1280)]);
  var  val1 = f32(data1[(gidx0*(81920))+(gidx1*(16))+(lidx2*(10240))+lidx3+(3840)]);
  var  val2 = f32(data1[(gidx0*(81920))+(gidx1*(16))+(lidx2*(10240))+lidx3+(6400)]);
  var  val3 = f32(data1[(gidx0*(81920))+(gidx1*(16))+(lidx2*(10240))+lidx3+(8960)]);
  var  val4 = f32(data2[(gidx1*(16))+lidx3+(1280)]);
  data0[(gidx0*(40960))+(gidx1*(16))+(lidx2*(5120))+lidx3] = ((0.5f)*(val0+val4));
  data0[(gidx0*(40960))+(gidx1*(16))+(lidx2*(5120))+lidx3+(1280)] = ((0.5f)*(val1+val4));
  data0[(gidx0*(40960))+(gidx1*(16))+(lidx2*(5120))+lidx3+(2560)] = ((0.5f)*(val2+val4));
  data0[(gidx0*(40960))+(gidx1*(16))+(lidx2*(5120))+lidx3+(3840)] = ((0.5f)*(val3+val4));
}`;

const E_256_80_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 256 */
  let gidx1 = i32(gindex.x); /* 80 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(81920))+(gidx1*(16))+(lidx2*(10240))+lidx3+(1280)]);
  var  val1 = f32(data1[(gidx0*(81920))+(gidx1*(16))+(lidx2*(10240))+lidx3+(3840)]);
  var  val2 = f32(data1[(gidx0*(81920))+(gidx1*(16))+(lidx2*(10240))+lidx3+(6400)]);
  var  val3 = f32(data1[(gidx0*(81920))+(gidx1*(16))+(lidx2*(10240))+lidx3+(8960)]);
  var  val4 = f32(data2[(gidx1*(16))+lidx3+(1280)]);
  var  alu0 = (val0+val4);
  var  alu1 = (val1+val4);
  var  alu2 = (val2+val4);
  var  alu3 = (val3+val4);
  data0[(gidx0*(40960))+(gidx1*(16))+(lidx2*(5120))+lidx3] = ((1.0f)+(((2.0f)*((1.0f)/((1.0f)+exp2(((2.0f)*(alu0*(0.7978845608f)*((1.0f)+((0.044715f)*alu0*alu0)))*((-1.4426950408889634f)))))))-(1.0f)));
  data0[(gidx0*(40960))+(gidx1*(16))+(lidx2*(5120))+lidx3+(1280)] = ((1.0f)+(((2.0f)*((1.0f)/((1.0f)+exp2(((2.0f)*(alu1*(0.7978845608f)*((1.0f)+((0.044715f)*alu1*alu1)))*((-1.4426950408889634f)))))))-(1.0f)));
  data0[(gidx0*(40960))+(gidx1*(16))+(lidx2*(5120))+lidx3+(2560)] = ((1.0f)+(((2.0f)*((1.0f)/((1.0f)+exp2(((2.0f)*(alu2*(0.7978845608f)*((1.0f)+((0.044715f)*alu2*alu2)))*((-1.4426950408889634f)))))))-(1.0f)));
  data0[(gidx0*(40960))+(gidx1*(16))+(lidx2*(5120))+lidx3+(3840)] = ((1.0f)+(((2.0f)*((1.0f)/((1.0f)+exp2(((2.0f)*(alu3*(0.7978845608f)*((1.0f)+((0.044715f)*alu3*alu3)))*((-1.4426950408889634f)))))))-(1.0f)));
}`;

const E_64_320_32_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(4,32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 64 */
  let gidx1 = i32(gindex.x); /* 320 */
  let lidx2 = i32(lindex.y); /* 32 */
  let lidx3 = i32(lindex.x); /* 4 */
  var  val0 = f32(data1[(gidx0*(327680))+(gidx1*(4))+(lidx2*(10240))+lidx3]);
  var  val1 = f32(data1[(gidx0*(327680))+(gidx1*(4))+(lidx2*(10240))+lidx3+(2560)]);
  var  val2 = f32(data1[(gidx0*(327680))+(gidx1*(4))+(lidx2*(10240))+lidx3+(5120)]);
  var  val3 = f32(data1[(gidx0*(327680))+(gidx1*(4))+(lidx2*(10240))+lidx3+(7680)]);
  var  val4 = f32(data2[(gidx1*(4))+lidx3]);
  var  val5 = f32(data3[(gidx0*(163840))+(gidx1*(4))+(lidx2*(5120))+lidx3]);
  var  val6 = f32(data3[(gidx0*(163840))+(gidx1*(4))+(lidx2*(5120))+lidx3+(1280)]);
  var  val7 = f32(data3[(gidx0*(163840))+(gidx1*(4))+(lidx2*(5120))+lidx3+(2560)]);
  var  val8 = f32(data3[(gidx0*(163840))+(gidx1*(4))+(lidx2*(5120))+lidx3+(3840)]);
  var  val9 = f32(data4[(gidx0*(163840))+(gidx1*(4))+(lidx2*(5120))+lidx3]);
  var  val10 = f32(data4[(gidx0*(163840))+(gidx1*(4))+(lidx2*(5120))+lidx3+(1280)]);
  var  val11 = f32(data4[(gidx0*(163840))+(gidx1*(4))+(lidx2*(5120))+lidx3+(2560)]);
  var  val12 = f32(data4[(gidx0*(163840))+(gidx1*(4))+(lidx2*(5120))+lidx3+(3840)]);
  data0[(gidx0*(163840))+(gidx1*(4))+(lidx2*(5120))+lidx3] = ((val0+val4)*(val5*val9));
  data0[(gidx0*(163840))+(gidx1*(4))+(lidx2*(5120))+lidx3+(1280)] = ((val1+val4)*(val6*val10));
  data0[(gidx0*(163840))+(gidx1*(4))+(lidx2*(5120))+lidx3+(2560)] = ((val2+val4)*(val7*val11));
  data0[(gidx0*(163840))+(gidx1*(4))+(lidx2*(5120))+lidx3+(3840)] = ((val3+val4)*(val8*val12));
}`;

const r_256_5_8_16_320_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 256 */
  let gidx1 = i32(gindex.x); /* 5 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (320); ridx0++) {
    var  val0 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(1280)]);
    var  val5 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(1281)]);
    var  val6 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(1282)]);
    var  val7 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(1283)]);
    var  val8 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(2560)]);
    var  val9 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(2561)]);
    var  val10 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(2562)]);
    var  val11 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(2563)]);
    var  val12 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(3840)]);
    var  val13 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(3841)]);
    var  val14 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(3842)]);
    var  val15 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(3843)]);
    var  val16 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(1280)]);
    var  val21 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(1281)]);
    var  val22 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(1282)]);
    var  val23 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(1283)]);
    var  val24 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(2560)]);
    var  val25 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(2561)]);
    var  val26 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(2562)]);
    var  val27 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(2563)]);
    var  val28 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(3840)]);
    var  val29 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(3841)]);
    var  val30 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(3842)]);
    var  val31 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(3843)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val0,val20,acc1);
    acc1 = fma(val1,val21,acc1);
    acc1 = fma(val2,val22,acc1);
    acc1 = fma(val3,val23,acc1);
    acc2 = fma(val0,val24,acc2);
    acc2 = fma(val1,val25,acc2);
    acc2 = fma(val2,val26,acc2);
    acc2 = fma(val3,val27,acc2);
    acc3 = fma(val0,val28,acc3);
    acc3 = fma(val1,val29,acc3);
    acc3 = fma(val2,val30,acc3);
    acc3 = fma(val3,val31,acc3);
    acc4 = fma(val4,val16,acc4);
    acc4 = fma(val5,val17,acc4);
    acc4 = fma(val6,val18,acc4);
    acc4 = fma(val7,val19,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val4,val24,acc6);
    acc6 = fma(val5,val25,acc6);
    acc6 = fma(val6,val26,acc6);
    acc6 = fma(val7,val27,acc6);
    acc7 = fma(val4,val28,acc7);
    acc7 = fma(val5,val29,acc7);
    acc7 = fma(val6,val30,acc7);
    acc7 = fma(val7,val31,acc7);
    acc8 = fma(val8,val16,acc8);
    acc8 = fma(val9,val17,acc8);
    acc8 = fma(val10,val18,acc8);
    acc8 = fma(val11,val19,acc8);
    acc9 = fma(val8,val20,acc9);
    acc9 = fma(val9,val21,acc9);
    acc9 = fma(val10,val22,acc9);
    acc9 = fma(val11,val23,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val8,val28,acc11);
    acc11 = fma(val9,val29,acc11);
    acc11 = fma(val10,val30,acc11);
    acc11 = fma(val11,val31,acc11);
    acc12 = fma(val12,val16,acc12);
    acc12 = fma(val13,val17,acc12);
    acc12 = fma(val14,val18,acc12);
    acc12 = fma(val15,val19,acc12);
    acc13 = fma(val12,val20,acc13);
    acc13 = fma(val13,val21,acc13);
    acc13 = fma(val14,val22,acc13);
    acc13 = fma(val15,val23,acc13);
    acc14 = fma(val12,val24,acc14);
    acc14 = fma(val13,val25,acc14);
    acc14 = fma(val14,val26,acc14);
    acc14 = fma(val15,val27,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))] = acc0;
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(3)] = acc3;
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(320)] = acc4;
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(321)] = acc5;
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(322)] = acc6;
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(323)] = acc7;
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(640)] = acc8;
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(641)] = acc9;
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(642)] = acc10;
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(643)] = acc11;
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(960)] = acc12;
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(961)] = acc13;
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(962)] = acc14;
  data0[(gidx0*(10240))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(963)] = acc15;
}`;

const E_80_64_2_4_16_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,4,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 80 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 4 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(4))+(gidx1*(20480))+(lidx2*(1310720))+lidx3+(lidx4*(1280))]);
  var  val1 = f32(data1[(gidx0*(4))+(gidx1*(20480))+(lidx2*(1310720))+lidx3+(lidx4*(1280))+(320)]);
  var  val2 = f32(data1[(gidx0*(4))+(gidx1*(20480))+(lidx2*(1310720))+lidx3+(lidx4*(1280))+(640)]);
  var  val3 = f32(data1[(gidx0*(4))+(gidx1*(20480))+(lidx2*(1310720))+lidx3+(lidx4*(1280))+(960)]);
  var  val4 = f32(data2[(gidx0*(4))+lidx3]);
  var  val5 = f32(data3[(gidx0*(4))+(gidx1*(20480))+(lidx2*(1310720))+lidx3+(lidx4*(1280))]);
  var  val6 = f32(data3[(gidx0*(4))+(gidx1*(20480))+(lidx2*(1310720))+lidx3+(lidx4*(1280))+(320)]);
  var  val7 = f32(data3[(gidx0*(4))+(gidx1*(20480))+(lidx2*(1310720))+lidx3+(lidx4*(1280))+(640)]);
  var  val8 = f32(data3[(gidx0*(4))+(gidx1*(20480))+(lidx2*(1310720))+lidx3+(lidx4*(1280))+(960)]);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))] = (val0+val4+val5);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(1)] = (val1+val4+val6);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(2)] = (val2+val4+val7);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(3)] = (val3+val4+val8);
}`;

const E_80_64_2_4_16_4n3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,4,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 80 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 4 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(4))+lidx3]);
  var  val5 = f32(data3[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))]);
  var  val6 = f32(data3[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(1)]);
  var  val7 = f32(data3[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(2)]);
  var  val8 = f32(data3[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(3)]);
  var  val9 = f32(data4[(gidx0*(4))+lidx3]);
  var  val10 = f32(data5[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))]);
  var  val11 = f32(data5[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(1)]);
  var  val12 = f32(data5[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(2)]);
  var  val13 = f32(data5[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(3)]);
  var  val14 = f32(data6[(gidx0*(4))+lidx3]);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))] = (val0+val4+(val5+val9+(val10+val14)));
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(1)] = (val1+val4+(val6+val9+(val11+val14)));
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(2)] = (val2+val4+(val7+val9+(val12+val14)));
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(3)] = (val3+val4+(val8+val9+(val13+val14)));
}`;

const E_2_4_640_8_16_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 4 */
  let gidx2 = i32(gindex.x); /* 640 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(gidx1*(80))+(lidx3*(10))+(gidx2/(64))]);
  var  val5 = f32(data3[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))]);
  var  val6 = f32(data3[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))+(1)]);
  var  val7 = f32(data3[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))+(2)]);
  var  val8 = f32(data3[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))+(3)]);
  var  val9 = f32(data4[(gidx1*(80))+(lidx3*(10))+(gidx2/(64))]);
  var  val10 = f32(data5[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))]);
  var  val11 = f32(data5[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))+(1)]);
  var  val12 = f32(data5[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))+(2)]);
  var  val13 = f32(data5[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))+(3)]);
  var  val14 = f32(data6[(gidx1*(80))+(lidx3*(10))+(gidx2/(64))]);
  data0[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))] = (val0+val4+(val5+val9+(val10+val14)));
  data0[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))+(1)] = (val1+val4+(val6+val9+(val11+val14)));
  data0[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))+(2)] = (val2+val4+(val7+val9+(val12+val14)));
  data0[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(64))+(lidx3*(40960))+(lidx4*(4))+(3)] = (val3+val4+(val8+val9+(val13+val14)));
}`;

const r_2_4_10_8_16_64_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 4 */
  let gidx2 = i32(gindex.x); /* 10 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(4096))+(lidx3*(40960))+(lidx4*(256))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(4096))+(lidx3*(40960))+(lidx4*(256))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(4096))+(lidx3*(40960))+(lidx4*(256))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(4096))+(lidx3*(40960))+(lidx4*(256))+(ridx0*(4))+(3)]);
    var  val4 = f32(data2[(gidx1*(80))+gidx2+(lidx3*(10))]);
    var  val5 = f32(data3[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(4096))+(lidx3*(40960))+(lidx4*(256))+(ridx0*(4))]);
    var  val6 = f32(data3[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(4096))+(lidx3*(40960))+(lidx4*(256))+(ridx0*(4))+(1)]);
    var  val7 = f32(data3[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(4096))+(lidx3*(40960))+(lidx4*(256))+(ridx0*(4))+(2)]);
    var  val8 = f32(data3[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(4096))+(lidx3*(40960))+(lidx4*(256))+(ridx0*(4))+(3)]);
    acc0 = (val0+val4+val5+acc0);
    acc0 = (val1+val4+val6+acc0);
    acc0 = (val2+val4+val7+acc0);
    acc0 = (val3+val4+val8+acc0);
  }
  data0[(gidx0*(5120))+(gidx1*(1280))+(gidx2*(16))+(lidx3*(160))+lidx4] = acc0;
}`;

const r_4_5_16_8_64_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 5 */
  let lidx2 = i32(lindex.y); /* 16 */
  let lidx3 = i32(lindex.x); /* 8 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(655360))+(gidx1*(8192))+(lidx2*(40960))+(lidx3*(1024))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(655360))+(gidx1*(8192))+(lidx2*(40960))+(lidx3*(1024))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(655360))+(gidx1*(8192))+(lidx2*(40960))+(lidx3*(1024))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(655360))+(gidx1*(8192))+(lidx2*(40960))+(lidx3*(1024))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(655360))+(gidx1*(8192))+(lidx2*(40960))+(lidx3*(1024))+(ridx0*(4))+(256)]);
    var  val5 = f32(data1[(gidx0*(655360))+(gidx1*(8192))+(lidx2*(40960))+(lidx3*(1024))+(ridx0*(4))+(257)]);
    var  val6 = f32(data1[(gidx0*(655360))+(gidx1*(8192))+(lidx2*(40960))+(lidx3*(1024))+(ridx0*(4))+(258)]);
    var  val7 = f32(data1[(gidx0*(655360))+(gidx1*(8192))+(lidx2*(40960))+(lidx3*(1024))+(ridx0*(4))+(259)]);
    var  val8 = f32(data1[(gidx0*(655360))+(gidx1*(8192))+(lidx2*(40960))+(lidx3*(1024))+(ridx0*(4))+(512)]);
    var  val9 = f32(data1[(gidx0*(655360))+(gidx1*(8192))+(lidx2*(40960))+(lidx3*(1024))+(ridx0*(4))+(513)]);
    var  val10 = f32(data1[(gidx0*(655360))+(gidx1*(8192))+(lidx2*(40960))+(lidx3*(1024))+(ridx0*(4))+(514)]);
    var  val11 = f32(data1[(gidx0*(655360))+(gidx1*(8192))+(lidx2*(40960))+(lidx3*(1024))+(ridx0*(4))+(515)]);
    var  val12 = f32(data1[(gidx0*(655360))+(gidx1*(8192))+(lidx2*(40960))+(lidx3*(1024))+(ridx0*(4))+(768)]);
    var  val13 = f32(data1[(gidx0*(655360))+(gidx1*(8192))+(lidx2*(40960))+(lidx3*(1024))+(ridx0*(4))+(769)]);
    var  val14 = f32(data1[(gidx0*(655360))+(gidx1*(8192))+(lidx2*(40960))+(lidx3*(1024))+(ridx0*(4))+(770)]);
    var  val15 = f32(data1[(gidx0*(655360))+(gidx1*(8192))+(lidx2*(40960))+(lidx3*(1024))+(ridx0*(4))+(771)]);
    var  val16 = f32(data2[(gidx0*(16))+lidx2]);
    var  alu0 = (val0-val16);
    var  alu1 = (val1-val16);
    var  alu2 = (val2-val16);
    var  alu3 = (val3-val16);
    var  alu4 = (val4-val16);
    var  alu5 = (val5-val16);
    var  alu6 = (val6-val16);
    var  alu7 = (val7-val16);
    var  alu8 = (val8-val16);
    var  alu9 = (val9-val16);
    var  alu10 = (val10-val16);
    var  alu11 = (val11-val16);
    var  alu12 = (val12-val16);
    var  alu13 = (val13-val16);
    var  alu14 = (val14-val16);
    var  alu15 = (val15-val16);
    acc0 = fma(alu0,alu0,acc0);
    acc0 = fma(alu1,alu1,acc0);
    acc0 = fma(alu2,alu2,acc0);
    acc0 = fma(alu3,alu3,acc0);
    acc1 = fma(alu4,alu4,acc1);
    acc1 = fma(alu5,alu5,acc1);
    acc1 = fma(alu6,alu6,acc1);
    acc1 = fma(alu7,alu7,acc1);
    acc2 = fma(alu8,alu8,acc2);
    acc2 = fma(alu9,alu9,acc2);
    acc2 = fma(alu10,alu10,acc2);
    acc2 = fma(alu11,alu11,acc2);
    acc3 = fma(alu12,alu12,acc3);
    acc3 = fma(alu13,alu13,acc3);
    acc3 = fma(alu14,alu14,acc3);
    acc3 = fma(alu15,alu15,acc3);
  }
  data0[(gidx0*(2560))+(gidx1*(32))+(lidx2*(160))+(lidx3*(4))] = acc0;
  data0[(gidx0*(2560))+(gidx1*(32))+(lidx2*(160))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(2560))+(gidx1*(32))+(lidx2*(160))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(2560))+(gidx1*(32))+(lidx2*(160))+(lidx3*(4))+(3)] = acc3;
}`;

const E_80_64_2_4_16_4n4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,4,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 80 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 4 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(lidx2*(32))+(((gidx0*(4))+lidx3)/(10))]);
  var  val5 = f32(data3[(lidx2*(32))+(((gidx0*(4))+lidx3)/(10))]);
  var  val6 = f32(data4[(gidx0*(4))+lidx3]);
  var  val7 = f32(data5[(gidx0*(4))+lidx3]);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))] = (((val0-val4)*val5*val6)+val7);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(1)] = (((val1-val4)*val5*val6)+val7);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(2)] = (((val2-val4)*val5*val6)+val7);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(3)] = (((val3-val4)*val5*val6)+val7);
}`;

const E_2_40_64_8_16_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 40 */
  let gidx2 = i32(gindex.x); /* 64 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(1310720))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(1310720))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(1310720))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(1310720))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(32))+(((gidx1*(8))+lidx3)/(10))]);
  var  val5 = f32(data3[(gidx0*(32))+(((gidx1*(8))+lidx3)/(10))]);
  var  val6 = f32(data4[(gidx1*(8))+lidx3]);
  var  val7 = f32(data5[(gidx1*(8))+lidx3]);
  data0[(gidx0*(1310720))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))] = ((1.0f)/((1.0f)+exp2(((((val0-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(1310720))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)] = ((1.0f)/((1.0f)+exp2(((((val1-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(1310720))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)] = ((1.0f)/((1.0f)+exp2(((((val2-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(1310720))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)] = ((1.0f)/((1.0f)+exp2(((((val3-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
}`;

const r_2_80_8_8_16_320_3_3_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 80 */
  let gidx2 = i32(gindex.x); /* 8 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (320); ridx0++) {
    var  alu0 = f32((lidx4*((-4)))<(0));
    var  alu1 = f32(((gidx2*((-8)))+(lidx3*((-1))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+((-65))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+((-1))]), bool(alu0));
    var  alu2 = f32(((gidx2*(8))+lidx3)<(63));
    var  val2 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+(63)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+((-64))]), bool(alu1));
    var  val4 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))]);
    var  val5 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+(64)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+((-63))]), bool(alu1));
    var  val7 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+(65)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+((-62))]), bool(alu1));
    var  val10 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+(66)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+((-61))]), bool(alu1));
    var  val13 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+(67)]), bool(alu2));
    var  alu3 = f32((lidx4*(4))<(60));
    var  val15 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+((-60))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(1310720))+(ridx0*(4096))+(68)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx1*(11520))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2880)]);
    var  val28 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2883)]);
    var  val29 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2886)]);
    var  val30 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2881)]);
    var  val31 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2884)]);
    var  val32 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2887)]);
    var  val33 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2882)]);
    var  val34 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2885)]);
    var  val35 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2888)]);
    var  val36 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5760)]);
    var  val37 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5763)]);
    var  val38 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5766)]);
    var  val39 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5761)]);
    var  val40 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5764)]);
    var  val41 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5767)]);
    var  val42 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5762)]);
    var  val43 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5765)]);
    var  val44 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5768)]);
    var  val45 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8640)]);
    var  val46 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8643)]);
    var  val47 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8646)]);
    var  val48 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8641)]);
    var  val49 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8644)]);
    var  val50 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8647)]);
    var  val51 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8642)]);
    var  val52 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8645)]);
    var  val53 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8648)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  var  val54 = f32(data3[gidx1*(4)]);
  var  val55 = f32(data3[(gidx1*(4))+(1)]);
  var  val56 = f32(data3[(gidx1*(4))+(2)]);
  var  val57 = f32(data3[(gidx1*(4))+(3)]);
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))] = (acc0+val54);
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(1)] = (acc1+val54);
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(2)] = (acc2+val54);
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(3)] = (acc3+val54);
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(4096)] = (acc4+val55);
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(4097)] = (acc5+val55);
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(4098)] = (acc6+val55);
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(4099)] = (acc7+val55);
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(8192)] = (acc8+val56);
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(8193)] = (acc9+val56);
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(8194)] = (acc10+val56);
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(8195)] = (acc11+val56);
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(12288)] = (acc12+val57);
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(12289)] = (acc13+val57);
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(12290)] = (acc14+val57);
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(12291)] = (acc15+val57);
}`;

const E_20480_32_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 20480 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx1*(4))+(3)]);
  data0[(gidx0*(128))+(lidx1*(4))] = (val0+val4);
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (val1+val5);
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (val2+val6);
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (val3+val7);
}`;

const E_80_64_2_4_16_4n5 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,4,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 80 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 4 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))]);
  var  val5 = f32(data2[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(3)]);
  var  val8 = f32(data3[(lidx2*(32))+(((gidx0*(4))+lidx3)/(10))]);
  var  val9 = f32(data4[(lidx2*(32))+(((gidx0*(4))+lidx3)/(10))]);
  var  val10 = f32(data5[(gidx0*(4))+lidx3]);
  var  val11 = f32(data6[(gidx0*(4))+lidx3]);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))] = ((((val0+val4)-val8)*val9*val10)+val11);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(1)] = ((((val1+val5)-val8)*val9*val10)+val11);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(2)] = ((((val2+val6)-val8)*val9*val10)+val11);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(4096))+(lidx4*(4))+(3)] = ((((val3+val7)-val8)*val9*val10)+val11);
}`;

const r_2_10_64_8_16_80_4_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 10 */
  let gidx2 = i32(gindex.x); /* 64 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (80); ridx0++) {
    var  val0 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))]);
    var  val1 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(4096)]);
    var  val2 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(8192)]);
    var  val3 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(12288)]);
    var  val4 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(1)]);
    var  val5 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(4097)]);
    var  val6 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(8193)]);
    var  val7 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(12289)]);
    var  val8 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(2)]);
    var  val9 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(4098)]);
    var  val10 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(8194)]);
    var  val11 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(12290)]);
    var  val12 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(3)]);
    var  val13 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(4099)]);
    var  val14 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(8195)]);
    var  val15 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(12291)]);
    var  val16 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(320)]);
    var  val21 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(321)]);
    var  val22 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(322)]);
    var  val23 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(323)]);
    var  val24 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(640)]);
    var  val25 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(641)]);
    var  val26 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(642)]);
    var  val27 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(643)]);
    var  val28 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(960)]);
    var  val29 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(961)]);
    var  val30 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(962)]);
    var  val31 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(963)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  var  val32 = f32(data3[(gidx1*(32))+(lidx3*(4))]);
  var  val33 = f32(data3[(gidx1*(32))+(lidx3*(4))+(1)]);
  var  val34 = f32(data3[(gidx1*(32))+(lidx3*(4))+(2)]);
  var  val35 = f32(data3[(gidx1*(32))+(lidx3*(4))+(3)]);
  var  val36 = f32(data4[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))]);
  var  val37 = f32(data4[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(1)]);
  var  val38 = f32(data4[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(2)]);
  var  val39 = f32(data4[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(3)]);
  var  val40 = f32(data4[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(4096)]);
  var  val41 = f32(data4[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(4097)]);
  var  val42 = f32(data4[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(4098)]);
  var  val43 = f32(data4[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(4099)]);
  var  val44 = f32(data4[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(8192)]);
  var  val45 = f32(data4[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(8193)]);
  var  val46 = f32(data4[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(8194)]);
  var  val47 = f32(data4[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(8195)]);
  var  val48 = f32(data4[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(12288)]);
  var  val49 = f32(data4[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(12289)]);
  var  val50 = f32(data4[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(12290)]);
  var  val51 = f32(data4[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(12291)]);
  var  val52 = f32(data5[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))]);
  var  val53 = f32(data5[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(1)]);
  var  val54 = f32(data5[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(2)]);
  var  val55 = f32(data5[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(3)]);
  var  val56 = f32(data5[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(4096)]);
  var  val57 = f32(data5[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(4097)]);
  var  val58 = f32(data5[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(4098)]);
  var  val59 = f32(data5[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(4099)]);
  var  val60 = f32(data5[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(8192)]);
  var  val61 = f32(data5[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(8193)]);
  var  val62 = f32(data5[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(8194)]);
  var  val63 = f32(data5[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(8195)]);
  var  val64 = f32(data5[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(12288)]);
  var  val65 = f32(data5[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(12289)]);
  var  val66 = f32(data5[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(12290)]);
  var  val67 = f32(data5[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(12291)]);
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))] = (acc0+val32+(val36+val52));
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(1)] = (acc1+val32+(val37+val53));
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(2)] = (acc2+val32+(val38+val54));
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(3)] = (acc3+val32+(val39+val55));
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(4096)] = (acc4+val33+(val40+val56));
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(4097)] = (acc5+val33+(val41+val57));
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(4098)] = (acc6+val33+(val42+val58));
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(4099)] = (acc7+val33+(val43+val59));
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(8192)] = (acc8+val34+(val44+val60));
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(8193)] = (acc9+val34+(val45+val61));
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(8194)] = (acc10+val34+(val46+val62));
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(8195)] = (acc11+val34+(val47+val63));
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(12288)] = (acc12+val35+(val48+val64));
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(12289)] = (acc13+val35+(val49+val65));
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(12290)] = (acc14+val35+(val50+val66));
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(12291)] = (acc15+val35+(val51+val67));
}`;

const r_2_80_2_16_8_320_3_3_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 80 */
  let gidx2 = i32(gindex.x); /* 2 */
  let lidx3 = i32(lindex.y); /* 16 */
  let lidx4 = i32(lindex.x); /* 8 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (320); ridx0++) {
    var  alu0 = f32((lidx4*((-8)))<(0));
    var  alu1 = f32(((gidx2*((-32)))+(lidx3*((-2))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(gidx2*(2048))+(lidx3*(128))+(gidx0*(1310720))+(ridx0*(4096))+((-65))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(gidx2*(2048))+(lidx3*(128))+(gidx0*(1310720))+(ridx0*(4096))+((-1))]), bool(alu0));
    var  val2 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(gidx2*(2048))+(lidx3*(128))+(gidx0*(1310720))+(ridx0*(4096))+(63)]), bool(alu0));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(gidx2*(2048))+(lidx3*(128))+(gidx0*(1310720))+(ridx0*(4096))+((-64))]), bool(alu1));
    var  val4 = f32(data1[(lidx4*(8))+(gidx2*(2048))+(lidx3*(128))+(gidx0*(1310720))+(ridx0*(4096))]);
    var  val5 = f32(data1[(lidx4*(8))+(gidx2*(2048))+(lidx3*(128))+(gidx0*(1310720))+(ridx0*(4096))+(64)]);
    var  val6 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(gidx2*(2048))+(lidx3*(128))+(gidx0*(1310720))+(ridx0*(4096))+((-63))]), bool(alu1));
    var  val7 = f32(data1[(lidx4*(8))+(gidx2*(2048))+(lidx3*(128))+(gidx0*(1310720))+(ridx0*(4096))+(1)]);
    var  val8 = f32(data1[(lidx4*(8))+(gidx2*(2048))+(lidx3*(128))+(gidx0*(1310720))+(ridx0*(4096))+(65)]);
    var  val9 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(gidx2*(2048))+(lidx3*(128))+(gidx0*(1310720))+(ridx0*(4096))+((-62))]), bool(alu1));
    var  val10 = f32(data1[(lidx4*(8))+(gidx2*(2048))+(lidx3*(128))+(gidx0*(1310720))+(ridx0*(4096))+(2)]);
    var  val11 = f32(data1[(lidx4*(8))+(gidx2*(2048))+(lidx3*(128))+(gidx0*(1310720))+(ridx0*(4096))+(66)]);
    var  val12 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(gidx2*(2048))+(lidx3*(128))+(gidx0*(1310720))+(ridx0*(4096))+((-61))]), bool(alu1));
    var  val13 = f32(data1[(lidx4*(8))+(gidx2*(2048))+(lidx3*(128))+(gidx0*(1310720))+(ridx0*(4096))+(3)]);
    var  val14 = f32(data1[(lidx4*(8))+(gidx2*(2048))+(lidx3*(128))+(gidx0*(1310720))+(ridx0*(4096))+(67)]);
    var  val15 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(gidx2*(2048))+(lidx3*(128))+(gidx0*(1310720))+(ridx0*(4096))+((-60))]), bool(alu1));
    var  val16 = f32(data1[(lidx4*(8))+(gidx2*(2048))+(lidx3*(128))+(gidx0*(1310720))+(ridx0*(4096))+(4)]);
    var  val17 = f32(data1[(lidx4*(8))+(gidx2*(2048))+(lidx3*(128))+(gidx0*(1310720))+(ridx0*(4096))+(68)]);
    var  val18 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(gidx2*(2048))+(lidx3*(128))+(gidx0*(1310720))+(ridx0*(4096))+((-59))]), bool(alu1));
    var  val19 = f32(data1[(lidx4*(8))+(gidx2*(2048))+(lidx3*(128))+(gidx0*(1310720))+(ridx0*(4096))+(5)]);
    var  val20 = f32(data1[(lidx4*(8))+(gidx2*(2048))+(lidx3*(128))+(gidx0*(1310720))+(ridx0*(4096))+(69)]);
    var  val21 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(gidx2*(2048))+(lidx3*(128))+(gidx0*(1310720))+(ridx0*(4096))+((-58))]), bool(alu1));
    var  val22 = f32(data1[(lidx4*(8))+(gidx2*(2048))+(lidx3*(128))+(gidx0*(1310720))+(ridx0*(4096))+(6)]);
    var  val23 = f32(data1[(lidx4*(8))+(gidx2*(2048))+(lidx3*(128))+(gidx0*(1310720))+(ridx0*(4096))+(70)]);
    var  val24 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(gidx2*(2048))+(lidx3*(128))+(gidx0*(1310720))+(ridx0*(4096))+((-57))]), bool(alu1));
    var  val25 = f32(data1[(lidx4*(8))+(gidx2*(2048))+(lidx3*(128))+(gidx0*(1310720))+(ridx0*(4096))+(7)]);
    var  val26 = f32(data1[(lidx4*(8))+(gidx2*(2048))+(lidx3*(128))+(gidx0*(1310720))+(ridx0*(4096))+(71)]);
    var  val27 = f32(data2[(gidx1*(11520))+(ridx0*(9))]);
    var  val28 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(3)]);
    var  val29 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(6)]);
    var  val30 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(1)]);
    var  val31 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(4)]);
    var  val32 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(7)]);
    var  val33 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2)]);
    var  val34 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5)]);
    var  val35 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8)]);
    var  val36 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2880)]);
    var  val37 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2883)]);
    var  val38 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2886)]);
    var  val39 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2881)]);
    var  val40 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2884)]);
    var  val41 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2887)]);
    var  val42 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2882)]);
    var  val43 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2885)]);
    var  val44 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2888)]);
    var  val45 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5760)]);
    var  val46 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5763)]);
    var  val47 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5766)]);
    var  val48 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5761)]);
    var  val49 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5764)]);
    var  val50 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5767)]);
    var  val51 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5762)]);
    var  val52 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5765)]);
    var  val53 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5768)]);
    var  val54 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8640)]);
    var  val55 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8643)]);
    var  val56 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8646)]);
    var  val57 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8641)]);
    var  val58 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8644)]);
    var  val59 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8647)]);
    var  val60 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8642)]);
    var  val61 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8645)]);
    var  val62 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8648)]);
    acc0 = fma(val0,val27,acc0);
    acc0 = fma(val1,val28,acc0);
    acc0 = fma(val2,val29,acc0);
    acc0 = fma(val3,val30,acc0);
    acc0 = fma(val4,val31,acc0);
    acc0 = fma(val5,val32,acc0);
    acc0 = fma(val6,val33,acc0);
    acc0 = fma(val7,val34,acc0);
    acc0 = fma(val8,val35,acc0);
    acc1 = fma(val6,val27,acc1);
    acc1 = fma(val7,val28,acc1);
    acc1 = fma(val8,val29,acc1);
    acc1 = fma(val9,val30,acc1);
    acc1 = fma(val10,val31,acc1);
    acc1 = fma(val11,val32,acc1);
    acc1 = fma(val12,val33,acc1);
    acc1 = fma(val13,val34,acc1);
    acc1 = fma(val14,val35,acc1);
    acc2 = fma(val12,val27,acc2);
    acc2 = fma(val13,val28,acc2);
    acc2 = fma(val14,val29,acc2);
    acc2 = fma(val15,val30,acc2);
    acc2 = fma(val16,val31,acc2);
    acc2 = fma(val17,val32,acc2);
    acc2 = fma(val18,val33,acc2);
    acc2 = fma(val19,val34,acc2);
    acc2 = fma(val20,val35,acc2);
    acc3 = fma(val18,val27,acc3);
    acc3 = fma(val19,val28,acc3);
    acc3 = fma(val20,val29,acc3);
    acc3 = fma(val21,val30,acc3);
    acc3 = fma(val22,val31,acc3);
    acc3 = fma(val23,val32,acc3);
    acc3 = fma(val24,val33,acc3);
    acc3 = fma(val25,val34,acc3);
    acc3 = fma(val26,val35,acc3);
    acc4 = fma(val0,val36,acc4);
    acc4 = fma(val1,val37,acc4);
    acc4 = fma(val2,val38,acc4);
    acc4 = fma(val3,val39,acc4);
    acc4 = fma(val4,val40,acc4);
    acc4 = fma(val5,val41,acc4);
    acc4 = fma(val6,val42,acc4);
    acc4 = fma(val7,val43,acc4);
    acc4 = fma(val8,val44,acc4);
    acc5 = fma(val6,val36,acc5);
    acc5 = fma(val7,val37,acc5);
    acc5 = fma(val8,val38,acc5);
    acc5 = fma(val9,val39,acc5);
    acc5 = fma(val10,val40,acc5);
    acc5 = fma(val11,val41,acc5);
    acc5 = fma(val12,val42,acc5);
    acc5 = fma(val13,val43,acc5);
    acc5 = fma(val14,val44,acc5);
    acc6 = fma(val12,val36,acc6);
    acc6 = fma(val13,val37,acc6);
    acc6 = fma(val14,val38,acc6);
    acc6 = fma(val15,val39,acc6);
    acc6 = fma(val16,val40,acc6);
    acc6 = fma(val17,val41,acc6);
    acc6 = fma(val18,val42,acc6);
    acc6 = fma(val19,val43,acc6);
    acc6 = fma(val20,val44,acc6);
    acc7 = fma(val18,val36,acc7);
    acc7 = fma(val19,val37,acc7);
    acc7 = fma(val20,val38,acc7);
    acc7 = fma(val21,val39,acc7);
    acc7 = fma(val22,val40,acc7);
    acc7 = fma(val23,val41,acc7);
    acc7 = fma(val24,val42,acc7);
    acc7 = fma(val25,val43,acc7);
    acc7 = fma(val26,val44,acc7);
    acc8 = fma(val0,val45,acc8);
    acc8 = fma(val1,val46,acc8);
    acc8 = fma(val2,val47,acc8);
    acc8 = fma(val3,val48,acc8);
    acc8 = fma(val4,val49,acc8);
    acc8 = fma(val5,val50,acc8);
    acc8 = fma(val6,val51,acc8);
    acc8 = fma(val7,val52,acc8);
    acc8 = fma(val8,val53,acc8);
    acc9 = fma(val6,val45,acc9);
    acc9 = fma(val7,val46,acc9);
    acc9 = fma(val8,val47,acc9);
    acc9 = fma(val9,val48,acc9);
    acc9 = fma(val10,val49,acc9);
    acc9 = fma(val11,val50,acc9);
    acc9 = fma(val12,val51,acc9);
    acc9 = fma(val13,val52,acc9);
    acc9 = fma(val14,val53,acc9);
    acc10 = fma(val12,val45,acc10);
    acc10 = fma(val13,val46,acc10);
    acc10 = fma(val14,val47,acc10);
    acc10 = fma(val15,val48,acc10);
    acc10 = fma(val16,val49,acc10);
    acc10 = fma(val17,val50,acc10);
    acc10 = fma(val18,val51,acc10);
    acc10 = fma(val19,val52,acc10);
    acc10 = fma(val20,val53,acc10);
    acc11 = fma(val18,val45,acc11);
    acc11 = fma(val19,val46,acc11);
    acc11 = fma(val20,val47,acc11);
    acc11 = fma(val21,val48,acc11);
    acc11 = fma(val22,val49,acc11);
    acc11 = fma(val23,val50,acc11);
    acc11 = fma(val24,val51,acc11);
    acc11 = fma(val25,val52,acc11);
    acc11 = fma(val26,val53,acc11);
    acc12 = fma(val0,val54,acc12);
    acc12 = fma(val1,val55,acc12);
    acc12 = fma(val2,val56,acc12);
    acc12 = fma(val3,val57,acc12);
    acc12 = fma(val4,val58,acc12);
    acc12 = fma(val5,val59,acc12);
    acc12 = fma(val6,val60,acc12);
    acc12 = fma(val7,val61,acc12);
    acc12 = fma(val8,val62,acc12);
    acc13 = fma(val6,val54,acc13);
    acc13 = fma(val7,val55,acc13);
    acc13 = fma(val8,val56,acc13);
    acc13 = fma(val9,val57,acc13);
    acc13 = fma(val10,val58,acc13);
    acc13 = fma(val11,val59,acc13);
    acc13 = fma(val12,val60,acc13);
    acc13 = fma(val13,val61,acc13);
    acc13 = fma(val14,val62,acc13);
    acc14 = fma(val12,val54,acc14);
    acc14 = fma(val13,val55,acc14);
    acc14 = fma(val14,val56,acc14);
    acc14 = fma(val15,val57,acc14);
    acc14 = fma(val16,val58,acc14);
    acc14 = fma(val17,val59,acc14);
    acc14 = fma(val18,val60,acc14);
    acc14 = fma(val19,val61,acc14);
    acc14 = fma(val20,val62,acc14);
    acc15 = fma(val18,val54,acc15);
    acc15 = fma(val19,val55,acc15);
    acc15 = fma(val20,val56,acc15);
    acc15 = fma(val21,val57,acc15);
    acc15 = fma(val22,val58,acc15);
    acc15 = fma(val23,val59,acc15);
    acc15 = fma(val24,val60,acc15);
    acc15 = fma(val25,val61,acc15);
    acc15 = fma(val26,val62,acc15);
  }
  var  val63 = f32(data3[gidx1*(4)]);
  var  val64 = f32(data3[(gidx1*(4))+(1)]);
  var  val65 = f32(data3[(gidx1*(4))+(2)]);
  var  val66 = f32(data3[(gidx1*(4))+(3)]);
  data0[(gidx0*(327680))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))] = (acc0+val63);
  data0[(gidx0*(327680))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1)] = (acc1+val63);
  data0[(gidx0*(327680))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2)] = (acc2+val63);
  data0[(gidx0*(327680))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3)] = (acc3+val63);
  data0[(gidx0*(327680))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1024)] = (acc4+val64);
  data0[(gidx0*(327680))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1025)] = (acc5+val64);
  data0[(gidx0*(327680))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1026)] = (acc6+val64);
  data0[(gidx0*(327680))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1027)] = (acc7+val64);
  data0[(gidx0*(327680))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2048)] = (acc8+val65);
  data0[(gidx0*(327680))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2049)] = (acc9+val65);
  data0[(gidx0*(327680))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2050)] = (acc10+val65);
  data0[(gidx0*(327680))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2051)] = (acc11+val65);
  data0[(gidx0*(327680))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3072)] = (acc12+val66);
  data0[(gidx0*(327680))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3073)] = (acc13+val66);
  data0[(gidx0*(327680))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3074)] = (acc14+val66);
  data0[(gidx0*(327680))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3075)] = (acc15+val66);
}`;

const r_64_16_640 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 64 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (640); ridx0++) {
    var  val0 = f32(data1[(gidx0*(10240))+(lidx1*(640))+ridx0]);
    acc0 = (val0+acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val1 = f32(temp[ridx1]);
    acc1 = (val1+acc1);
  }
  data0[gidx0] = (acc1*(9.765625e-05f));
}`;

const r_64_16_640n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 64 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (640); ridx0++) {
    var  val0 = f32(data1[(gidx0*(10240))+(lidx1*(640))+ridx0]);
    var  val1 = f32(data2[gidx0]);
    var  alu0 = (val0-val1);
    acc0 = fma(alu0,alu0,acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val2 = f32(temp[ridx1]);
    acc1 = (val2+acc1);
  }
  data0[gidx0] = sqrt(((1.0f)/((acc1*(9.765625e-05f))+(1e-05f))));
}`;

const E_80_16_2_4_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,4,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 80 */
  let gidx1 = i32(gindex.x); /* 16 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 4 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(4096))+(gidx1*(64))+(lidx2*(327680))+(lidx3*(1024))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(4096))+(gidx1*(64))+(lidx2*(327680))+(lidx3*(1024))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(4096))+(gidx1*(64))+(lidx2*(327680))+(lidx3*(1024))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(4096))+(gidx1*(64))+(lidx2*(327680))+(lidx3*(1024))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(lidx2*(32))+(((gidx0*(4))+lidx3)/(10))]);
  var  val5 = f32(data3[(lidx2*(32))+(((gidx0*(4))+lidx3)/(10))]);
  var  val6 = f32(data4[(gidx0*(4))+lidx3]);
  var  val7 = f32(data5[(gidx0*(4))+lidx3]);
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(327680))+(lidx3*(1024))+(lidx4*(4))] = (((val0-val4)*val5*val6)+val7);
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(327680))+(lidx3*(1024))+(lidx4*(4))+(1)] = (((val1-val4)*val5*val6)+val7);
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(327680))+(lidx3*(1024))+(lidx4*(4))+(2)] = (((val2-val4)*val5*val6)+val7);
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(327680))+(lidx3*(1024))+(lidx4*(4))+(3)] = (((val3-val4)*val5*val6)+val7);
}`;

const E_2_40_16_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 40 */
  let gidx2 = i32(gindex.x); /* 16 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(32))+(((gidx1*(8))+lidx3)/(10))]);
  var  val5 = f32(data3[(gidx0*(32))+(((gidx1*(8))+lidx3)/(10))]);
  var  val6 = f32(data4[(gidx1*(8))+lidx3]);
  var  val7 = f32(data5[(gidx1*(8))+lidx3]);
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))] = ((1.0f)/((1.0f)+exp2(((((val0-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)] = ((1.0f)/((1.0f)+exp2(((((val1-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)] = ((1.0f)/((1.0f)+exp2(((((val2-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)] = ((1.0f)/((1.0f)+exp2(((((val3-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
}`;

const E_5120_32_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 5120 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx1*(4))+(3)]);
  data0[(gidx0*(128))+(lidx1*(4))] = (val0*val4);
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (val1*val5);
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (val2*val6);
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (val3*val7);
}`;

const r_40_4_8_160_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,128>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(8,4) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 40 */
  let lidx1 = i32(lindex.y); /* 4 */
  let lidx2 = i32(lindex.x); /* 8 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (160); ridx0++) {
    var  val0 = f32(data1[lidx2+(ridx0*(8))]);
    var  val1 = f32(data2[(gidx0*(20480))+(lidx1*(1280))+lidx2+(ridx0*(8))]);
    var  val2 = f32(data2[(gidx0*(20480))+(lidx1*(1280))+lidx2+(ridx0*(8))+(5120)]);
    var  val3 = f32(data2[(gidx0*(20480))+(lidx1*(1280))+lidx2+(ridx0*(8))+(10240)]);
    var  val4 = f32(data2[(gidx0*(20480))+(lidx1*(1280))+lidx2+(ridx0*(8))+(15360)]);
    acc0 = fma(val0,val1,acc0);
    acc1 = fma(val0,val2,acc1);
    acc2 = fma(val0,val3,acc2);
    acc3 = fma(val0,val4,acc3);
  }
  temp[(lidx1*(32))+(lidx2*(4))] = acc0;
  temp[(lidx1*(32))+(lidx2*(4))+(1)] = acc1;
  temp[(lidx1*(32))+(lidx2*(4))+(2)] = acc2;
  temp[(lidx1*(32))+(lidx2*(4))+(3)] = acc3;
  workgroupBarrier();
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  for(var ridx1 = (0); ridx1 < (8); ridx1++) {
    var  val5 = f32(temp[(lidx1*(32))+(ridx1*(4))]);
    var  val6 = f32(temp[(lidx1*(32))+(ridx1*(4))+(1)]);
    var  val7 = f32(temp[(lidx1*(32))+(ridx1*(4))+(2)]);
    var  val8 = f32(temp[(lidx1*(32))+(ridx1*(4))+(3)]);
    acc4 = (val5+acc4);
    acc5 = (val6+acc5);
    acc6 = (val7+acc6);
    acc7 = (val8+acc7);
  }
  var  val9 = f32(data3[(gidx0*(16))+lidx1]);
  var  val10 = f32(data3[(gidx0*(16))+lidx1+(4)]);
  var  val11 = f32(data3[(gidx0*(16))+lidx1+(8)]);
  var  val12 = f32(data3[(gidx0*(16))+lidx1+(12)]);
  data0[(gidx0*(16))+lidx1] = (acc4+val9);
  data0[(gidx0*(16))+lidx1+(4)] = (acc5+val10);
  data0[(gidx0*(16))+lidx1+(8)] = (acc6+val11);
  data0[(gidx0*(16))+lidx1+(12)] = (acc7+val12);
}`;

const r_2_160_2_16_8_320_3_3_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 160 */
  let gidx2 = i32(gindex.x); /* 2 */
  let lidx3 = i32(lindex.y); /* 16 */
  let lidx4 = i32(lindex.x); /* 8 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (320); ridx0++) {
    var  alu0 = f32((lidx4*((-4)))<(0));
    var  alu1 = f32(((gidx2*((-16)))+(lidx3*((-1))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(1024))+((-33))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(1024))+((-1))]), bool(alu0));
    var  alu2 = f32(((gidx2*(16))+lidx3)<(31));
    var  val2 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(1024))+(31)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(1024))+((-32))]), bool(alu1));
    var  val4 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(1024))]);
    var  val5 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(1024))+(32)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(1024))+((-31))]), bool(alu1));
    var  val7 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(1024))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(1024))+(33)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(1024))+((-30))]), bool(alu1));
    var  val10 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(1024))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(1024))+(34)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(1024))+((-29))]), bool(alu1));
    var  val13 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(1024))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(1024))+(35)]), bool(alu2));
    var  alu3 = f32((lidx4*(4))<(28));
    var  val15 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(1024))+((-28))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(1024))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(1024))+(36)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx1*(11520))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2880)]);
    var  val28 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2883)]);
    var  val29 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2886)]);
    var  val30 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2881)]);
    var  val31 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2884)]);
    var  val32 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2887)]);
    var  val33 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2882)]);
    var  val34 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2885)]);
    var  val35 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(2888)]);
    var  val36 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5760)]);
    var  val37 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5763)]);
    var  val38 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5766)]);
    var  val39 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5761)]);
    var  val40 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5764)]);
    var  val41 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5767)]);
    var  val42 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5762)]);
    var  val43 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5765)]);
    var  val44 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(5768)]);
    var  val45 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8640)]);
    var  val46 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8643)]);
    var  val47 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8646)]);
    var  val48 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8641)]);
    var  val49 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8644)]);
    var  val50 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8647)]);
    var  val51 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8642)]);
    var  val52 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8645)]);
    var  val53 = f32(data2[(gidx1*(11520))+(ridx0*(9))+(8648)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  var  val54 = f32(data3[gidx1*(4)]);
  var  val55 = f32(data3[(gidx1*(4))+(1)]);
  var  val56 = f32(data3[(gidx1*(4))+(2)]);
  var  val57 = f32(data3[(gidx1*(4))+(3)]);
  var  val58 = f32(data4[gidx1*(4)]);
  var  val59 = f32(data4[(gidx1*(4))+(1)]);
  var  val60 = f32(data4[(gidx1*(4))+(2)]);
  var  val61 = f32(data4[(gidx1*(4))+(3)]);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))] = (acc0+val54+val58);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1)] = (acc1+val54+val58);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2)] = (acc2+val54+val58);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3)] = (acc3+val54+val58);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1024)] = (acc4+val55+val59);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1025)] = (acc5+val55+val59);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1026)] = (acc6+val55+val59);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1027)] = (acc7+val55+val59);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2048)] = (acc8+val56+val60);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2049)] = (acc9+val56+val60);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2050)] = (acc10+val56+val60);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2051)] = (acc11+val56+val60);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3072)] = (acc12+val57+val61);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3073)] = (acc13+val57+val61);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3074)] = (acc14+val57+val61);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3075)] = (acc15+val57+val61);
}`;

const r_64_16_1280 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 64 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (1280); ridx0++) {
    var  val0 = f32(data1[(gidx0*(20480))+(lidx1*(1280))+ridx0]);
    acc0 = (val0+acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val1 = f32(temp[ridx1]);
    acc1 = (val1+acc1);
  }
  data0[gidx0] = (acc1*(4.8828125e-05f));
}`;

const r_64_16_1280n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 64 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (1280); ridx0++) {
    var  val0 = f32(data1[(gidx0*(20480))+(lidx1*(1280))+ridx0]);
    var  val1 = f32(data2[gidx0]);
    var  alu0 = (val0-val1);
    acc0 = fma(alu0,alu0,acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val2 = f32(temp[ridx1]);
    acc1 = (val2+acc1);
  }
  data0[gidx0] = sqrt(((1.0f)/((acc1*(4.8828125e-05f))+(1e-05f))));
}`;

const E_160_16_2_4_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,4,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 160 */
  let gidx1 = i32(gindex.x); /* 16 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 4 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(4096))+(gidx1*(64))+(lidx2*(655360))+(lidx3*(1024))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(4096))+(gidx1*(64))+(lidx2*(655360))+(lidx3*(1024))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(4096))+(gidx1*(64))+(lidx2*(655360))+(lidx3*(1024))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(4096))+(gidx1*(64))+(lidx2*(655360))+(lidx3*(1024))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(lidx2*(32))+(gidx0/(5))]);
  var  val5 = f32(data3[(lidx2*(32))+(gidx0/(5))]);
  var  val6 = f32(data4[(gidx0*(4))+lidx3]);
  var  val7 = f32(data5[(gidx0*(4))+lidx3]);
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(655360))+(lidx3*(1024))+(lidx4*(4))] = (((val0-val4)*val5*val6)+val7);
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(655360))+(lidx3*(1024))+(lidx4*(4))+(1)] = (((val1-val4)*val5*val6)+val7);
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(655360))+(lidx3*(1024))+(lidx4*(4))+(2)] = (((val2-val4)*val5*val6)+val7);
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(655360))+(lidx3*(1024))+(lidx4*(4))+(3)] = (((val3-val4)*val5*val6)+val7);
}`;

const E_2_80_16_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 80 */
  let gidx2 = i32(gindex.x); /* 16 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(655360))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(655360))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(655360))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(655360))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(32))+(((gidx1*(8))+lidx3)/(20))]);
  var  val5 = f32(data3[(gidx0*(32))+(((gidx1*(8))+lidx3)/(20))]);
  var  val6 = f32(data4[(gidx1*(8))+lidx3]);
  var  val7 = f32(data5[(gidx1*(8))+lidx3]);
  data0[(gidx0*(655360))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))] = ((1.0f)/((1.0f)+exp2(((((val0-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(655360))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)] = ((1.0f)/((1.0f)+exp2(((((val1-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(655360))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)] = ((1.0f)/((1.0f)+exp2(((((val2-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(655360))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)] = ((1.0f)/((1.0f)+exp2(((((val3-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
}`;

const E_10240_32_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 10240 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx1*(4))+(3)]);
  data0[(gidx0*(128))+(lidx1*(4))] = (val0*val4);
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (val1*val5);
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (val2*val6);
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (val3*val7);
}`;

const r_2_160_2_16_8_640_3_3_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 160 */
  let gidx2 = i32(gindex.x); /* 2 */
  let lidx3 = i32(lindex.y); /* 16 */
  let lidx4 = i32(lindex.x); /* 8 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (640); ridx0++) {
    var  alu0 = f32((lidx4*((-4)))<(0));
    var  alu1 = f32(((gidx2*((-16)))+(lidx3*((-1))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+((-33))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+((-1))]), bool(alu0));
    var  alu2 = f32(((gidx2*(16))+lidx3)<(31));
    var  val2 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+(31)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+((-32))]), bool(alu1));
    var  val4 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))]);
    var  val5 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+(32)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+((-31))]), bool(alu1));
    var  val7 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+(33)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+((-30))]), bool(alu1));
    var  val10 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+(34)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+((-29))]), bool(alu1));
    var  val13 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+(35)]), bool(alu2));
    var  alu3 = f32((lidx4*(4))<(28));
    var  val15 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+((-28))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+(36)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx1*(23040))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5760)]);
    var  val28 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5763)]);
    var  val29 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5766)]);
    var  val30 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5761)]);
    var  val31 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5764)]);
    var  val32 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5767)]);
    var  val33 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5762)]);
    var  val34 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5765)]);
    var  val35 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5768)]);
    var  val36 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11520)]);
    var  val37 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11523)]);
    var  val38 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11526)]);
    var  val39 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11521)]);
    var  val40 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11524)]);
    var  val41 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11527)]);
    var  val42 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11522)]);
    var  val43 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11525)]);
    var  val44 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11528)]);
    var  val45 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17280)]);
    var  val46 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17283)]);
    var  val47 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17286)]);
    var  val48 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17281)]);
    var  val49 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17284)]);
    var  val50 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17287)]);
    var  val51 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17282)]);
    var  val52 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17285)]);
    var  val53 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17288)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))] = acc0;
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3)] = acc3;
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1024)] = acc4;
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1025)] = acc5;
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1026)] = acc6;
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1027)] = acc7;
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2048)] = acc8;
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2049)] = acc9;
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2050)] = acc10;
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2051)] = acc11;
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3072)] = acc12;
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3073)] = acc13;
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3074)] = acc14;
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3075)] = acc15;
}`;

const r_2_20_16_8_16_80_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 20 */
  let gidx2 = i32(gindex.x); /* 16 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (80); ridx0++) {
    var  val0 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))]);
    var  val1 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1024)]);
    var  val2 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2048)]);
    var  val3 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3072)]);
    var  val4 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1)]);
    var  val5 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1025)]);
    var  val6 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2049)]);
    var  val7 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3073)]);
    var  val8 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2)]);
    var  val9 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1026)]);
    var  val10 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2050)]);
    var  val11 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3074)]);
    var  val12 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3)]);
    var  val13 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1027)]);
    var  val14 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2051)]);
    var  val15 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3075)]);
    var  val16 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(320)]);
    var  val21 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(321)]);
    var  val22 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(322)]);
    var  val23 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(323)]);
    var  val24 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(640)]);
    var  val25 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(641)]);
    var  val26 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(642)]);
    var  val27 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(643)]);
    var  val28 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(960)]);
    var  val29 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(961)]);
    var  val30 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(962)]);
    var  val31 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(963)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  var  val32 = f32(data3[(gidx1*(32))+(lidx3*(4))]);
  var  val33 = f32(data3[(gidx1*(32))+(lidx3*(4))+(1)]);
  var  val34 = f32(data3[(gidx1*(32))+(lidx3*(4))+(2)]);
  var  val35 = f32(data3[(gidx1*(32))+(lidx3*(4))+(3)]);
  var  val36 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))]);
  var  val37 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)]);
  var  val38 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)]);
  var  val39 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)]);
  var  val40 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1024)]);
  var  val41 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1025)]);
  var  val42 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1026)]);
  var  val43 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1027)]);
  var  val44 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2048)]);
  var  val45 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2049)]);
  var  val46 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2050)]);
  var  val47 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2051)]);
  var  val48 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3072)]);
  var  val49 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3073)]);
  var  val50 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3074)]);
  var  val51 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3075)]);
  var  val52 = f32(data5[(gidx1*(32))+(lidx3*(4))]);
  var  val53 = f32(data5[(gidx1*(32))+(lidx3*(4))+(1)]);
  var  val54 = f32(data5[(gidx1*(32))+(lidx3*(4))+(2)]);
  var  val55 = f32(data5[(gidx1*(32))+(lidx3*(4))+(3)]);
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))] = (acc0+val32+(val36+val52));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)] = (acc1+val32+(val37+val52));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)] = (acc2+val32+(val38+val52));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)] = (acc3+val32+(val39+val52));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1024)] = (acc4+val33+(val40+val53));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1025)] = (acc5+val33+(val41+val53));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1026)] = (acc6+val33+(val42+val53));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1027)] = (acc7+val33+(val43+val53));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2048)] = (acc8+val34+(val44+val54));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2049)] = (acc9+val34+(val45+val54));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2050)] = (acc10+val34+(val46+val54));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2051)] = (acc11+val34+(val47+val54));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3072)] = (acc12+val35+(val48+val55));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3073)] = (acc13+val35+(val49+val55));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3074)] = (acc14+val35+(val50+val55));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3075)] = (acc15+val35+(val51+val55));
}`;

const r_2_20_16_8_16_160_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 20 */
  let gidx2 = i32(gindex.x); /* 16 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (160); ridx0++) {
    var  val0 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))]);
    var  val1 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1024)]);
    var  val2 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2048)]);
    var  val3 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3072)]);
    var  val4 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1)]);
    var  val5 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1025)]);
    var  val6 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2049)]);
    var  val7 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3073)]);
    var  val8 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2)]);
    var  val9 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1026)]);
    var  val10 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2050)]);
    var  val11 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3074)]);
    var  val12 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3)]);
    var  val13 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1027)]);
    var  val14 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2051)]);
    var  val15 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3075)]);
    var  val16 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(640)]);
    var  val21 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(641)]);
    var  val22 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(642)]);
    var  val23 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(643)]);
    var  val24 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1280)]);
    var  val25 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1281)]);
    var  val26 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1282)]);
    var  val27 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1283)]);
    var  val28 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1920)]);
    var  val29 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1921)]);
    var  val30 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1922)]);
    var  val31 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1923)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))] = acc0;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)] = acc3;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1024)] = acc4;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1025)] = acc5;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1026)] = acc6;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1027)] = acc7;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2048)] = acc8;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2049)] = acc9;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2050)] = acc10;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2051)] = acc11;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3072)] = acc12;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3073)] = acc13;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3074)] = acc14;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3075)] = acc15;
}`;

const E_16_160_2_16_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(4,16,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 16 */
  let gidx1 = i32(gindex.x); /* 160 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 16 */
  let lidx4 = i32(lindex.x); /* 4 */
  var  val0 = f32(data1[(gidx0*(64))+(gidx1*(4096))+(lidx2*(655360))+(lidx3*(4))+(lidx4*(1024))]);
  var  val1 = f32(data1[(gidx0*(64))+(gidx1*(4096))+(lidx2*(655360))+(lidx3*(4))+(lidx4*(1024))+(1)]);
  var  val2 = f32(data1[(gidx0*(64))+(gidx1*(4096))+(lidx2*(655360))+(lidx3*(4))+(lidx4*(1024))+(2)]);
  var  val3 = f32(data1[(gidx0*(64))+(gidx1*(4096))+(lidx2*(655360))+(lidx3*(4))+(lidx4*(1024))+(3)]);
  var  val4 = f32(data2[(gidx1*(4))+lidx4]);
  data0[(gidx0*(40960))+(gidx1*(4))+(lidx2*(655360))+(lidx3*(2560))+lidx4] = (val0+val4);
  data0[(gidx0*(40960))+(gidx1*(4))+(lidx2*(655360))+(lidx3*(2560))+lidx4+(640)] = (val1+val4);
  data0[(gidx0*(40960))+(gidx1*(4))+(lidx2*(655360))+(lidx3*(2560))+lidx4+(1280)] = (val2+val4);
  data0[(gidx0*(40960))+(gidx1*(4))+(lidx2*(655360))+(lidx3*(2560))+lidx4+(1920)] = (val3+val4);
}`;

const r_2048_16_40 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 2048 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (40); ridx0++) {
    var  val0 = f32(data1[(gidx0*(640))+(lidx1*(40))+ridx0]);
    acc0 = (val0+acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val1 = f32(temp[ridx1]);
    acc1 = (val1+acc1);
  }
  data0[gidx0] = (acc1*(0.0015625f));
}`;

const r_2048_16_40n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 2048 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (40); ridx0++) {
    var  val0 = f32(data1[(gidx0*(640))+(lidx1*(40))+ridx0]);
    var  val1 = f32(data2[gidx0]);
    var  alu0 = (val0-val1);
    acc0 = fma(alu0,alu0,acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val2 = f32(temp[ridx1]);
    acc1 = (val2+acc1);
  }
  data0[gidx0] = sqrt(((1.0f)/((acc1*(0.0015625f))+(1e-05f))));
}`;

const E_64_10_8_16_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 64 */
  let gidx1 = i32(gindex.x); /* 10 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(3)]);
  var  val4 = f32(data1[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(640)]);
  var  val5 = f32(data1[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(641)]);
  var  val6 = f32(data1[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(642)]);
  var  val7 = f32(data1[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(643)]);
  var  val8 = f32(data1[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1280)]);
  var  val9 = f32(data1[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1281)]);
  var  val10 = f32(data1[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1282)]);
  var  val11 = f32(data1[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1283)]);
  var  val12 = f32(data1[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1920)]);
  var  val13 = f32(data1[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1921)]);
  var  val14 = f32(data1[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1922)]);
  var  val15 = f32(data1[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1923)]);
  var  val16 = f32(data2[(gidx0*(32))+(lidx2*(4))]);
  var  val17 = f32(data2[(gidx0*(32))+(lidx2*(4))+(1)]);
  var  val18 = f32(data2[(gidx0*(32))+(lidx2*(4))+(2)]);
  var  val19 = f32(data2[(gidx0*(32))+(lidx2*(4))+(3)]);
  var  val20 = f32(data3[(gidx0*(32))+(lidx2*(4))]);
  var  val21 = f32(data3[(gidx0*(32))+(lidx2*(4))+(1)]);
  var  val22 = f32(data3[(gidx0*(32))+(lidx2*(4))+(2)]);
  var  val23 = f32(data3[(gidx0*(32))+(lidx2*(4))+(3)]);
  var  val24 = f32(data4[(gidx1*(64))+(lidx3*(4))]);
  var  val25 = f32(data4[(gidx1*(64))+(lidx3*(4))+(1)]);
  var  val26 = f32(data4[(gidx1*(64))+(lidx3*(4))+(2)]);
  var  val27 = f32(data4[(gidx1*(64))+(lidx3*(4))+(3)]);
  var  val28 = f32(data5[(gidx1*(64))+(lidx3*(4))]);
  var  val29 = f32(data5[(gidx1*(64))+(lidx3*(4))+(1)]);
  var  val30 = f32(data5[(gidx1*(64))+(lidx3*(4))+(2)]);
  var  val31 = f32(data5[(gidx1*(64))+(lidx3*(4))+(3)]);
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))] = (((val0-val16)*val20*val24)+val28);
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1)] = (((val1-val16)*val20*val25)+val29);
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(2)] = (((val2-val16)*val20*val26)+val30);
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(3)] = (((val3-val16)*val20*val27)+val31);
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(640)] = (((val4-val17)*val21*val24)+val28);
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(641)] = (((val5-val17)*val21*val25)+val29);
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(642)] = (((val6-val17)*val21*val26)+val30);
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(643)] = (((val7-val17)*val21*val27)+val31);
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1280)] = (((val8-val18)*val22*val24)+val28);
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1281)] = (((val9-val18)*val22*val25)+val29);
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1282)] = (((val10-val18)*val22*val26)+val30);
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1283)] = (((val11-val18)*val22*val27)+val31);
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1920)] = (((val12-val19)*val23*val24)+val28);
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1921)] = (((val13-val19)*val23*val25)+val29);
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1922)] = (((val14-val19)*val23*val26)+val30);
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1923)] = (((val15-val19)*val23*val27)+val31);
}`;

const r_64_10_8_16_160_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 64 */
  let gidx1 = i32(gindex.x); /* 10 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (160); ridx0++) {
    var  val0 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))+(640)]);
    var  val5 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))+(641)]);
    var  val6 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))+(642)]);
    var  val7 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))+(643)]);
    var  val8 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))+(1280)]);
    var  val9 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))+(1281)]);
    var  val10 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))+(1282)]);
    var  val11 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))+(1283)]);
    var  val12 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))+(1920)]);
    var  val13 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))+(1921)]);
    var  val14 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))+(1922)]);
    var  val15 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))+(1923)]);
    var  val16 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))+(640)]);
    var  val21 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))+(641)]);
    var  val22 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))+(642)]);
    var  val23 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))+(643)]);
    var  val24 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))+(1280)]);
    var  val25 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))+(1281)]);
    var  val26 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))+(1282)]);
    var  val27 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))+(1283)]);
    var  val28 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))+(1920)]);
    var  val29 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))+(1921)]);
    var  val30 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))+(1922)]);
    var  val31 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))+(1923)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val0,val20,acc1);
    acc1 = fma(val1,val21,acc1);
    acc1 = fma(val2,val22,acc1);
    acc1 = fma(val3,val23,acc1);
    acc2 = fma(val0,val24,acc2);
    acc2 = fma(val1,val25,acc2);
    acc2 = fma(val2,val26,acc2);
    acc2 = fma(val3,val27,acc2);
    acc3 = fma(val0,val28,acc3);
    acc3 = fma(val1,val29,acc3);
    acc3 = fma(val2,val30,acc3);
    acc3 = fma(val3,val31,acc3);
    acc4 = fma(val4,val16,acc4);
    acc4 = fma(val5,val17,acc4);
    acc4 = fma(val6,val18,acc4);
    acc4 = fma(val7,val19,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val4,val24,acc6);
    acc6 = fma(val5,val25,acc6);
    acc6 = fma(val6,val26,acc6);
    acc6 = fma(val7,val27,acc6);
    acc7 = fma(val4,val28,acc7);
    acc7 = fma(val5,val29,acc7);
    acc7 = fma(val6,val30,acc7);
    acc7 = fma(val7,val31,acc7);
    acc8 = fma(val8,val16,acc8);
    acc8 = fma(val9,val17,acc8);
    acc8 = fma(val10,val18,acc8);
    acc8 = fma(val11,val19,acc8);
    acc9 = fma(val8,val20,acc9);
    acc9 = fma(val9,val21,acc9);
    acc9 = fma(val10,val22,acc9);
    acc9 = fma(val11,val23,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val8,val28,acc11);
    acc11 = fma(val9,val29,acc11);
    acc11 = fma(val10,val30,acc11);
    acc11 = fma(val11,val31,acc11);
    acc12 = fma(val12,val16,acc12);
    acc12 = fma(val13,val17,acc12);
    acc12 = fma(val14,val18,acc12);
    acc12 = fma(val15,val19,acc12);
    acc13 = fma(val12,val20,acc13);
    acc13 = fma(val13,val21,acc13);
    acc13 = fma(val14,val22,acc13);
    acc13 = fma(val15,val23,acc13);
    acc14 = fma(val12,val24,acc14);
    acc14 = fma(val13,val25,acc14);
    acc14 = fma(val14,val26,acc14);
    acc14 = fma(val15,val27,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))] = acc0;
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(3)] = acc3;
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(640)] = acc4;
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(641)] = acc5;
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(642)] = acc6;
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(643)] = acc7;
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1280)] = acc8;
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1281)] = acc9;
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1282)] = acc10;
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1283)] = acc11;
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1920)] = acc12;
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1921)] = acc13;
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1922)] = acc14;
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1923)] = acc15;
}`;

const r_2_8_32_16_8_16_20_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 8 */
  let gidx2 = i32(gindex.x); /* 512 */
  let lidx4 = i32(lindex.y); /* 8 */
  let lidx5 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (20); ridx0++) {
    var  val0 = f32(data1[(gidx0*(655360))+(gidx1*(80))+((gidx2/(16))*(20480))+(lidx4*(2560))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(655360))+(gidx1*(80))+((gidx2/(16))*(20480))+(lidx4*(2560))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(655360))+(gidx1*(80))+((gidx2/(16))*(20480))+(lidx4*(2560))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(655360))+(gidx1*(80))+((gidx2/(16))*(20480))+(lidx4*(2560))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(655360))+(gidx1*(80))+((gidx2/(16))*(20480))+(lidx4*(2560))+(ridx0*(4))+(640)]);
    var  val5 = f32(data1[(gidx0*(655360))+(gidx1*(80))+((gidx2/(16))*(20480))+(lidx4*(2560))+(ridx0*(4))+(641)]);
    var  val6 = f32(data1[(gidx0*(655360))+(gidx1*(80))+((gidx2/(16))*(20480))+(lidx4*(2560))+(ridx0*(4))+(642)]);
    var  val7 = f32(data1[(gidx0*(655360))+(gidx1*(80))+((gidx2/(16))*(20480))+(lidx4*(2560))+(ridx0*(4))+(643)]);
    var  val8 = f32(data1[(gidx0*(655360))+(gidx1*(80))+((gidx2/(16))*(20480))+(lidx4*(2560))+(ridx0*(4))+(1280)]);
    var  val9 = f32(data1[(gidx0*(655360))+(gidx1*(80))+((gidx2/(16))*(20480))+(lidx4*(2560))+(ridx0*(4))+(1281)]);
    var  val10 = f32(data1[(gidx0*(655360))+(gidx1*(80))+((gidx2/(16))*(20480))+(lidx4*(2560))+(ridx0*(4))+(1282)]);
    var  val11 = f32(data1[(gidx0*(655360))+(gidx1*(80))+((gidx2/(16))*(20480))+(lidx4*(2560))+(ridx0*(4))+(1283)]);
    var  val12 = f32(data1[(gidx0*(655360))+(gidx1*(80))+((gidx2/(16))*(20480))+(lidx4*(2560))+(ridx0*(4))+(1920)]);
    var  val13 = f32(data1[(gidx0*(655360))+(gidx1*(80))+((gidx2/(16))*(20480))+(lidx4*(2560))+(ridx0*(4))+(1921)]);
    var  val14 = f32(data1[(gidx0*(655360))+(gidx1*(80))+((gidx2/(16))*(20480))+(lidx4*(2560))+(ridx0*(4))+(1922)]);
    var  val15 = f32(data1[(gidx0*(655360))+(gidx1*(80))+((gidx2/(16))*(20480))+(lidx4*(2560))+(ridx0*(4))+(1923)]);
    var  val16 = f32(data2[(gidx0*(655360))+(gidx1*(80))+((gidx2%(16))*(40960))+(lidx5*(2560))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx0*(655360))+(gidx1*(80))+((gidx2%(16))*(40960))+(lidx5*(2560))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx0*(655360))+(gidx1*(80))+((gidx2%(16))*(40960))+(lidx5*(2560))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx0*(655360))+(gidx1*(80))+((gidx2%(16))*(40960))+(lidx5*(2560))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx0*(655360))+(gidx1*(80))+((gidx2%(16))*(40960))+(lidx5*(2560))+(ridx0*(4))+(640)]);
    var  val21 = f32(data2[(gidx0*(655360))+(gidx1*(80))+((gidx2%(16))*(40960))+(lidx5*(2560))+(ridx0*(4))+(641)]);
    var  val22 = f32(data2[(gidx0*(655360))+(gidx1*(80))+((gidx2%(16))*(40960))+(lidx5*(2560))+(ridx0*(4))+(642)]);
    var  val23 = f32(data2[(gidx0*(655360))+(gidx1*(80))+((gidx2%(16))*(40960))+(lidx5*(2560))+(ridx0*(4))+(643)]);
    var  val24 = f32(data2[(gidx0*(655360))+(gidx1*(80))+((gidx2%(16))*(40960))+(lidx5*(2560))+(ridx0*(4))+(1280)]);
    var  val25 = f32(data2[(gidx0*(655360))+(gidx1*(80))+((gidx2%(16))*(40960))+(lidx5*(2560))+(ridx0*(4))+(1281)]);
    var  val26 = f32(data2[(gidx0*(655360))+(gidx1*(80))+((gidx2%(16))*(40960))+(lidx5*(2560))+(ridx0*(4))+(1282)]);
    var  val27 = f32(data2[(gidx0*(655360))+(gidx1*(80))+((gidx2%(16))*(40960))+(lidx5*(2560))+(ridx0*(4))+(1283)]);
    var  val28 = f32(data2[(gidx0*(655360))+(gidx1*(80))+((gidx2%(16))*(40960))+(lidx5*(2560))+(ridx0*(4))+(1920)]);
    var  val29 = f32(data2[(gidx0*(655360))+(gidx1*(80))+((gidx2%(16))*(40960))+(lidx5*(2560))+(ridx0*(4))+(1921)]);
    var  val30 = f32(data2[(gidx0*(655360))+(gidx1*(80))+((gidx2%(16))*(40960))+(lidx5*(2560))+(ridx0*(4))+(1922)]);
    var  val31 = f32(data2[(gidx0*(655360))+(gidx1*(80))+((gidx2%(16))*(40960))+(lidx5*(2560))+(ridx0*(4))+(1923)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val0,val20,acc1);
    acc1 = fma(val1,val21,acc1);
    acc1 = fma(val2,val22,acc1);
    acc1 = fma(val3,val23,acc1);
    acc2 = fma(val0,val24,acc2);
    acc2 = fma(val1,val25,acc2);
    acc2 = fma(val2,val26,acc2);
    acc2 = fma(val3,val27,acc2);
    acc3 = fma(val0,val28,acc3);
    acc3 = fma(val1,val29,acc3);
    acc3 = fma(val2,val30,acc3);
    acc3 = fma(val3,val31,acc3);
    acc4 = fma(val4,val16,acc4);
    acc4 = fma(val5,val17,acc4);
    acc4 = fma(val6,val18,acc4);
    acc4 = fma(val7,val19,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val4,val24,acc6);
    acc6 = fma(val5,val25,acc6);
    acc6 = fma(val6,val26,acc6);
    acc6 = fma(val7,val27,acc6);
    acc7 = fma(val4,val28,acc7);
    acc7 = fma(val5,val29,acc7);
    acc7 = fma(val6,val30,acc7);
    acc7 = fma(val7,val31,acc7);
    acc8 = fma(val8,val16,acc8);
    acc8 = fma(val9,val17,acc8);
    acc8 = fma(val10,val18,acc8);
    acc8 = fma(val11,val19,acc8);
    acc9 = fma(val8,val20,acc9);
    acc9 = fma(val9,val21,acc9);
    acc9 = fma(val10,val22,acc9);
    acc9 = fma(val11,val23,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val8,val28,acc11);
    acc11 = fma(val9,val29,acc11);
    acc11 = fma(val10,val30,acc11);
    acc11 = fma(val11,val31,acc11);
    acc12 = fma(val12,val16,acc12);
    acc12 = fma(val13,val17,acc12);
    acc12 = fma(val14,val18,acc12);
    acc12 = fma(val15,val19,acc12);
    acc13 = fma(val12,val20,acc13);
    acc13 = fma(val13,val21,acc13);
    acc13 = fma(val14,val22,acc13);
    acc13 = fma(val15,val23,acc13);
    acc14 = fma(val12,val24,acc14);
    acc14 = fma(val13,val25,acc14);
    acc14 = fma(val14,val26,acc14);
    acc14 = fma(val15,val27,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(8388608))+(gidx1*(1048576))+((gidx2/(16))*(32768))+((gidx2%(16))*(64))+(lidx4*(4096))+(lidx5*(4))] = (acc0*(0.11180339887498948f));
  data0[(gidx0*(8388608))+(gidx1*(1048576))+((gidx2/(16))*(32768))+((gidx2%(16))*(64))+(lidx4*(4096))+(lidx5*(4))+(1)] = (acc1*(0.11180339887498948f));
  data0[(gidx0*(8388608))+(gidx1*(1048576))+((gidx2/(16))*(32768))+((gidx2%(16))*(64))+(lidx4*(4096))+(lidx5*(4))+(2)] = (acc2*(0.11180339887498948f));
  data0[(gidx0*(8388608))+(gidx1*(1048576))+((gidx2/(16))*(32768))+((gidx2%(16))*(64))+(lidx4*(4096))+(lidx5*(4))+(3)] = (acc3*(0.11180339887498948f));
  data0[(gidx0*(8388608))+(gidx1*(1048576))+((gidx2/(16))*(32768))+((gidx2%(16))*(64))+(lidx4*(4096))+(lidx5*(4))+(1024)] = (acc4*(0.11180339887498948f));
  data0[(gidx0*(8388608))+(gidx1*(1048576))+((gidx2/(16))*(32768))+((gidx2%(16))*(64))+(lidx4*(4096))+(lidx5*(4))+(1025)] = (acc5*(0.11180339887498948f));
  data0[(gidx0*(8388608))+(gidx1*(1048576))+((gidx2/(16))*(32768))+((gidx2%(16))*(64))+(lidx4*(4096))+(lidx5*(4))+(1026)] = (acc6*(0.11180339887498948f));
  data0[(gidx0*(8388608))+(gidx1*(1048576))+((gidx2/(16))*(32768))+((gidx2%(16))*(64))+(lidx4*(4096))+(lidx5*(4))+(1027)] = (acc7*(0.11180339887498948f));
  data0[(gidx0*(8388608))+(gidx1*(1048576))+((gidx2/(16))*(32768))+((gidx2%(16))*(64))+(lidx4*(4096))+(lidx5*(4))+(2048)] = (acc8*(0.11180339887498948f));
  data0[(gidx0*(8388608))+(gidx1*(1048576))+((gidx2/(16))*(32768))+((gidx2%(16))*(64))+(lidx4*(4096))+(lidx5*(4))+(2049)] = (acc9*(0.11180339887498948f));
  data0[(gidx0*(8388608))+(gidx1*(1048576))+((gidx2/(16))*(32768))+((gidx2%(16))*(64))+(lidx4*(4096))+(lidx5*(4))+(2050)] = (acc10*(0.11180339887498948f));
  data0[(gidx0*(8388608))+(gidx1*(1048576))+((gidx2/(16))*(32768))+((gidx2%(16))*(64))+(lidx4*(4096))+(lidx5*(4))+(2051)] = (acc11*(0.11180339887498948f));
  data0[(gidx0*(8388608))+(gidx1*(1048576))+((gidx2/(16))*(32768))+((gidx2%(16))*(64))+(lidx4*(4096))+(lidx5*(4))+(3072)] = (acc12*(0.11180339887498948f));
  data0[(gidx0*(8388608))+(gidx1*(1048576))+((gidx2/(16))*(32768))+((gidx2%(16))*(64))+(lidx4*(4096))+(lidx5*(4))+(3073)] = (acc13*(0.11180339887498948f));
  data0[(gidx0*(8388608))+(gidx1*(1048576))+((gidx2/(16))*(32768))+((gidx2%(16))*(64))+(lidx4*(4096))+(lidx5*(4))+(3074)] = (acc14*(0.11180339887498948f));
  data0[(gidx0*(8388608))+(gidx1*(1048576))+((gidx2/(16))*(32768))+((gidx2%(16))*(64))+(lidx4*(4096))+(lidx5*(4))+(3075)] = (acc15*(0.11180339887498948f));
}`;

const r_512_32_256_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 512 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  acc0 = -0x1.fffffep+127f;
  for(var ridx0 = (0); ridx0 < (256); ridx0++) {
    var  val0 = f32(data1[(gidx0*(32768))+(lidx1*(1024))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(32768))+(lidx1*(1024))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(32768))+(lidx1*(1024))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(32768))+(lidx1*(1024))+(ridx0*(4))+(3)]);
    acc0 = max(val0,acc0);
    acc0 = max(val1,acc0);
    acc0 = max(val2,acc0);
    acc0 = max(val3,acc0);
  }
  data0[(gidx0*(32))+lidx1] = acc0;
}`;

const E_2048_16_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2048 */
  let gidx1 = i32(gindex.x); /* 16 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(8192))+(gidx1*(64))+(lidx2*(1024))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(8192))+(gidx1*(64))+(lidx2*(1024))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(8192))+(gidx1*(64))+(lidx2*(1024))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(8192))+(gidx1*(64))+(lidx2*(1024))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(8))+lidx2]);
  data0[(gidx0*(8192))+(gidx1*(64))+(lidx2*(1024))+(lidx3*(4))] = exp2(((val0-val4)*(1.4426950408889634f)));
  data0[(gidx0*(8192))+(gidx1*(64))+(lidx2*(1024))+(lidx3*(4))+(1)] = exp2(((val1-val4)*(1.4426950408889634f)));
  data0[(gidx0*(8192))+(gidx1*(64))+(lidx2*(1024))+(lidx3*(4))+(2)] = exp2(((val2-val4)*(1.4426950408889634f)));
  data0[(gidx0*(8192))+(gidx1*(64))+(lidx2*(1024))+(lidx3*(4))+(3)] = exp2(((val3-val4)*(1.4426950408889634f)));
}`;

const r_512_32_256_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 512 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (256); ridx0++) {
    var  val0 = f32(data1[(gidx0*(32768))+(lidx1*(1024))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(32768))+(lidx1*(1024))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(32768))+(lidx1*(1024))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(32768))+(lidx1*(1024))+(ridx0*(4))+(3)]);
    acc0 = (val0+acc0);
    acc0 = (val1+acc0);
    acc0 = (val2+acc0);
    acc0 = (val3+acc0);
  }
  data0[(gidx0*(32))+lidx1] = acc0;
}`;

const E_2048_16_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2048 */
  let gidx1 = i32(gindex.x); /* 16 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(8192))+(gidx1*(64))+(lidx2*(1024))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(8192))+(gidx1*(64))+(lidx2*(1024))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(8192))+(gidx1*(64))+(lidx2*(1024))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(8192))+(gidx1*(64))+(lidx2*(1024))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(8))+lidx2]);
  data0[(gidx0*(8192))+(gidx1*(64))+(lidx2*(1024))+(lidx3*(4))] = (val0/val4);
  data0[(gidx0*(8192))+(gidx1*(64))+(lidx2*(1024))+(lidx3*(4))+(1)] = (val1/val4);
  data0[(gidx0*(8192))+(gidx1*(64))+(lidx2*(1024))+(lidx3*(4))+(2)] = (val2/val4);
  data0[(gidx0*(8192))+(gidx1*(64))+(lidx2*(1024))+(lidx3*(4))+(3)] = (val3/val4);
}`;

const r_2_4_16_5_2_16_4_256_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(4,16,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 4 */
  let gidx2 = i32(gindex.x); /* 80 */
  let lidx4 = i32(lindex.z); /* 2 */
  let lidx5 = i32(lindex.y); /* 16 */
  let lidx6 = i32(lindex.x); /* 4 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (256); ridx0++) {
    var  val0 = f32(data1[(gidx0*(8388608))+(gidx1*(2097152))+((gidx2/(5))*(65536))+(lidx4*(1048576))+(lidx5*(4096))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(8388608))+(gidx1*(2097152))+((gidx2/(5))*(65536))+(lidx4*(1048576))+(lidx5*(4096))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(8388608))+(gidx1*(2097152))+((gidx2/(5))*(65536))+(lidx4*(1048576))+(lidx5*(4096))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(8388608))+(gidx1*(2097152))+((gidx2/(5))*(65536))+(lidx4*(1048576))+(lidx5*(4096))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(8388608))+(gidx1*(2097152))+((gidx2/(5))*(65536))+(lidx4*(1048576))+(lidx5*(4096))+(ridx0*(4))+(1024)]);
    var  val5 = f32(data1[(gidx0*(8388608))+(gidx1*(2097152))+((gidx2/(5))*(65536))+(lidx4*(1048576))+(lidx5*(4096))+(ridx0*(4))+(1025)]);
    var  val6 = f32(data1[(gidx0*(8388608))+(gidx1*(2097152))+((gidx2/(5))*(65536))+(lidx4*(1048576))+(lidx5*(4096))+(ridx0*(4))+(1026)]);
    var  val7 = f32(data1[(gidx0*(8388608))+(gidx1*(2097152))+((gidx2/(5))*(65536))+(lidx4*(1048576))+(lidx5*(4096))+(ridx0*(4))+(1027)]);
    var  val8 = f32(data1[(gidx0*(8388608))+(gidx1*(2097152))+((gidx2/(5))*(65536))+(lidx4*(1048576))+(lidx5*(4096))+(ridx0*(4))+(2048)]);
    var  val9 = f32(data1[(gidx0*(8388608))+(gidx1*(2097152))+((gidx2/(5))*(65536))+(lidx4*(1048576))+(lidx5*(4096))+(ridx0*(4))+(2049)]);
    var  val10 = f32(data1[(gidx0*(8388608))+(gidx1*(2097152))+((gidx2/(5))*(65536))+(lidx4*(1048576))+(lidx5*(4096))+(ridx0*(4))+(2050)]);
    var  val11 = f32(data1[(gidx0*(8388608))+(gidx1*(2097152))+((gidx2/(5))*(65536))+(lidx4*(1048576))+(lidx5*(4096))+(ridx0*(4))+(2051)]);
    var  val12 = f32(data1[(gidx0*(8388608))+(gidx1*(2097152))+((gidx2/(5))*(65536))+(lidx4*(1048576))+(lidx5*(4096))+(ridx0*(4))+(3072)]);
    var  val13 = f32(data1[(gidx0*(8388608))+(gidx1*(2097152))+((gidx2/(5))*(65536))+(lidx4*(1048576))+(lidx5*(4096))+(ridx0*(4))+(3073)]);
    var  val14 = f32(data1[(gidx0*(8388608))+(gidx1*(2097152))+((gidx2/(5))*(65536))+(lidx4*(1048576))+(lidx5*(4096))+(ridx0*(4))+(3074)]);
    var  val15 = f32(data1[(gidx0*(8388608))+(gidx1*(2097152))+((gidx2/(5))*(65536))+(lidx4*(1048576))+(lidx5*(4096))+(ridx0*(4))+(3075)]);
    var  val16 = f32(data2[(gidx0*(655360))+(gidx1*(160))+((gidx2%(5))*(16))+(lidx4*(80))+(lidx6*(4))+(ridx0*(2560))]);
    var  val17 = f32(data2[(gidx0*(655360))+(gidx1*(160))+((gidx2%(5))*(16))+(lidx4*(80))+(lidx6*(4))+(ridx0*(2560))+(640)]);
    var  val18 = f32(data2[(gidx0*(655360))+(gidx1*(160))+((gidx2%(5))*(16))+(lidx4*(80))+(lidx6*(4))+(ridx0*(2560))+(1280)]);
    var  val19 = f32(data2[(gidx0*(655360))+(gidx1*(160))+((gidx2%(5))*(16))+(lidx4*(80))+(lidx6*(4))+(ridx0*(2560))+(1920)]);
    var  val20 = f32(data2[(gidx0*(655360))+(gidx1*(160))+((gidx2%(5))*(16))+(lidx4*(80))+(lidx6*(4))+(ridx0*(2560))+(1)]);
    var  val21 = f32(data2[(gidx0*(655360))+(gidx1*(160))+((gidx2%(5))*(16))+(lidx4*(80))+(lidx6*(4))+(ridx0*(2560))+(641)]);
    var  val22 = f32(data2[(gidx0*(655360))+(gidx1*(160))+((gidx2%(5))*(16))+(lidx4*(80))+(lidx6*(4))+(ridx0*(2560))+(1281)]);
    var  val23 = f32(data2[(gidx0*(655360))+(gidx1*(160))+((gidx2%(5))*(16))+(lidx4*(80))+(lidx6*(4))+(ridx0*(2560))+(1921)]);
    var  val24 = f32(data2[(gidx0*(655360))+(gidx1*(160))+((gidx2%(5))*(16))+(lidx4*(80))+(lidx6*(4))+(ridx0*(2560))+(2)]);
    var  val25 = f32(data2[(gidx0*(655360))+(gidx1*(160))+((gidx2%(5))*(16))+(lidx4*(80))+(lidx6*(4))+(ridx0*(2560))+(642)]);
    var  val26 = f32(data2[(gidx0*(655360))+(gidx1*(160))+((gidx2%(5))*(16))+(lidx4*(80))+(lidx6*(4))+(ridx0*(2560))+(1282)]);
    var  val27 = f32(data2[(gidx0*(655360))+(gidx1*(160))+((gidx2%(5))*(16))+(lidx4*(80))+(lidx6*(4))+(ridx0*(2560))+(1922)]);
    var  val28 = f32(data2[(gidx0*(655360))+(gidx1*(160))+((gidx2%(5))*(16))+(lidx4*(80))+(lidx6*(4))+(ridx0*(2560))+(3)]);
    var  val29 = f32(data2[(gidx0*(655360))+(gidx1*(160))+((gidx2%(5))*(16))+(lidx4*(80))+(lidx6*(4))+(ridx0*(2560))+(643)]);
    var  val30 = f32(data2[(gidx0*(655360))+(gidx1*(160))+((gidx2%(5))*(16))+(lidx4*(80))+(lidx6*(4))+(ridx0*(2560))+(1283)]);
    var  val31 = f32(data2[(gidx0*(655360))+(gidx1*(160))+((gidx2%(5))*(16))+(lidx4*(80))+(lidx6*(4))+(ridx0*(2560))+(1923)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val0,val20,acc1);
    acc1 = fma(val1,val21,acc1);
    acc1 = fma(val2,val22,acc1);
    acc1 = fma(val3,val23,acc1);
    acc2 = fma(val0,val24,acc2);
    acc2 = fma(val1,val25,acc2);
    acc2 = fma(val2,val26,acc2);
    acc2 = fma(val3,val27,acc2);
    acc3 = fma(val0,val28,acc3);
    acc3 = fma(val1,val29,acc3);
    acc3 = fma(val2,val30,acc3);
    acc3 = fma(val3,val31,acc3);
    acc4 = fma(val4,val16,acc4);
    acc4 = fma(val5,val17,acc4);
    acc4 = fma(val6,val18,acc4);
    acc4 = fma(val7,val19,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val4,val24,acc6);
    acc6 = fma(val5,val25,acc6);
    acc6 = fma(val6,val26,acc6);
    acc6 = fma(val7,val27,acc6);
    acc7 = fma(val4,val28,acc7);
    acc7 = fma(val5,val29,acc7);
    acc7 = fma(val6,val30,acc7);
    acc7 = fma(val7,val31,acc7);
    acc8 = fma(val8,val16,acc8);
    acc8 = fma(val9,val17,acc8);
    acc8 = fma(val10,val18,acc8);
    acc8 = fma(val11,val19,acc8);
    acc9 = fma(val8,val20,acc9);
    acc9 = fma(val9,val21,acc9);
    acc9 = fma(val10,val22,acc9);
    acc9 = fma(val11,val23,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val8,val28,acc11);
    acc11 = fma(val9,val29,acc11);
    acc11 = fma(val10,val30,acc11);
    acc11 = fma(val11,val31,acc11);
    acc12 = fma(val12,val16,acc12);
    acc12 = fma(val13,val17,acc12);
    acc12 = fma(val14,val18,acc12);
    acc12 = fma(val15,val19,acc12);
    acc13 = fma(val12,val20,acc13);
    acc13 = fma(val13,val21,acc13);
    acc13 = fma(val14,val22,acc13);
    acc13 = fma(val15,val23,acc13);
    acc14 = fma(val12,val24,acc14);
    acc14 = fma(val13,val25,acc14);
    acc14 = fma(val14,val26,acc14);
    acc14 = fma(val15,val27,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))] = acc0;
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))+(1)] = acc1;
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))+(2)] = acc2;
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))+(3)] = acc3;
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))+(80)] = acc4;
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))+(81)] = acc5;
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))+(82)] = acc6;
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))+(83)] = acc7;
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))+(160)] = acc8;
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))+(161)] = acc9;
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))+(162)] = acc10;
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))+(163)] = acc11;
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))+(240)] = acc12;
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))+(241)] = acc13;
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))+(242)] = acc14;
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))+(243)] = acc15;
}`;

const r_2_32_10_8_16_160_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 32 */
  let gidx2 = i32(gindex.x); /* 10 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (160); ridx0++) {
    var  val0 = f32(data1[((ridx0*(4))%(80))+((ridx0/(20))*(81920))+(gidx1*(2560))+(lidx3*(320))+(gidx0*(655360))]);
    var  val1 = f32(data1[(((ridx0*(4))+(1))%(80))+((ridx0/(20))*(81920))+(gidx1*(2560))+(lidx3*(320))+(gidx0*(655360))]);
    var  val2 = f32(data1[(((ridx0*(4))+(2))%(80))+((ridx0/(20))*(81920))+(gidx1*(2560))+(lidx3*(320))+(gidx0*(655360))]);
    var  val3 = f32(data1[(((ridx0*(4))+(3))%(80))+((ridx0/(20))*(81920))+(gidx1*(2560))+(lidx3*(320))+(gidx0*(655360))]);
    var  val4 = f32(data1[((ridx0*(4))%(80))+((ridx0/(20))*(81920))+(gidx1*(2560))+(lidx3*(320))+(gidx0*(655360))+(80)]);
    var  val5 = f32(data1[(((ridx0*(4))+(1))%(80))+((ridx0/(20))*(81920))+(gidx1*(2560))+(lidx3*(320))+(gidx0*(655360))+(80)]);
    var  val6 = f32(data1[(((ridx0*(4))+(2))%(80))+((ridx0/(20))*(81920))+(gidx1*(2560))+(lidx3*(320))+(gidx0*(655360))+(80)]);
    var  val7 = f32(data1[(((ridx0*(4))+(3))%(80))+((ridx0/(20))*(81920))+(gidx1*(2560))+(lidx3*(320))+(gidx0*(655360))+(80)]);
    var  val8 = f32(data1[((ridx0*(4))%(80))+((ridx0/(20))*(81920))+(gidx1*(2560))+(lidx3*(320))+(gidx0*(655360))+(160)]);
    var  val9 = f32(data1[(((ridx0*(4))+(1))%(80))+((ridx0/(20))*(81920))+(gidx1*(2560))+(lidx3*(320))+(gidx0*(655360))+(160)]);
    var  val10 = f32(data1[(((ridx0*(4))+(2))%(80))+((ridx0/(20))*(81920))+(gidx1*(2560))+(lidx3*(320))+(gidx0*(655360))+(160)]);
    var  val11 = f32(data1[(((ridx0*(4))+(3))%(80))+((ridx0/(20))*(81920))+(gidx1*(2560))+(lidx3*(320))+(gidx0*(655360))+(160)]);
    var  val12 = f32(data1[((ridx0*(4))%(80))+((ridx0/(20))*(81920))+(gidx1*(2560))+(lidx3*(320))+(gidx0*(655360))+(240)]);
    var  val13 = f32(data1[(((ridx0*(4))+(1))%(80))+((ridx0/(20))*(81920))+(gidx1*(2560))+(lidx3*(320))+(gidx0*(655360))+(240)]);
    var  val14 = f32(data1[(((ridx0*(4))+(2))%(80))+((ridx0/(20))*(81920))+(gidx1*(2560))+(lidx3*(320))+(gidx0*(655360))+(240)]);
    var  val15 = f32(data1[(((ridx0*(4))+(3))%(80))+((ridx0/(20))*(81920))+(gidx1*(2560))+(lidx3*(320))+(gidx0*(655360))+(240)]);
    var  val16 = f32(data2[(gidx2*(40960))+(lidx4*(2560))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx2*(40960))+(lidx4*(2560))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx2*(40960))+(lidx4*(2560))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx2*(40960))+(lidx4*(2560))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx2*(40960))+(lidx4*(2560))+(ridx0*(4))+(640)]);
    var  val21 = f32(data2[(gidx2*(40960))+(lidx4*(2560))+(ridx0*(4))+(641)]);
    var  val22 = f32(data2[(gidx2*(40960))+(lidx4*(2560))+(ridx0*(4))+(642)]);
    var  val23 = f32(data2[(gidx2*(40960))+(lidx4*(2560))+(ridx0*(4))+(643)]);
    var  val24 = f32(data2[(gidx2*(40960))+(lidx4*(2560))+(ridx0*(4))+(1280)]);
    var  val25 = f32(data2[(gidx2*(40960))+(lidx4*(2560))+(ridx0*(4))+(1281)]);
    var  val26 = f32(data2[(gidx2*(40960))+(lidx4*(2560))+(ridx0*(4))+(1282)]);
    var  val27 = f32(data2[(gidx2*(40960))+(lidx4*(2560))+(ridx0*(4))+(1283)]);
    var  val28 = f32(data2[(gidx2*(40960))+(lidx4*(2560))+(ridx0*(4))+(1920)]);
    var  val29 = f32(data2[(gidx2*(40960))+(lidx4*(2560))+(ridx0*(4))+(1921)]);
    var  val30 = f32(data2[(gidx2*(40960))+(lidx4*(2560))+(ridx0*(4))+(1922)]);
    var  val31 = f32(data2[(gidx2*(40960))+(lidx4*(2560))+(ridx0*(4))+(1923)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  var  val32 = f32(data3[(gidx2*(64))+(lidx4*(4))]);
  var  val33 = f32(data3[(gidx2*(64))+(lidx4*(4))+(1)]);
  var  val34 = f32(data3[(gidx2*(64))+(lidx4*(4))+(2)]);
  var  val35 = f32(data3[(gidx2*(64))+(lidx4*(4))+(3)]);
  var  val36 = f32(data4[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))]);
  var  val37 = f32(data4[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))+(640)]);
  var  val38 = f32(data4[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))+(1280)]);
  var  val39 = f32(data4[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))+(1920)]);
  var  val40 = f32(data4[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))+(1)]);
  var  val41 = f32(data4[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))+(641)]);
  var  val42 = f32(data4[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))+(1281)]);
  var  val43 = f32(data4[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))+(1921)]);
  var  val44 = f32(data4[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))+(2)]);
  var  val45 = f32(data4[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))+(642)]);
  var  val46 = f32(data4[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))+(1282)]);
  var  val47 = f32(data4[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))+(1922)]);
  var  val48 = f32(data4[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))+(3)]);
  var  val49 = f32(data4[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))+(643)]);
  var  val50 = f32(data4[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))+(1283)]);
  var  val51 = f32(data4[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))+(1923)]);
  data0[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))] = (acc0+val32+val36);
  data0[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))+(640)] = (acc1+val32+val37);
  data0[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))+(1280)] = (acc2+val32+val38);
  data0[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))+(1920)] = (acc3+val32+val39);
  data0[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))+(1)] = (acc4+val33+val40);
  data0[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))+(641)] = (acc5+val33+val41);
  data0[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))+(1281)] = (acc6+val33+val42);
  data0[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))+(1921)] = (acc7+val33+val43);
  data0[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))+(2)] = (acc8+val34+val44);
  data0[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))+(642)] = (acc9+val34+val45);
  data0[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))+(1282)] = (acc10+val34+val46);
  data0[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))+(1922)] = (acc11+val34+val47);
  data0[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))+(3)] = (acc12+val35+val48);
  data0[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))+(643)] = (acc13+val35+val49);
  data0[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))+(1283)] = (acc14+val35+val50);
  data0[(gidx0*(655360))+(gidx1*(20480))+(gidx2*(64))+(lidx3*(2560))+(lidx4*(4))+(1923)] = (acc15+val35+val51);
}`;

const r_77_10_2_16_192_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 77 */
  let gidx1 = i32(gindex.x); /* 10 */
  let lidx2 = i32(lindex.y); /* 2 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (192); ridx0++) {
    var  val0 = f32(data1[(gidx0*(1536))+(lidx2*(768))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(1536))+(lidx2*(768))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(1536))+(lidx2*(768))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(1536))+(lidx2*(768))+(ridx0*(4))+(3)]);
    var  val4 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))]);
    var  val5 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(1)]);
    var  val6 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(2)]);
    var  val7 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(3)]);
    var  val8 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(768)]);
    var  val9 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(769)]);
    var  val10 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(770)]);
    var  val11 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(771)]);
    var  val12 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(1536)]);
    var  val13 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(1537)]);
    var  val14 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(1538)]);
    var  val15 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(1539)]);
    var  val16 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(2304)]);
    var  val17 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(2305)]);
    var  val18 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(2306)]);
    var  val19 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(2307)]);
    acc0 = fma(val0,val4,acc0);
    acc0 = fma(val1,val5,acc0);
    acc0 = fma(val2,val6,acc0);
    acc0 = fma(val3,val7,acc0);
    acc1 = fma(val0,val8,acc1);
    acc1 = fma(val1,val9,acc1);
    acc1 = fma(val2,val10,acc1);
    acc1 = fma(val3,val11,acc1);
    acc2 = fma(val0,val12,acc2);
    acc2 = fma(val1,val13,acc2);
    acc2 = fma(val2,val14,acc2);
    acc2 = fma(val3,val15,acc2);
    acc3 = fma(val0,val16,acc3);
    acc3 = fma(val1,val17,acc3);
    acc3 = fma(val2,val18,acc3);
    acc3 = fma(val3,val19,acc3);
  }
  data0[(gidx0*(1280))+(gidx1*(64))+(lidx2*(640))+(lidx3*(4))] = acc0;
  data0[(gidx0*(1280))+(gidx1*(64))+(lidx2*(640))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(1280))+(gidx1*(64))+(lidx2*(640))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(1280))+(gidx1*(64))+(lidx2*(640))+(lidx3*(4))+(3)] = acc3;
}`;

const r_2_16_77_8_16_20_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 16 */
  let gidx2 = i32(gindex.x); /* 77 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (20); ridx0++) {
    var  val0 = f32(data1[(gidx0*(655360))+(gidx1*(40960))+(lidx3*(80))+(lidx4*(2560))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(655360))+(gidx1*(40960))+(lidx3*(80))+(lidx4*(2560))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(655360))+(gidx1*(40960))+(lidx3*(80))+(lidx4*(2560))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(655360))+(gidx1*(40960))+(lidx3*(80))+(lidx4*(2560))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(655360))+(gidx1*(40960))+(lidx3*(80))+(lidx4*(2560))+(ridx0*(4))+(640)]);
    var  val5 = f32(data1[(gidx0*(655360))+(gidx1*(40960))+(lidx3*(80))+(lidx4*(2560))+(ridx0*(4))+(641)]);
    var  val6 = f32(data1[(gidx0*(655360))+(gidx1*(40960))+(lidx3*(80))+(lidx4*(2560))+(ridx0*(4))+(642)]);
    var  val7 = f32(data1[(gidx0*(655360))+(gidx1*(40960))+(lidx3*(80))+(lidx4*(2560))+(ridx0*(4))+(643)]);
    var  val8 = f32(data1[(gidx0*(655360))+(gidx1*(40960))+(lidx3*(80))+(lidx4*(2560))+(ridx0*(4))+(1280)]);
    var  val9 = f32(data1[(gidx0*(655360))+(gidx1*(40960))+(lidx3*(80))+(lidx4*(2560))+(ridx0*(4))+(1281)]);
    var  val10 = f32(data1[(gidx0*(655360))+(gidx1*(40960))+(lidx3*(80))+(lidx4*(2560))+(ridx0*(4))+(1282)]);
    var  val11 = f32(data1[(gidx0*(655360))+(gidx1*(40960))+(lidx3*(80))+(lidx4*(2560))+(ridx0*(4))+(1283)]);
    var  val12 = f32(data1[(gidx0*(655360))+(gidx1*(40960))+(lidx3*(80))+(lidx4*(2560))+(ridx0*(4))+(1920)]);
    var  val13 = f32(data1[(gidx0*(655360))+(gidx1*(40960))+(lidx3*(80))+(lidx4*(2560))+(ridx0*(4))+(1921)]);
    var  val14 = f32(data1[(gidx0*(655360))+(gidx1*(40960))+(lidx3*(80))+(lidx4*(2560))+(ridx0*(4))+(1922)]);
    var  val15 = f32(data1[(gidx0*(655360))+(gidx1*(40960))+(lidx3*(80))+(lidx4*(2560))+(ridx0*(4))+(1923)]);
    var  val16 = f32(data2[(gidx0*(49280))+(gidx2*(640))+(lidx3*(80))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx0*(49280))+(gidx2*(640))+(lidx3*(80))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx0*(49280))+(gidx2*(640))+(lidx3*(80))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx0*(49280))+(gidx2*(640))+(lidx3*(80))+(ridx0*(4))+(3)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
  }
  data0[(gidx0*(630784))+(gidx1*(4928))+gidx2+(lidx3*(78848))+(lidx4*(308))] = (acc0*(0.11180339887498948f));
  data0[(gidx0*(630784))+(gidx1*(4928))+gidx2+(lidx3*(78848))+(lidx4*(308))+(77)] = (acc1*(0.11180339887498948f));
  data0[(gidx0*(630784))+(gidx1*(4928))+gidx2+(lidx3*(78848))+(lidx4*(308))+(154)] = (acc2*(0.11180339887498948f));
  data0[(gidx0*(630784))+(gidx1*(4928))+gidx2+(lidx3*(78848))+(lidx4*(308))+(231)] = (acc3*(0.11180339887498948f));
}`;

const r_512_32_77 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 512 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  acc0 = -0x1.fffffep+127f;
  for(var ridx0 = (0); ridx0 < (77); ridx0++) {
    var  val0 = f32(data1[(gidx0*(2464))+(lidx1*(77))+ridx0]);
    acc0 = max(val0,acc0);
  }
  data0[(gidx0*(32))+lidx1] = acc0;
}`;

const E_128_77_32_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 128 */
  let gidx1 = i32(gindex.x); /* 77 */
  let lidx2 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(9856))+gidx1+(lidx2*(308))]);
  var  val1 = f32(data1[(gidx0*(9856))+gidx1+(lidx2*(308))+(77)]);
  var  val2 = f32(data1[(gidx0*(9856))+gidx1+(lidx2*(308))+(154)]);
  var  val3 = f32(data1[(gidx0*(9856))+gidx1+(lidx2*(308))+(231)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx2*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx2*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx2*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx2*(4))+(3)]);
  data0[(gidx0*(9856))+gidx1+(lidx2*(308))] = exp2(((val0-val4)*(1.4426950408889634f)));
  data0[(gidx0*(9856))+gidx1+(lidx2*(308))+(77)] = exp2(((val1-val5)*(1.4426950408889634f)));
  data0[(gidx0*(9856))+gidx1+(lidx2*(308))+(154)] = exp2(((val2-val6)*(1.4426950408889634f)));
  data0[(gidx0*(9856))+gidx1+(lidx2*(308))+(231)] = exp2(((val3-val7)*(1.4426950408889634f)));
}`;

const r_512_32_77n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 512 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (77); ridx0++) {
    var  val0 = f32(data1[(gidx0*(2464))+(lidx1*(77))+ridx0]);
    acc0 = (val0+acc0);
  }
  data0[(gidx0*(32))+lidx1] = acc0;
}`;

const E_512_77_32 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 512 */
  let gidx1 = i32(gindex.x); /* 77 */
  let lidx2 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(2464))+gidx1+(lidx2*(77))]);
  var  val1 = f32(data2[(gidx0*(32))+lidx2]);
  data0[(gidx0*(2464))+gidx1+(lidx2*(77))] = (val0/val1);
}`;

const r_2_4_16_5_2_16_4_77_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(4,16,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 4 */
  let gidx2 = i32(gindex.x); /* 80 */
  let lidx4 = i32(lindex.z); /* 2 */
  let lidx5 = i32(lindex.y); /* 16 */
  let lidx6 = i32(lindex.x); /* 4 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (77); ridx0++) {
    var  val0 = f32(data1[(gidx0*(630784))+(gidx1*(157696))+((gidx2/(5))*(4928))+(lidx4*(78848))+(lidx5*(308))+ridx0]);
    var  val1 = f32(data1[(gidx0*(630784))+(gidx1*(157696))+((gidx2/(5))*(4928))+(lidx4*(78848))+(lidx5*(308))+ridx0+(77)]);
    var  val2 = f32(data1[(gidx0*(630784))+(gidx1*(157696))+((gidx2/(5))*(4928))+(lidx4*(78848))+(lidx5*(308))+ridx0+(154)]);
    var  val3 = f32(data1[(gidx0*(630784))+(gidx1*(157696))+((gidx2/(5))*(4928))+(lidx4*(78848))+(lidx5*(308))+ridx0+(231)]);
    var  val4 = f32(data2[(gidx0*(49280))+(gidx1*(160))+((gidx2%(5))*(16))+(lidx4*(80))+(lidx6*(4))+(ridx0*(640))]);
    var  val5 = f32(data2[(gidx0*(49280))+(gidx1*(160))+((gidx2%(5))*(16))+(lidx4*(80))+(lidx6*(4))+(ridx0*(640))+(1)]);
    var  val6 = f32(data2[(gidx0*(49280))+(gidx1*(160))+((gidx2%(5))*(16))+(lidx4*(80))+(lidx6*(4))+(ridx0*(640))+(2)]);
    var  val7 = f32(data2[(gidx0*(49280))+(gidx1*(160))+((gidx2%(5))*(16))+(lidx4*(80))+(lidx6*(4))+(ridx0*(640))+(3)]);
    acc0 = fma(val0,val4,acc0);
    acc1 = fma(val0,val5,acc1);
    acc2 = fma(val0,val6,acc2);
    acc3 = fma(val0,val7,acc3);
    acc4 = fma(val1,val4,acc4);
    acc5 = fma(val1,val5,acc5);
    acc6 = fma(val1,val6,acc6);
    acc7 = fma(val1,val7,acc7);
    acc8 = fma(val2,val4,acc8);
    acc9 = fma(val2,val5,acc9);
    acc10 = fma(val2,val6,acc10);
    acc11 = fma(val2,val7,acc11);
    acc12 = fma(val3,val4,acc12);
    acc13 = fma(val3,val5,acc13);
    acc14 = fma(val3,val6,acc14);
    acc15 = fma(val3,val7,acc15);
  }
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))] = acc0;
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))+(1)] = acc1;
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))+(2)] = acc2;
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))+(3)] = acc3;
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))+(80)] = acc4;
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))+(81)] = acc5;
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))+(82)] = acc6;
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))+(83)] = acc7;
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))+(160)] = acc8;
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))+(161)] = acc9;
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))+(162)] = acc10;
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))+(163)] = acc11;
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))+(240)] = acc12;
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))+(241)] = acc13;
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))+(242)] = acc14;
  data0[(gidx0*(655360))+(gidx1*(163840))+((gidx2/(5))*(5120))+((gidx2%(5))*(16))+(lidx4*(81920))+(lidx5*(320))+(lidx6*(4))+(243)] = acc15;
}`;

const r_64_80_8_16_160_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 64 */
  let gidx1 = i32(gindex.x); /* 80 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (160); ridx0++) {
    var  val0 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))+(640)]);
    var  val5 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))+(641)]);
    var  val6 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))+(642)]);
    var  val7 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))+(643)]);
    var  val8 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))+(1280)]);
    var  val9 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))+(1281)]);
    var  val10 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))+(1282)]);
    var  val11 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))+(1283)]);
    var  val12 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))+(1920)]);
    var  val13 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))+(1921)]);
    var  val14 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))+(1922)]);
    var  val15 = f32(data1[(gidx0*(20480))+(lidx2*(2560))+(ridx0*(4))+(1923)]);
    var  val16 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))+(640)]);
    var  val21 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))+(641)]);
    var  val22 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))+(642)]);
    var  val23 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))+(643)]);
    var  val24 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))+(1280)]);
    var  val25 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))+(1281)]);
    var  val26 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))+(1282)]);
    var  val27 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))+(1283)]);
    var  val28 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))+(1920)]);
    var  val29 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))+(1921)]);
    var  val30 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))+(1922)]);
    var  val31 = f32(data2[(gidx1*(40960))+(lidx3*(2560))+(ridx0*(4))+(1923)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val0,val20,acc1);
    acc1 = fma(val1,val21,acc1);
    acc1 = fma(val2,val22,acc1);
    acc1 = fma(val3,val23,acc1);
    acc2 = fma(val0,val24,acc2);
    acc2 = fma(val1,val25,acc2);
    acc2 = fma(val2,val26,acc2);
    acc2 = fma(val3,val27,acc2);
    acc3 = fma(val0,val28,acc3);
    acc3 = fma(val1,val29,acc3);
    acc3 = fma(val2,val30,acc3);
    acc3 = fma(val3,val31,acc3);
    acc4 = fma(val4,val16,acc4);
    acc4 = fma(val5,val17,acc4);
    acc4 = fma(val6,val18,acc4);
    acc4 = fma(val7,val19,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val4,val24,acc6);
    acc6 = fma(val5,val25,acc6);
    acc6 = fma(val6,val26,acc6);
    acc6 = fma(val7,val27,acc6);
    acc7 = fma(val4,val28,acc7);
    acc7 = fma(val5,val29,acc7);
    acc7 = fma(val6,val30,acc7);
    acc7 = fma(val7,val31,acc7);
    acc8 = fma(val8,val16,acc8);
    acc8 = fma(val9,val17,acc8);
    acc8 = fma(val10,val18,acc8);
    acc8 = fma(val11,val19,acc8);
    acc9 = fma(val8,val20,acc9);
    acc9 = fma(val9,val21,acc9);
    acc9 = fma(val10,val22,acc9);
    acc9 = fma(val11,val23,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val8,val28,acc11);
    acc11 = fma(val9,val29,acc11);
    acc11 = fma(val10,val30,acc11);
    acc11 = fma(val11,val31,acc11);
    acc12 = fma(val12,val16,acc12);
    acc12 = fma(val13,val17,acc12);
    acc12 = fma(val14,val18,acc12);
    acc12 = fma(val15,val19,acc12);
    acc13 = fma(val12,val20,acc13);
    acc13 = fma(val13,val21,acc13);
    acc13 = fma(val14,val22,acc13);
    acc13 = fma(val15,val23,acc13);
    acc14 = fma(val12,val24,acc14);
    acc14 = fma(val13,val25,acc14);
    acc14 = fma(val14,val26,acc14);
    acc14 = fma(val15,val27,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(163840))+(gidx1*(64))+(lidx2*(20480))+(lidx3*(4))] = acc0;
  data0[(gidx0*(163840))+(gidx1*(64))+(lidx2*(20480))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(163840))+(gidx1*(64))+(lidx2*(20480))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(163840))+(gidx1*(64))+(lidx2*(20480))+(lidx3*(4))+(3)] = acc3;
  data0[(gidx0*(163840))+(gidx1*(64))+(lidx2*(20480))+(lidx3*(4))+(5120)] = acc4;
  data0[(gidx0*(163840))+(gidx1*(64))+(lidx2*(20480))+(lidx3*(4))+(5121)] = acc5;
  data0[(gidx0*(163840))+(gidx1*(64))+(lidx2*(20480))+(lidx3*(4))+(5122)] = acc6;
  data0[(gidx0*(163840))+(gidx1*(64))+(lidx2*(20480))+(lidx3*(4))+(5123)] = acc7;
  data0[(gidx0*(163840))+(gidx1*(64))+(lidx2*(20480))+(lidx3*(4))+(10240)] = acc8;
  data0[(gidx0*(163840))+(gidx1*(64))+(lidx2*(20480))+(lidx3*(4))+(10241)] = acc9;
  data0[(gidx0*(163840))+(gidx1*(64))+(lidx2*(20480))+(lidx3*(4))+(10242)] = acc10;
  data0[(gidx0*(163840))+(gidx1*(64))+(lidx2*(20480))+(lidx3*(4))+(10243)] = acc11;
  data0[(gidx0*(163840))+(gidx1*(64))+(lidx2*(20480))+(lidx3*(4))+(15360)] = acc12;
  data0[(gidx0*(163840))+(gidx1*(64))+(lidx2*(20480))+(lidx3*(4))+(15361)] = acc13;
  data0[(gidx0*(163840))+(gidx1*(64))+(lidx2*(20480))+(lidx3*(4))+(15362)] = acc14;
  data0[(gidx0*(163840))+(gidx1*(64))+(lidx2*(20480))+(lidx3*(4))+(15363)] = acc15;
}`;

const E_64_160_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 64 */
  let gidx1 = i32(gindex.x); /* 160 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(163840))+(gidx1*(16))+(lidx2*(20480))+lidx3+(2560)]);
  var  val1 = f32(data1[(gidx0*(163840))+(gidx1*(16))+(lidx2*(20480))+lidx3+(7680)]);
  var  val2 = f32(data1[(gidx0*(163840))+(gidx1*(16))+(lidx2*(20480))+lidx3+(12800)]);
  var  val3 = f32(data1[(gidx0*(163840))+(gidx1*(16))+(lidx2*(20480))+lidx3+(17920)]);
  var  val4 = f32(data2[(gidx1*(16))+lidx3+(2560)]);
  data0[(gidx0*(81920))+(gidx1*(16))+(lidx2*(10240))+lidx3] = ((0.5f)*(val0+val4));
  data0[(gidx0*(81920))+(gidx1*(16))+(lidx2*(10240))+lidx3+(2560)] = ((0.5f)*(val1+val4));
  data0[(gidx0*(81920))+(gidx1*(16))+(lidx2*(10240))+lidx3+(5120)] = ((0.5f)*(val2+val4));
  data0[(gidx0*(81920))+(gidx1*(16))+(lidx2*(10240))+lidx3+(7680)] = ((0.5f)*(val3+val4));
}`;

const E_64_160_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 64 */
  let gidx1 = i32(gindex.x); /* 160 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(163840))+(gidx1*(16))+(lidx2*(20480))+lidx3+(2560)]);
  var  val1 = f32(data1[(gidx0*(163840))+(gidx1*(16))+(lidx2*(20480))+lidx3+(7680)]);
  var  val2 = f32(data1[(gidx0*(163840))+(gidx1*(16))+(lidx2*(20480))+lidx3+(12800)]);
  var  val3 = f32(data1[(gidx0*(163840))+(gidx1*(16))+(lidx2*(20480))+lidx3+(17920)]);
  var  val4 = f32(data2[(gidx1*(16))+lidx3+(2560)]);
  var  alu0 = (val0+val4);
  var  alu1 = (val1+val4);
  var  alu2 = (val2+val4);
  var  alu3 = (val3+val4);
  data0[(gidx0*(81920))+(gidx1*(16))+(lidx2*(10240))+lidx3] = ((1.0f)+(((2.0f)*((1.0f)/((1.0f)+exp2(((2.0f)*(alu0*(0.7978845608f)*((1.0f)+((0.044715f)*alu0*alu0)))*((-1.4426950408889634f)))))))-(1.0f)));
  data0[(gidx0*(81920))+(gidx1*(16))+(lidx2*(10240))+lidx3+(2560)] = ((1.0f)+(((2.0f)*((1.0f)/((1.0f)+exp2(((2.0f)*(alu1*(0.7978845608f)*((1.0f)+((0.044715f)*alu1*alu1)))*((-1.4426950408889634f)))))))-(1.0f)));
  data0[(gidx0*(81920))+(gidx1*(16))+(lidx2*(10240))+lidx3+(5120)] = ((1.0f)+(((2.0f)*((1.0f)/((1.0f)+exp2(((2.0f)*(alu2*(0.7978845608f)*((1.0f)+((0.044715f)*alu2*alu2)))*((-1.4426950408889634f)))))))-(1.0f)));
  data0[(gidx0*(81920))+(gidx1*(16))+(lidx2*(10240))+lidx3+(7680)] = ((1.0f)+(((2.0f)*((1.0f)/((1.0f)+exp2(((2.0f)*(alu3*(0.7978845608f)*((1.0f)+((0.044715f)*alu3*alu3)))*((-1.4426950408889634f)))))))-(1.0f)));
}`;

const E_16_640_32_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(4,32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 16 */
  let gidx1 = i32(gindex.x); /* 640 */
  let lidx2 = i32(lindex.y); /* 32 */
  let lidx3 = i32(lindex.x); /* 4 */
  var  val0 = f32(data1[(gidx0*(655360))+(gidx1*(4))+(lidx2*(20480))+lidx3]);
  var  val1 = f32(data1[(gidx0*(655360))+(gidx1*(4))+(lidx2*(20480))+lidx3+(5120)]);
  var  val2 = f32(data1[(gidx0*(655360))+(gidx1*(4))+(lidx2*(20480))+lidx3+(10240)]);
  var  val3 = f32(data1[(gidx0*(655360))+(gidx1*(4))+(lidx2*(20480))+lidx3+(15360)]);
  var  val4 = f32(data2[(gidx1*(4))+lidx3]);
  var  val5 = f32(data3[(gidx0*(327680))+(gidx1*(4))+(lidx2*(10240))+lidx3]);
  var  val6 = f32(data3[(gidx0*(327680))+(gidx1*(4))+(lidx2*(10240))+lidx3+(2560)]);
  var  val7 = f32(data3[(gidx0*(327680))+(gidx1*(4))+(lidx2*(10240))+lidx3+(5120)]);
  var  val8 = f32(data3[(gidx0*(327680))+(gidx1*(4))+(lidx2*(10240))+lidx3+(7680)]);
  var  val9 = f32(data4[(gidx0*(327680))+(gidx1*(4))+(lidx2*(10240))+lidx3]);
  var  val10 = f32(data4[(gidx0*(327680))+(gidx1*(4))+(lidx2*(10240))+lidx3+(2560)]);
  var  val11 = f32(data4[(gidx0*(327680))+(gidx1*(4))+(lidx2*(10240))+lidx3+(5120)]);
  var  val12 = f32(data4[(gidx0*(327680))+(gidx1*(4))+(lidx2*(10240))+lidx3+(7680)]);
  data0[(gidx0*(327680))+(gidx1*(4))+(lidx2*(10240))+lidx3] = ((val0+val4)*(val5*val9));
  data0[(gidx0*(327680))+(gidx1*(4))+(lidx2*(10240))+lidx3+(2560)] = ((val1+val4)*(val6*val10));
  data0[(gidx0*(327680))+(gidx1*(4))+(lidx2*(10240))+lidx3+(5120)] = ((val2+val4)*(val7*val11));
  data0[(gidx0*(327680))+(gidx1*(4))+(lidx2*(10240))+lidx3+(7680)] = ((val3+val4)*(val8*val12));
}`;

const r_64_10_8_16_640_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 64 */
  let gidx1 = i32(gindex.x); /* 10 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (640); ridx0++) {
    var  val0 = f32(data1[(gidx0*(81920))+(lidx2*(10240))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(81920))+(lidx2*(10240))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(81920))+(lidx2*(10240))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(81920))+(lidx2*(10240))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(81920))+(lidx2*(10240))+(ridx0*(4))+(2560)]);
    var  val5 = f32(data1[(gidx0*(81920))+(lidx2*(10240))+(ridx0*(4))+(2561)]);
    var  val6 = f32(data1[(gidx0*(81920))+(lidx2*(10240))+(ridx0*(4))+(2562)]);
    var  val7 = f32(data1[(gidx0*(81920))+(lidx2*(10240))+(ridx0*(4))+(2563)]);
    var  val8 = f32(data1[(gidx0*(81920))+(lidx2*(10240))+(ridx0*(4))+(5120)]);
    var  val9 = f32(data1[(gidx0*(81920))+(lidx2*(10240))+(ridx0*(4))+(5121)]);
    var  val10 = f32(data1[(gidx0*(81920))+(lidx2*(10240))+(ridx0*(4))+(5122)]);
    var  val11 = f32(data1[(gidx0*(81920))+(lidx2*(10240))+(ridx0*(4))+(5123)]);
    var  val12 = f32(data1[(gidx0*(81920))+(lidx2*(10240))+(ridx0*(4))+(7680)]);
    var  val13 = f32(data1[(gidx0*(81920))+(lidx2*(10240))+(ridx0*(4))+(7681)]);
    var  val14 = f32(data1[(gidx0*(81920))+(lidx2*(10240))+(ridx0*(4))+(7682)]);
    var  val15 = f32(data1[(gidx0*(81920))+(lidx2*(10240))+(ridx0*(4))+(7683)]);
    var  val16 = f32(data2[(gidx1*(163840))+(lidx3*(10240))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(163840))+(lidx3*(10240))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(163840))+(lidx3*(10240))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(163840))+(lidx3*(10240))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(163840))+(lidx3*(10240))+(ridx0*(4))+(2560)]);
    var  val21 = f32(data2[(gidx1*(163840))+(lidx3*(10240))+(ridx0*(4))+(2561)]);
    var  val22 = f32(data2[(gidx1*(163840))+(lidx3*(10240))+(ridx0*(4))+(2562)]);
    var  val23 = f32(data2[(gidx1*(163840))+(lidx3*(10240))+(ridx0*(4))+(2563)]);
    var  val24 = f32(data2[(gidx1*(163840))+(lidx3*(10240))+(ridx0*(4))+(5120)]);
    var  val25 = f32(data2[(gidx1*(163840))+(lidx3*(10240))+(ridx0*(4))+(5121)]);
    var  val26 = f32(data2[(gidx1*(163840))+(lidx3*(10240))+(ridx0*(4))+(5122)]);
    var  val27 = f32(data2[(gidx1*(163840))+(lidx3*(10240))+(ridx0*(4))+(5123)]);
    var  val28 = f32(data2[(gidx1*(163840))+(lidx3*(10240))+(ridx0*(4))+(7680)]);
    var  val29 = f32(data2[(gidx1*(163840))+(lidx3*(10240))+(ridx0*(4))+(7681)]);
    var  val30 = f32(data2[(gidx1*(163840))+(lidx3*(10240))+(ridx0*(4))+(7682)]);
    var  val31 = f32(data2[(gidx1*(163840))+(lidx3*(10240))+(ridx0*(4))+(7683)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val0,val20,acc1);
    acc1 = fma(val1,val21,acc1);
    acc1 = fma(val2,val22,acc1);
    acc1 = fma(val3,val23,acc1);
    acc2 = fma(val0,val24,acc2);
    acc2 = fma(val1,val25,acc2);
    acc2 = fma(val2,val26,acc2);
    acc2 = fma(val3,val27,acc2);
    acc3 = fma(val0,val28,acc3);
    acc3 = fma(val1,val29,acc3);
    acc3 = fma(val2,val30,acc3);
    acc3 = fma(val3,val31,acc3);
    acc4 = fma(val4,val16,acc4);
    acc4 = fma(val5,val17,acc4);
    acc4 = fma(val6,val18,acc4);
    acc4 = fma(val7,val19,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val4,val24,acc6);
    acc6 = fma(val5,val25,acc6);
    acc6 = fma(val6,val26,acc6);
    acc6 = fma(val7,val27,acc6);
    acc7 = fma(val4,val28,acc7);
    acc7 = fma(val5,val29,acc7);
    acc7 = fma(val6,val30,acc7);
    acc7 = fma(val7,val31,acc7);
    acc8 = fma(val8,val16,acc8);
    acc8 = fma(val9,val17,acc8);
    acc8 = fma(val10,val18,acc8);
    acc8 = fma(val11,val19,acc8);
    acc9 = fma(val8,val20,acc9);
    acc9 = fma(val9,val21,acc9);
    acc9 = fma(val10,val22,acc9);
    acc9 = fma(val11,val23,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val8,val28,acc11);
    acc11 = fma(val9,val29,acc11);
    acc11 = fma(val10,val30,acc11);
    acc11 = fma(val11,val31,acc11);
    acc12 = fma(val12,val16,acc12);
    acc12 = fma(val13,val17,acc12);
    acc12 = fma(val14,val18,acc12);
    acc12 = fma(val15,val19,acc12);
    acc13 = fma(val12,val20,acc13);
    acc13 = fma(val13,val21,acc13);
    acc13 = fma(val14,val22,acc13);
    acc13 = fma(val15,val23,acc13);
    acc14 = fma(val12,val24,acc14);
    acc14 = fma(val13,val25,acc14);
    acc14 = fma(val14,val26,acc14);
    acc14 = fma(val15,val27,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))] = acc0;
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(3)] = acc3;
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(640)] = acc4;
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(641)] = acc5;
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(642)] = acc6;
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(643)] = acc7;
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1280)] = acc8;
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1281)] = acc9;
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1282)] = acc10;
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1283)] = acc11;
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1920)] = acc12;
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1921)] = acc13;
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1922)] = acc14;
  data0[(gidx0*(20480))+(gidx1*(64))+(lidx2*(2560))+(lidx3*(4))+(1923)] = acc15;
}`;

const E_160_16_2_4_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,4,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 160 */
  let gidx1 = i32(gindex.x); /* 16 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 4 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(4))+(gidx1*(40960))+(lidx2*(655360))+lidx3+(lidx4*(2560))]);
  var  val1 = f32(data1[(gidx0*(4))+(gidx1*(40960))+(lidx2*(655360))+lidx3+(lidx4*(2560))+(640)]);
  var  val2 = f32(data1[(gidx0*(4))+(gidx1*(40960))+(lidx2*(655360))+lidx3+(lidx4*(2560))+(1280)]);
  var  val3 = f32(data1[(gidx0*(4))+(gidx1*(40960))+(lidx2*(655360))+lidx3+(lidx4*(2560))+(1920)]);
  var  val4 = f32(data2[(gidx0*(4))+lidx3]);
  var  val5 = f32(data3[(gidx0*(4))+(gidx1*(40960))+(lidx2*(655360))+lidx3+(lidx4*(2560))]);
  var  val6 = f32(data3[(gidx0*(4))+(gidx1*(40960))+(lidx2*(655360))+lidx3+(lidx4*(2560))+(640)]);
  var  val7 = f32(data3[(gidx0*(4))+(gidx1*(40960))+(lidx2*(655360))+lidx3+(lidx4*(2560))+(1280)]);
  var  val8 = f32(data3[(gidx0*(4))+(gidx1*(40960))+(lidx2*(655360))+lidx3+(lidx4*(2560))+(1920)]);
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(655360))+(lidx3*(1024))+(lidx4*(4))] = (val0+val4+val5);
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(655360))+(lidx3*(1024))+(lidx4*(4))+(1)] = (val1+val4+val6);
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(655360))+(lidx3*(1024))+(lidx4*(4))+(2)] = (val2+val4+val7);
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(655360))+(lidx3*(1024))+(lidx4*(4))+(3)] = (val3+val4+val8);
}`;

const r_2_20_16_8_16_80_4_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 20 */
  let gidx2 = i32(gindex.x); /* 16 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (80); ridx0++) {
    var  val0 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))]);
    var  val1 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1024)]);
    var  val2 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2048)]);
    var  val3 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3072)]);
    var  val4 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1)]);
    var  val5 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1025)]);
    var  val6 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2049)]);
    var  val7 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3073)]);
    var  val8 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2)]);
    var  val9 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1026)]);
    var  val10 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2050)]);
    var  val11 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3074)]);
    var  val12 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3)]);
    var  val13 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1027)]);
    var  val14 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2051)]);
    var  val15 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3075)]);
    var  val16 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(320)]);
    var  val21 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(321)]);
    var  val22 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(322)]);
    var  val23 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(323)]);
    var  val24 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(640)]);
    var  val25 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(641)]);
    var  val26 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(642)]);
    var  val27 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(643)]);
    var  val28 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(960)]);
    var  val29 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(961)]);
    var  val30 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(962)]);
    var  val31 = f32(data2[(gidx1*(10240))+(lidx3*(1280))+(ridx0*(4))+(963)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))] = acc0;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)] = acc3;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1024)] = acc4;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1025)] = acc5;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1026)] = acc6;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1027)] = acc7;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2048)] = acc8;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2049)] = acc9;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2050)] = acc10;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2051)] = acc11;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3072)] = acc12;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3073)] = acc13;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3074)] = acc14;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3075)] = acc15;
}`;

const r_2_20_16_8_16_160_4_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@group(0) @binding(7) var<storage,read_write> data7: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 20 */
  let gidx2 = i32(gindex.x); /* 16 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (160); ridx0++) {
    var  val0 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))]);
    var  val1 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1024)]);
    var  val2 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2048)]);
    var  val3 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3072)]);
    var  val4 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1)]);
    var  val5 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1025)]);
    var  val6 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2049)]);
    var  val7 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3073)]);
    var  val8 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2)]);
    var  val9 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1026)]);
    var  val10 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2050)]);
    var  val11 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3074)]);
    var  val12 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3)]);
    var  val13 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1027)]);
    var  val14 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2051)]);
    var  val15 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3075)]);
    var  val16 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(640)]);
    var  val21 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(641)]);
    var  val22 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(642)]);
    var  val23 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(643)]);
    var  val24 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1280)]);
    var  val25 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1281)]);
    var  val26 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1282)]);
    var  val27 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1283)]);
    var  val28 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1920)]);
    var  val29 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1921)]);
    var  val30 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1922)]);
    var  val31 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1923)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  var  val32 = f32(data3[(gidx1*(32))+(lidx3*(4))]);
  var  val33 = f32(data3[(gidx1*(32))+(lidx3*(4))+(1)]);
  var  val34 = f32(data3[(gidx1*(32))+(lidx3*(4))+(2)]);
  var  val35 = f32(data3[(gidx1*(32))+(lidx3*(4))+(3)]);
  var  val36 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))]);
  var  val37 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)]);
  var  val38 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)]);
  var  val39 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)]);
  var  val40 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1024)]);
  var  val41 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1025)]);
  var  val42 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1026)]);
  var  val43 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1027)]);
  var  val44 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2048)]);
  var  val45 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2049)]);
  var  val46 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2050)]);
  var  val47 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2051)]);
  var  val48 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3072)]);
  var  val49 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3073)]);
  var  val50 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3074)]);
  var  val51 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3075)]);
  var  val52 = f32(data5[(gidx1*(32))+(lidx3*(4))]);
  var  val53 = f32(data5[(gidx1*(32))+(lidx3*(4))+(1)]);
  var  val54 = f32(data5[(gidx1*(32))+(lidx3*(4))+(2)]);
  var  val55 = f32(data5[(gidx1*(32))+(lidx3*(4))+(3)]);
  var  val56 = f32(data6[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))]);
  var  val57 = f32(data6[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)]);
  var  val58 = f32(data6[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)]);
  var  val59 = f32(data6[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)]);
  var  val60 = f32(data6[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1024)]);
  var  val61 = f32(data6[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1025)]);
  var  val62 = f32(data6[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1026)]);
  var  val63 = f32(data6[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1027)]);
  var  val64 = f32(data6[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2048)]);
  var  val65 = f32(data6[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2049)]);
  var  val66 = f32(data6[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2050)]);
  var  val67 = f32(data6[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2051)]);
  var  val68 = f32(data6[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3072)]);
  var  val69 = f32(data6[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3073)]);
  var  val70 = f32(data6[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3074)]);
  var  val71 = f32(data6[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3075)]);
  var  val72 = f32(data7[(gidx1*(32))+(lidx3*(4))]);
  var  val73 = f32(data7[(gidx1*(32))+(lidx3*(4))+(1)]);
  var  val74 = f32(data7[(gidx1*(32))+(lidx3*(4))+(2)]);
  var  val75 = f32(data7[(gidx1*(32))+(lidx3*(4))+(3)]);
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))] = (acc0+val32+(val36+val52+(val56+val72)));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)] = (acc1+val32+(val37+val52+(val57+val72)));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)] = (acc2+val32+(val38+val52+(val58+val72)));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)] = (acc3+val32+(val39+val52+(val59+val72)));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1024)] = (acc4+val33+(val40+val53+(val60+val73)));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1025)] = (acc5+val33+(val41+val53+(val61+val73)));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1026)] = (acc6+val33+(val42+val53+(val62+val73)));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1027)] = (acc7+val33+(val43+val53+(val63+val73)));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2048)] = (acc8+val34+(val44+val54+(val64+val74)));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2049)] = (acc9+val34+(val45+val54+(val65+val74)));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2050)] = (acc10+val34+(val46+val54+(val66+val74)));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2051)] = (acc11+val34+(val47+val54+(val67+val74)));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3072)] = (acc12+val35+(val48+val55+(val68+val75)));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3073)] = (acc13+val35+(val49+val55+(val69+val75)));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3074)] = (acc14+val35+(val50+val55+(val70+val75)));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3075)] = (acc15+val35+(val51+val55+(val71+val75)));
}`;

const r_2_20_16_8_16_160_4_4_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 20 */
  let gidx2 = i32(gindex.x); /* 16 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (160); ridx0++) {
    var  val0 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))]);
    var  val1 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1024)]);
    var  val2 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2048)]);
    var  val3 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3072)]);
    var  val4 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1)]);
    var  val5 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1025)]);
    var  val6 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2049)]);
    var  val7 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3073)]);
    var  val8 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2)]);
    var  val9 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1026)]);
    var  val10 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2050)]);
    var  val11 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3074)]);
    var  val12 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3)]);
    var  val13 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1027)]);
    var  val14 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2051)]);
    var  val15 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3075)]);
    var  val16 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(640)]);
    var  val21 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(641)]);
    var  val22 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(642)]);
    var  val23 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(643)]);
    var  val24 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1280)]);
    var  val25 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1281)]);
    var  val26 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1282)]);
    var  val27 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1283)]);
    var  val28 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1920)]);
    var  val29 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1921)]);
    var  val30 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1922)]);
    var  val31 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1923)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  var  val32 = f32(data3[(gidx1*(32))+(lidx3*(4))]);
  var  val33 = f32(data3[(gidx1*(32))+(lidx3*(4))+(1)]);
  var  val34 = f32(data3[(gidx1*(32))+(lidx3*(4))+(2)]);
  var  val35 = f32(data3[(gidx1*(32))+(lidx3*(4))+(3)]);
  var  val36 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))]);
  var  val37 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)]);
  var  val38 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)]);
  var  val39 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)]);
  var  val40 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1024)]);
  var  val41 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1025)]);
  var  val42 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1026)]);
  var  val43 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1027)]);
  var  val44 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2048)]);
  var  val45 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2049)]);
  var  val46 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2050)]);
  var  val47 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2051)]);
  var  val48 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3072)]);
  var  val49 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3073)]);
  var  val50 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3074)]);
  var  val51 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3075)]);
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))] = (acc0+val32+val36);
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)] = (acc1+val32+val37);
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)] = (acc2+val32+val38);
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)] = (acc3+val32+val39);
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1024)] = (acc4+val33+val40);
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1025)] = (acc5+val33+val41);
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1026)] = (acc6+val33+val42);
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1027)] = (acc7+val33+val43);
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2048)] = (acc8+val34+val44);
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2049)] = (acc9+val34+val45);
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2050)] = (acc10+val34+val46);
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2051)] = (acc11+val34+val47);
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3072)] = (acc12+val35+val48);
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3073)] = (acc13+val35+val49);
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3074)] = (acc14+val35+val50);
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3075)] = (acc15+val35+val51);
}`;

const r_2_160_2_16_8_640_3_3_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 160 */
  let gidx2 = i32(gindex.x); /* 2 */
  let lidx3 = i32(lindex.y); /* 16 */
  let lidx4 = i32(lindex.x); /* 8 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (640); ridx0++) {
    var  alu0 = f32((lidx4*((-4)))<(0));
    var  alu1 = f32(((gidx2*((-16)))+(lidx3*((-1))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+((-33))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+((-1))]), bool(alu0));
    var  alu2 = f32(((gidx2*(16))+lidx3)<(31));
    var  val2 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+(31)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+((-32))]), bool(alu1));
    var  val4 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))]);
    var  val5 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+(32)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+((-31))]), bool(alu1));
    var  val7 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+(33)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+((-30))]), bool(alu1));
    var  val10 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+(34)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+((-29))]), bool(alu1));
    var  val13 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+(35)]), bool(alu2));
    var  alu3 = f32((lidx4*(4))<(28));
    var  val15 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+((-28))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+(36)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx1*(23040))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5760)]);
    var  val28 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5763)]);
    var  val29 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5766)]);
    var  val30 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5761)]);
    var  val31 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5764)]);
    var  val32 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5767)]);
    var  val33 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5762)]);
    var  val34 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5765)]);
    var  val35 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5768)]);
    var  val36 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11520)]);
    var  val37 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11523)]);
    var  val38 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11526)]);
    var  val39 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11521)]);
    var  val40 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11524)]);
    var  val41 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11527)]);
    var  val42 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11522)]);
    var  val43 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11525)]);
    var  val44 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11528)]);
    var  val45 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17280)]);
    var  val46 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17283)]);
    var  val47 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17286)]);
    var  val48 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17281)]);
    var  val49 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17284)]);
    var  val50 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17287)]);
    var  val51 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17282)]);
    var  val52 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17285)]);
    var  val53 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17288)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  var  val54 = f32(data3[gidx1*(4)]);
  var  val55 = f32(data3[(gidx1*(4))+(1)]);
  var  val56 = f32(data3[(gidx1*(4))+(2)]);
  var  val57 = f32(data3[(gidx1*(4))+(3)]);
  var  val58 = f32(data4[gidx1*(4)]);
  var  val59 = f32(data4[(gidx1*(4))+(1)]);
  var  val60 = f32(data4[(gidx1*(4))+(2)]);
  var  val61 = f32(data4[(gidx1*(4))+(3)]);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))] = (acc0+val54+val58);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1)] = (acc1+val54+val58);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2)] = (acc2+val54+val58);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3)] = (acc3+val54+val58);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1024)] = (acc4+val55+val59);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1025)] = (acc5+val55+val59);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1026)] = (acc6+val55+val59);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1027)] = (acc7+val55+val59);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2048)] = (acc8+val56+val60);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2049)] = (acc9+val56+val60);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2050)] = (acc10+val56+val60);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2051)] = (acc11+val56+val60);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3072)] = (acc12+val57+val61);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3073)] = (acc13+val57+val61);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3074)] = (acc14+val57+val61);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3075)] = (acc15+val57+val61);
}`;

const r_2_160_2_16_8_640_3_3_4_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 160 */
  let gidx2 = i32(gindex.x); /* 2 */
  let lidx3 = i32(lindex.y); /* 16 */
  let lidx4 = i32(lindex.x); /* 8 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (640); ridx0++) {
    var  alu0 = f32((lidx4*((-4)))<(0));
    var  alu1 = f32(((gidx2*((-16)))+(lidx3*((-1))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+((-33))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+((-1))]), bool(alu0));
    var  alu2 = f32(((gidx2*(16))+lidx3)<(31));
    var  val2 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+(31)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+((-32))]), bool(alu1));
    var  val4 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))]);
    var  val5 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+(32)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+((-31))]), bool(alu1));
    var  val7 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+(33)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+((-30))]), bool(alu1));
    var  val10 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+(34)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+((-29))]), bool(alu1));
    var  val13 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+(35)]), bool(alu2));
    var  alu3 = f32((lidx4*(4))<(28));
    var  val15 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+((-28))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(655360))+(ridx0*(1024))+(36)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx1*(23040))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5760)]);
    var  val28 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5763)]);
    var  val29 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5766)]);
    var  val30 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5761)]);
    var  val31 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5764)]);
    var  val32 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5767)]);
    var  val33 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5762)]);
    var  val34 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5765)]);
    var  val35 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5768)]);
    var  val36 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11520)]);
    var  val37 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11523)]);
    var  val38 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11526)]);
    var  val39 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11521)]);
    var  val40 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11524)]);
    var  val41 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11527)]);
    var  val42 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11522)]);
    var  val43 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11525)]);
    var  val44 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11528)]);
    var  val45 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17280)]);
    var  val46 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17283)]);
    var  val47 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17286)]);
    var  val48 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17281)]);
    var  val49 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17284)]);
    var  val50 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17287)]);
    var  val51 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17282)]);
    var  val52 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17285)]);
    var  val53 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17288)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  var  val54 = f32(data3[gidx1*(4)]);
  var  val55 = f32(data3[(gidx1*(4))+(1)]);
  var  val56 = f32(data3[(gidx1*(4))+(2)]);
  var  val57 = f32(data3[(gidx1*(4))+(3)]);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))] = (acc0+val54);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1)] = (acc1+val54);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2)] = (acc2+val54);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3)] = (acc3+val54);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1024)] = (acc4+val55);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1025)] = (acc5+val55);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1026)] = (acc6+val55);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1027)] = (acc7+val55);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2048)] = (acc8+val56);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2049)] = (acc9+val56);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2050)] = (acc10+val56);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2051)] = (acc11+val56);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3072)] = (acc12+val57);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3073)] = (acc13+val57);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3074)] = (acc14+val57);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3075)] = (acc15+val57);
}`;

const E_10240_32_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 10240 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx1*(4))+(3)]);
  data0[(gidx0*(128))+(lidx1*(4))] = (val0+val4);
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (val1+val5);
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (val2+val6);
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (val3+val7);
}`;

const r_2_20_16_8_16_160_4_4_4n3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 20 */
  let gidx2 = i32(gindex.x); /* 16 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (160); ridx0++) {
    var  val0 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))]);
    var  val1 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1024)]);
    var  val2 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2048)]);
    var  val3 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3072)]);
    var  val4 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1)]);
    var  val5 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1025)]);
    var  val6 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2049)]);
    var  val7 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3073)]);
    var  val8 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2)]);
    var  val9 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1026)]);
    var  val10 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2050)]);
    var  val11 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3074)]);
    var  val12 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3)]);
    var  val13 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1027)]);
    var  val14 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2051)]);
    var  val15 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3075)]);
    var  val16 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(640)]);
    var  val21 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(641)]);
    var  val22 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(642)]);
    var  val23 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(643)]);
    var  val24 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1280)]);
    var  val25 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1281)]);
    var  val26 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1282)]);
    var  val27 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1283)]);
    var  val28 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1920)]);
    var  val29 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1921)]);
    var  val30 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1922)]);
    var  val31 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1923)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  var  val32 = f32(data3[(gidx1*(32))+(lidx3*(4))]);
  var  val33 = f32(data3[(gidx1*(32))+(lidx3*(4))+(1)]);
  var  val34 = f32(data3[(gidx1*(32))+(lidx3*(4))+(2)]);
  var  val35 = f32(data3[(gidx1*(32))+(lidx3*(4))+(3)]);
  var  val36 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))]);
  var  val37 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)]);
  var  val38 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)]);
  var  val39 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)]);
  var  val40 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1024)]);
  var  val41 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1025)]);
  var  val42 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1026)]);
  var  val43 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1027)]);
  var  val44 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2048)]);
  var  val45 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2049)]);
  var  val46 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2050)]);
  var  val47 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2051)]);
  var  val48 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3072)]);
  var  val49 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3073)]);
  var  val50 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3074)]);
  var  val51 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3075)]);
  var  val52 = f32(data5[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))]);
  var  val53 = f32(data5[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)]);
  var  val54 = f32(data5[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)]);
  var  val55 = f32(data5[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)]);
  var  val56 = f32(data5[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1024)]);
  var  val57 = f32(data5[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1025)]);
  var  val58 = f32(data5[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1026)]);
  var  val59 = f32(data5[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1027)]);
  var  val60 = f32(data5[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2048)]);
  var  val61 = f32(data5[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2049)]);
  var  val62 = f32(data5[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2050)]);
  var  val63 = f32(data5[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2051)]);
  var  val64 = f32(data5[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3072)]);
  var  val65 = f32(data5[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3073)]);
  var  val66 = f32(data5[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3074)]);
  var  val67 = f32(data5[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3075)]);
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))] = (acc0+val32+(val36+val52));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)] = (acc1+val32+(val37+val53));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)] = (acc2+val32+(val38+val54));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)] = (acc3+val32+(val39+val55));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1024)] = (acc4+val33+(val40+val56));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1025)] = (acc5+val33+(val41+val57));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1026)] = (acc6+val33+(val42+val58));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1027)] = (acc7+val33+(val43+val59));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2048)] = (acc8+val34+(val44+val60));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2049)] = (acc9+val34+(val45+val61));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2050)] = (acc10+val34+(val46+val62));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2051)] = (acc11+val34+(val47+val63));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3072)] = (acc12+val35+(val48+val64));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3073)] = (acc13+val35+(val49+val65));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3074)] = (acc14+val35+(val50+val66));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3075)] = (acc15+val35+(val51+val67));
}`;

const r_2_80_2_16_4_640_3_3_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(4,16,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2 */
  let gidx1 = i32(gindex.x); /* 80 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 16 */
  let lidx4 = i32(lindex.x); /* 4 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (640); ridx0++) {
    var  alu0 = f32((lidx4*((-8)))<(0));
    var  alu1 = f32((lidx3*((-2)))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(64))+(gidx0*(655360))+(ridx0*(1024))+((-33))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(64))+(gidx0*(655360))+(ridx0*(1024))+((-1))]), bool(alu0));
    var  val2 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(64))+(gidx0*(655360))+(ridx0*(1024))+(31)]), bool(alu0));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(64))+(gidx0*(655360))+(ridx0*(1024))+((-32))]), bool(alu1));
    var  val4 = f32(data1[(lidx4*(8))+(lidx3*(64))+(gidx0*(655360))+(ridx0*(1024))]);
    var  val5 = f32(data1[(lidx4*(8))+(lidx3*(64))+(gidx0*(655360))+(ridx0*(1024))+(32)]);
    var  val6 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(64))+(gidx0*(655360))+(ridx0*(1024))+((-31))]), bool(alu1));
    var  val7 = f32(data1[(lidx4*(8))+(lidx3*(64))+(gidx0*(655360))+(ridx0*(1024))+(1)]);
    var  val8 = f32(data1[(lidx4*(8))+(lidx3*(64))+(gidx0*(655360))+(ridx0*(1024))+(33)]);
    var  val9 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(64))+(gidx0*(655360))+(ridx0*(1024))+((-30))]), bool(alu1));
    var  val10 = f32(data1[(lidx4*(8))+(lidx3*(64))+(gidx0*(655360))+(ridx0*(1024))+(2)]);
    var  val11 = f32(data1[(lidx4*(8))+(lidx3*(64))+(gidx0*(655360))+(ridx0*(1024))+(34)]);
    var  val12 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(64))+(gidx0*(655360))+(ridx0*(1024))+((-29))]), bool(alu1));
    var  val13 = f32(data1[(lidx4*(8))+(lidx3*(64))+(gidx0*(655360))+(ridx0*(1024))+(3)]);
    var  val14 = f32(data1[(lidx4*(8))+(lidx3*(64))+(gidx0*(655360))+(ridx0*(1024))+(35)]);
    var  val15 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(64))+(gidx0*(655360))+(ridx0*(1024))+((-28))]), bool(alu1));
    var  val16 = f32(data1[(lidx4*(8))+(lidx3*(64))+(gidx0*(655360))+(ridx0*(1024))+(4)]);
    var  val17 = f32(data1[(lidx4*(8))+(lidx3*(64))+(gidx0*(655360))+(ridx0*(1024))+(36)]);
    var  val18 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(64))+(gidx0*(655360))+(ridx0*(1024))+((-27))]), bool(alu1));
    var  val19 = f32(data1[(lidx4*(8))+(lidx3*(64))+(gidx0*(655360))+(ridx0*(1024))+(5)]);
    var  val20 = f32(data1[(lidx4*(8))+(lidx3*(64))+(gidx0*(655360))+(ridx0*(1024))+(37)]);
    var  val21 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(64))+(gidx0*(655360))+(ridx0*(1024))+((-26))]), bool(alu1));
    var  val22 = f32(data1[(lidx4*(8))+(lidx3*(64))+(gidx0*(655360))+(ridx0*(1024))+(6)]);
    var  val23 = f32(data1[(lidx4*(8))+(lidx3*(64))+(gidx0*(655360))+(ridx0*(1024))+(38)]);
    var  val24 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(64))+(gidx0*(655360))+(ridx0*(1024))+((-25))]), bool(alu1));
    var  val25 = f32(data1[(lidx4*(8))+(lidx3*(64))+(gidx0*(655360))+(ridx0*(1024))+(7)]);
    var  val26 = f32(data1[(lidx4*(8))+(lidx3*(64))+(gidx0*(655360))+(ridx0*(1024))+(39)]);
    var  val27 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))]);
    var  val28 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(3)]);
    var  val29 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(6)]);
    var  val30 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(1)]);
    var  val31 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(4)]);
    var  val32 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(7)]);
    var  val33 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(2)]);
    var  val34 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(5)]);
    var  val35 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(8)]);
    var  val36 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(5760)]);
    var  val37 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(5763)]);
    var  val38 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(5766)]);
    var  val39 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(5761)]);
    var  val40 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(5764)]);
    var  val41 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(5767)]);
    var  val42 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(5762)]);
    var  val43 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(5765)]);
    var  val44 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(5768)]);
    var  val45 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(11520)]);
    var  val46 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(11523)]);
    var  val47 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(11526)]);
    var  val48 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(11521)]);
    var  val49 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(11524)]);
    var  val50 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(11527)]);
    var  val51 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(11522)]);
    var  val52 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(11525)]);
    var  val53 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(11528)]);
    var  val54 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(17280)]);
    var  val55 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(17283)]);
    var  val56 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(17286)]);
    var  val57 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(17281)]);
    var  val58 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(17284)]);
    var  val59 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(17287)]);
    var  val60 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(17282)]);
    var  val61 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(17285)]);
    var  val62 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(17288)]);
    acc0 = fma(val0,val27,acc0);
    acc0 = fma(val1,val28,acc0);
    acc0 = fma(val2,val29,acc0);
    acc0 = fma(val3,val30,acc0);
    acc0 = fma(val4,val31,acc0);
    acc0 = fma(val5,val32,acc0);
    acc0 = fma(val6,val33,acc0);
    acc0 = fma(val7,val34,acc0);
    acc0 = fma(val8,val35,acc0);
    acc1 = fma(val6,val27,acc1);
    acc1 = fma(val7,val28,acc1);
    acc1 = fma(val8,val29,acc1);
    acc1 = fma(val9,val30,acc1);
    acc1 = fma(val10,val31,acc1);
    acc1 = fma(val11,val32,acc1);
    acc1 = fma(val12,val33,acc1);
    acc1 = fma(val13,val34,acc1);
    acc1 = fma(val14,val35,acc1);
    acc2 = fma(val12,val27,acc2);
    acc2 = fma(val13,val28,acc2);
    acc2 = fma(val14,val29,acc2);
    acc2 = fma(val15,val30,acc2);
    acc2 = fma(val16,val31,acc2);
    acc2 = fma(val17,val32,acc2);
    acc2 = fma(val18,val33,acc2);
    acc2 = fma(val19,val34,acc2);
    acc2 = fma(val20,val35,acc2);
    acc3 = fma(val18,val27,acc3);
    acc3 = fma(val19,val28,acc3);
    acc3 = fma(val20,val29,acc3);
    acc3 = fma(val21,val30,acc3);
    acc3 = fma(val22,val31,acc3);
    acc3 = fma(val23,val32,acc3);
    acc3 = fma(val24,val33,acc3);
    acc3 = fma(val25,val34,acc3);
    acc3 = fma(val26,val35,acc3);
    acc4 = fma(val0,val36,acc4);
    acc4 = fma(val1,val37,acc4);
    acc4 = fma(val2,val38,acc4);
    acc4 = fma(val3,val39,acc4);
    acc4 = fma(val4,val40,acc4);
    acc4 = fma(val5,val41,acc4);
    acc4 = fma(val6,val42,acc4);
    acc4 = fma(val7,val43,acc4);
    acc4 = fma(val8,val44,acc4);
    acc5 = fma(val6,val36,acc5);
    acc5 = fma(val7,val37,acc5);
    acc5 = fma(val8,val38,acc5);
    acc5 = fma(val9,val39,acc5);
    acc5 = fma(val10,val40,acc5);
    acc5 = fma(val11,val41,acc5);
    acc5 = fma(val12,val42,acc5);
    acc5 = fma(val13,val43,acc5);
    acc5 = fma(val14,val44,acc5);
    acc6 = fma(val12,val36,acc6);
    acc6 = fma(val13,val37,acc6);
    acc6 = fma(val14,val38,acc6);
    acc6 = fma(val15,val39,acc6);
    acc6 = fma(val16,val40,acc6);
    acc6 = fma(val17,val41,acc6);
    acc6 = fma(val18,val42,acc6);
    acc6 = fma(val19,val43,acc6);
    acc6 = fma(val20,val44,acc6);
    acc7 = fma(val18,val36,acc7);
    acc7 = fma(val19,val37,acc7);
    acc7 = fma(val20,val38,acc7);
    acc7 = fma(val21,val39,acc7);
    acc7 = fma(val22,val40,acc7);
    acc7 = fma(val23,val41,acc7);
    acc7 = fma(val24,val42,acc7);
    acc7 = fma(val25,val43,acc7);
    acc7 = fma(val26,val44,acc7);
    acc8 = fma(val0,val45,acc8);
    acc8 = fma(val1,val46,acc8);
    acc8 = fma(val2,val47,acc8);
    acc8 = fma(val3,val48,acc8);
    acc8 = fma(val4,val49,acc8);
    acc8 = fma(val5,val50,acc8);
    acc8 = fma(val6,val51,acc8);
    acc8 = fma(val7,val52,acc8);
    acc8 = fma(val8,val53,acc8);
    acc9 = fma(val6,val45,acc9);
    acc9 = fma(val7,val46,acc9);
    acc9 = fma(val8,val47,acc9);
    acc9 = fma(val9,val48,acc9);
    acc9 = fma(val10,val49,acc9);
    acc9 = fma(val11,val50,acc9);
    acc9 = fma(val12,val51,acc9);
    acc9 = fma(val13,val52,acc9);
    acc9 = fma(val14,val53,acc9);
    acc10 = fma(val12,val45,acc10);
    acc10 = fma(val13,val46,acc10);
    acc10 = fma(val14,val47,acc10);
    acc10 = fma(val15,val48,acc10);
    acc10 = fma(val16,val49,acc10);
    acc10 = fma(val17,val50,acc10);
    acc10 = fma(val18,val51,acc10);
    acc10 = fma(val19,val52,acc10);
    acc10 = fma(val20,val53,acc10);
    acc11 = fma(val18,val45,acc11);
    acc11 = fma(val19,val46,acc11);
    acc11 = fma(val20,val47,acc11);
    acc11 = fma(val21,val48,acc11);
    acc11 = fma(val22,val49,acc11);
    acc11 = fma(val23,val50,acc11);
    acc11 = fma(val24,val51,acc11);
    acc11 = fma(val25,val52,acc11);
    acc11 = fma(val26,val53,acc11);
    acc12 = fma(val0,val54,acc12);
    acc12 = fma(val1,val55,acc12);
    acc12 = fma(val2,val56,acc12);
    acc12 = fma(val3,val57,acc12);
    acc12 = fma(val4,val58,acc12);
    acc12 = fma(val5,val59,acc12);
    acc12 = fma(val6,val60,acc12);
    acc12 = fma(val7,val61,acc12);
    acc12 = fma(val8,val62,acc12);
    acc13 = fma(val6,val54,acc13);
    acc13 = fma(val7,val55,acc13);
    acc13 = fma(val8,val56,acc13);
    acc13 = fma(val9,val57,acc13);
    acc13 = fma(val10,val58,acc13);
    acc13 = fma(val11,val59,acc13);
    acc13 = fma(val12,val60,acc13);
    acc13 = fma(val13,val61,acc13);
    acc13 = fma(val14,val62,acc13);
    acc14 = fma(val12,val54,acc14);
    acc14 = fma(val13,val55,acc14);
    acc14 = fma(val14,val56,acc14);
    acc14 = fma(val15,val57,acc14);
    acc14 = fma(val16,val58,acc14);
    acc14 = fma(val17,val59,acc14);
    acc14 = fma(val18,val60,acc14);
    acc14 = fma(val19,val61,acc14);
    acc14 = fma(val20,val62,acc14);
    acc15 = fma(val18,val54,acc15);
    acc15 = fma(val19,val55,acc15);
    acc15 = fma(val20,val56,acc15);
    acc15 = fma(val21,val57,acc15);
    acc15 = fma(val22,val58,acc15);
    acc15 = fma(val23,val59,acc15);
    acc15 = fma(val24,val60,acc15);
    acc15 = fma(val25,val61,acc15);
    acc15 = fma(val26,val62,acc15);
  }
  var  val63 = f32(data3[(gidx1*(8))+(lidx2*(4))]);
  var  val64 = f32(data3[(gidx1*(8))+(lidx2*(4))+(1)]);
  var  val65 = f32(data3[(gidx1*(8))+(lidx2*(4))+(2)]);
  var  val66 = f32(data3[(gidx1*(8))+(lidx2*(4))+(3)]);
  data0[(gidx0*(163840))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))] = (acc0+val63);
  data0[(gidx0*(163840))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(1)] = (acc1+val63);
  data0[(gidx0*(163840))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(2)] = (acc2+val63);
  data0[(gidx0*(163840))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(3)] = (acc3+val63);
  data0[(gidx0*(163840))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(256)] = (acc4+val64);
  data0[(gidx0*(163840))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(257)] = (acc5+val64);
  data0[(gidx0*(163840))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(258)] = (acc6+val64);
  data0[(gidx0*(163840))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(259)] = (acc7+val64);
  data0[(gidx0*(163840))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(512)] = (acc8+val65);
  data0[(gidx0*(163840))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(513)] = (acc9+val65);
  data0[(gidx0*(163840))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(514)] = (acc10+val65);
  data0[(gidx0*(163840))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(515)] = (acc11+val65);
  data0[(gidx0*(163840))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(768)] = (acc12+val66);
  data0[(gidx0*(163840))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(769)] = (acc13+val66);
  data0[(gidx0*(163840))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(770)] = (acc14+val66);
  data0[(gidx0*(163840))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(771)] = (acc15+val66);
}`;

const r_64_16_320 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 64 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (320); ridx0++) {
    var  val0 = f32(data1[(gidx0*(5120))+(lidx1*(320))+ridx0]);
    acc0 = (val0+acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val1 = f32(temp[ridx1]);
    acc1 = (val1+acc1);
  }
  data0[gidx0] = (acc1*(0.0001953125f));
}`;

const r_64_16_320n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 64 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (320); ridx0++) {
    var  val0 = f32(data1[(gidx0*(5120))+(lidx1*(320))+ridx0]);
    var  val1 = f32(data2[gidx0]);
    var  alu0 = (val0-val1);
    acc0 = fma(alu0,alu0,acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val2 = f32(temp[ridx1]);
    acc1 = (val2+acc1);
  }
  data0[gidx0] = sqrt(((1.0f)/((acc1*(0.0001953125f))+(1e-05f))));
}`;

const E_160_4_2_4_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,4,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 160 */
  let gidx1 = i32(gindex.x); /* 4 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 4 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(1024))+(gidx1*(64))+(lidx2*(163840))+(lidx3*(256))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(1024))+(gidx1*(64))+(lidx2*(163840))+(lidx3*(256))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(1024))+(gidx1*(64))+(lidx2*(163840))+(lidx3*(256))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(1024))+(gidx1*(64))+(lidx2*(163840))+(lidx3*(256))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(lidx2*(32))+(gidx0/(5))]);
  var  val5 = f32(data3[(lidx2*(32))+(gidx0/(5))]);
  var  val6 = f32(data4[(gidx0*(4))+lidx3]);
  var  val7 = f32(data5[(gidx0*(4))+lidx3]);
  data0[(gidx0*(1024))+(gidx1*(64))+(lidx2*(163840))+(lidx3*(256))+(lidx4*(4))] = (((val0-val4)*val5*val6)+val7);
  data0[(gidx0*(1024))+(gidx1*(64))+(lidx2*(163840))+(lidx3*(256))+(lidx4*(4))+(1)] = (((val1-val4)*val5*val6)+val7);
  data0[(gidx0*(1024))+(gidx1*(64))+(lidx2*(163840))+(lidx3*(256))+(lidx4*(4))+(2)] = (((val2-val4)*val5*val6)+val7);
  data0[(gidx0*(1024))+(gidx1*(64))+(lidx2*(163840))+(lidx3*(256))+(lidx4*(4))+(3)] = (((val3-val4)*val5*val6)+val7);
}`;

const E_2_80_4_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 80 */
  let gidx2 = i32(gindex.x); /* 4 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(163840))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(163840))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(163840))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(163840))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(32))+(((gidx1*(8))+lidx3)/(20))]);
  var  val5 = f32(data3[(gidx0*(32))+(((gidx1*(8))+lidx3)/(20))]);
  var  val6 = f32(data4[(gidx1*(8))+lidx3]);
  var  val7 = f32(data5[(gidx1*(8))+lidx3]);
  data0[(gidx0*(163840))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))] = ((1.0f)/((1.0f)+exp2(((((val0-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(163840))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)] = ((1.0f)/((1.0f)+exp2(((((val1-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(163840))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)] = ((1.0f)/((1.0f)+exp2(((((val2-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(163840))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)] = ((1.0f)/((1.0f)+exp2(((((val3-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
}`;

const E_2560_32_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 2560 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx1*(4))+(3)]);
  data0[(gidx0*(128))+(lidx1*(4))] = (val0*val4);
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (val1*val5);
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (val2*val6);
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (val3*val7);
}`;

const r_80_4_8_160_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,128>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(8,4) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 80 */
  let lidx1 = i32(lindex.y); /* 4 */
  let lidx2 = i32(lindex.x); /* 8 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (160); ridx0++) {
    var  val0 = f32(data1[lidx2+(ridx0*(8))]);
    var  val1 = f32(data2[(gidx0*(20480))+(lidx1*(1280))+lidx2+(ridx0*(8))]);
    var  val2 = f32(data2[(gidx0*(20480))+(lidx1*(1280))+lidx2+(ridx0*(8))+(5120)]);
    var  val3 = f32(data2[(gidx0*(20480))+(lidx1*(1280))+lidx2+(ridx0*(8))+(10240)]);
    var  val4 = f32(data2[(gidx0*(20480))+(lidx1*(1280))+lidx2+(ridx0*(8))+(15360)]);
    acc0 = fma(val0,val1,acc0);
    acc1 = fma(val0,val2,acc1);
    acc2 = fma(val0,val3,acc2);
    acc3 = fma(val0,val4,acc3);
  }
  temp[(lidx1*(32))+(lidx2*(4))] = acc0;
  temp[(lidx1*(32))+(lidx2*(4))+(1)] = acc1;
  temp[(lidx1*(32))+(lidx2*(4))+(2)] = acc2;
  temp[(lidx1*(32))+(lidx2*(4))+(3)] = acc3;
  workgroupBarrier();
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  for(var ridx1 = (0); ridx1 < (8); ridx1++) {
    var  val5 = f32(temp[(lidx1*(32))+(ridx1*(4))]);
    var  val6 = f32(temp[(lidx1*(32))+(ridx1*(4))+(1)]);
    var  val7 = f32(temp[(lidx1*(32))+(ridx1*(4))+(2)]);
    var  val8 = f32(temp[(lidx1*(32))+(ridx1*(4))+(3)]);
    acc4 = (val5+acc4);
    acc5 = (val6+acc5);
    acc6 = (val7+acc6);
    acc7 = (val8+acc7);
  }
  var  val9 = f32(data3[(gidx0*(16))+lidx1]);
  var  val10 = f32(data3[(gidx0*(16))+lidx1+(4)]);
  var  val11 = f32(data3[(gidx0*(16))+lidx1+(8)]);
  var  val12 = f32(data3[(gidx0*(16))+lidx1+(12)]);
  data0[(gidx0*(16))+lidx1] = (acc4+val9);
  data0[(gidx0*(16))+lidx1+(4)] = (acc5+val10);
  data0[(gidx0*(16))+lidx1+(8)] = (acc6+val11);
  data0[(gidx0*(16))+lidx1+(12)] = (acc7+val12);
}`;

const r_2_160_2_16_4_640_3_3_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(4,16,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2 */
  let gidx1 = i32(gindex.x); /* 160 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 16 */
  let lidx4 = i32(lindex.x); /* 4 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (640); ridx0++) {
    var  alu0 = f32((lidx4*((-4)))<(0));
    var  alu1 = f32((lidx3*((-1)))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(163840))+(ridx0*(256))+((-17))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(163840))+(ridx0*(256))+((-1))]), bool(alu0));
    var  alu2 = f32(lidx3<(15));
    var  val2 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(163840))+(ridx0*(256))+(15)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(163840))+(ridx0*(256))+((-16))]), bool(alu1));
    var  val4 = f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(163840))+(ridx0*(256))]);
    var  val5 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(163840))+(ridx0*(256))+(16)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(163840))+(ridx0*(256))+((-15))]), bool(alu1));
    var  val7 = f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(163840))+(ridx0*(256))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(163840))+(ridx0*(256))+(17)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(163840))+(ridx0*(256))+((-14))]), bool(alu1));
    var  val10 = f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(163840))+(ridx0*(256))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(163840))+(ridx0*(256))+(18)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(163840))+(ridx0*(256))+((-13))]), bool(alu1));
    var  val13 = f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(163840))+(ridx0*(256))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(163840))+(ridx0*(256))+(19)]), bool(alu2));
    var  alu3 = f32((lidx4*(4))<(12));
    var  val15 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(163840))+(ridx0*(256))+((-12))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(163840))+(ridx0*(256))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(163840))+(ridx0*(256))+(20)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(5760)]);
    var  val28 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(5763)]);
    var  val29 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(5766)]);
    var  val30 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(5761)]);
    var  val31 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(5764)]);
    var  val32 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(5767)]);
    var  val33 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(5762)]);
    var  val34 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(5765)]);
    var  val35 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(5768)]);
    var  val36 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(11520)]);
    var  val37 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(11523)]);
    var  val38 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(11526)]);
    var  val39 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(11521)]);
    var  val40 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(11524)]);
    var  val41 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(11527)]);
    var  val42 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(11522)]);
    var  val43 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(11525)]);
    var  val44 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(11528)]);
    var  val45 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(17280)]);
    var  val46 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(17283)]);
    var  val47 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(17286)]);
    var  val48 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(17281)]);
    var  val49 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(17284)]);
    var  val50 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(17287)]);
    var  val51 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(17282)]);
    var  val52 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(17285)]);
    var  val53 = f32(data2[(gidx1*(46080))+(lidx2*(23040))+(ridx0*(9))+(17288)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  var  val54 = f32(data3[(gidx1*(8))+(lidx2*(4))]);
  var  val55 = f32(data3[(gidx1*(8))+(lidx2*(4))+(1)]);
  var  val56 = f32(data3[(gidx1*(8))+(lidx2*(4))+(2)]);
  var  val57 = f32(data3[(gidx1*(8))+(lidx2*(4))+(3)]);
  var  val58 = f32(data4[(gidx1*(8))+(lidx2*(4))]);
  var  val59 = f32(data4[(gidx1*(8))+(lidx2*(4))+(1)]);
  var  val60 = f32(data4[(gidx1*(8))+(lidx2*(4))+(2)]);
  var  val61 = f32(data4[(gidx1*(8))+(lidx2*(4))+(3)]);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))] = (acc0+val54+val58);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(1)] = (acc1+val54+val58);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(2)] = (acc2+val54+val58);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(3)] = (acc3+val54+val58);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(256)] = (acc4+val55+val59);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(257)] = (acc5+val55+val59);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(258)] = (acc6+val55+val59);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(259)] = (acc7+val55+val59);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(512)] = (acc8+val56+val60);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(513)] = (acc9+val56+val60);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(514)] = (acc10+val56+val60);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(515)] = (acc11+val56+val60);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(768)] = (acc12+val57+val61);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(769)] = (acc13+val57+val61);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(770)] = (acc14+val57+val61);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(771)] = (acc15+val57+val61);
}`;

const E_320_4_2_4_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,4,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 320 */
  let gidx1 = i32(gindex.x); /* 4 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 4 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(1024))+(gidx1*(64))+(lidx2*(327680))+(lidx3*(256))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(1024))+(gidx1*(64))+(lidx2*(327680))+(lidx3*(256))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(1024))+(gidx1*(64))+(lidx2*(327680))+(lidx3*(256))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(1024))+(gidx1*(64))+(lidx2*(327680))+(lidx3*(256))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(lidx2*(32))+(gidx0/(10))]);
  var  val5 = f32(data3[(lidx2*(32))+(gidx0/(10))]);
  var  val6 = f32(data4[(gidx0*(4))+lidx3]);
  var  val7 = f32(data5[(gidx0*(4))+lidx3]);
  data0[(gidx0*(1024))+(gidx1*(64))+(lidx2*(327680))+(lidx3*(256))+(lidx4*(4))] = (((val0-val4)*val5*val6)+val7);
  data0[(gidx0*(1024))+(gidx1*(64))+(lidx2*(327680))+(lidx3*(256))+(lidx4*(4))+(1)] = (((val1-val4)*val5*val6)+val7);
  data0[(gidx0*(1024))+(gidx1*(64))+(lidx2*(327680))+(lidx3*(256))+(lidx4*(4))+(2)] = (((val2-val4)*val5*val6)+val7);
  data0[(gidx0*(1024))+(gidx1*(64))+(lidx2*(327680))+(lidx3*(256))+(lidx4*(4))+(3)] = (((val3-val4)*val5*val6)+val7);
}`;

const E_2_160_4_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 160 */
  let gidx2 = i32(gindex.x); /* 4 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(327680))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(327680))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(327680))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(327680))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(32))+(gidx1/(5))]);
  var  val5 = f32(data3[(gidx0*(32))+(gidx1/(5))]);
  var  val6 = f32(data4[(gidx1*(8))+lidx3]);
  var  val7 = f32(data5[(gidx1*(8))+lidx3]);
  data0[(gidx0*(327680))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))] = ((1.0f)/((1.0f)+exp2(((((val0-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(327680))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)] = ((1.0f)/((1.0f)+exp2(((((val1-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(327680))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)] = ((1.0f)/((1.0f)+exp2(((((val2-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(327680))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)] = ((1.0f)/((1.0f)+exp2(((((val3-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
}`;

const E_5120_32_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 5120 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx1*(4))+(3)]);
  data0[(gidx0*(128))+(lidx1*(4))] = (val0*val4);
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (val1*val5);
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (val2*val6);
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (val3*val7);
}`;

const r_2_160_2_16_4_1280_3_3_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(4,16,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2 */
  let gidx1 = i32(gindex.x); /* 160 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 16 */
  let lidx4 = i32(lindex.x); /* 4 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (1280); ridx0++) {
    var  alu0 = f32((lidx4*((-4)))<(0));
    var  alu1 = f32((lidx3*((-1)))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+((-17))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+((-1))]), bool(alu0));
    var  alu2 = f32(lidx3<(15));
    var  val2 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+(15)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+((-16))]), bool(alu1));
    var  val4 = f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))]);
    var  val5 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+(16)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+((-15))]), bool(alu1));
    var  val7 = f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+(17)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+((-14))]), bool(alu1));
    var  val10 = f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+(18)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+((-13))]), bool(alu1));
    var  val13 = f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+(19)]), bool(alu2));
    var  alu3 = f32((lidx4*(4))<(12));
    var  val15 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+((-12))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+(20)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11520)]);
    var  val28 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11523)]);
    var  val29 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11526)]);
    var  val30 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11521)]);
    var  val31 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11524)]);
    var  val32 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11527)]);
    var  val33 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11522)]);
    var  val34 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11525)]);
    var  val35 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11528)]);
    var  val36 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23040)]);
    var  val37 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23043)]);
    var  val38 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23046)]);
    var  val39 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23041)]);
    var  val40 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23044)]);
    var  val41 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23047)]);
    var  val42 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23042)]);
    var  val43 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23045)]);
    var  val44 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23048)]);
    var  val45 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34560)]);
    var  val46 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34563)]);
    var  val47 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34566)]);
    var  val48 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34561)]);
    var  val49 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34564)]);
    var  val50 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34567)]);
    var  val51 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34562)]);
    var  val52 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34565)]);
    var  val53 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34568)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))] = acc0;
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(3)] = acc3;
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(256)] = acc4;
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(257)] = acc5;
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(258)] = acc6;
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(259)] = acc7;
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(512)] = acc8;
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(513)] = acc9;
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(514)] = acc10;
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(515)] = acc11;
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(768)] = acc12;
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(769)] = acc13;
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(770)] = acc14;
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(771)] = acc15;
}`;

const r_2_40_4_8_16_160_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 40 */
  let gidx2 = i32(gindex.x); /* 4 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (160); ridx0++) {
    var  val0 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))]);
    var  val1 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(256)]);
    var  val2 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(512)]);
    var  val3 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(768)]);
    var  val4 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(1)]);
    var  val5 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(257)]);
    var  val6 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(513)]);
    var  val7 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(769)]);
    var  val8 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(2)]);
    var  val9 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(258)]);
    var  val10 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(514)]);
    var  val11 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(770)]);
    var  val12 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(3)]);
    var  val13 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(259)]);
    var  val14 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(515)]);
    var  val15 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(771)]);
    var  val16 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(640)]);
    var  val21 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(641)]);
    var  val22 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(642)]);
    var  val23 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(643)]);
    var  val24 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1280)]);
    var  val25 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1281)]);
    var  val26 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1282)]);
    var  val27 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1283)]);
    var  val28 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1920)]);
    var  val29 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1921)]);
    var  val30 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1922)]);
    var  val31 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1923)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  var  val32 = f32(data3[(gidx1*(32))+(lidx3*(4))]);
  var  val33 = f32(data3[(gidx1*(32))+(lidx3*(4))+(1)]);
  var  val34 = f32(data3[(gidx1*(32))+(lidx3*(4))+(2)]);
  var  val35 = f32(data3[(gidx1*(32))+(lidx3*(4))+(3)]);
  var  val36 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))]);
  var  val37 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)]);
  var  val38 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)]);
  var  val39 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)]);
  var  val40 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(256)]);
  var  val41 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(257)]);
  var  val42 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(258)]);
  var  val43 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(259)]);
  var  val44 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(512)]);
  var  val45 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(513)]);
  var  val46 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(514)]);
  var  val47 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(515)]);
  var  val48 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(768)]);
  var  val49 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(769)]);
  var  val50 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(770)]);
  var  val51 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(771)]);
  var  val52 = f32(data5[(gidx1*(32))+(lidx3*(4))]);
  var  val53 = f32(data5[(gidx1*(32))+(lidx3*(4))+(1)]);
  var  val54 = f32(data5[(gidx1*(32))+(lidx3*(4))+(2)]);
  var  val55 = f32(data5[(gidx1*(32))+(lidx3*(4))+(3)]);
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))] = (acc0+val32+(val36+val52));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)] = (acc1+val32+(val37+val52));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)] = (acc2+val32+(val38+val52));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)] = (acc3+val32+(val39+val52));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(256)] = (acc4+val33+(val40+val53));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(257)] = (acc5+val33+(val41+val53));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(258)] = (acc6+val33+(val42+val53));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(259)] = (acc7+val33+(val43+val53));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(512)] = (acc8+val34+(val44+val54));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(513)] = (acc9+val34+(val45+val54));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(514)] = (acc10+val34+(val46+val54));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(515)] = (acc11+val34+(val47+val54));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(768)] = (acc12+val35+(val48+val55));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(769)] = (acc13+val35+(val49+val55));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(770)] = (acc14+val35+(val50+val55));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(771)] = (acc15+val35+(val51+val55));
}`;

const r_2_40_4_8_16_320_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 40 */
  let gidx2 = i32(gindex.x); /* 4 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (320); ridx0++) {
    var  val0 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))]);
    var  val1 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(256)]);
    var  val2 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(512)]);
    var  val3 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(768)]);
    var  val4 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(1)]);
    var  val5 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(257)]);
    var  val6 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(513)]);
    var  val7 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(769)]);
    var  val8 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(2)]);
    var  val9 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(258)]);
    var  val10 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(514)]);
    var  val11 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(770)]);
    var  val12 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(3)]);
    var  val13 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(259)]);
    var  val14 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(515)]);
    var  val15 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(771)]);
    var  val16 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(1280)]);
    var  val21 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(1281)]);
    var  val22 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(1282)]);
    var  val23 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(1283)]);
    var  val24 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(2560)]);
    var  val25 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(2561)]);
    var  val26 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(2562)]);
    var  val27 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(2563)]);
    var  val28 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(3840)]);
    var  val29 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(3841)]);
    var  val30 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(3842)]);
    var  val31 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(3843)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))] = acc0;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)] = acc3;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(256)] = acc4;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(257)] = acc5;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(258)] = acc6;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(259)] = acc7;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(512)] = acc8;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(513)] = acc9;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(514)] = acc10;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(515)] = acc11;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(768)] = acc12;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(769)] = acc13;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(770)] = acc14;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(771)] = acc15;
}`;

const E_4_320_2_16_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(4,16,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 320 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 16 */
  let lidx4 = i32(lindex.x); /* 4 */
  var  val0 = f32(data1[(gidx0*(64))+(gidx1*(1024))+(lidx2*(327680))+(lidx3*(4))+(lidx4*(256))]);
  var  val1 = f32(data1[(gidx0*(64))+(gidx1*(1024))+(lidx2*(327680))+(lidx3*(4))+(lidx4*(256))+(1)]);
  var  val2 = f32(data1[(gidx0*(64))+(gidx1*(1024))+(lidx2*(327680))+(lidx3*(4))+(lidx4*(256))+(2)]);
  var  val3 = f32(data1[(gidx0*(64))+(gidx1*(1024))+(lidx2*(327680))+(lidx3*(4))+(lidx4*(256))+(3)]);
  var  val4 = f32(data2[(gidx1*(4))+lidx4]);
  data0[(gidx0*(81920))+(gidx1*(4))+(lidx2*(327680))+(lidx3*(5120))+lidx4] = (val0+val4);
  data0[(gidx0*(81920))+(gidx1*(4))+(lidx2*(327680))+(lidx3*(5120))+lidx4+(1280)] = (val1+val4);
  data0[(gidx0*(81920))+(gidx1*(4))+(lidx2*(327680))+(lidx3*(5120))+lidx4+(2560)] = (val2+val4);
  data0[(gidx0*(81920))+(gidx1*(4))+(lidx2*(327680))+(lidx3*(5120))+lidx4+(3840)] = (val3+val4);
}`;

const r_512_16_80 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 512 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (80); ridx0++) {
    var  val0 = f32(data1[(gidx0*(1280))+(lidx1*(80))+ridx0]);
    acc0 = (val0+acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val1 = f32(temp[ridx1]);
    acc1 = (val1+acc1);
  }
  data0[gidx0] = (acc1*(0.00078125f));
}`;

const r_512_16_80n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 512 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (80); ridx0++) {
    var  val0 = f32(data1[(gidx0*(1280))+(lidx1*(80))+ridx0]);
    var  val1 = f32(data2[gidx0]);
    var  alu0 = (val0-val1);
    acc0 = fma(alu0,alu0,acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val2 = f32(temp[ridx1]);
    acc1 = (val2+acc1);
  }
  data0[gidx0] = sqrt(((1.0f)/((acc1*(0.00078125f))+(1e-05f))));
}`;

const E_16_20_8_16_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 16 */
  let gidx1 = i32(gindex.x); /* 20 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3)]);
  var  val4 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1280)]);
  var  val5 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1281)]);
  var  val6 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1282)]);
  var  val7 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1283)]);
  var  val8 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2560)]);
  var  val9 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2561)]);
  var  val10 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2562)]);
  var  val11 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2563)]);
  var  val12 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3840)]);
  var  val13 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3841)]);
  var  val14 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3842)]);
  var  val15 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3843)]);
  var  val16 = f32(data2[(gidx0*(32))+(lidx2*(4))]);
  var  val17 = f32(data2[(gidx0*(32))+(lidx2*(4))+(1)]);
  var  val18 = f32(data2[(gidx0*(32))+(lidx2*(4))+(2)]);
  var  val19 = f32(data2[(gidx0*(32))+(lidx2*(4))+(3)]);
  var  val20 = f32(data3[(gidx0*(32))+(lidx2*(4))]);
  var  val21 = f32(data3[(gidx0*(32))+(lidx2*(4))+(1)]);
  var  val22 = f32(data3[(gidx0*(32))+(lidx2*(4))+(2)]);
  var  val23 = f32(data3[(gidx0*(32))+(lidx2*(4))+(3)]);
  var  val24 = f32(data4[(gidx1*(64))+(lidx3*(4))]);
  var  val25 = f32(data4[(gidx1*(64))+(lidx3*(4))+(1)]);
  var  val26 = f32(data4[(gidx1*(64))+(lidx3*(4))+(2)]);
  var  val27 = f32(data4[(gidx1*(64))+(lidx3*(4))+(3)]);
  var  val28 = f32(data5[(gidx1*(64))+(lidx3*(4))]);
  var  val29 = f32(data5[(gidx1*(64))+(lidx3*(4))+(1)]);
  var  val30 = f32(data5[(gidx1*(64))+(lidx3*(4))+(2)]);
  var  val31 = f32(data5[(gidx1*(64))+(lidx3*(4))+(3)]);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))] = (((val0-val16)*val20*val24)+val28);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1)] = (((val1-val16)*val20*val25)+val29);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2)] = (((val2-val16)*val20*val26)+val30);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3)] = (((val3-val16)*val20*val27)+val31);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1280)] = (((val4-val17)*val21*val24)+val28);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1281)] = (((val5-val17)*val21*val25)+val29);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1282)] = (((val6-val17)*val21*val26)+val30);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1283)] = (((val7-val17)*val21*val27)+val31);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2560)] = (((val8-val18)*val22*val24)+val28);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2561)] = (((val9-val18)*val22*val25)+val29);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2562)] = (((val10-val18)*val22*val26)+val30);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2563)] = (((val11-val18)*val22*val27)+val31);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3840)] = (((val12-val19)*val23*val24)+val28);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3841)] = (((val13-val19)*val23*val25)+val29);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3842)] = (((val14-val19)*val23*val26)+val30);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3843)] = (((val15-val19)*val23*val27)+val31);
}`;

const r_16_20_8_16_320_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 16 */
  let gidx1 = i32(gindex.x); /* 20 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (320); ridx0++) {
    var  val0 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(1280)]);
    var  val5 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(1281)]);
    var  val6 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(1282)]);
    var  val7 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(1283)]);
    var  val8 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(2560)]);
    var  val9 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(2561)]);
    var  val10 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(2562)]);
    var  val11 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(2563)]);
    var  val12 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(3840)]);
    var  val13 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(3841)]);
    var  val14 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(3842)]);
    var  val15 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(3843)]);
    var  val16 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(1280)]);
    var  val21 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(1281)]);
    var  val22 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(1282)]);
    var  val23 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(1283)]);
    var  val24 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(2560)]);
    var  val25 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(2561)]);
    var  val26 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(2562)]);
    var  val27 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(2563)]);
    var  val28 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(3840)]);
    var  val29 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(3841)]);
    var  val30 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(3842)]);
    var  val31 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(3843)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val0,val20,acc1);
    acc1 = fma(val1,val21,acc1);
    acc1 = fma(val2,val22,acc1);
    acc1 = fma(val3,val23,acc1);
    acc2 = fma(val0,val24,acc2);
    acc2 = fma(val1,val25,acc2);
    acc2 = fma(val2,val26,acc2);
    acc2 = fma(val3,val27,acc2);
    acc3 = fma(val0,val28,acc3);
    acc3 = fma(val1,val29,acc3);
    acc3 = fma(val2,val30,acc3);
    acc3 = fma(val3,val31,acc3);
    acc4 = fma(val4,val16,acc4);
    acc4 = fma(val5,val17,acc4);
    acc4 = fma(val6,val18,acc4);
    acc4 = fma(val7,val19,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val4,val24,acc6);
    acc6 = fma(val5,val25,acc6);
    acc6 = fma(val6,val26,acc6);
    acc6 = fma(val7,val27,acc6);
    acc7 = fma(val4,val28,acc7);
    acc7 = fma(val5,val29,acc7);
    acc7 = fma(val6,val30,acc7);
    acc7 = fma(val7,val31,acc7);
    acc8 = fma(val8,val16,acc8);
    acc8 = fma(val9,val17,acc8);
    acc8 = fma(val10,val18,acc8);
    acc8 = fma(val11,val19,acc8);
    acc9 = fma(val8,val20,acc9);
    acc9 = fma(val9,val21,acc9);
    acc9 = fma(val10,val22,acc9);
    acc9 = fma(val11,val23,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val8,val28,acc11);
    acc11 = fma(val9,val29,acc11);
    acc11 = fma(val10,val30,acc11);
    acc11 = fma(val11,val31,acc11);
    acc12 = fma(val12,val16,acc12);
    acc12 = fma(val13,val17,acc12);
    acc12 = fma(val14,val18,acc12);
    acc12 = fma(val15,val19,acc12);
    acc13 = fma(val12,val20,acc13);
    acc13 = fma(val13,val21,acc13);
    acc13 = fma(val14,val22,acc13);
    acc13 = fma(val15,val23,acc13);
    acc14 = fma(val12,val24,acc14);
    acc14 = fma(val13,val25,acc14);
    acc14 = fma(val14,val26,acc14);
    acc14 = fma(val15,val27,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))] = acc0;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3)] = acc3;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1280)] = acc4;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1281)] = acc5;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1282)] = acc6;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1283)] = acc7;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2560)] = acc8;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2561)] = acc9;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2562)] = acc10;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2563)] = acc11;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3840)] = acc12;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3841)] = acc13;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3842)] = acc14;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3843)] = acc15;
}`;

const r_2_8_8_4_8_16_40_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 8 */
  let gidx2 = i32(gindex.x); /* 32 */
  let lidx4 = i32(lindex.y); /* 8 */
  let lidx5 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (40); ridx0++) {
    var  val0 = f32(data1[(gidx0*(327680))+(gidx1*(160))+((gidx2/(4))*(40960))+(lidx4*(5120))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(327680))+(gidx1*(160))+((gidx2/(4))*(40960))+(lidx4*(5120))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(327680))+(gidx1*(160))+((gidx2/(4))*(40960))+(lidx4*(5120))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(327680))+(gidx1*(160))+((gidx2/(4))*(40960))+(lidx4*(5120))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(327680))+(gidx1*(160))+((gidx2/(4))*(40960))+(lidx4*(5120))+(ridx0*(4))+(1280)]);
    var  val5 = f32(data1[(gidx0*(327680))+(gidx1*(160))+((gidx2/(4))*(40960))+(lidx4*(5120))+(ridx0*(4))+(1281)]);
    var  val6 = f32(data1[(gidx0*(327680))+(gidx1*(160))+((gidx2/(4))*(40960))+(lidx4*(5120))+(ridx0*(4))+(1282)]);
    var  val7 = f32(data1[(gidx0*(327680))+(gidx1*(160))+((gidx2/(4))*(40960))+(lidx4*(5120))+(ridx0*(4))+(1283)]);
    var  val8 = f32(data1[(gidx0*(327680))+(gidx1*(160))+((gidx2/(4))*(40960))+(lidx4*(5120))+(ridx0*(4))+(2560)]);
    var  val9 = f32(data1[(gidx0*(327680))+(gidx1*(160))+((gidx2/(4))*(40960))+(lidx4*(5120))+(ridx0*(4))+(2561)]);
    var  val10 = f32(data1[(gidx0*(327680))+(gidx1*(160))+((gidx2/(4))*(40960))+(lidx4*(5120))+(ridx0*(4))+(2562)]);
    var  val11 = f32(data1[(gidx0*(327680))+(gidx1*(160))+((gidx2/(4))*(40960))+(lidx4*(5120))+(ridx0*(4))+(2563)]);
    var  val12 = f32(data1[(gidx0*(327680))+(gidx1*(160))+((gidx2/(4))*(40960))+(lidx4*(5120))+(ridx0*(4))+(3840)]);
    var  val13 = f32(data1[(gidx0*(327680))+(gidx1*(160))+((gidx2/(4))*(40960))+(lidx4*(5120))+(ridx0*(4))+(3841)]);
    var  val14 = f32(data1[(gidx0*(327680))+(gidx1*(160))+((gidx2/(4))*(40960))+(lidx4*(5120))+(ridx0*(4))+(3842)]);
    var  val15 = f32(data1[(gidx0*(327680))+(gidx1*(160))+((gidx2/(4))*(40960))+(lidx4*(5120))+(ridx0*(4))+(3843)]);
    var  val16 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(4))*(81920))+(lidx5*(5120))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(4))*(81920))+(lidx5*(5120))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(4))*(81920))+(lidx5*(5120))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(4))*(81920))+(lidx5*(5120))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(4))*(81920))+(lidx5*(5120))+(ridx0*(4))+(1280)]);
    var  val21 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(4))*(81920))+(lidx5*(5120))+(ridx0*(4))+(1281)]);
    var  val22 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(4))*(81920))+(lidx5*(5120))+(ridx0*(4))+(1282)]);
    var  val23 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(4))*(81920))+(lidx5*(5120))+(ridx0*(4))+(1283)]);
    var  val24 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(4))*(81920))+(lidx5*(5120))+(ridx0*(4))+(2560)]);
    var  val25 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(4))*(81920))+(lidx5*(5120))+(ridx0*(4))+(2561)]);
    var  val26 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(4))*(81920))+(lidx5*(5120))+(ridx0*(4))+(2562)]);
    var  val27 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(4))*(81920))+(lidx5*(5120))+(ridx0*(4))+(2563)]);
    var  val28 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(4))*(81920))+(lidx5*(5120))+(ridx0*(4))+(3840)]);
    var  val29 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(4))*(81920))+(lidx5*(5120))+(ridx0*(4))+(3841)]);
    var  val30 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(4))*(81920))+(lidx5*(5120))+(ridx0*(4))+(3842)]);
    var  val31 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(4))*(81920))+(lidx5*(5120))+(ridx0*(4))+(3843)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val0,val20,acc1);
    acc1 = fma(val1,val21,acc1);
    acc1 = fma(val2,val22,acc1);
    acc1 = fma(val3,val23,acc1);
    acc2 = fma(val0,val24,acc2);
    acc2 = fma(val1,val25,acc2);
    acc2 = fma(val2,val26,acc2);
    acc2 = fma(val3,val27,acc2);
    acc3 = fma(val0,val28,acc3);
    acc3 = fma(val1,val29,acc3);
    acc3 = fma(val2,val30,acc3);
    acc3 = fma(val3,val31,acc3);
    acc4 = fma(val4,val16,acc4);
    acc4 = fma(val5,val17,acc4);
    acc4 = fma(val6,val18,acc4);
    acc4 = fma(val7,val19,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val4,val24,acc6);
    acc6 = fma(val5,val25,acc6);
    acc6 = fma(val6,val26,acc6);
    acc6 = fma(val7,val27,acc6);
    acc7 = fma(val4,val28,acc7);
    acc7 = fma(val5,val29,acc7);
    acc7 = fma(val6,val30,acc7);
    acc7 = fma(val7,val31,acc7);
    acc8 = fma(val8,val16,acc8);
    acc8 = fma(val9,val17,acc8);
    acc8 = fma(val10,val18,acc8);
    acc8 = fma(val11,val19,acc8);
    acc9 = fma(val8,val20,acc9);
    acc9 = fma(val9,val21,acc9);
    acc9 = fma(val10,val22,acc9);
    acc9 = fma(val11,val23,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val8,val28,acc11);
    acc11 = fma(val9,val29,acc11);
    acc11 = fma(val10,val30,acc11);
    acc11 = fma(val11,val31,acc11);
    acc12 = fma(val12,val16,acc12);
    acc12 = fma(val13,val17,acc12);
    acc12 = fma(val14,val18,acc12);
    acc12 = fma(val15,val19,acc12);
    acc13 = fma(val12,val20,acc13);
    acc13 = fma(val13,val21,acc13);
    acc13 = fma(val14,val22,acc13);
    acc13 = fma(val15,val23,acc13);
    acc14 = fma(val12,val24,acc14);
    acc14 = fma(val13,val25,acc14);
    acc14 = fma(val14,val26,acc14);
    acc14 = fma(val15,val27,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(4))*(8192))+((gidx2%(4))*(64))+(lidx4*(1024))+(lidx5*(4))] = (acc0*(0.07905694150420949f));
  data0[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(4))*(8192))+((gidx2%(4))*(64))+(lidx4*(1024))+(lidx5*(4))+(1)] = (acc1*(0.07905694150420949f));
  data0[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(4))*(8192))+((gidx2%(4))*(64))+(lidx4*(1024))+(lidx5*(4))+(2)] = (acc2*(0.07905694150420949f));
  data0[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(4))*(8192))+((gidx2%(4))*(64))+(lidx4*(1024))+(lidx5*(4))+(3)] = (acc3*(0.07905694150420949f));
  data0[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(4))*(8192))+((gidx2%(4))*(64))+(lidx4*(1024))+(lidx5*(4))+(256)] = (acc4*(0.07905694150420949f));
  data0[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(4))*(8192))+((gidx2%(4))*(64))+(lidx4*(1024))+(lidx5*(4))+(257)] = (acc5*(0.07905694150420949f));
  data0[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(4))*(8192))+((gidx2%(4))*(64))+(lidx4*(1024))+(lidx5*(4))+(258)] = (acc6*(0.07905694150420949f));
  data0[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(4))*(8192))+((gidx2%(4))*(64))+(lidx4*(1024))+(lidx5*(4))+(259)] = (acc7*(0.07905694150420949f));
  data0[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(4))*(8192))+((gidx2%(4))*(64))+(lidx4*(1024))+(lidx5*(4))+(512)] = (acc8*(0.07905694150420949f));
  data0[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(4))*(8192))+((gidx2%(4))*(64))+(lidx4*(1024))+(lidx5*(4))+(513)] = (acc9*(0.07905694150420949f));
  data0[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(4))*(8192))+((gidx2%(4))*(64))+(lidx4*(1024))+(lidx5*(4))+(514)] = (acc10*(0.07905694150420949f));
  data0[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(4))*(8192))+((gidx2%(4))*(64))+(lidx4*(1024))+(lidx5*(4))+(515)] = (acc11*(0.07905694150420949f));
  data0[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(4))*(8192))+((gidx2%(4))*(64))+(lidx4*(1024))+(lidx5*(4))+(768)] = (acc12*(0.07905694150420949f));
  data0[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(4))*(8192))+((gidx2%(4))*(64))+(lidx4*(1024))+(lidx5*(4))+(769)] = (acc13*(0.07905694150420949f));
  data0[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(4))*(8192))+((gidx2%(4))*(64))+(lidx4*(1024))+(lidx5*(4))+(770)] = (acc14*(0.07905694150420949f));
  data0[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(4))*(8192))+((gidx2%(4))*(64))+(lidx4*(1024))+(lidx5*(4))+(771)] = (acc15*(0.07905694150420949f));
}`;

const r_128_32_64_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 128 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  acc0 = -0x1.fffffep+127f;
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))+(3)]);
    acc0 = max(val0,acc0);
    acc0 = max(val1,acc0);
    acc0 = max(val2,acc0);
    acc0 = max(val3,acc0);
  }
  data0[(gidx0*(32))+lidx1] = acc0;
}`;

const E_512_4_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 512 */
  let gidx1 = i32(gindex.x); /* 4 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(2048))+(gidx1*(64))+(lidx2*(256))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(2048))+(gidx1*(64))+(lidx2*(256))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(2048))+(gidx1*(64))+(lidx2*(256))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(2048))+(gidx1*(64))+(lidx2*(256))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(8))+lidx2]);
  data0[(gidx0*(2048))+(gidx1*(64))+(lidx2*(256))+(lidx3*(4))] = exp2(((val0-val4)*(1.4426950408889634f)));
  data0[(gidx0*(2048))+(gidx1*(64))+(lidx2*(256))+(lidx3*(4))+(1)] = exp2(((val1-val4)*(1.4426950408889634f)));
  data0[(gidx0*(2048))+(gidx1*(64))+(lidx2*(256))+(lidx3*(4))+(2)] = exp2(((val2-val4)*(1.4426950408889634f)));
  data0[(gidx0*(2048))+(gidx1*(64))+(lidx2*(256))+(lidx3*(4))+(3)] = exp2(((val3-val4)*(1.4426950408889634f)));
}`;

const r_128_32_64_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 128 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))+(3)]);
    acc0 = (val0+acc0);
    acc0 = (val1+acc0);
    acc0 = (val2+acc0);
    acc0 = (val3+acc0);
  }
  data0[(gidx0*(32))+lidx1] = acc0;
}`;

const E_512_4_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 512 */
  let gidx1 = i32(gindex.x); /* 4 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(2048))+(gidx1*(64))+(lidx2*(256))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(2048))+(gidx1*(64))+(lidx2*(256))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(2048))+(gidx1*(64))+(lidx2*(256))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(2048))+(gidx1*(64))+(lidx2*(256))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(8))+lidx2]);
  data0[(gidx0*(2048))+(gidx1*(64))+(lidx2*(256))+(lidx3*(4))] = (val0/val4);
  data0[(gidx0*(2048))+(gidx1*(64))+(lidx2*(256))+(lidx3*(4))+(1)] = (val1/val4);
  data0[(gidx0*(2048))+(gidx1*(64))+(lidx2*(256))+(lidx3*(4))+(2)] = (val2/val4);
  data0[(gidx0*(2048))+(gidx1*(64))+(lidx2*(256))+(lidx3*(4))+(3)] = (val3/val4);
}`;

const r_2_8_4_5_16_8_64_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 8 */
  let gidx2 = i32(gindex.x); /* 20 */
  let lidx4 = i32(lindex.y); /* 16 */
  let lidx5 = i32(lindex.x); /* 8 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(5))*(16384))+(lidx4*(1024))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(5))*(16384))+(lidx4*(1024))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(5))*(16384))+(lidx4*(1024))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(5))*(16384))+(lidx4*(1024))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(5))*(16384))+(lidx4*(1024))+(ridx0*(4))+(256)]);
    var  val5 = f32(data1[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(5))*(16384))+(lidx4*(1024))+(ridx0*(4))+(257)]);
    var  val6 = f32(data1[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(5))*(16384))+(lidx4*(1024))+(ridx0*(4))+(258)]);
    var  val7 = f32(data1[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(5))*(16384))+(lidx4*(1024))+(ridx0*(4))+(259)]);
    var  val8 = f32(data1[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(5))*(16384))+(lidx4*(1024))+(ridx0*(4))+(512)]);
    var  val9 = f32(data1[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(5))*(16384))+(lidx4*(1024))+(ridx0*(4))+(513)]);
    var  val10 = f32(data1[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(5))*(16384))+(lidx4*(1024))+(ridx0*(4))+(514)]);
    var  val11 = f32(data1[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(5))*(16384))+(lidx4*(1024))+(ridx0*(4))+(515)]);
    var  val12 = f32(data1[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(5))*(16384))+(lidx4*(1024))+(ridx0*(4))+(768)]);
    var  val13 = f32(data1[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(5))*(16384))+(lidx4*(1024))+(ridx0*(4))+(769)]);
    var  val14 = f32(data1[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(5))*(16384))+(lidx4*(1024))+(ridx0*(4))+(770)]);
    var  val15 = f32(data1[(gidx0*(524288))+(gidx1*(65536))+((gidx2/(5))*(16384))+(lidx4*(1024))+(ridx0*(4))+(771)]);
    var  val16 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(5))*(32))+(lidx5*(4))+(ridx0*(5120))]);
    var  val17 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(5))*(32))+(lidx5*(4))+(ridx0*(5120))+(1280)]);
    var  val18 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(5))*(32))+(lidx5*(4))+(ridx0*(5120))+(2560)]);
    var  val19 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(5))*(32))+(lidx5*(4))+(ridx0*(5120))+(3840)]);
    var  val20 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(5))*(32))+(lidx5*(4))+(ridx0*(5120))+(1)]);
    var  val21 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(5))*(32))+(lidx5*(4))+(ridx0*(5120))+(1281)]);
    var  val22 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(5))*(32))+(lidx5*(4))+(ridx0*(5120))+(2561)]);
    var  val23 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(5))*(32))+(lidx5*(4))+(ridx0*(5120))+(3841)]);
    var  val24 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(5))*(32))+(lidx5*(4))+(ridx0*(5120))+(2)]);
    var  val25 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(5))*(32))+(lidx5*(4))+(ridx0*(5120))+(1282)]);
    var  val26 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(5))*(32))+(lidx5*(4))+(ridx0*(5120))+(2562)]);
    var  val27 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(5))*(32))+(lidx5*(4))+(ridx0*(5120))+(3842)]);
    var  val28 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(5))*(32))+(lidx5*(4))+(ridx0*(5120))+(3)]);
    var  val29 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(5))*(32))+(lidx5*(4))+(ridx0*(5120))+(1283)]);
    var  val30 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(5))*(32))+(lidx5*(4))+(ridx0*(5120))+(2563)]);
    var  val31 = f32(data2[(gidx0*(327680))+(gidx1*(160))+((gidx2%(5))*(32))+(lidx5*(4))+(ridx0*(5120))+(3843)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val0,val20,acc1);
    acc1 = fma(val1,val21,acc1);
    acc1 = fma(val2,val22,acc1);
    acc1 = fma(val3,val23,acc1);
    acc2 = fma(val0,val24,acc2);
    acc2 = fma(val1,val25,acc2);
    acc2 = fma(val2,val26,acc2);
    acc2 = fma(val3,val27,acc2);
    acc3 = fma(val0,val28,acc3);
    acc3 = fma(val1,val29,acc3);
    acc3 = fma(val2,val30,acc3);
    acc3 = fma(val3,val31,acc3);
    acc4 = fma(val4,val16,acc4);
    acc4 = fma(val5,val17,acc4);
    acc4 = fma(val6,val18,acc4);
    acc4 = fma(val7,val19,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val4,val24,acc6);
    acc6 = fma(val5,val25,acc6);
    acc6 = fma(val6,val26,acc6);
    acc6 = fma(val7,val27,acc6);
    acc7 = fma(val4,val28,acc7);
    acc7 = fma(val5,val29,acc7);
    acc7 = fma(val6,val30,acc7);
    acc7 = fma(val7,val31,acc7);
    acc8 = fma(val8,val16,acc8);
    acc8 = fma(val9,val17,acc8);
    acc8 = fma(val10,val18,acc8);
    acc8 = fma(val11,val19,acc8);
    acc9 = fma(val8,val20,acc9);
    acc9 = fma(val9,val21,acc9);
    acc9 = fma(val10,val22,acc9);
    acc9 = fma(val11,val23,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val8,val28,acc11);
    acc11 = fma(val9,val29,acc11);
    acc11 = fma(val10,val30,acc11);
    acc11 = fma(val11,val31,acc11);
    acc12 = fma(val12,val16,acc12);
    acc12 = fma(val13,val17,acc12);
    acc12 = fma(val14,val18,acc12);
    acc12 = fma(val15,val19,acc12);
    acc13 = fma(val12,val20,acc13);
    acc13 = fma(val13,val21,acc13);
    acc13 = fma(val14,val22,acc13);
    acc13 = fma(val15,val23,acc13);
    acc14 = fma(val12,val24,acc14);
    acc14 = fma(val13,val25,acc14);
    acc14 = fma(val14,val26,acc14);
    acc14 = fma(val15,val27,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))] = acc0;
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))+(1)] = acc1;
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))+(2)] = acc2;
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))+(3)] = acc3;
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))+(160)] = acc4;
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))+(161)] = acc5;
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))+(162)] = acc6;
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))+(163)] = acc7;
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))+(320)] = acc8;
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))+(321)] = acc9;
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))+(322)] = acc10;
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))+(323)] = acc11;
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))+(480)] = acc12;
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))+(481)] = acc13;
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))+(482)] = acc14;
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))+(483)] = acc15;
}`;

const r_2_8_20_8_16_320_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 8 */
  let gidx2 = i32(gindex.x); /* 20 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (320); ridx0++) {
    var  val0 = f32(data1[((ridx0*(4))%(160))+((ridx0/(40))*(40960))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(327680))]);
    var  val1 = f32(data1[(((ridx0*(4))+(1))%(160))+((ridx0/(40))*(40960))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(327680))]);
    var  val2 = f32(data1[(((ridx0*(4))+(2))%(160))+((ridx0/(40))*(40960))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(327680))]);
    var  val3 = f32(data1[(((ridx0*(4))+(3))%(160))+((ridx0/(40))*(40960))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(327680))]);
    var  val4 = f32(data1[((ridx0*(4))%(160))+((ridx0/(40))*(40960))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(327680))+(160)]);
    var  val5 = f32(data1[(((ridx0*(4))+(1))%(160))+((ridx0/(40))*(40960))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(327680))+(160)]);
    var  val6 = f32(data1[(((ridx0*(4))+(2))%(160))+((ridx0/(40))*(40960))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(327680))+(160)]);
    var  val7 = f32(data1[(((ridx0*(4))+(3))%(160))+((ridx0/(40))*(40960))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(327680))+(160)]);
    var  val8 = f32(data1[((ridx0*(4))%(160))+((ridx0/(40))*(40960))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(327680))+(320)]);
    var  val9 = f32(data1[(((ridx0*(4))+(1))%(160))+((ridx0/(40))*(40960))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(327680))+(320)]);
    var  val10 = f32(data1[(((ridx0*(4))+(2))%(160))+((ridx0/(40))*(40960))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(327680))+(320)]);
    var  val11 = f32(data1[(((ridx0*(4))+(3))%(160))+((ridx0/(40))*(40960))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(327680))+(320)]);
    var  val12 = f32(data1[((ridx0*(4))%(160))+((ridx0/(40))*(40960))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(327680))+(480)]);
    var  val13 = f32(data1[(((ridx0*(4))+(1))%(160))+((ridx0/(40))*(40960))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(327680))+(480)]);
    var  val14 = f32(data1[(((ridx0*(4))+(2))%(160))+((ridx0/(40))*(40960))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(327680))+(480)]);
    var  val15 = f32(data1[(((ridx0*(4))+(3))%(160))+((ridx0/(40))*(40960))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(327680))+(480)]);
    var  val16 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))+(1280)]);
    var  val21 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))+(1281)]);
    var  val22 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))+(1282)]);
    var  val23 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))+(1283)]);
    var  val24 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))+(2560)]);
    var  val25 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))+(2561)]);
    var  val26 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))+(2562)]);
    var  val27 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))+(2563)]);
    var  val28 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))+(3840)]);
    var  val29 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))+(3841)]);
    var  val30 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))+(3842)]);
    var  val31 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))+(3843)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  var  val32 = f32(data3[(gidx2*(64))+(lidx4*(4))]);
  var  val33 = f32(data3[(gidx2*(64))+(lidx4*(4))+(1)]);
  var  val34 = f32(data3[(gidx2*(64))+(lidx4*(4))+(2)]);
  var  val35 = f32(data3[(gidx2*(64))+(lidx4*(4))+(3)]);
  var  val36 = f32(data4[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))]);
  var  val37 = f32(data4[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(1280)]);
  var  val38 = f32(data4[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(2560)]);
  var  val39 = f32(data4[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(3840)]);
  var  val40 = f32(data4[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(1)]);
  var  val41 = f32(data4[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(1281)]);
  var  val42 = f32(data4[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(2561)]);
  var  val43 = f32(data4[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(3841)]);
  var  val44 = f32(data4[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(2)]);
  var  val45 = f32(data4[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(1282)]);
  var  val46 = f32(data4[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(2562)]);
  var  val47 = f32(data4[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(3842)]);
  var  val48 = f32(data4[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(3)]);
  var  val49 = f32(data4[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(1283)]);
  var  val50 = f32(data4[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(2563)]);
  var  val51 = f32(data4[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(3843)]);
  data0[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))] = (acc0+val32+val36);
  data0[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(1280)] = (acc1+val32+val37);
  data0[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(2560)] = (acc2+val32+val38);
  data0[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(3840)] = (acc3+val32+val39);
  data0[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(1)] = (acc4+val33+val40);
  data0[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(1281)] = (acc5+val33+val41);
  data0[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(2561)] = (acc6+val33+val42);
  data0[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(3841)] = (acc7+val33+val43);
  data0[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(2)] = (acc8+val34+val44);
  data0[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(1282)] = (acc9+val34+val45);
  data0[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(2562)] = (acc10+val34+val46);
  data0[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(3842)] = (acc11+val34+val47);
  data0[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(3)] = (acc12+val35+val48);
  data0[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(1283)] = (acc13+val35+val49);
  data0[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(2563)] = (acc14+val35+val50);
  data0[(gidx0*(327680))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(3843)] = (acc15+val35+val51);
}`;

const r_77_20_2_16_192_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 77 */
  let gidx1 = i32(gindex.x); /* 20 */
  let lidx2 = i32(lindex.y); /* 2 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (192); ridx0++) {
    var  val0 = f32(data1[(gidx0*(1536))+(lidx2*(768))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(1536))+(lidx2*(768))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(1536))+(lidx2*(768))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(1536))+(lidx2*(768))+(ridx0*(4))+(3)]);
    var  val4 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))]);
    var  val5 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(1)]);
    var  val6 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(2)]);
    var  val7 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(3)]);
    var  val8 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(768)]);
    var  val9 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(769)]);
    var  val10 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(770)]);
    var  val11 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(771)]);
    var  val12 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(1536)]);
    var  val13 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(1537)]);
    var  val14 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(1538)]);
    var  val15 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(1539)]);
    var  val16 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(2304)]);
    var  val17 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(2305)]);
    var  val18 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(2306)]);
    var  val19 = f32(data2[(gidx1*(49152))+(lidx3*(3072))+(ridx0*(4))+(2307)]);
    acc0 = fma(val0,val4,acc0);
    acc0 = fma(val1,val5,acc0);
    acc0 = fma(val2,val6,acc0);
    acc0 = fma(val3,val7,acc0);
    acc1 = fma(val0,val8,acc1);
    acc1 = fma(val1,val9,acc1);
    acc1 = fma(val2,val10,acc1);
    acc1 = fma(val3,val11,acc1);
    acc2 = fma(val0,val12,acc2);
    acc2 = fma(val1,val13,acc2);
    acc2 = fma(val2,val14,acc2);
    acc2 = fma(val3,val15,acc2);
    acc3 = fma(val0,val16,acc3);
    acc3 = fma(val1,val17,acc3);
    acc3 = fma(val2,val18,acc3);
    acc3 = fma(val3,val19,acc3);
  }
  data0[(gidx0*(2560))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))] = acc0;
  data0[(gidx0*(2560))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(2560))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(2560))+(gidx1*(64))+(lidx2*(1280))+(lidx3*(4))+(3)] = acc3;
}`;

const r_2_4_77_8_16_40_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 4 */
  let gidx2 = i32(gindex.x); /* 77 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (40); ridx0++) {
    var  val0 = f32(data1[(gidx0*(327680))+(gidx1*(81920))+(lidx3*(160))+(lidx4*(5120))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(327680))+(gidx1*(81920))+(lidx3*(160))+(lidx4*(5120))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(327680))+(gidx1*(81920))+(lidx3*(160))+(lidx4*(5120))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(327680))+(gidx1*(81920))+(lidx3*(160))+(lidx4*(5120))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(327680))+(gidx1*(81920))+(lidx3*(160))+(lidx4*(5120))+(ridx0*(4))+(1280)]);
    var  val5 = f32(data1[(gidx0*(327680))+(gidx1*(81920))+(lidx3*(160))+(lidx4*(5120))+(ridx0*(4))+(1281)]);
    var  val6 = f32(data1[(gidx0*(327680))+(gidx1*(81920))+(lidx3*(160))+(lidx4*(5120))+(ridx0*(4))+(1282)]);
    var  val7 = f32(data1[(gidx0*(327680))+(gidx1*(81920))+(lidx3*(160))+(lidx4*(5120))+(ridx0*(4))+(1283)]);
    var  val8 = f32(data1[(gidx0*(327680))+(gidx1*(81920))+(lidx3*(160))+(lidx4*(5120))+(ridx0*(4))+(2560)]);
    var  val9 = f32(data1[(gidx0*(327680))+(gidx1*(81920))+(lidx3*(160))+(lidx4*(5120))+(ridx0*(4))+(2561)]);
    var  val10 = f32(data1[(gidx0*(327680))+(gidx1*(81920))+(lidx3*(160))+(lidx4*(5120))+(ridx0*(4))+(2562)]);
    var  val11 = f32(data1[(gidx0*(327680))+(gidx1*(81920))+(lidx3*(160))+(lidx4*(5120))+(ridx0*(4))+(2563)]);
    var  val12 = f32(data1[(gidx0*(327680))+(gidx1*(81920))+(lidx3*(160))+(lidx4*(5120))+(ridx0*(4))+(3840)]);
    var  val13 = f32(data1[(gidx0*(327680))+(gidx1*(81920))+(lidx3*(160))+(lidx4*(5120))+(ridx0*(4))+(3841)]);
    var  val14 = f32(data1[(gidx0*(327680))+(gidx1*(81920))+(lidx3*(160))+(lidx4*(5120))+(ridx0*(4))+(3842)]);
    var  val15 = f32(data1[(gidx0*(327680))+(gidx1*(81920))+(lidx3*(160))+(lidx4*(5120))+(ridx0*(4))+(3843)]);
    var  val16 = f32(data2[(gidx0*(98560))+(gidx2*(1280))+(lidx3*(160))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx0*(98560))+(gidx2*(1280))+(lidx3*(160))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx0*(98560))+(gidx2*(1280))+(lidx3*(160))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx0*(98560))+(gidx2*(1280))+(lidx3*(160))+(ridx0*(4))+(3)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
  }
  data0[(gidx0*(157696))+(gidx1*(4928))+gidx2+(lidx3*(19712))+(lidx4*(308))] = (acc0*(0.07905694150420949f));
  data0[(gidx0*(157696))+(gidx1*(4928))+gidx2+(lidx3*(19712))+(lidx4*(308))+(77)] = (acc1*(0.07905694150420949f));
  data0[(gidx0*(157696))+(gidx1*(4928))+gidx2+(lidx3*(19712))+(lidx4*(308))+(154)] = (acc2*(0.07905694150420949f));
  data0[(gidx0*(157696))+(gidx1*(4928))+gidx2+(lidx3*(19712))+(lidx4*(308))+(231)] = (acc3*(0.07905694150420949f));
}`;

const r_128_32_77 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 128 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  acc0 = -0x1.fffffep+127f;
  for(var ridx0 = (0); ridx0 < (77); ridx0++) {
    var  val0 = f32(data1[(gidx0*(2464))+(lidx1*(77))+ridx0]);
    acc0 = max(val0,acc0);
  }
  data0[(gidx0*(32))+lidx1] = acc0;
}`;

const E_32_77_32_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 32 */
  let gidx1 = i32(gindex.x); /* 77 */
  let lidx2 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(9856))+gidx1+(lidx2*(308))]);
  var  val1 = f32(data1[(gidx0*(9856))+gidx1+(lidx2*(308))+(77)]);
  var  val2 = f32(data1[(gidx0*(9856))+gidx1+(lidx2*(308))+(154)]);
  var  val3 = f32(data1[(gidx0*(9856))+gidx1+(lidx2*(308))+(231)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx2*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx2*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx2*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx2*(4))+(3)]);
  data0[(gidx0*(9856))+gidx1+(lidx2*(308))] = exp2(((val0-val4)*(1.4426950408889634f)));
  data0[(gidx0*(9856))+gidx1+(lidx2*(308))+(77)] = exp2(((val1-val5)*(1.4426950408889634f)));
  data0[(gidx0*(9856))+gidx1+(lidx2*(308))+(154)] = exp2(((val2-val6)*(1.4426950408889634f)));
  data0[(gidx0*(9856))+gidx1+(lidx2*(308))+(231)] = exp2(((val3-val7)*(1.4426950408889634f)));
}`;

const r_128_32_77n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 128 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (77); ridx0++) {
    var  val0 = f32(data1[(gidx0*(2464))+(lidx1*(77))+ridx0]);
    acc0 = (val0+acc0);
  }
  data0[(gidx0*(32))+lidx1] = acc0;
}`;

const E_128_77_32 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 128 */
  let gidx1 = i32(gindex.x); /* 77 */
  let lidx2 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(2464))+gidx1+(lidx2*(77))]);
  var  val1 = f32(data2[(gidx0*(32))+lidx2]);
  data0[(gidx0*(2464))+gidx1+(lidx2*(77))] = (val0/val1);
}`;

const r_2_8_4_5_16_8_77_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 8 */
  let gidx2 = i32(gindex.x); /* 20 */
  let lidx4 = i32(lindex.y); /* 16 */
  let lidx5 = i32(lindex.x); /* 8 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (77); ridx0++) {
    var  val0 = f32(data1[(gidx0*(157696))+(gidx1*(19712))+((gidx2/(5))*(4928))+(lidx4*(308))+ridx0]);
    var  val1 = f32(data1[(gidx0*(157696))+(gidx1*(19712))+((gidx2/(5))*(4928))+(lidx4*(308))+ridx0+(77)]);
    var  val2 = f32(data1[(gidx0*(157696))+(gidx1*(19712))+((gidx2/(5))*(4928))+(lidx4*(308))+ridx0+(154)]);
    var  val3 = f32(data1[(gidx0*(157696))+(gidx1*(19712))+((gidx2/(5))*(4928))+(lidx4*(308))+ridx0+(231)]);
    var  val4 = f32(data2[(gidx0*(98560))+(gidx1*(160))+((gidx2%(5))*(32))+(lidx5*(4))+(ridx0*(1280))]);
    var  val5 = f32(data2[(gidx0*(98560))+(gidx1*(160))+((gidx2%(5))*(32))+(lidx5*(4))+(ridx0*(1280))+(1)]);
    var  val6 = f32(data2[(gidx0*(98560))+(gidx1*(160))+((gidx2%(5))*(32))+(lidx5*(4))+(ridx0*(1280))+(2)]);
    var  val7 = f32(data2[(gidx0*(98560))+(gidx1*(160))+((gidx2%(5))*(32))+(lidx5*(4))+(ridx0*(1280))+(3)]);
    acc0 = fma(val0,val4,acc0);
    acc1 = fma(val0,val5,acc1);
    acc2 = fma(val0,val6,acc2);
    acc3 = fma(val0,val7,acc3);
    acc4 = fma(val1,val4,acc4);
    acc5 = fma(val1,val5,acc5);
    acc6 = fma(val1,val6,acc6);
    acc7 = fma(val1,val7,acc7);
    acc8 = fma(val2,val4,acc8);
    acc9 = fma(val2,val5,acc9);
    acc10 = fma(val2,val6,acc10);
    acc11 = fma(val2,val7,acc11);
    acc12 = fma(val3,val4,acc12);
    acc13 = fma(val3,val5,acc13);
    acc14 = fma(val3,val6,acc14);
    acc15 = fma(val3,val7,acc15);
  }
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))] = acc0;
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))+(1)] = acc1;
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))+(2)] = acc2;
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))+(3)] = acc3;
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))+(160)] = acc4;
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))+(161)] = acc5;
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))+(162)] = acc6;
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))+(163)] = acc7;
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))+(320)] = acc8;
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))+(321)] = acc9;
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))+(322)] = acc10;
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))+(323)] = acc11;
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))+(480)] = acc12;
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))+(481)] = acc13;
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))+(482)] = acc14;
  data0[(gidx0*(327680))+(gidx1*(40960))+((gidx2/(5))*(10240))+((gidx2%(5))*(32))+(lidx4*(640))+(lidx5*(4))+(483)] = acc15;
}`;

const r_16_160_8_16_320_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 16 */
  let gidx1 = i32(gindex.x); /* 160 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (320); ridx0++) {
    var  val0 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(1280)]);
    var  val5 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(1281)]);
    var  val6 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(1282)]);
    var  val7 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(1283)]);
    var  val8 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(2560)]);
    var  val9 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(2561)]);
    var  val10 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(2562)]);
    var  val11 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(2563)]);
    var  val12 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(3840)]);
    var  val13 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(3841)]);
    var  val14 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(3842)]);
    var  val15 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(3843)]);
    var  val16 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(1280)]);
    var  val21 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(1281)]);
    var  val22 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(1282)]);
    var  val23 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(1283)]);
    var  val24 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(2560)]);
    var  val25 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(2561)]);
    var  val26 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(2562)]);
    var  val27 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(2563)]);
    var  val28 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(3840)]);
    var  val29 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(3841)]);
    var  val30 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(3842)]);
    var  val31 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(3843)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val0,val20,acc1);
    acc1 = fma(val1,val21,acc1);
    acc1 = fma(val2,val22,acc1);
    acc1 = fma(val3,val23,acc1);
    acc2 = fma(val0,val24,acc2);
    acc2 = fma(val1,val25,acc2);
    acc2 = fma(val2,val26,acc2);
    acc2 = fma(val3,val27,acc2);
    acc3 = fma(val0,val28,acc3);
    acc3 = fma(val1,val29,acc3);
    acc3 = fma(val2,val30,acc3);
    acc3 = fma(val3,val31,acc3);
    acc4 = fma(val4,val16,acc4);
    acc4 = fma(val5,val17,acc4);
    acc4 = fma(val6,val18,acc4);
    acc4 = fma(val7,val19,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val4,val24,acc6);
    acc6 = fma(val5,val25,acc6);
    acc6 = fma(val6,val26,acc6);
    acc6 = fma(val7,val27,acc6);
    acc7 = fma(val4,val28,acc7);
    acc7 = fma(val5,val29,acc7);
    acc7 = fma(val6,val30,acc7);
    acc7 = fma(val7,val31,acc7);
    acc8 = fma(val8,val16,acc8);
    acc8 = fma(val9,val17,acc8);
    acc8 = fma(val10,val18,acc8);
    acc8 = fma(val11,val19,acc8);
    acc9 = fma(val8,val20,acc9);
    acc9 = fma(val9,val21,acc9);
    acc9 = fma(val10,val22,acc9);
    acc9 = fma(val11,val23,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val8,val28,acc11);
    acc11 = fma(val9,val29,acc11);
    acc11 = fma(val10,val30,acc11);
    acc11 = fma(val11,val31,acc11);
    acc12 = fma(val12,val16,acc12);
    acc12 = fma(val13,val17,acc12);
    acc12 = fma(val14,val18,acc12);
    acc12 = fma(val15,val19,acc12);
    acc13 = fma(val12,val20,acc13);
    acc13 = fma(val13,val21,acc13);
    acc13 = fma(val14,val22,acc13);
    acc13 = fma(val15,val23,acc13);
    acc14 = fma(val12,val24,acc14);
    acc14 = fma(val13,val25,acc14);
    acc14 = fma(val14,val26,acc14);
    acc14 = fma(val15,val27,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))] = acc0;
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))+(3)] = acc3;
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))+(10240)] = acc4;
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))+(10241)] = acc5;
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))+(10242)] = acc6;
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))+(10243)] = acc7;
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))+(20480)] = acc8;
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))+(20481)] = acc9;
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))+(20482)] = acc10;
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))+(20483)] = acc11;
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))+(30720)] = acc12;
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))+(30721)] = acc13;
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))+(30722)] = acc14;
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))+(30723)] = acc15;
}`;

const E_16_320_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 16 */
  let gidx1 = i32(gindex.x); /* 320 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(327680))+(gidx1*(16))+(lidx2*(40960))+lidx3+(5120)]);
  var  val1 = f32(data1[(gidx0*(327680))+(gidx1*(16))+(lidx2*(40960))+lidx3+(15360)]);
  var  val2 = f32(data1[(gidx0*(327680))+(gidx1*(16))+(lidx2*(40960))+lidx3+(25600)]);
  var  val3 = f32(data1[(gidx0*(327680))+(gidx1*(16))+(lidx2*(40960))+lidx3+(35840)]);
  var  val4 = f32(data2[(gidx1*(16))+lidx3+(5120)]);
  data0[(gidx0*(163840))+(gidx1*(16))+(lidx2*(20480))+lidx3] = ((0.5f)*(val0+val4));
  data0[(gidx0*(163840))+(gidx1*(16))+(lidx2*(20480))+lidx3+(5120)] = ((0.5f)*(val1+val4));
  data0[(gidx0*(163840))+(gidx1*(16))+(lidx2*(20480))+lidx3+(10240)] = ((0.5f)*(val2+val4));
  data0[(gidx0*(163840))+(gidx1*(16))+(lidx2*(20480))+lidx3+(15360)] = ((0.5f)*(val3+val4));
}`;

const E_16_320_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 16 */
  let gidx1 = i32(gindex.x); /* 320 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(327680))+(gidx1*(16))+(lidx2*(40960))+lidx3+(5120)]);
  var  val1 = f32(data1[(gidx0*(327680))+(gidx1*(16))+(lidx2*(40960))+lidx3+(15360)]);
  var  val2 = f32(data1[(gidx0*(327680))+(gidx1*(16))+(lidx2*(40960))+lidx3+(25600)]);
  var  val3 = f32(data1[(gidx0*(327680))+(gidx1*(16))+(lidx2*(40960))+lidx3+(35840)]);
  var  val4 = f32(data2[(gidx1*(16))+lidx3+(5120)]);
  var  alu0 = (val0+val4);
  var  alu1 = (val1+val4);
  var  alu2 = (val2+val4);
  var  alu3 = (val3+val4);
  data0[(gidx0*(163840))+(gidx1*(16))+(lidx2*(20480))+lidx3] = ((1.0f)+(((2.0f)*((1.0f)/((1.0f)+exp2(((2.0f)*(alu0*(0.7978845608f)*((1.0f)+((0.044715f)*alu0*alu0)))*((-1.4426950408889634f)))))))-(1.0f)));
  data0[(gidx0*(163840))+(gidx1*(16))+(lidx2*(20480))+lidx3+(5120)] = ((1.0f)+(((2.0f)*((1.0f)/((1.0f)+exp2(((2.0f)*(alu1*(0.7978845608f)*((1.0f)+((0.044715f)*alu1*alu1)))*((-1.4426950408889634f)))))))-(1.0f)));
  data0[(gidx0*(163840))+(gidx1*(16))+(lidx2*(20480))+lidx3+(10240)] = ((1.0f)+(((2.0f)*((1.0f)/((1.0f)+exp2(((2.0f)*(alu2*(0.7978845608f)*((1.0f)+((0.044715f)*alu2*alu2)))*((-1.4426950408889634f)))))))-(1.0f)));
  data0[(gidx0*(163840))+(gidx1*(16))+(lidx2*(20480))+lidx3+(15360)] = ((1.0f)+(((2.0f)*((1.0f)/((1.0f)+exp2(((2.0f)*(alu3*(0.7978845608f)*((1.0f)+((0.044715f)*alu3*alu3)))*((-1.4426950408889634f)))))))-(1.0f)));
}`;

const E_4_1280_32_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(4,32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 1280 */
  let lidx2 = i32(lindex.y); /* 32 */
  let lidx3 = i32(lindex.x); /* 4 */
  var  val0 = f32(data1[(gidx0*(1310720))+(gidx1*(4))+(lidx2*(40960))+lidx3]);
  var  val1 = f32(data1[(gidx0*(1310720))+(gidx1*(4))+(lidx2*(40960))+lidx3+(10240)]);
  var  val2 = f32(data1[(gidx0*(1310720))+(gidx1*(4))+(lidx2*(40960))+lidx3+(20480)]);
  var  val3 = f32(data1[(gidx0*(1310720))+(gidx1*(4))+(lidx2*(40960))+lidx3+(30720)]);
  var  val4 = f32(data2[(gidx1*(4))+lidx3]);
  var  val5 = f32(data3[(gidx0*(655360))+(gidx1*(4))+(lidx2*(20480))+lidx3]);
  var  val6 = f32(data3[(gidx0*(655360))+(gidx1*(4))+(lidx2*(20480))+lidx3+(5120)]);
  var  val7 = f32(data3[(gidx0*(655360))+(gidx1*(4))+(lidx2*(20480))+lidx3+(10240)]);
  var  val8 = f32(data3[(gidx0*(655360))+(gidx1*(4))+(lidx2*(20480))+lidx3+(15360)]);
  var  val9 = f32(data4[(gidx0*(655360))+(gidx1*(4))+(lidx2*(20480))+lidx3]);
  var  val10 = f32(data4[(gidx0*(655360))+(gidx1*(4))+(lidx2*(20480))+lidx3+(5120)]);
  var  val11 = f32(data4[(gidx0*(655360))+(gidx1*(4))+(lidx2*(20480))+lidx3+(10240)]);
  var  val12 = f32(data4[(gidx0*(655360))+(gidx1*(4))+(lidx2*(20480))+lidx3+(15360)]);
  data0[(gidx0*(655360))+(gidx1*(4))+(lidx2*(20480))+lidx3] = ((val0+val4)*(val5*val9));
  data0[(gidx0*(655360))+(gidx1*(4))+(lidx2*(20480))+lidx3+(5120)] = ((val1+val4)*(val6*val10));
  data0[(gidx0*(655360))+(gidx1*(4))+(lidx2*(20480))+lidx3+(10240)] = ((val2+val4)*(val7*val11));
  data0[(gidx0*(655360))+(gidx1*(4))+(lidx2*(20480))+lidx3+(15360)] = ((val3+val4)*(val8*val12));
}`;

const r_16_20_8_16_1280_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 16 */
  let gidx1 = i32(gindex.x); /* 20 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (1280); ridx0++) {
    var  val0 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))+(5120)]);
    var  val5 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))+(5121)]);
    var  val6 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))+(5122)]);
    var  val7 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))+(5123)]);
    var  val8 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))+(10240)]);
    var  val9 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))+(10241)]);
    var  val10 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))+(10242)]);
    var  val11 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))+(10243)]);
    var  val12 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))+(15360)]);
    var  val13 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))+(15361)]);
    var  val14 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))+(15362)]);
    var  val15 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))+(15363)]);
    var  val16 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))+(5120)]);
    var  val21 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))+(5121)]);
    var  val22 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))+(5122)]);
    var  val23 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))+(5123)]);
    var  val24 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))+(10240)]);
    var  val25 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))+(10241)]);
    var  val26 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))+(10242)]);
    var  val27 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))+(10243)]);
    var  val28 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))+(15360)]);
    var  val29 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))+(15361)]);
    var  val30 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))+(15362)]);
    var  val31 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))+(15363)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val0,val20,acc1);
    acc1 = fma(val1,val21,acc1);
    acc1 = fma(val2,val22,acc1);
    acc1 = fma(val3,val23,acc1);
    acc2 = fma(val0,val24,acc2);
    acc2 = fma(val1,val25,acc2);
    acc2 = fma(val2,val26,acc2);
    acc2 = fma(val3,val27,acc2);
    acc3 = fma(val0,val28,acc3);
    acc3 = fma(val1,val29,acc3);
    acc3 = fma(val2,val30,acc3);
    acc3 = fma(val3,val31,acc3);
    acc4 = fma(val4,val16,acc4);
    acc4 = fma(val5,val17,acc4);
    acc4 = fma(val6,val18,acc4);
    acc4 = fma(val7,val19,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val4,val24,acc6);
    acc6 = fma(val5,val25,acc6);
    acc6 = fma(val6,val26,acc6);
    acc6 = fma(val7,val27,acc6);
    acc7 = fma(val4,val28,acc7);
    acc7 = fma(val5,val29,acc7);
    acc7 = fma(val6,val30,acc7);
    acc7 = fma(val7,val31,acc7);
    acc8 = fma(val8,val16,acc8);
    acc8 = fma(val9,val17,acc8);
    acc8 = fma(val10,val18,acc8);
    acc8 = fma(val11,val19,acc8);
    acc9 = fma(val8,val20,acc9);
    acc9 = fma(val9,val21,acc9);
    acc9 = fma(val10,val22,acc9);
    acc9 = fma(val11,val23,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val8,val28,acc11);
    acc11 = fma(val9,val29,acc11);
    acc11 = fma(val10,val30,acc11);
    acc11 = fma(val11,val31,acc11);
    acc12 = fma(val12,val16,acc12);
    acc12 = fma(val13,val17,acc12);
    acc12 = fma(val14,val18,acc12);
    acc12 = fma(val15,val19,acc12);
    acc13 = fma(val12,val20,acc13);
    acc13 = fma(val13,val21,acc13);
    acc13 = fma(val14,val22,acc13);
    acc13 = fma(val15,val23,acc13);
    acc14 = fma(val12,val24,acc14);
    acc14 = fma(val13,val25,acc14);
    acc14 = fma(val14,val26,acc14);
    acc14 = fma(val15,val27,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))] = acc0;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3)] = acc3;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1280)] = acc4;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1281)] = acc5;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1282)] = acc6;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1283)] = acc7;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2560)] = acc8;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2561)] = acc9;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2562)] = acc10;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2563)] = acc11;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3840)] = acc12;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3841)] = acc13;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3842)] = acc14;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3843)] = acc15;
}`;

const E_320_4_2_4_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,4,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 320 */
  let gidx1 = i32(gindex.x); /* 4 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 4 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(4))+(gidx1*(81920))+(lidx2*(327680))+lidx3+(lidx4*(5120))]);
  var  val1 = f32(data1[(gidx0*(4))+(gidx1*(81920))+(lidx2*(327680))+lidx3+(lidx4*(5120))+(1280)]);
  var  val2 = f32(data1[(gidx0*(4))+(gidx1*(81920))+(lidx2*(327680))+lidx3+(lidx4*(5120))+(2560)]);
  var  val3 = f32(data1[(gidx0*(4))+(gidx1*(81920))+(lidx2*(327680))+lidx3+(lidx4*(5120))+(3840)]);
  var  val4 = f32(data2[(gidx0*(4))+lidx3]);
  var  val5 = f32(data3[(gidx0*(4))+(gidx1*(81920))+(lidx2*(327680))+lidx3+(lidx4*(5120))]);
  var  val6 = f32(data3[(gidx0*(4))+(gidx1*(81920))+(lidx2*(327680))+lidx3+(lidx4*(5120))+(1280)]);
  var  val7 = f32(data3[(gidx0*(4))+(gidx1*(81920))+(lidx2*(327680))+lidx3+(lidx4*(5120))+(2560)]);
  var  val8 = f32(data3[(gidx0*(4))+(gidx1*(81920))+(lidx2*(327680))+lidx3+(lidx4*(5120))+(3840)]);
  data0[(gidx0*(1024))+(gidx1*(64))+(lidx2*(327680))+(lidx3*(256))+(lidx4*(4))] = (val0+val4+val5);
  data0[(gidx0*(1024))+(gidx1*(64))+(lidx2*(327680))+(lidx3*(256))+(lidx4*(4))+(1)] = (val1+val4+val6);
  data0[(gidx0*(1024))+(gidx1*(64))+(lidx2*(327680))+(lidx3*(256))+(lidx4*(4))+(2)] = (val2+val4+val7);
  data0[(gidx0*(1024))+(gidx1*(64))+(lidx2*(327680))+(lidx3*(256))+(lidx4*(4))+(3)] = (val3+val4+val8);
}`;

const r_2_40_4_8_16_160_4_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 40 */
  let gidx2 = i32(gindex.x); /* 4 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (160); ridx0++) {
    var  val0 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))]);
    var  val1 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(256)]);
    var  val2 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(512)]);
    var  val3 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(768)]);
    var  val4 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(1)]);
    var  val5 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(257)]);
    var  val6 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(513)]);
    var  val7 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(769)]);
    var  val8 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(2)]);
    var  val9 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(258)]);
    var  val10 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(514)]);
    var  val11 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(770)]);
    var  val12 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(3)]);
    var  val13 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(259)]);
    var  val14 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(515)]);
    var  val15 = f32(data1[(gidx0*(163840))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(771)]);
    var  val16 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(640)]);
    var  val21 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(641)]);
    var  val22 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(642)]);
    var  val23 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(643)]);
    var  val24 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1280)]);
    var  val25 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1281)]);
    var  val26 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1282)]);
    var  val27 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1283)]);
    var  val28 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1920)]);
    var  val29 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1921)]);
    var  val30 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1922)]);
    var  val31 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1923)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))] = acc0;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)] = acc3;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(256)] = acc4;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(257)] = acc5;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(258)] = acc6;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(259)] = acc7;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(512)] = acc8;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(513)] = acc9;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(514)] = acc10;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(515)] = acc11;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(768)] = acc12;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(769)] = acc13;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(770)] = acc14;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(771)] = acc15;
}`;

const r_2_40_4_8_16_320_4_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@group(0) @binding(7) var<storage,read_write> data7: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 40 */
  let gidx2 = i32(gindex.x); /* 4 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (320); ridx0++) {
    var  val0 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))]);
    var  val1 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(256)]);
    var  val2 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(512)]);
    var  val3 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(768)]);
    var  val4 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(1)]);
    var  val5 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(257)]);
    var  val6 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(513)]);
    var  val7 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(769)]);
    var  val8 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(2)]);
    var  val9 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(258)]);
    var  val10 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(514)]);
    var  val11 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(770)]);
    var  val12 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(3)]);
    var  val13 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(259)]);
    var  val14 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(515)]);
    var  val15 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(771)]);
    var  val16 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(1280)]);
    var  val21 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(1281)]);
    var  val22 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(1282)]);
    var  val23 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(1283)]);
    var  val24 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(2560)]);
    var  val25 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(2561)]);
    var  val26 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(2562)]);
    var  val27 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(2563)]);
    var  val28 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(3840)]);
    var  val29 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(3841)]);
    var  val30 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(3842)]);
    var  val31 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(3843)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  var  val32 = f32(data3[(gidx1*(32))+(lidx3*(4))]);
  var  val33 = f32(data3[(gidx1*(32))+(lidx3*(4))+(1)]);
  var  val34 = f32(data3[(gidx1*(32))+(lidx3*(4))+(2)]);
  var  val35 = f32(data3[(gidx1*(32))+(lidx3*(4))+(3)]);
  var  val36 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))]);
  var  val37 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)]);
  var  val38 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)]);
  var  val39 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)]);
  var  val40 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(256)]);
  var  val41 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(257)]);
  var  val42 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(258)]);
  var  val43 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(259)]);
  var  val44 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(512)]);
  var  val45 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(513)]);
  var  val46 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(514)]);
  var  val47 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(515)]);
  var  val48 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(768)]);
  var  val49 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(769)]);
  var  val50 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(770)]);
  var  val51 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(771)]);
  var  val52 = f32(data5[(gidx1*(32))+(lidx3*(4))]);
  var  val53 = f32(data5[(gidx1*(32))+(lidx3*(4))+(1)]);
  var  val54 = f32(data5[(gidx1*(32))+(lidx3*(4))+(2)]);
  var  val55 = f32(data5[(gidx1*(32))+(lidx3*(4))+(3)]);
  var  val56 = f32(data6[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))]);
  var  val57 = f32(data6[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)]);
  var  val58 = f32(data6[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)]);
  var  val59 = f32(data6[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)]);
  var  val60 = f32(data6[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(256)]);
  var  val61 = f32(data6[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(257)]);
  var  val62 = f32(data6[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(258)]);
  var  val63 = f32(data6[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(259)]);
  var  val64 = f32(data6[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(512)]);
  var  val65 = f32(data6[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(513)]);
  var  val66 = f32(data6[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(514)]);
  var  val67 = f32(data6[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(515)]);
  var  val68 = f32(data6[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(768)]);
  var  val69 = f32(data6[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(769)]);
  var  val70 = f32(data6[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(770)]);
  var  val71 = f32(data6[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(771)]);
  var  val72 = f32(data7[(gidx1*(32))+(lidx3*(4))]);
  var  val73 = f32(data7[(gidx1*(32))+(lidx3*(4))+(1)]);
  var  val74 = f32(data7[(gidx1*(32))+(lidx3*(4))+(2)]);
  var  val75 = f32(data7[(gidx1*(32))+(lidx3*(4))+(3)]);
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))] = (acc0+val32+(val36+val52+(val56+val72)));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)] = (acc1+val32+(val37+val52+(val57+val72)));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)] = (acc2+val32+(val38+val52+(val58+val72)));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)] = (acc3+val32+(val39+val52+(val59+val72)));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(256)] = (acc4+val33+(val40+val53+(val60+val73)));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(257)] = (acc5+val33+(val41+val53+(val61+val73)));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(258)] = (acc6+val33+(val42+val53+(val62+val73)));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(259)] = (acc7+val33+(val43+val53+(val63+val73)));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(512)] = (acc8+val34+(val44+val54+(val64+val74)));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(513)] = (acc9+val34+(val45+val54+(val65+val74)));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(514)] = (acc10+val34+(val46+val54+(val66+val74)));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(515)] = (acc11+val34+(val47+val54+(val67+val74)));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(768)] = (acc12+val35+(val48+val55+(val68+val75)));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(769)] = (acc13+val35+(val49+val55+(val69+val75)));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(770)] = (acc14+val35+(val50+val55+(val70+val75)));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(771)] = (acc15+val35+(val51+val55+(val71+val75)));
}`;

const r_2_40_4_8_16_320_4_4_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 40 */
  let gidx2 = i32(gindex.x); /* 4 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (320); ridx0++) {
    var  val0 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))]);
    var  val1 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(256)]);
    var  val2 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(512)]);
    var  val3 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(768)]);
    var  val4 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(1)]);
    var  val5 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(257)]);
    var  val6 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(513)]);
    var  val7 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(769)]);
    var  val8 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(2)]);
    var  val9 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(258)]);
    var  val10 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(514)]);
    var  val11 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(770)]);
    var  val12 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(3)]);
    var  val13 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(259)]);
    var  val14 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(515)]);
    var  val15 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(771)]);
    var  val16 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(1280)]);
    var  val21 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(1281)]);
    var  val22 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(1282)]);
    var  val23 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(1283)]);
    var  val24 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(2560)]);
    var  val25 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(2561)]);
    var  val26 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(2562)]);
    var  val27 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(2563)]);
    var  val28 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(3840)]);
    var  val29 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(3841)]);
    var  val30 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(3842)]);
    var  val31 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(3843)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  var  val32 = f32(data3[(gidx1*(32))+(lidx3*(4))]);
  var  val33 = f32(data3[(gidx1*(32))+(lidx3*(4))+(1)]);
  var  val34 = f32(data3[(gidx1*(32))+(lidx3*(4))+(2)]);
  var  val35 = f32(data3[(gidx1*(32))+(lidx3*(4))+(3)]);
  var  val36 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))]);
  var  val37 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)]);
  var  val38 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)]);
  var  val39 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)]);
  var  val40 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(256)]);
  var  val41 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(257)]);
  var  val42 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(258)]);
  var  val43 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(259)]);
  var  val44 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(512)]);
  var  val45 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(513)]);
  var  val46 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(514)]);
  var  val47 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(515)]);
  var  val48 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(768)]);
  var  val49 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(769)]);
  var  val50 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(770)]);
  var  val51 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(771)]);
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))] = (acc0+val32+val36);
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)] = (acc1+val32+val37);
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)] = (acc2+val32+val38);
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)] = (acc3+val32+val39);
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(256)] = (acc4+val33+val40);
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(257)] = (acc5+val33+val41);
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(258)] = (acc6+val33+val42);
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(259)] = (acc7+val33+val43);
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(512)] = (acc8+val34+val44);
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(513)] = (acc9+val34+val45);
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(514)] = (acc10+val34+val46);
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(515)] = (acc11+val34+val47);
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(768)] = (acc12+val35+val48);
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(769)] = (acc13+val35+val49);
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(770)] = (acc14+val35+val50);
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(771)] = (acc15+val35+val51);
}`;

const r_2_160_2_16_4_1280_3_3_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(4,16,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2 */
  let gidx1 = i32(gindex.x); /* 160 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 16 */
  let lidx4 = i32(lindex.x); /* 4 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (1280); ridx0++) {
    var  alu0 = f32((lidx4*((-4)))<(0));
    var  alu1 = f32((lidx3*((-1)))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+((-17))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+((-1))]), bool(alu0));
    var  alu2 = f32(lidx3<(15));
    var  val2 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+(15)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+((-16))]), bool(alu1));
    var  val4 = f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))]);
    var  val5 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+(16)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+((-15))]), bool(alu1));
    var  val7 = f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+(17)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+((-14))]), bool(alu1));
    var  val10 = f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+(18)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+((-13))]), bool(alu1));
    var  val13 = f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+(19)]), bool(alu2));
    var  alu3 = f32((lidx4*(4))<(12));
    var  val15 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+((-12))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+(20)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11520)]);
    var  val28 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11523)]);
    var  val29 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11526)]);
    var  val30 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11521)]);
    var  val31 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11524)]);
    var  val32 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11527)]);
    var  val33 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11522)]);
    var  val34 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11525)]);
    var  val35 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11528)]);
    var  val36 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23040)]);
    var  val37 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23043)]);
    var  val38 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23046)]);
    var  val39 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23041)]);
    var  val40 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23044)]);
    var  val41 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23047)]);
    var  val42 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23042)]);
    var  val43 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23045)]);
    var  val44 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23048)]);
    var  val45 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34560)]);
    var  val46 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34563)]);
    var  val47 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34566)]);
    var  val48 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34561)]);
    var  val49 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34564)]);
    var  val50 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34567)]);
    var  val51 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34562)]);
    var  val52 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34565)]);
    var  val53 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34568)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  var  val54 = f32(data3[(gidx1*(8))+(lidx2*(4))]);
  var  val55 = f32(data3[(gidx1*(8))+(lidx2*(4))+(1)]);
  var  val56 = f32(data3[(gidx1*(8))+(lidx2*(4))+(2)]);
  var  val57 = f32(data3[(gidx1*(8))+(lidx2*(4))+(3)]);
  var  val58 = f32(data4[(gidx1*(8))+(lidx2*(4))]);
  var  val59 = f32(data4[(gidx1*(8))+(lidx2*(4))+(1)]);
  var  val60 = f32(data4[(gidx1*(8))+(lidx2*(4))+(2)]);
  var  val61 = f32(data4[(gidx1*(8))+(lidx2*(4))+(3)]);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))] = (acc0+val54+val58);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(1)] = (acc1+val54+val58);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(2)] = (acc2+val54+val58);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(3)] = (acc3+val54+val58);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(256)] = (acc4+val55+val59);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(257)] = (acc5+val55+val59);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(258)] = (acc6+val55+val59);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(259)] = (acc7+val55+val59);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(512)] = (acc8+val56+val60);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(513)] = (acc9+val56+val60);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(514)] = (acc10+val56+val60);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(515)] = (acc11+val56+val60);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(768)] = (acc12+val57+val61);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(769)] = (acc13+val57+val61);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(770)] = (acc14+val57+val61);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(771)] = (acc15+val57+val61);
}`;

const r_2_160_2_16_4_1280_3_3_4_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(4,16,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2 */
  let gidx1 = i32(gindex.x); /* 160 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 16 */
  let lidx4 = i32(lindex.x); /* 4 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (1280); ridx0++) {
    var  alu0 = f32((lidx4*((-4)))<(0));
    var  alu1 = f32((lidx3*((-1)))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+((-17))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+((-1))]), bool(alu0));
    var  alu2 = f32(lidx3<(15));
    var  val2 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+(15)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+((-16))]), bool(alu1));
    var  val4 = f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))]);
    var  val5 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+(16)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+((-15))]), bool(alu1));
    var  val7 = f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+(17)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+((-14))]), bool(alu1));
    var  val10 = f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+(18)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+((-13))]), bool(alu1));
    var  val13 = f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+(19)]), bool(alu2));
    var  alu3 = f32((lidx4*(4))<(12));
    var  val15 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+((-12))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(327680))+(ridx0*(256))+(20)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11520)]);
    var  val28 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11523)]);
    var  val29 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11526)]);
    var  val30 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11521)]);
    var  val31 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11524)]);
    var  val32 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11527)]);
    var  val33 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11522)]);
    var  val34 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11525)]);
    var  val35 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11528)]);
    var  val36 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23040)]);
    var  val37 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23043)]);
    var  val38 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23046)]);
    var  val39 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23041)]);
    var  val40 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23044)]);
    var  val41 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23047)]);
    var  val42 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23042)]);
    var  val43 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23045)]);
    var  val44 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23048)]);
    var  val45 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34560)]);
    var  val46 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34563)]);
    var  val47 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34566)]);
    var  val48 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34561)]);
    var  val49 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34564)]);
    var  val50 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34567)]);
    var  val51 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34562)]);
    var  val52 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34565)]);
    var  val53 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34568)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  var  val54 = f32(data3[(gidx1*(8))+(lidx2*(4))]);
  var  val55 = f32(data3[(gidx1*(8))+(lidx2*(4))+(1)]);
  var  val56 = f32(data3[(gidx1*(8))+(lidx2*(4))+(2)]);
  var  val57 = f32(data3[(gidx1*(8))+(lidx2*(4))+(3)]);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))] = (acc0+val54);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(1)] = (acc1+val54);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(2)] = (acc2+val54);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(3)] = (acc3+val54);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(256)] = (acc4+val55);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(257)] = (acc5+val55);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(258)] = (acc6+val55);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(259)] = (acc7+val55);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(512)] = (acc8+val56);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(513)] = (acc9+val56);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(514)] = (acc10+val56);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(515)] = (acc11+val56);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(768)] = (acc12+val57);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(769)] = (acc13+val57);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(770)] = (acc14+val57);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(771)] = (acc15+val57);
}`;

const E_5120_32_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 5120 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx1*(4))+(3)]);
  data0[(gidx0*(128))+(lidx1*(4))] = (val0+val4);
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (val1+val5);
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (val2+val6);
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (val3+val7);
}`;

const r_2_40_4_8_16_320_4_4_4n3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 40 */
  let gidx2 = i32(gindex.x); /* 4 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (320); ridx0++) {
    var  val0 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))]);
    var  val1 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(256)]);
    var  val2 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(512)]);
    var  val3 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(768)]);
    var  val4 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(1)]);
    var  val5 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(257)]);
    var  val6 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(513)]);
    var  val7 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(769)]);
    var  val8 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(2)]);
    var  val9 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(258)]);
    var  val10 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(514)]);
    var  val11 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(770)]);
    var  val12 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(3)]);
    var  val13 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(259)]);
    var  val14 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(515)]);
    var  val15 = f32(data1[(gidx0*(327680))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(771)]);
    var  val16 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(1280)]);
    var  val21 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(1281)]);
    var  val22 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(1282)]);
    var  val23 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(1283)]);
    var  val24 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(2560)]);
    var  val25 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(2561)]);
    var  val26 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(2562)]);
    var  val27 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(2563)]);
    var  val28 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(3840)]);
    var  val29 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(3841)]);
    var  val30 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(3842)]);
    var  val31 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(3843)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  var  val32 = f32(data3[(gidx1*(32))+(lidx3*(4))]);
  var  val33 = f32(data3[(gidx1*(32))+(lidx3*(4))+(1)]);
  var  val34 = f32(data3[(gidx1*(32))+(lidx3*(4))+(2)]);
  var  val35 = f32(data3[(gidx1*(32))+(lidx3*(4))+(3)]);
  var  val36 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))]);
  var  val37 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)]);
  var  val38 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)]);
  var  val39 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)]);
  var  val40 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(256)]);
  var  val41 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(257)]);
  var  val42 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(258)]);
  var  val43 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(259)]);
  var  val44 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(512)]);
  var  val45 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(513)]);
  var  val46 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(514)]);
  var  val47 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(515)]);
  var  val48 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(768)]);
  var  val49 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(769)]);
  var  val50 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(770)]);
  var  val51 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(771)]);
  var  val52 = f32(data5[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))]);
  var  val53 = f32(data5[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)]);
  var  val54 = f32(data5[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)]);
  var  val55 = f32(data5[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)]);
  var  val56 = f32(data5[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(256)]);
  var  val57 = f32(data5[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(257)]);
  var  val58 = f32(data5[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(258)]);
  var  val59 = f32(data5[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(259)]);
  var  val60 = f32(data5[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(512)]);
  var  val61 = f32(data5[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(513)]);
  var  val62 = f32(data5[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(514)]);
  var  val63 = f32(data5[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(515)]);
  var  val64 = f32(data5[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(768)]);
  var  val65 = f32(data5[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(769)]);
  var  val66 = f32(data5[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(770)]);
  var  val67 = f32(data5[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(771)]);
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))] = (acc0+val32+(val36+val52));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)] = (acc1+val32+(val37+val53));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)] = (acc2+val32+(val38+val54));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)] = (acc3+val32+(val39+val55));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(256)] = (acc4+val33+(val40+val56));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(257)] = (acc5+val33+(val41+val57));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(258)] = (acc6+val33+(val42+val58));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(259)] = (acc7+val33+(val43+val59));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(512)] = (acc8+val34+(val44+val60));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(513)] = (acc9+val34+(val45+val61));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(514)] = (acc10+val34+(val46+val62));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(515)] = (acc11+val34+(val47+val63));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(768)] = (acc12+val35+(val48+val64));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(769)] = (acc13+val35+(val49+val65));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(770)] = (acc14+val35+(val50+val66));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(771)] = (acc15+val35+(val51+val67));
}`;

const r_2_40_8_8_2_1280_3_3_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(2,8,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2 */
  let gidx1 = i32(gindex.x); /* 40 */
  let lidx2 = i32(lindex.z); /* 8 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 2 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (1280); ridx0++) {
    var  alu0 = f32((lidx4*((-8)))<(0));
    var  alu1 = f32((lidx3*((-2)))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+((-17))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+((-1))]), bool(alu0));
    var  val2 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(15)]), bool(alu0));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+((-16))]), bool(alu1));
    var  val4 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))]);
    var  val5 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(16)]);
    var  val6 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+((-15))]), bool(alu1));
    var  val7 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(1)]);
    var  val8 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(17)]);
    var  val9 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+((-14))]), bool(alu1));
    var  val10 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(2)]);
    var  val11 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(18)]);
    var  val12 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+((-13))]), bool(alu1));
    var  val13 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(3)]);
    var  val14 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(19)]);
    var  val15 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+((-12))]), bool(alu1));
    var  val16 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(4)]);
    var  val17 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(20)]);
    var  val18 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+((-11))]), bool(alu1));
    var  val19 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(5)]);
    var  val20 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(21)]);
    var  val21 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+((-10))]), bool(alu1));
    var  val22 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(6)]);
    var  val23 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(22)]);
    var  val24 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+((-9))]), bool(alu1));
    var  val25 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(7)]);
    var  val26 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(23)]);
    var  val27 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))]);
    var  val28 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(3)]);
    var  val29 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(6)]);
    var  val30 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(1)]);
    var  val31 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(4)]);
    var  val32 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(7)]);
    var  val33 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(2)]);
    var  val34 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(5)]);
    var  val35 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(8)]);
    var  val36 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11520)]);
    var  val37 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11523)]);
    var  val38 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11526)]);
    var  val39 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11521)]);
    var  val40 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11524)]);
    var  val41 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11527)]);
    var  val42 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11522)]);
    var  val43 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11525)]);
    var  val44 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11528)]);
    var  val45 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23040)]);
    var  val46 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23043)]);
    var  val47 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23046)]);
    var  val48 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23041)]);
    var  val49 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23044)]);
    var  val50 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23047)]);
    var  val51 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23042)]);
    var  val52 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23045)]);
    var  val53 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23048)]);
    var  val54 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34560)]);
    var  val55 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34563)]);
    var  val56 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34566)]);
    var  val57 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34561)]);
    var  val58 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34564)]);
    var  val59 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34567)]);
    var  val60 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34562)]);
    var  val61 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34565)]);
    var  val62 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34568)]);
    acc0 = fma(val0,val27,acc0);
    acc0 = fma(val1,val28,acc0);
    acc0 = fma(val2,val29,acc0);
    acc0 = fma(val3,val30,acc0);
    acc0 = fma(val4,val31,acc0);
    acc0 = fma(val5,val32,acc0);
    acc0 = fma(val6,val33,acc0);
    acc0 = fma(val7,val34,acc0);
    acc0 = fma(val8,val35,acc0);
    acc1 = fma(val6,val27,acc1);
    acc1 = fma(val7,val28,acc1);
    acc1 = fma(val8,val29,acc1);
    acc1 = fma(val9,val30,acc1);
    acc1 = fma(val10,val31,acc1);
    acc1 = fma(val11,val32,acc1);
    acc1 = fma(val12,val33,acc1);
    acc1 = fma(val13,val34,acc1);
    acc1 = fma(val14,val35,acc1);
    acc2 = fma(val12,val27,acc2);
    acc2 = fma(val13,val28,acc2);
    acc2 = fma(val14,val29,acc2);
    acc2 = fma(val15,val30,acc2);
    acc2 = fma(val16,val31,acc2);
    acc2 = fma(val17,val32,acc2);
    acc2 = fma(val18,val33,acc2);
    acc2 = fma(val19,val34,acc2);
    acc2 = fma(val20,val35,acc2);
    acc3 = fma(val18,val27,acc3);
    acc3 = fma(val19,val28,acc3);
    acc3 = fma(val20,val29,acc3);
    acc3 = fma(val21,val30,acc3);
    acc3 = fma(val22,val31,acc3);
    acc3 = fma(val23,val32,acc3);
    acc3 = fma(val24,val33,acc3);
    acc3 = fma(val25,val34,acc3);
    acc3 = fma(val26,val35,acc3);
    acc4 = fma(val0,val36,acc4);
    acc4 = fma(val1,val37,acc4);
    acc4 = fma(val2,val38,acc4);
    acc4 = fma(val3,val39,acc4);
    acc4 = fma(val4,val40,acc4);
    acc4 = fma(val5,val41,acc4);
    acc4 = fma(val6,val42,acc4);
    acc4 = fma(val7,val43,acc4);
    acc4 = fma(val8,val44,acc4);
    acc5 = fma(val6,val36,acc5);
    acc5 = fma(val7,val37,acc5);
    acc5 = fma(val8,val38,acc5);
    acc5 = fma(val9,val39,acc5);
    acc5 = fma(val10,val40,acc5);
    acc5 = fma(val11,val41,acc5);
    acc5 = fma(val12,val42,acc5);
    acc5 = fma(val13,val43,acc5);
    acc5 = fma(val14,val44,acc5);
    acc6 = fma(val12,val36,acc6);
    acc6 = fma(val13,val37,acc6);
    acc6 = fma(val14,val38,acc6);
    acc6 = fma(val15,val39,acc6);
    acc6 = fma(val16,val40,acc6);
    acc6 = fma(val17,val41,acc6);
    acc6 = fma(val18,val42,acc6);
    acc6 = fma(val19,val43,acc6);
    acc6 = fma(val20,val44,acc6);
    acc7 = fma(val18,val36,acc7);
    acc7 = fma(val19,val37,acc7);
    acc7 = fma(val20,val38,acc7);
    acc7 = fma(val21,val39,acc7);
    acc7 = fma(val22,val40,acc7);
    acc7 = fma(val23,val41,acc7);
    acc7 = fma(val24,val42,acc7);
    acc7 = fma(val25,val43,acc7);
    acc7 = fma(val26,val44,acc7);
    acc8 = fma(val0,val45,acc8);
    acc8 = fma(val1,val46,acc8);
    acc8 = fma(val2,val47,acc8);
    acc8 = fma(val3,val48,acc8);
    acc8 = fma(val4,val49,acc8);
    acc8 = fma(val5,val50,acc8);
    acc8 = fma(val6,val51,acc8);
    acc8 = fma(val7,val52,acc8);
    acc8 = fma(val8,val53,acc8);
    acc9 = fma(val6,val45,acc9);
    acc9 = fma(val7,val46,acc9);
    acc9 = fma(val8,val47,acc9);
    acc9 = fma(val9,val48,acc9);
    acc9 = fma(val10,val49,acc9);
    acc9 = fma(val11,val50,acc9);
    acc9 = fma(val12,val51,acc9);
    acc9 = fma(val13,val52,acc9);
    acc9 = fma(val14,val53,acc9);
    acc10 = fma(val12,val45,acc10);
    acc10 = fma(val13,val46,acc10);
    acc10 = fma(val14,val47,acc10);
    acc10 = fma(val15,val48,acc10);
    acc10 = fma(val16,val49,acc10);
    acc10 = fma(val17,val50,acc10);
    acc10 = fma(val18,val51,acc10);
    acc10 = fma(val19,val52,acc10);
    acc10 = fma(val20,val53,acc10);
    acc11 = fma(val18,val45,acc11);
    acc11 = fma(val19,val46,acc11);
    acc11 = fma(val20,val47,acc11);
    acc11 = fma(val21,val48,acc11);
    acc11 = fma(val22,val49,acc11);
    acc11 = fma(val23,val50,acc11);
    acc11 = fma(val24,val51,acc11);
    acc11 = fma(val25,val52,acc11);
    acc11 = fma(val26,val53,acc11);
    acc12 = fma(val0,val54,acc12);
    acc12 = fma(val1,val55,acc12);
    acc12 = fma(val2,val56,acc12);
    acc12 = fma(val3,val57,acc12);
    acc12 = fma(val4,val58,acc12);
    acc12 = fma(val5,val59,acc12);
    acc12 = fma(val6,val60,acc12);
    acc12 = fma(val7,val61,acc12);
    acc12 = fma(val8,val62,acc12);
    acc13 = fma(val6,val54,acc13);
    acc13 = fma(val7,val55,acc13);
    acc13 = fma(val8,val56,acc13);
    acc13 = fma(val9,val57,acc13);
    acc13 = fma(val10,val58,acc13);
    acc13 = fma(val11,val59,acc13);
    acc13 = fma(val12,val60,acc13);
    acc13 = fma(val13,val61,acc13);
    acc13 = fma(val14,val62,acc13);
    acc14 = fma(val12,val54,acc14);
    acc14 = fma(val13,val55,acc14);
    acc14 = fma(val14,val56,acc14);
    acc14 = fma(val15,val57,acc14);
    acc14 = fma(val16,val58,acc14);
    acc14 = fma(val17,val59,acc14);
    acc14 = fma(val18,val60,acc14);
    acc14 = fma(val19,val61,acc14);
    acc14 = fma(val20,val62,acc14);
    acc15 = fma(val18,val54,acc15);
    acc15 = fma(val19,val55,acc15);
    acc15 = fma(val20,val56,acc15);
    acc15 = fma(val21,val57,acc15);
    acc15 = fma(val22,val58,acc15);
    acc15 = fma(val23,val59,acc15);
    acc15 = fma(val24,val60,acc15);
    acc15 = fma(val25,val61,acc15);
    acc15 = fma(val26,val62,acc15);
  }
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))] = acc0;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(3)] = acc3;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(64)] = acc4;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(65)] = acc5;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(66)] = acc6;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(67)] = acc7;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(128)] = acc8;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(129)] = acc9;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(130)] = acc10;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(131)] = acc11;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(192)] = acc12;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(193)] = acc13;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(194)] = acc14;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(195)] = acc15;
}`;

const r_2_40_8_8_2_1280_3_3_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(2,8,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2 */
  let gidx1 = i32(gindex.x); /* 40 */
  let lidx2 = i32(lindex.z); /* 8 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 2 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (1280); ridx0++) {
    var  alu0 = f32((lidx4*((-8)))<(0));
    var  alu1 = f32((lidx3*((-2)))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+((-17))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+((-1))]), bool(alu0));
    var  val2 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(15)]), bool(alu0));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+((-16))]), bool(alu1));
    var  val4 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))]);
    var  val5 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(16)]);
    var  val6 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+((-15))]), bool(alu1));
    var  val7 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(1)]);
    var  val8 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(17)]);
    var  val9 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+((-14))]), bool(alu1));
    var  val10 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(2)]);
    var  val11 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(18)]);
    var  val12 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+((-13))]), bool(alu1));
    var  val13 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(3)]);
    var  val14 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(19)]);
    var  val15 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+((-12))]), bool(alu1));
    var  val16 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(4)]);
    var  val17 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(20)]);
    var  val18 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+((-11))]), bool(alu1));
    var  val19 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(5)]);
    var  val20 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(21)]);
    var  val21 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+((-10))]), bool(alu1));
    var  val22 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(6)]);
    var  val23 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(22)]);
    var  val24 = select(f32((0.0f)), f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+((-9))]), bool(alu1));
    var  val25 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(7)]);
    var  val26 = f32(data1[(lidx4*(8))+(lidx3*(32))+(gidx0*(327680))+(ridx0*(256))+(23)]);
    var  val27 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))]);
    var  val28 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(3)]);
    var  val29 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(6)]);
    var  val30 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(1)]);
    var  val31 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(4)]);
    var  val32 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(7)]);
    var  val33 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(2)]);
    var  val34 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(5)]);
    var  val35 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(8)]);
    var  val36 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11520)]);
    var  val37 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11523)]);
    var  val38 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11526)]);
    var  val39 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11521)]);
    var  val40 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11524)]);
    var  val41 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11527)]);
    var  val42 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11522)]);
    var  val43 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11525)]);
    var  val44 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11528)]);
    var  val45 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23040)]);
    var  val46 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23043)]);
    var  val47 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23046)]);
    var  val48 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23041)]);
    var  val49 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23044)]);
    var  val50 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23047)]);
    var  val51 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23042)]);
    var  val52 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23045)]);
    var  val53 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23048)]);
    var  val54 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34560)]);
    var  val55 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34563)]);
    var  val56 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34566)]);
    var  val57 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34561)]);
    var  val58 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34564)]);
    var  val59 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34567)]);
    var  val60 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34562)]);
    var  val61 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34565)]);
    var  val62 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34568)]);
    acc0 = fma(val0,val27,acc0);
    acc0 = fma(val1,val28,acc0);
    acc0 = fma(val2,val29,acc0);
    acc0 = fma(val3,val30,acc0);
    acc0 = fma(val4,val31,acc0);
    acc0 = fma(val5,val32,acc0);
    acc0 = fma(val6,val33,acc0);
    acc0 = fma(val7,val34,acc0);
    acc0 = fma(val8,val35,acc0);
    acc1 = fma(val6,val27,acc1);
    acc1 = fma(val7,val28,acc1);
    acc1 = fma(val8,val29,acc1);
    acc1 = fma(val9,val30,acc1);
    acc1 = fma(val10,val31,acc1);
    acc1 = fma(val11,val32,acc1);
    acc1 = fma(val12,val33,acc1);
    acc1 = fma(val13,val34,acc1);
    acc1 = fma(val14,val35,acc1);
    acc2 = fma(val12,val27,acc2);
    acc2 = fma(val13,val28,acc2);
    acc2 = fma(val14,val29,acc2);
    acc2 = fma(val15,val30,acc2);
    acc2 = fma(val16,val31,acc2);
    acc2 = fma(val17,val32,acc2);
    acc2 = fma(val18,val33,acc2);
    acc2 = fma(val19,val34,acc2);
    acc2 = fma(val20,val35,acc2);
    acc3 = fma(val18,val27,acc3);
    acc3 = fma(val19,val28,acc3);
    acc3 = fma(val20,val29,acc3);
    acc3 = fma(val21,val30,acc3);
    acc3 = fma(val22,val31,acc3);
    acc3 = fma(val23,val32,acc3);
    acc3 = fma(val24,val33,acc3);
    acc3 = fma(val25,val34,acc3);
    acc3 = fma(val26,val35,acc3);
    acc4 = fma(val0,val36,acc4);
    acc4 = fma(val1,val37,acc4);
    acc4 = fma(val2,val38,acc4);
    acc4 = fma(val3,val39,acc4);
    acc4 = fma(val4,val40,acc4);
    acc4 = fma(val5,val41,acc4);
    acc4 = fma(val6,val42,acc4);
    acc4 = fma(val7,val43,acc4);
    acc4 = fma(val8,val44,acc4);
    acc5 = fma(val6,val36,acc5);
    acc5 = fma(val7,val37,acc5);
    acc5 = fma(val8,val38,acc5);
    acc5 = fma(val9,val39,acc5);
    acc5 = fma(val10,val40,acc5);
    acc5 = fma(val11,val41,acc5);
    acc5 = fma(val12,val42,acc5);
    acc5 = fma(val13,val43,acc5);
    acc5 = fma(val14,val44,acc5);
    acc6 = fma(val12,val36,acc6);
    acc6 = fma(val13,val37,acc6);
    acc6 = fma(val14,val38,acc6);
    acc6 = fma(val15,val39,acc6);
    acc6 = fma(val16,val40,acc6);
    acc6 = fma(val17,val41,acc6);
    acc6 = fma(val18,val42,acc6);
    acc6 = fma(val19,val43,acc6);
    acc6 = fma(val20,val44,acc6);
    acc7 = fma(val18,val36,acc7);
    acc7 = fma(val19,val37,acc7);
    acc7 = fma(val20,val38,acc7);
    acc7 = fma(val21,val39,acc7);
    acc7 = fma(val22,val40,acc7);
    acc7 = fma(val23,val41,acc7);
    acc7 = fma(val24,val42,acc7);
    acc7 = fma(val25,val43,acc7);
    acc7 = fma(val26,val44,acc7);
    acc8 = fma(val0,val45,acc8);
    acc8 = fma(val1,val46,acc8);
    acc8 = fma(val2,val47,acc8);
    acc8 = fma(val3,val48,acc8);
    acc8 = fma(val4,val49,acc8);
    acc8 = fma(val5,val50,acc8);
    acc8 = fma(val6,val51,acc8);
    acc8 = fma(val7,val52,acc8);
    acc8 = fma(val8,val53,acc8);
    acc9 = fma(val6,val45,acc9);
    acc9 = fma(val7,val46,acc9);
    acc9 = fma(val8,val47,acc9);
    acc9 = fma(val9,val48,acc9);
    acc9 = fma(val10,val49,acc9);
    acc9 = fma(val11,val50,acc9);
    acc9 = fma(val12,val51,acc9);
    acc9 = fma(val13,val52,acc9);
    acc9 = fma(val14,val53,acc9);
    acc10 = fma(val12,val45,acc10);
    acc10 = fma(val13,val46,acc10);
    acc10 = fma(val14,val47,acc10);
    acc10 = fma(val15,val48,acc10);
    acc10 = fma(val16,val49,acc10);
    acc10 = fma(val17,val50,acc10);
    acc10 = fma(val18,val51,acc10);
    acc10 = fma(val19,val52,acc10);
    acc10 = fma(val20,val53,acc10);
    acc11 = fma(val18,val45,acc11);
    acc11 = fma(val19,val46,acc11);
    acc11 = fma(val20,val47,acc11);
    acc11 = fma(val21,val48,acc11);
    acc11 = fma(val22,val49,acc11);
    acc11 = fma(val23,val50,acc11);
    acc11 = fma(val24,val51,acc11);
    acc11 = fma(val25,val52,acc11);
    acc11 = fma(val26,val53,acc11);
    acc12 = fma(val0,val54,acc12);
    acc12 = fma(val1,val55,acc12);
    acc12 = fma(val2,val56,acc12);
    acc12 = fma(val3,val57,acc12);
    acc12 = fma(val4,val58,acc12);
    acc12 = fma(val5,val59,acc12);
    acc12 = fma(val6,val60,acc12);
    acc12 = fma(val7,val61,acc12);
    acc12 = fma(val8,val62,acc12);
    acc13 = fma(val6,val54,acc13);
    acc13 = fma(val7,val55,acc13);
    acc13 = fma(val8,val56,acc13);
    acc13 = fma(val9,val57,acc13);
    acc13 = fma(val10,val58,acc13);
    acc13 = fma(val11,val59,acc13);
    acc13 = fma(val12,val60,acc13);
    acc13 = fma(val13,val61,acc13);
    acc13 = fma(val14,val62,acc13);
    acc14 = fma(val12,val54,acc14);
    acc14 = fma(val13,val55,acc14);
    acc14 = fma(val14,val56,acc14);
    acc14 = fma(val15,val57,acc14);
    acc14 = fma(val16,val58,acc14);
    acc14 = fma(val17,val59,acc14);
    acc14 = fma(val18,val60,acc14);
    acc14 = fma(val19,val61,acc14);
    acc14 = fma(val20,val62,acc14);
    acc15 = fma(val18,val54,acc15);
    acc15 = fma(val19,val55,acc15);
    acc15 = fma(val20,val56,acc15);
    acc15 = fma(val21,val57,acc15);
    acc15 = fma(val22,val58,acc15);
    acc15 = fma(val23,val59,acc15);
    acc15 = fma(val24,val60,acc15);
    acc15 = fma(val25,val61,acc15);
    acc15 = fma(val26,val62,acc15);
  }
  var  val63 = f32(data3[(gidx1*(32))+(lidx2*(4))]);
  var  val64 = f32(data3[(gidx1*(32))+(lidx2*(4))+(1)]);
  var  val65 = f32(data3[(gidx1*(32))+(lidx2*(4))+(2)]);
  var  val66 = f32(data3[(gidx1*(32))+(lidx2*(4))+(3)]);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))] = (acc0+val63);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(1)] = (acc1+val63);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(2)] = (acc2+val63);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(3)] = (acc3+val63);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(64)] = (acc4+val64);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(65)] = (acc5+val64);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(66)] = (acc6+val64);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(67)] = (acc7+val64);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(128)] = (acc8+val65);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(129)] = (acc9+val65);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(130)] = (acc10+val65);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(131)] = (acc11+val65);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(192)] = (acc12+val66);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(193)] = (acc13+val66);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(194)] = (acc14+val66);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(195)] = (acc15+val66);
}`;

const r_64_16_160 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 64 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (160); ridx0++) {
    var  val0 = f32(data1[(gidx0*(2560))+(lidx1*(160))+ridx0]);
    acc0 = (val0+acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val1 = f32(temp[ridx1]);
    acc1 = (val1+acc1);
  }
  data0[gidx0] = (acc1*(0.000390625f));
}`;

const r_64_16_160n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 64 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (160); ridx0++) {
    var  val0 = f32(data1[(gidx0*(2560))+(lidx1*(160))+ridx0]);
    var  val1 = f32(data2[gidx0]);
    var  alu0 = (val0-val1);
    acc0 = fma(alu0,alu0,acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val2 = f32(temp[ridx1]);
    acc1 = (val2+acc1);
  }
  data0[gidx0] = sqrt(((1.0f)/((acc1*(0.000390625f))+(1e-05f))));
}`;

const E_320_2_4_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,4,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 320 */
  let lidx1 = i32(lindex.z); /* 2 */
  let lidx2 = i32(lindex.y); /* 4 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(256))+(lidx1*(81920))+(lidx2*(64))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(256))+(lidx1*(81920))+(lidx2*(64))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(256))+(lidx1*(81920))+(lidx2*(64))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(256))+(lidx1*(81920))+(lidx2*(64))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(lidx1*(32))+(gidx0/(10))]);
  var  val5 = f32(data3[(lidx1*(32))+(gidx0/(10))]);
  var  val6 = f32(data4[(gidx0*(4))+lidx2]);
  var  val7 = f32(data5[(gidx0*(4))+lidx2]);
  data0[(gidx0*(256))+(lidx1*(81920))+(lidx2*(64))+(lidx3*(4))] = (((val0-val4)*val5*val6)+val7);
  data0[(gidx0*(256))+(lidx1*(81920))+(lidx2*(64))+(lidx3*(4))+(1)] = (((val1-val4)*val5*val6)+val7);
  data0[(gidx0*(256))+(lidx1*(81920))+(lidx2*(64))+(lidx3*(4))+(2)] = (((val2-val4)*val5*val6)+val7);
  data0[(gidx0*(256))+(lidx1*(81920))+(lidx2*(64))+(lidx3*(4))+(3)] = (((val3-val4)*val5*val6)+val7);
}`;

const E_2_160_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2 */
  let gidx1 = i32(gindex.x); /* 160 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(81920))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(81920))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(81920))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(81920))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(32))+(gidx1/(5))]);
  var  val5 = f32(data3[(gidx0*(32))+(gidx1/(5))]);
  var  val6 = f32(data4[(gidx1*(8))+lidx2]);
  var  val7 = f32(data5[(gidx1*(8))+lidx2]);
  data0[(gidx0*(81920))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))] = ((1.0f)/((1.0f)+exp2(((((val0-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(81920))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(1)] = ((1.0f)/((1.0f)+exp2(((((val1-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(81920))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(2)] = ((1.0f)/((1.0f)+exp2(((((val2-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(81920))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(3)] = ((1.0f)/((1.0f)+exp2(((((val3-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
}`;

const E_1280_32_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 1280 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx1*(4))+(3)]);
  data0[(gidx0*(128))+(lidx1*(4))] = (val0*val4);
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (val1*val5);
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (val2*val6);
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (val3*val7);
}`;

const r_2_40_8_8_2_1280_3_3_4_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(2,8,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2 */
  let gidx1 = i32(gindex.x); /* 40 */
  let lidx2 = i32(lindex.z); /* 8 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 2 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (1280); ridx0++) {
    var  alu0 = f32((lidx4*((-4)))<(0));
    var  alu1 = f32((lidx3*((-1)))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-9))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-1))]), bool(alu0));
    var  alu2 = f32(lidx3<(7));
    var  val2 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(7)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-8))]), bool(alu1));
    var  val4 = f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))]);
    var  val5 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(8)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-7))]), bool(alu1));
    var  val7 = f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(9)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-6))]), bool(alu1));
    var  val10 = f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(10)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-5))]), bool(alu1));
    var  val13 = f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(11)]), bool(alu2));
    var  alu3 = f32((lidx4*(4))<(4));
    var  val15 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-4))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(12)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11520)]);
    var  val28 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11523)]);
    var  val29 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11526)]);
    var  val30 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11521)]);
    var  val31 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11524)]);
    var  val32 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11527)]);
    var  val33 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11522)]);
    var  val34 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11525)]);
    var  val35 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11528)]);
    var  val36 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23040)]);
    var  val37 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23043)]);
    var  val38 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23046)]);
    var  val39 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23041)]);
    var  val40 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23044)]);
    var  val41 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23047)]);
    var  val42 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23042)]);
    var  val43 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23045)]);
    var  val44 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23048)]);
    var  val45 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34560)]);
    var  val46 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34563)]);
    var  val47 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34566)]);
    var  val48 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34561)]);
    var  val49 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34564)]);
    var  val50 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34567)]);
    var  val51 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34562)]);
    var  val52 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34565)]);
    var  val53 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34568)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  var  val54 = f32(data3[(gidx1*(32))+(lidx2*(4))]);
  var  val55 = f32(data3[(gidx1*(32))+(lidx2*(4))+(1)]);
  var  val56 = f32(data3[(gidx1*(32))+(lidx2*(4))+(2)]);
  var  val57 = f32(data3[(gidx1*(32))+(lidx2*(4))+(3)]);
  var  val58 = f32(data4[(gidx1*(32))+(lidx2*(4))]);
  var  val59 = f32(data4[(gidx1*(32))+(lidx2*(4))+(1)]);
  var  val60 = f32(data4[(gidx1*(32))+(lidx2*(4))+(2)]);
  var  val61 = f32(data4[(gidx1*(32))+(lidx2*(4))+(3)]);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))] = (acc0+val54+val58);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(1)] = (acc1+val54+val58);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(2)] = (acc2+val54+val58);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(3)] = (acc3+val54+val58);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(64)] = (acc4+val55+val59);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(65)] = (acc5+val55+val59);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(66)] = (acc6+val55+val59);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(67)] = (acc7+val55+val59);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(128)] = (acc8+val56+val60);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(129)] = (acc9+val56+val60);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(130)] = (acc10+val56+val60);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(131)] = (acc11+val56+val60);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(192)] = (acc12+val57+val61);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(193)] = (acc13+val57+val61);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(194)] = (acc14+val57+val61);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(195)] = (acc15+val57+val61);
}`;

const r_2_40_8_8_2_1280_3_3_4_4n3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(2,8,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2 */
  let gidx1 = i32(gindex.x); /* 40 */
  let lidx2 = i32(lindex.z); /* 8 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 2 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (1280); ridx0++) {
    var  alu0 = f32((lidx4*((-4)))<(0));
    var  alu1 = f32((lidx3*((-1)))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-9))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-1))]), bool(alu0));
    var  alu2 = f32(lidx3<(7));
    var  val2 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(7)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-8))]), bool(alu1));
    var  val4 = f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))]);
    var  val5 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(8)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-7))]), bool(alu1));
    var  val7 = f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(9)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-6))]), bool(alu1));
    var  val10 = f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(10)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-5))]), bool(alu1));
    var  val13 = f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(11)]), bool(alu2));
    var  alu3 = f32((lidx4*(4))<(4));
    var  val15 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-4))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(12)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11520)]);
    var  val28 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11523)]);
    var  val29 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11526)]);
    var  val30 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11521)]);
    var  val31 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11524)]);
    var  val32 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11527)]);
    var  val33 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11522)]);
    var  val34 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11525)]);
    var  val35 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11528)]);
    var  val36 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23040)]);
    var  val37 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23043)]);
    var  val38 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23046)]);
    var  val39 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23041)]);
    var  val40 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23044)]);
    var  val41 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23047)]);
    var  val42 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23042)]);
    var  val43 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23045)]);
    var  val44 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23048)]);
    var  val45 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34560)]);
    var  val46 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34563)]);
    var  val47 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34566)]);
    var  val48 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34561)]);
    var  val49 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34564)]);
    var  val50 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34567)]);
    var  val51 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34562)]);
    var  val52 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34565)]);
    var  val53 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34568)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))] = acc0;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(3)] = acc3;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(64)] = acc4;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(65)] = acc5;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(66)] = acc6;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(67)] = acc7;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(128)] = acc8;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(129)] = acc9;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(130)] = acc10;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(131)] = acc11;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(192)] = acc12;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(193)] = acc13;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(194)] = acc14;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(195)] = acc15;
}`;

const r_2_40_8_8_2_1280_3_3_4_4n4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(2,8,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2 */
  let gidx1 = i32(gindex.x); /* 40 */
  let lidx2 = i32(lindex.z); /* 8 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 2 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (1280); ridx0++) {
    var  alu0 = f32((lidx4*((-4)))<(0));
    var  alu1 = f32((lidx3*((-1)))<(0));
    var  val0 = select(f32((0.0f)), f32(data2[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-9))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data2[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-1))]), bool(alu0));
    var  alu2 = f32(lidx3<(7));
    var  val2 = select(f32((0.0f)), f32(data2[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(7)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data2[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-8))]), bool(alu1));
    var  val4 = f32(data2[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))]);
    var  val5 = select(f32((0.0f)), f32(data2[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(8)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data2[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-7))]), bool(alu1));
    var  val7 = f32(data2[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data2[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(9)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data2[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-6))]), bool(alu1));
    var  val10 = f32(data2[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data2[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(10)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data2[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-5))]), bool(alu1));
    var  val13 = f32(data2[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data2[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(11)]), bool(alu2));
    var  alu3 = f32((lidx4*(4))<(4));
    var  val15 = select(f32((0.0f)), f32(data2[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-4))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data2[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data2[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(12)]), bool((alu3*alu2)));
    var  val18 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))]);
    var  val19 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(3)]);
    var  val20 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(6)]);
    var  val21 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(1)]);
    var  val22 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(4)]);
    var  val23 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(7)]);
    var  val24 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(2)]);
    var  val25 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(5)]);
    var  val26 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(8)]);
    var  val27 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11520)]);
    var  val28 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11523)]);
    var  val29 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11526)]);
    var  val30 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11521)]);
    var  val31 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11524)]);
    var  val32 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11527)]);
    var  val33 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11522)]);
    var  val34 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11525)]);
    var  val35 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11528)]);
    var  val36 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23040)]);
    var  val37 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23043)]);
    var  val38 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23046)]);
    var  val39 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23041)]);
    var  val40 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23044)]);
    var  val41 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23047)]);
    var  val42 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23042)]);
    var  val43 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23045)]);
    var  val44 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23048)]);
    var  val45 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34560)]);
    var  val46 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34563)]);
    var  val47 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34566)]);
    var  val48 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34561)]);
    var  val49 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34564)]);
    var  val50 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34567)]);
    var  val51 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34562)]);
    var  val52 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34565)]);
    var  val53 = f32(data3[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34568)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  var  val54 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))]);
  var  val55 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(1)]);
  var  val56 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(2)]);
  var  val57 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(3)]);
  var  val58 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(64)]);
  var  val59 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(65)]);
  var  val60 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(66)]);
  var  val61 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(67)]);
  var  val62 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(128)]);
  var  val63 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(129)]);
  var  val64 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(130)]);
  var  val65 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(131)]);
  var  val66 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(192)]);
  var  val67 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(193)]);
  var  val68 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(194)]);
  var  val69 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(195)]);
  var  val70 = f32(data4[(gidx1*(32))+(lidx2*(4))]);
  var  val71 = f32(data4[(gidx1*(32))+(lidx2*(4))+(1)]);
  var  val72 = f32(data4[(gidx1*(32))+(lidx2*(4))+(2)]);
  var  val73 = f32(data4[(gidx1*(32))+(lidx2*(4))+(3)]);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))] = (val54+(acc0+val70));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(1)] = (val55+(acc1+val70));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(2)] = (val56+(acc2+val70));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(3)] = (val57+(acc3+val70));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(64)] = (val58+(acc4+val71));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(65)] = (val59+(acc5+val71));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(66)] = (val60+(acc6+val71));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(67)] = (val61+(acc7+val71));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(128)] = (val62+(acc8+val72));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(129)] = (val63+(acc9+val72));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(130)] = (val64+(acc10+val72));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(131)] = (val65+(acc11+val72));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(192)] = (val66+(acc12+val73));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(193)] = (val67+(acc13+val73));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(194)] = (val68+(acc14+val73));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(195)] = (val69+(acc15+val73));
}`;

const r_2_40_8_8_2_1280_3_3_4_4n5 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@group(0) @binding(7) var<storage,read_write> data7: array<f32>;
@compute @workgroup_size(2,8,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2 */
  let gidx1 = i32(gindex.x); /* 40 */
  let lidx2 = i32(lindex.z); /* 8 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 2 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (1280); ridx0++) {
    var  alu0 = f32((lidx4*((-4)))<(0));
    var  alu1 = f32((lidx3*((-1)))<(0));
    var  val0 = select(f32((0.0f)), f32(data5[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-9))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data5[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-1))]), bool(alu0));
    var  alu2 = f32(lidx3<(7));
    var  val2 = select(f32((0.0f)), f32(data5[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(7)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data5[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-8))]), bool(alu1));
    var  val4 = f32(data5[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))]);
    var  val5 = select(f32((0.0f)), f32(data5[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(8)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data5[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-7))]), bool(alu1));
    var  val7 = f32(data5[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data5[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(9)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data5[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-6))]), bool(alu1));
    var  val10 = f32(data5[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data5[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(10)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data5[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-5))]), bool(alu1));
    var  val13 = f32(data5[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data5[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(11)]), bool(alu2));
    var  alu3 = f32((lidx4*(4))<(4));
    var  val15 = select(f32((0.0f)), f32(data5[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-4))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data5[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data5[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(12)]), bool((alu3*alu2)));
    var  val18 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))]);
    var  val19 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(3)]);
    var  val20 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(6)]);
    var  val21 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(1)]);
    var  val22 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(4)]);
    var  val23 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(7)]);
    var  val24 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(2)]);
    var  val25 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(5)]);
    var  val26 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(8)]);
    var  val27 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11520)]);
    var  val28 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11523)]);
    var  val29 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11526)]);
    var  val30 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11521)]);
    var  val31 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11524)]);
    var  val32 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11527)]);
    var  val33 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11522)]);
    var  val34 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11525)]);
    var  val35 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11528)]);
    var  val36 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23040)]);
    var  val37 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23043)]);
    var  val38 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23046)]);
    var  val39 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23041)]);
    var  val40 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23044)]);
    var  val41 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23047)]);
    var  val42 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23042)]);
    var  val43 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23045)]);
    var  val44 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23048)]);
    var  val45 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34560)]);
    var  val46 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34563)]);
    var  val47 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34566)]);
    var  val48 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34561)]);
    var  val49 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34564)]);
    var  val50 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34567)]);
    var  val51 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34562)]);
    var  val52 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34565)]);
    var  val53 = f32(data6[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34568)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  var  val54 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))]);
  var  val55 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(1)]);
  var  val56 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(2)]);
  var  val57 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(3)]);
  var  val58 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(64)]);
  var  val59 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(65)]);
  var  val60 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(66)]);
  var  val61 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(67)]);
  var  val62 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(128)]);
  var  val63 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(129)]);
  var  val64 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(130)]);
  var  val65 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(131)]);
  var  val66 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(192)]);
  var  val67 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(193)]);
  var  val68 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(194)]);
  var  val69 = f32(data1[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(195)]);
  var  val70 = f32(data2[(gidx1*(32))+(lidx2*(4))]);
  var  val71 = f32(data2[(gidx1*(32))+(lidx2*(4))+(1)]);
  var  val72 = f32(data2[(gidx1*(32))+(lidx2*(4))+(2)]);
  var  val73 = f32(data2[(gidx1*(32))+(lidx2*(4))+(3)]);
  var  val74 = f32(data3[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))]);
  var  val75 = f32(data3[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(1)]);
  var  val76 = f32(data3[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(2)]);
  var  val77 = f32(data3[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(3)]);
  var  val78 = f32(data3[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(64)]);
  var  val79 = f32(data3[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(65)]);
  var  val80 = f32(data3[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(66)]);
  var  val81 = f32(data3[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(67)]);
  var  val82 = f32(data3[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(128)]);
  var  val83 = f32(data3[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(129)]);
  var  val84 = f32(data3[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(130)]);
  var  val85 = f32(data3[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(131)]);
  var  val86 = f32(data3[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(192)]);
  var  val87 = f32(data3[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(193)]);
  var  val88 = f32(data3[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(194)]);
  var  val89 = f32(data3[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(195)]);
  var  val90 = f32(data4[(gidx1*(32))+(lidx2*(4))]);
  var  val91 = f32(data4[(gidx1*(32))+(lidx2*(4))+(1)]);
  var  val92 = f32(data4[(gidx1*(32))+(lidx2*(4))+(2)]);
  var  val93 = f32(data4[(gidx1*(32))+(lidx2*(4))+(3)]);
  var  val94 = f32(data7[(gidx1*(32))+(lidx2*(4))]);
  var  val95 = f32(data7[(gidx1*(32))+(lidx2*(4))+(1)]);
  var  val96 = f32(data7[(gidx1*(32))+(lidx2*(4))+(2)]);
  var  val97 = f32(data7[(gidx1*(32))+(lidx2*(4))+(3)]);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))] = (val54+val70+(val74+val90)+(acc0+val94));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(1)] = (val55+val70+(val75+val90)+(acc1+val94));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(2)] = (val56+val70+(val76+val90)+(acc2+val94));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(3)] = (val57+val70+(val77+val90)+(acc3+val94));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(64)] = (val58+val71+(val78+val91)+(acc4+val95));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(65)] = (val59+val71+(val79+val91)+(acc5+val95));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(66)] = (val60+val71+(val80+val91)+(acc6+val95));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(67)] = (val61+val71+(val81+val91)+(acc7+val95));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(128)] = (val62+val72+(val82+val92)+(acc8+val96));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(129)] = (val63+val72+(val83+val92)+(acc9+val96));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(130)] = (val64+val72+(val84+val92)+(acc10+val96));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(131)] = (val65+val72+(val85+val92)+(acc11+val96));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(192)] = (val66+val73+(val86+val93)+(acc12+val97));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(193)] = (val67+val73+(val87+val93)+(acc13+val97));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(194)] = (val68+val73+(val88+val93)+(acc14+val97));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(195)] = (val69+val73+(val89+val93)+(acc15+val97));
}`;

const r_2_40_8_8_2_1280_3_3_4_4n6 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(2,8,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2 */
  let gidx1 = i32(gindex.x); /* 40 */
  let lidx2 = i32(lindex.z); /* 8 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 2 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (1280); ridx0++) {
    var  alu0 = f32((lidx4*((-4)))<(0));
    var  alu1 = f32((lidx3*((-1)))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-9))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-1))]), bool(alu0));
    var  alu2 = f32(lidx3<(7));
    var  val2 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(7)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-8))]), bool(alu1));
    var  val4 = f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))]);
    var  val5 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(8)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-7))]), bool(alu1));
    var  val7 = f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(9)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-6))]), bool(alu1));
    var  val10 = f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(10)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-5))]), bool(alu1));
    var  val13 = f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(11)]), bool(alu2));
    var  alu3 = f32((lidx4*(4))<(4));
    var  val15 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+((-4))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(81920))+(ridx0*(64))+(12)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11520)]);
    var  val28 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11523)]);
    var  val29 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11526)]);
    var  val30 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11521)]);
    var  val31 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11524)]);
    var  val32 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11527)]);
    var  val33 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11522)]);
    var  val34 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11525)]);
    var  val35 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(11528)]);
    var  val36 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23040)]);
    var  val37 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23043)]);
    var  val38 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23046)]);
    var  val39 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23041)]);
    var  val40 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23044)]);
    var  val41 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23047)]);
    var  val42 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23042)]);
    var  val43 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23045)]);
    var  val44 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(23048)]);
    var  val45 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34560)]);
    var  val46 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34563)]);
    var  val47 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34566)]);
    var  val48 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34561)]);
    var  val49 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34564)]);
    var  val50 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34567)]);
    var  val51 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34562)]);
    var  val52 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34565)]);
    var  val53 = f32(data2[(gidx1*(368640))+(lidx2*(46080))+(ridx0*(9))+(34568)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  var  val54 = f32(data3[(gidx1*(32))+(lidx2*(4))]);
  var  val55 = f32(data3[(gidx1*(32))+(lidx2*(4))+(1)]);
  var  val56 = f32(data3[(gidx1*(32))+(lidx2*(4))+(2)]);
  var  val57 = f32(data3[(gidx1*(32))+(lidx2*(4))+(3)]);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))] = (acc0+val54);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(1)] = (acc1+val54);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(2)] = (acc2+val54);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(3)] = (acc3+val54);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(64)] = (acc4+val55);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(65)] = (acc5+val55);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(66)] = (acc6+val55);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(67)] = (acc7+val55);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(128)] = (acc8+val56);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(129)] = (acc9+val56);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(130)] = (acc10+val56);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(131)] = (acc11+val56);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(192)] = (acc12+val57);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(193)] = (acc13+val57);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(194)] = (acc14+val57);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(195)] = (acc15+val57);
}`;

const E_1280_32_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 1280 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx1*(4))+(3)]);
  data0[(gidx0*(128))+(lidx1*(4))] = (val0+val4);
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (val1+val5);
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (val2+val6);
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (val3+val7);
}`;

const r_2_40_8_16_320_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2 */
  let gidx1 = i32(gindex.x); /* 40 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (320); ridx0++) {
    var  val0 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))]);
    var  val1 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))+(64)]);
    var  val2 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))+(128)]);
    var  val3 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))+(192)]);
    var  val4 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))+(1)]);
    var  val5 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))+(65)]);
    var  val6 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))+(129)]);
    var  val7 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))+(193)]);
    var  val8 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))+(2)]);
    var  val9 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))+(66)]);
    var  val10 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))+(130)]);
    var  val11 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))+(194)]);
    var  val12 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))+(3)]);
    var  val13 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))+(67)]);
    var  val14 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))+(131)]);
    var  val15 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))+(195)]);
    var  val16 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))+(1280)]);
    var  val21 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))+(1281)]);
    var  val22 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))+(1282)]);
    var  val23 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))+(1283)]);
    var  val24 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))+(2560)]);
    var  val25 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))+(2561)]);
    var  val26 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))+(2562)]);
    var  val27 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))+(2563)]);
    var  val28 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))+(3840)]);
    var  val29 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))+(3841)]);
    var  val30 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))+(3842)]);
    var  val31 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))+(3843)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))] = acc0;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(3)] = acc3;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(64)] = acc4;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(65)] = acc5;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(66)] = acc6;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(67)] = acc7;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(128)] = acc8;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(129)] = acc9;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(130)] = acc10;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(131)] = acc11;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(192)] = acc12;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(193)] = acc13;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(194)] = acc14;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(195)] = acc15;
}`;

const E_320_2_16_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(4,16,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 320 */
  let lidx1 = i32(lindex.z); /* 2 */
  let lidx2 = i32(lindex.y); /* 16 */
  let lidx3 = i32(lindex.x); /* 4 */
  var  val0 = f32(data1[(gidx0*(256))+(lidx1*(81920))+(lidx2*(4))+(lidx3*(64))]);
  var  val1 = f32(data1[(gidx0*(256))+(lidx1*(81920))+(lidx2*(4))+(lidx3*(64))+(1)]);
  var  val2 = f32(data1[(gidx0*(256))+(lidx1*(81920))+(lidx2*(4))+(lidx3*(64))+(2)]);
  var  val3 = f32(data1[(gidx0*(256))+(lidx1*(81920))+(lidx2*(4))+(lidx3*(64))+(3)]);
  var  val4 = f32(data2[(gidx0*(4))+lidx3]);
  data0[(gidx0*(4))+(lidx1*(81920))+(lidx2*(5120))+lidx3] = (val0+val4);
  data0[(gidx0*(4))+(lidx1*(81920))+(lidx2*(5120))+lidx3+(1280)] = (val1+val4);
  data0[(gidx0*(4))+(lidx1*(81920))+(lidx2*(5120))+lidx3+(2560)] = (val2+val4);
  data0[(gidx0*(4))+(lidx1*(81920))+(lidx2*(5120))+lidx3+(3840)] = (val3+val4);
}`;

const r_128_16_80 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 128 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (80); ridx0++) {
    var  val0 = f32(data1[(gidx0*(1280))+(lidx1*(80))+ridx0]);
    acc0 = (val0+acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val1 = f32(temp[ridx1]);
    acc1 = (val1+acc1);
  }
  data0[gidx0] = (acc1*(0.00078125f));
}`;

const r_128_16_80n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 128 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (80); ridx0++) {
    var  val0 = f32(data1[(gidx0*(1280))+(lidx1*(80))+ridx0]);
    var  val1 = f32(data2[gidx0]);
    var  alu0 = (val0-val1);
    acc0 = fma(alu0,alu0,acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val2 = f32(temp[ridx1]);
    acc1 = (val2+acc1);
  }
  data0[gidx0] = sqrt(((1.0f)/((acc1*(0.00078125f))+(1e-05f))));
}`;

const E_4_20_8_16_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 20 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3)]);
  var  val4 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1280)]);
  var  val5 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1281)]);
  var  val6 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1282)]);
  var  val7 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1283)]);
  var  val8 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2560)]);
  var  val9 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2561)]);
  var  val10 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2562)]);
  var  val11 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2563)]);
  var  val12 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3840)]);
  var  val13 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3841)]);
  var  val14 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3842)]);
  var  val15 = f32(data1[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3843)]);
  var  val16 = f32(data2[(gidx0*(32))+(lidx2*(4))]);
  var  val17 = f32(data2[(gidx0*(32))+(lidx2*(4))+(1)]);
  var  val18 = f32(data2[(gidx0*(32))+(lidx2*(4))+(2)]);
  var  val19 = f32(data2[(gidx0*(32))+(lidx2*(4))+(3)]);
  var  val20 = f32(data3[(gidx0*(32))+(lidx2*(4))]);
  var  val21 = f32(data3[(gidx0*(32))+(lidx2*(4))+(1)]);
  var  val22 = f32(data3[(gidx0*(32))+(lidx2*(4))+(2)]);
  var  val23 = f32(data3[(gidx0*(32))+(lidx2*(4))+(3)]);
  var  val24 = f32(data4[(gidx1*(64))+(lidx3*(4))]);
  var  val25 = f32(data4[(gidx1*(64))+(lidx3*(4))+(1)]);
  var  val26 = f32(data4[(gidx1*(64))+(lidx3*(4))+(2)]);
  var  val27 = f32(data4[(gidx1*(64))+(lidx3*(4))+(3)]);
  var  val28 = f32(data5[(gidx1*(64))+(lidx3*(4))]);
  var  val29 = f32(data5[(gidx1*(64))+(lidx3*(4))+(1)]);
  var  val30 = f32(data5[(gidx1*(64))+(lidx3*(4))+(2)]);
  var  val31 = f32(data5[(gidx1*(64))+(lidx3*(4))+(3)]);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))] = (((val0-val16)*val20*val24)+val28);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1)] = (((val1-val16)*val20*val25)+val29);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2)] = (((val2-val16)*val20*val26)+val30);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3)] = (((val3-val16)*val20*val27)+val31);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1280)] = (((val4-val17)*val21*val24)+val28);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1281)] = (((val5-val17)*val21*val25)+val29);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1282)] = (((val6-val17)*val21*val26)+val30);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1283)] = (((val7-val17)*val21*val27)+val31);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2560)] = (((val8-val18)*val22*val24)+val28);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2561)] = (((val9-val18)*val22*val25)+val29);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2562)] = (((val10-val18)*val22*val26)+val30);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2563)] = (((val11-val18)*val22*val27)+val31);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3840)] = (((val12-val19)*val23*val24)+val28);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3841)] = (((val13-val19)*val23*val25)+val29);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3842)] = (((val14-val19)*val23*val26)+val30);
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3843)] = (((val15-val19)*val23*val27)+val31);
}`;

const r_4_20_8_16_320_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 20 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (320); ridx0++) {
    var  val0 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(1280)]);
    var  val5 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(1281)]);
    var  val6 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(1282)]);
    var  val7 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(1283)]);
    var  val8 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(2560)]);
    var  val9 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(2561)]);
    var  val10 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(2562)]);
    var  val11 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(2563)]);
    var  val12 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(3840)]);
    var  val13 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(3841)]);
    var  val14 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(3842)]);
    var  val15 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(3843)]);
    var  val16 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(1280)]);
    var  val21 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(1281)]);
    var  val22 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(1282)]);
    var  val23 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(1283)]);
    var  val24 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(2560)]);
    var  val25 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(2561)]);
    var  val26 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(2562)]);
    var  val27 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(2563)]);
    var  val28 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(3840)]);
    var  val29 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(3841)]);
    var  val30 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(3842)]);
    var  val31 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(3843)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val0,val20,acc1);
    acc1 = fma(val1,val21,acc1);
    acc1 = fma(val2,val22,acc1);
    acc1 = fma(val3,val23,acc1);
    acc2 = fma(val0,val24,acc2);
    acc2 = fma(val1,val25,acc2);
    acc2 = fma(val2,val26,acc2);
    acc2 = fma(val3,val27,acc2);
    acc3 = fma(val0,val28,acc3);
    acc3 = fma(val1,val29,acc3);
    acc3 = fma(val2,val30,acc3);
    acc3 = fma(val3,val31,acc3);
    acc4 = fma(val4,val16,acc4);
    acc4 = fma(val5,val17,acc4);
    acc4 = fma(val6,val18,acc4);
    acc4 = fma(val7,val19,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val4,val24,acc6);
    acc6 = fma(val5,val25,acc6);
    acc6 = fma(val6,val26,acc6);
    acc6 = fma(val7,val27,acc6);
    acc7 = fma(val4,val28,acc7);
    acc7 = fma(val5,val29,acc7);
    acc7 = fma(val6,val30,acc7);
    acc7 = fma(val7,val31,acc7);
    acc8 = fma(val8,val16,acc8);
    acc8 = fma(val9,val17,acc8);
    acc8 = fma(val10,val18,acc8);
    acc8 = fma(val11,val19,acc8);
    acc9 = fma(val8,val20,acc9);
    acc9 = fma(val9,val21,acc9);
    acc9 = fma(val10,val22,acc9);
    acc9 = fma(val11,val23,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val8,val28,acc11);
    acc11 = fma(val9,val29,acc11);
    acc11 = fma(val10,val30,acc11);
    acc11 = fma(val11,val31,acc11);
    acc12 = fma(val12,val16,acc12);
    acc12 = fma(val13,val17,acc12);
    acc12 = fma(val14,val18,acc12);
    acc12 = fma(val15,val19,acc12);
    acc13 = fma(val12,val20,acc13);
    acc13 = fma(val13,val21,acc13);
    acc13 = fma(val14,val22,acc13);
    acc13 = fma(val15,val23,acc13);
    acc14 = fma(val12,val24,acc14);
    acc14 = fma(val13,val25,acc14);
    acc14 = fma(val14,val26,acc14);
    acc14 = fma(val15,val27,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))] = acc0;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3)] = acc3;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1280)] = acc4;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1281)] = acc5;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1282)] = acc6;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1283)] = acc7;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2560)] = acc8;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2561)] = acc9;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2562)] = acc10;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2563)] = acc11;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3840)] = acc12;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3841)] = acc13;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3842)] = acc14;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3843)] = acc15;
}`;

const r_2_8_2_8_16_40_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 8 */
  let gidx2 = i32(gindex.x); /* 2 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (40); ridx0++) {
    var  val0 = f32(data1[(gidx0*(81920))+(gidx1*(160))+(gidx2*(40960))+(lidx3*(5120))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(81920))+(gidx1*(160))+(gidx2*(40960))+(lidx3*(5120))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(81920))+(gidx1*(160))+(gidx2*(40960))+(lidx3*(5120))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(81920))+(gidx1*(160))+(gidx2*(40960))+(lidx3*(5120))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(81920))+(gidx1*(160))+(gidx2*(40960))+(lidx3*(5120))+(ridx0*(4))+(1280)]);
    var  val5 = f32(data1[(gidx0*(81920))+(gidx1*(160))+(gidx2*(40960))+(lidx3*(5120))+(ridx0*(4))+(1281)]);
    var  val6 = f32(data1[(gidx0*(81920))+(gidx1*(160))+(gidx2*(40960))+(lidx3*(5120))+(ridx0*(4))+(1282)]);
    var  val7 = f32(data1[(gidx0*(81920))+(gidx1*(160))+(gidx2*(40960))+(lidx3*(5120))+(ridx0*(4))+(1283)]);
    var  val8 = f32(data1[(gidx0*(81920))+(gidx1*(160))+(gidx2*(40960))+(lidx3*(5120))+(ridx0*(4))+(2560)]);
    var  val9 = f32(data1[(gidx0*(81920))+(gidx1*(160))+(gidx2*(40960))+(lidx3*(5120))+(ridx0*(4))+(2561)]);
    var  val10 = f32(data1[(gidx0*(81920))+(gidx1*(160))+(gidx2*(40960))+(lidx3*(5120))+(ridx0*(4))+(2562)]);
    var  val11 = f32(data1[(gidx0*(81920))+(gidx1*(160))+(gidx2*(40960))+(lidx3*(5120))+(ridx0*(4))+(2563)]);
    var  val12 = f32(data1[(gidx0*(81920))+(gidx1*(160))+(gidx2*(40960))+(lidx3*(5120))+(ridx0*(4))+(3840)]);
    var  val13 = f32(data1[(gidx0*(81920))+(gidx1*(160))+(gidx2*(40960))+(lidx3*(5120))+(ridx0*(4))+(3841)]);
    var  val14 = f32(data1[(gidx0*(81920))+(gidx1*(160))+(gidx2*(40960))+(lidx3*(5120))+(ridx0*(4))+(3842)]);
    var  val15 = f32(data1[(gidx0*(81920))+(gidx1*(160))+(gidx2*(40960))+(lidx3*(5120))+(ridx0*(4))+(3843)]);
    var  val16 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(lidx4*(5120))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(lidx4*(5120))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(lidx4*(5120))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(lidx4*(5120))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(lidx4*(5120))+(ridx0*(4))+(1280)]);
    var  val21 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(lidx4*(5120))+(ridx0*(4))+(1281)]);
    var  val22 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(lidx4*(5120))+(ridx0*(4))+(1282)]);
    var  val23 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(lidx4*(5120))+(ridx0*(4))+(1283)]);
    var  val24 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(lidx4*(5120))+(ridx0*(4))+(2560)]);
    var  val25 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(lidx4*(5120))+(ridx0*(4))+(2561)]);
    var  val26 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(lidx4*(5120))+(ridx0*(4))+(2562)]);
    var  val27 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(lidx4*(5120))+(ridx0*(4))+(2563)]);
    var  val28 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(lidx4*(5120))+(ridx0*(4))+(3840)]);
    var  val29 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(lidx4*(5120))+(ridx0*(4))+(3841)]);
    var  val30 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(lidx4*(5120))+(ridx0*(4))+(3842)]);
    var  val31 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(lidx4*(5120))+(ridx0*(4))+(3843)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val0,val20,acc1);
    acc1 = fma(val1,val21,acc1);
    acc1 = fma(val2,val22,acc1);
    acc1 = fma(val3,val23,acc1);
    acc2 = fma(val0,val24,acc2);
    acc2 = fma(val1,val25,acc2);
    acc2 = fma(val2,val26,acc2);
    acc2 = fma(val3,val27,acc2);
    acc3 = fma(val0,val28,acc3);
    acc3 = fma(val1,val29,acc3);
    acc3 = fma(val2,val30,acc3);
    acc3 = fma(val3,val31,acc3);
    acc4 = fma(val4,val16,acc4);
    acc4 = fma(val5,val17,acc4);
    acc4 = fma(val6,val18,acc4);
    acc4 = fma(val7,val19,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val4,val24,acc6);
    acc6 = fma(val5,val25,acc6);
    acc6 = fma(val6,val26,acc6);
    acc6 = fma(val7,val27,acc6);
    acc7 = fma(val4,val28,acc7);
    acc7 = fma(val5,val29,acc7);
    acc7 = fma(val6,val30,acc7);
    acc7 = fma(val7,val31,acc7);
    acc8 = fma(val8,val16,acc8);
    acc8 = fma(val9,val17,acc8);
    acc8 = fma(val10,val18,acc8);
    acc8 = fma(val11,val19,acc8);
    acc9 = fma(val8,val20,acc9);
    acc9 = fma(val9,val21,acc9);
    acc9 = fma(val10,val22,acc9);
    acc9 = fma(val11,val23,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val8,val28,acc11);
    acc11 = fma(val9,val29,acc11);
    acc11 = fma(val10,val30,acc11);
    acc11 = fma(val11,val31,acc11);
    acc12 = fma(val12,val16,acc12);
    acc12 = fma(val13,val17,acc12);
    acc12 = fma(val14,val18,acc12);
    acc12 = fma(val15,val19,acc12);
    acc13 = fma(val12,val20,acc13);
    acc13 = fma(val13,val21,acc13);
    acc13 = fma(val14,val22,acc13);
    acc13 = fma(val15,val23,acc13);
    acc14 = fma(val12,val24,acc14);
    acc14 = fma(val13,val25,acc14);
    acc14 = fma(val14,val26,acc14);
    acc14 = fma(val15,val27,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(32768))+(gidx1*(4096))+(gidx2*(2048))+(lidx3*(256))+(lidx4*(4))] = (acc0*(0.07905694150420949f));
  data0[(gidx0*(32768))+(gidx1*(4096))+(gidx2*(2048))+(lidx3*(256))+(lidx4*(4))+(1)] = (acc1*(0.07905694150420949f));
  data0[(gidx0*(32768))+(gidx1*(4096))+(gidx2*(2048))+(lidx3*(256))+(lidx4*(4))+(2)] = (acc2*(0.07905694150420949f));
  data0[(gidx0*(32768))+(gidx1*(4096))+(gidx2*(2048))+(lidx3*(256))+(lidx4*(4))+(3)] = (acc3*(0.07905694150420949f));
  data0[(gidx0*(32768))+(gidx1*(4096))+(gidx2*(2048))+(lidx3*(256))+(lidx4*(4))+(64)] = (acc4*(0.07905694150420949f));
  data0[(gidx0*(32768))+(gidx1*(4096))+(gidx2*(2048))+(lidx3*(256))+(lidx4*(4))+(65)] = (acc5*(0.07905694150420949f));
  data0[(gidx0*(32768))+(gidx1*(4096))+(gidx2*(2048))+(lidx3*(256))+(lidx4*(4))+(66)] = (acc6*(0.07905694150420949f));
  data0[(gidx0*(32768))+(gidx1*(4096))+(gidx2*(2048))+(lidx3*(256))+(lidx4*(4))+(67)] = (acc7*(0.07905694150420949f));
  data0[(gidx0*(32768))+(gidx1*(4096))+(gidx2*(2048))+(lidx3*(256))+(lidx4*(4))+(128)] = (acc8*(0.07905694150420949f));
  data0[(gidx0*(32768))+(gidx1*(4096))+(gidx2*(2048))+(lidx3*(256))+(lidx4*(4))+(129)] = (acc9*(0.07905694150420949f));
  data0[(gidx0*(32768))+(gidx1*(4096))+(gidx2*(2048))+(lidx3*(256))+(lidx4*(4))+(130)] = (acc10*(0.07905694150420949f));
  data0[(gidx0*(32768))+(gidx1*(4096))+(gidx2*(2048))+(lidx3*(256))+(lidx4*(4))+(131)] = (acc11*(0.07905694150420949f));
  data0[(gidx0*(32768))+(gidx1*(4096))+(gidx2*(2048))+(lidx3*(256))+(lidx4*(4))+(192)] = (acc12*(0.07905694150420949f));
  data0[(gidx0*(32768))+(gidx1*(4096))+(gidx2*(2048))+(lidx3*(256))+(lidx4*(4))+(193)] = (acc13*(0.07905694150420949f));
  data0[(gidx0*(32768))+(gidx1*(4096))+(gidx2*(2048))+(lidx3*(256))+(lidx4*(4))+(194)] = (acc14*(0.07905694150420949f));
  data0[(gidx0*(32768))+(gidx1*(4096))+(gidx2*(2048))+(lidx3*(256))+(lidx4*(4))+(195)] = (acc15*(0.07905694150420949f));
}`;

const r_1024_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 1024 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = -0x1.fffffep+127f;
  for(var ridx0 = (0); ridx0 < (4); ridx0++) {
    var  val0 = f32(data1[(gidx0*(64))+(lidx1*(4))+ridx0]);
    acc0 = max(val0,acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = -0x1.fffffep+127f;
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val1 = f32(temp[ridx1]);
    acc1 = max(val1,acc1);
  }
  data0[gidx0] = acc1;
}`;

const E_128_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 128 */
  let lidx1 = i32(lindex.y); /* 8 */
  let lidx2 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(512))+(lidx1*(64))+(lidx2*(4))]);
  var  val1 = f32(data1[(gidx0*(512))+(lidx1*(64))+(lidx2*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(512))+(lidx1*(64))+(lidx2*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(512))+(lidx1*(64))+(lidx2*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(8))+lidx1]);
  data0[(gidx0*(512))+(lidx1*(64))+(lidx2*(4))] = exp2(((val0-val4)*(1.4426950408889634f)));
  data0[(gidx0*(512))+(lidx1*(64))+(lidx2*(4))+(1)] = exp2(((val1-val4)*(1.4426950408889634f)));
  data0[(gidx0*(512))+(lidx1*(64))+(lidx2*(4))+(2)] = exp2(((val2-val4)*(1.4426950408889634f)));
  data0[(gidx0*(512))+(lidx1*(64))+(lidx2*(4))+(3)] = exp2(((val3-val4)*(1.4426950408889634f)));
}`;

const r_1024_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 1024 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (4); ridx0++) {
    var  val0 = f32(data1[(gidx0*(64))+(lidx1*(4))+ridx0]);
    acc0 = (val0+acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val1 = f32(temp[ridx1]);
    acc1 = (val1+acc1);
  }
  data0[gidx0] = acc1;
}`;

const E_128_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 128 */
  let lidx1 = i32(lindex.y); /* 8 */
  let lidx2 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(512))+(lidx1*(64))+(lidx2*(4))]);
  var  val1 = f32(data1[(gidx0*(512))+(lidx1*(64))+(lidx2*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(512))+(lidx1*(64))+(lidx2*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(512))+(lidx1*(64))+(lidx2*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(8))+lidx1]);
  data0[(gidx0*(512))+(lidx1*(64))+(lidx2*(4))] = (val0/val4);
  data0[(gidx0*(512))+(lidx1*(64))+(lidx2*(4))+(1)] = (val1/val4);
  data0[(gidx0*(512))+(lidx1*(64))+(lidx2*(4))+(2)] = (val2/val4);
  data0[(gidx0*(512))+(lidx1*(64))+(lidx2*(4))+(3)] = (val3/val4);
}`;

const r_2_8_5_16_8_16_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 8 */
  let gidx2 = i32(gindex.x); /* 5 */
  let lidx3 = i32(lindex.y); /* 16 */
  let lidx4 = i32(lindex.x); /* 8 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (16); ridx0++) {
    var  val0 = f32(data1[(gidx0*(32768))+(gidx1*(4096))+(lidx3*(256))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(32768))+(gidx1*(4096))+(lidx3*(256))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(32768))+(gidx1*(4096))+(lidx3*(256))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(32768))+(gidx1*(4096))+(lidx3*(256))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(32768))+(gidx1*(4096))+(lidx3*(256))+(ridx0*(4))+(64)]);
    var  val5 = f32(data1[(gidx0*(32768))+(gidx1*(4096))+(lidx3*(256))+(ridx0*(4))+(65)]);
    var  val6 = f32(data1[(gidx0*(32768))+(gidx1*(4096))+(lidx3*(256))+(ridx0*(4))+(66)]);
    var  val7 = f32(data1[(gidx0*(32768))+(gidx1*(4096))+(lidx3*(256))+(ridx0*(4))+(67)]);
    var  val8 = f32(data1[(gidx0*(32768))+(gidx1*(4096))+(lidx3*(256))+(ridx0*(4))+(128)]);
    var  val9 = f32(data1[(gidx0*(32768))+(gidx1*(4096))+(lidx3*(256))+(ridx0*(4))+(129)]);
    var  val10 = f32(data1[(gidx0*(32768))+(gidx1*(4096))+(lidx3*(256))+(ridx0*(4))+(130)]);
    var  val11 = f32(data1[(gidx0*(32768))+(gidx1*(4096))+(lidx3*(256))+(ridx0*(4))+(131)]);
    var  val12 = f32(data1[(gidx0*(32768))+(gidx1*(4096))+(lidx3*(256))+(ridx0*(4))+(192)]);
    var  val13 = f32(data1[(gidx0*(32768))+(gidx1*(4096))+(lidx3*(256))+(ridx0*(4))+(193)]);
    var  val14 = f32(data1[(gidx0*(32768))+(gidx1*(4096))+(lidx3*(256))+(ridx0*(4))+(194)]);
    var  val15 = f32(data1[(gidx0*(32768))+(gidx1*(4096))+(lidx3*(256))+(ridx0*(4))+(195)]);
    var  val16 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(gidx2*(32))+(lidx4*(4))+(ridx0*(5120))]);
    var  val17 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(gidx2*(32))+(lidx4*(4))+(ridx0*(5120))+(1280)]);
    var  val18 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(gidx2*(32))+(lidx4*(4))+(ridx0*(5120))+(2560)]);
    var  val19 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(gidx2*(32))+(lidx4*(4))+(ridx0*(5120))+(3840)]);
    var  val20 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(gidx2*(32))+(lidx4*(4))+(ridx0*(5120))+(1)]);
    var  val21 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(gidx2*(32))+(lidx4*(4))+(ridx0*(5120))+(1281)]);
    var  val22 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(gidx2*(32))+(lidx4*(4))+(ridx0*(5120))+(2561)]);
    var  val23 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(gidx2*(32))+(lidx4*(4))+(ridx0*(5120))+(3841)]);
    var  val24 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(gidx2*(32))+(lidx4*(4))+(ridx0*(5120))+(2)]);
    var  val25 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(gidx2*(32))+(lidx4*(4))+(ridx0*(5120))+(1282)]);
    var  val26 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(gidx2*(32))+(lidx4*(4))+(ridx0*(5120))+(2562)]);
    var  val27 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(gidx2*(32))+(lidx4*(4))+(ridx0*(5120))+(3842)]);
    var  val28 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(gidx2*(32))+(lidx4*(4))+(ridx0*(5120))+(3)]);
    var  val29 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(gidx2*(32))+(lidx4*(4))+(ridx0*(5120))+(1283)]);
    var  val30 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(gidx2*(32))+(lidx4*(4))+(ridx0*(5120))+(2563)]);
    var  val31 = f32(data2[(gidx0*(81920))+(gidx1*(160))+(gidx2*(32))+(lidx4*(4))+(ridx0*(5120))+(3843)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val0,val20,acc1);
    acc1 = fma(val1,val21,acc1);
    acc1 = fma(val2,val22,acc1);
    acc1 = fma(val3,val23,acc1);
    acc2 = fma(val0,val24,acc2);
    acc2 = fma(val1,val25,acc2);
    acc2 = fma(val2,val26,acc2);
    acc2 = fma(val3,val27,acc2);
    acc3 = fma(val0,val28,acc3);
    acc3 = fma(val1,val29,acc3);
    acc3 = fma(val2,val30,acc3);
    acc3 = fma(val3,val31,acc3);
    acc4 = fma(val4,val16,acc4);
    acc4 = fma(val5,val17,acc4);
    acc4 = fma(val6,val18,acc4);
    acc4 = fma(val7,val19,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val4,val24,acc6);
    acc6 = fma(val5,val25,acc6);
    acc6 = fma(val6,val26,acc6);
    acc6 = fma(val7,val27,acc6);
    acc7 = fma(val4,val28,acc7);
    acc7 = fma(val5,val29,acc7);
    acc7 = fma(val6,val30,acc7);
    acc7 = fma(val7,val31,acc7);
    acc8 = fma(val8,val16,acc8);
    acc8 = fma(val9,val17,acc8);
    acc8 = fma(val10,val18,acc8);
    acc8 = fma(val11,val19,acc8);
    acc9 = fma(val8,val20,acc9);
    acc9 = fma(val9,val21,acc9);
    acc9 = fma(val10,val22,acc9);
    acc9 = fma(val11,val23,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val8,val28,acc11);
    acc11 = fma(val9,val29,acc11);
    acc11 = fma(val10,val30,acc11);
    acc11 = fma(val11,val31,acc11);
    acc12 = fma(val12,val16,acc12);
    acc12 = fma(val13,val17,acc12);
    acc12 = fma(val14,val18,acc12);
    acc12 = fma(val15,val19,acc12);
    acc13 = fma(val12,val20,acc13);
    acc13 = fma(val13,val21,acc13);
    acc13 = fma(val14,val22,acc13);
    acc13 = fma(val15,val23,acc13);
    acc14 = fma(val12,val24,acc14);
    acc14 = fma(val13,val25,acc14);
    acc14 = fma(val14,val26,acc14);
    acc14 = fma(val15,val27,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))] = acc0;
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))+(3)] = acc3;
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))+(160)] = acc4;
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))+(161)] = acc5;
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))+(162)] = acc6;
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))+(163)] = acc7;
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))+(320)] = acc8;
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))+(321)] = acc9;
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))+(322)] = acc10;
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))+(323)] = acc11;
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))+(480)] = acc12;
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))+(481)] = acc13;
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))+(482)] = acc14;
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))+(483)] = acc15;
}`;

const r_2_2_20_8_16_320_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 2 */
  let gidx2 = i32(gindex.x); /* 20 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (320); ridx0++) {
    var  val0 = f32(data1[((ridx0*(4))%(160))+((ridx0/(40))*(10240))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(81920))]);
    var  val1 = f32(data1[(((ridx0*(4))+(1))%(160))+((ridx0/(40))*(10240))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(81920))]);
    var  val2 = f32(data1[(((ridx0*(4))+(2))%(160))+((ridx0/(40))*(10240))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(81920))]);
    var  val3 = f32(data1[(((ridx0*(4))+(3))%(160))+((ridx0/(40))*(10240))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(81920))]);
    var  val4 = f32(data1[((ridx0*(4))%(160))+((ridx0/(40))*(10240))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(81920))+(160)]);
    var  val5 = f32(data1[(((ridx0*(4))+(1))%(160))+((ridx0/(40))*(10240))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(81920))+(160)]);
    var  val6 = f32(data1[(((ridx0*(4))+(2))%(160))+((ridx0/(40))*(10240))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(81920))+(160)]);
    var  val7 = f32(data1[(((ridx0*(4))+(3))%(160))+((ridx0/(40))*(10240))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(81920))+(160)]);
    var  val8 = f32(data1[((ridx0*(4))%(160))+((ridx0/(40))*(10240))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(81920))+(320)]);
    var  val9 = f32(data1[(((ridx0*(4))+(1))%(160))+((ridx0/(40))*(10240))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(81920))+(320)]);
    var  val10 = f32(data1[(((ridx0*(4))+(2))%(160))+((ridx0/(40))*(10240))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(81920))+(320)]);
    var  val11 = f32(data1[(((ridx0*(4))+(3))%(160))+((ridx0/(40))*(10240))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(81920))+(320)]);
    var  val12 = f32(data1[((ridx0*(4))%(160))+((ridx0/(40))*(10240))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(81920))+(480)]);
    var  val13 = f32(data1[(((ridx0*(4))+(1))%(160))+((ridx0/(40))*(10240))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(81920))+(480)]);
    var  val14 = f32(data1[(((ridx0*(4))+(2))%(160))+((ridx0/(40))*(10240))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(81920))+(480)]);
    var  val15 = f32(data1[(((ridx0*(4))+(3))%(160))+((ridx0/(40))*(10240))+(gidx1*(5120))+(lidx3*(640))+(gidx0*(81920))+(480)]);
    var  val16 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))+(1280)]);
    var  val21 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))+(1281)]);
    var  val22 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))+(1282)]);
    var  val23 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))+(1283)]);
    var  val24 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))+(2560)]);
    var  val25 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))+(2561)]);
    var  val26 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))+(2562)]);
    var  val27 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))+(2563)]);
    var  val28 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))+(3840)]);
    var  val29 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))+(3841)]);
    var  val30 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))+(3842)]);
    var  val31 = f32(data2[(gidx2*(81920))+(lidx4*(5120))+(ridx0*(4))+(3843)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  var  val32 = f32(data3[(gidx2*(64))+(lidx4*(4))]);
  var  val33 = f32(data3[(gidx2*(64))+(lidx4*(4))+(1)]);
  var  val34 = f32(data3[(gidx2*(64))+(lidx4*(4))+(2)]);
  var  val35 = f32(data3[(gidx2*(64))+(lidx4*(4))+(3)]);
  var  val36 = f32(data4[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))]);
  var  val37 = f32(data4[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(1280)]);
  var  val38 = f32(data4[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(2560)]);
  var  val39 = f32(data4[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(3840)]);
  var  val40 = f32(data4[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(1)]);
  var  val41 = f32(data4[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(1281)]);
  var  val42 = f32(data4[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(2561)]);
  var  val43 = f32(data4[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(3841)]);
  var  val44 = f32(data4[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(2)]);
  var  val45 = f32(data4[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(1282)]);
  var  val46 = f32(data4[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(2562)]);
  var  val47 = f32(data4[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(3842)]);
  var  val48 = f32(data4[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(3)]);
  var  val49 = f32(data4[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(1283)]);
  var  val50 = f32(data4[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(2563)]);
  var  val51 = f32(data4[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(3843)]);
  data0[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))] = (acc0+val32+val36);
  data0[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(1280)] = (acc1+val32+val37);
  data0[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(2560)] = (acc2+val32+val38);
  data0[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(3840)] = (acc3+val32+val39);
  data0[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(1)] = (acc4+val33+val40);
  data0[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(1281)] = (acc5+val33+val41);
  data0[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(2561)] = (acc6+val33+val42);
  data0[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(3841)] = (acc7+val33+val43);
  data0[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(2)] = (acc8+val34+val44);
  data0[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(1282)] = (acc9+val34+val45);
  data0[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(2562)] = (acc10+val34+val46);
  data0[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(3842)] = (acc11+val34+val47);
  data0[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(3)] = (acc12+val35+val48);
  data0[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(1283)] = (acc13+val35+val49);
  data0[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(2563)] = (acc14+val35+val50);
  data0[(gidx0*(81920))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(3843)] = (acc15+val35+val51);
}`;

const r_2_77_8_16_40_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2 */
  let gidx1 = i32(gindex.x); /* 77 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (40); ridx0++) {
    var  val0 = f32(data1[(gidx0*(81920))+(lidx2*(160))+(lidx3*(5120))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(81920))+(lidx2*(160))+(lidx3*(5120))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(81920))+(lidx2*(160))+(lidx3*(5120))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(81920))+(lidx2*(160))+(lidx3*(5120))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(81920))+(lidx2*(160))+(lidx3*(5120))+(ridx0*(4))+(1280)]);
    var  val5 = f32(data1[(gidx0*(81920))+(lidx2*(160))+(lidx3*(5120))+(ridx0*(4))+(1281)]);
    var  val6 = f32(data1[(gidx0*(81920))+(lidx2*(160))+(lidx3*(5120))+(ridx0*(4))+(1282)]);
    var  val7 = f32(data1[(gidx0*(81920))+(lidx2*(160))+(lidx3*(5120))+(ridx0*(4))+(1283)]);
    var  val8 = f32(data1[(gidx0*(81920))+(lidx2*(160))+(lidx3*(5120))+(ridx0*(4))+(2560)]);
    var  val9 = f32(data1[(gidx0*(81920))+(lidx2*(160))+(lidx3*(5120))+(ridx0*(4))+(2561)]);
    var  val10 = f32(data1[(gidx0*(81920))+(lidx2*(160))+(lidx3*(5120))+(ridx0*(4))+(2562)]);
    var  val11 = f32(data1[(gidx0*(81920))+(lidx2*(160))+(lidx3*(5120))+(ridx0*(4))+(2563)]);
    var  val12 = f32(data1[(gidx0*(81920))+(lidx2*(160))+(lidx3*(5120))+(ridx0*(4))+(3840)]);
    var  val13 = f32(data1[(gidx0*(81920))+(lidx2*(160))+(lidx3*(5120))+(ridx0*(4))+(3841)]);
    var  val14 = f32(data1[(gidx0*(81920))+(lidx2*(160))+(lidx3*(5120))+(ridx0*(4))+(3842)]);
    var  val15 = f32(data1[(gidx0*(81920))+(lidx2*(160))+(lidx3*(5120))+(ridx0*(4))+(3843)]);
    var  val16 = f32(data2[(gidx0*(98560))+(gidx1*(1280))+(lidx2*(160))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx0*(98560))+(gidx1*(1280))+(lidx2*(160))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx0*(98560))+(gidx1*(1280))+(lidx2*(160))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx0*(98560))+(gidx1*(1280))+(lidx2*(160))+(ridx0*(4))+(3)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
  }
  data0[(gidx0*(39424))+gidx1+(lidx2*(4928))+(lidx3*(308))] = (acc0*(0.07905694150420949f));
  data0[(gidx0*(39424))+gidx1+(lidx2*(4928))+(lidx3*(308))+(77)] = (acc1*(0.07905694150420949f));
  data0[(gidx0*(39424))+gidx1+(lidx2*(4928))+(lidx3*(308))+(154)] = (acc2*(0.07905694150420949f));
  data0[(gidx0*(39424))+gidx1+(lidx2*(4928))+(lidx3*(308))+(231)] = (acc3*(0.07905694150420949f));
}`;

const r_32_32_77 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 32 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  acc0 = -0x1.fffffep+127f;
  for(var ridx0 = (0); ridx0 < (77); ridx0++) {
    var  val0 = f32(data1[(gidx0*(2464))+(lidx1*(77))+ridx0]);
    acc0 = max(val0,acc0);
  }
  data0[(gidx0*(32))+lidx1] = acc0;
}`;

const E_8_77_32_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 8 */
  let gidx1 = i32(gindex.x); /* 77 */
  let lidx2 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(9856))+gidx1+(lidx2*(308))]);
  var  val1 = f32(data1[(gidx0*(9856))+gidx1+(lidx2*(308))+(77)]);
  var  val2 = f32(data1[(gidx0*(9856))+gidx1+(lidx2*(308))+(154)]);
  var  val3 = f32(data1[(gidx0*(9856))+gidx1+(lidx2*(308))+(231)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx2*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx2*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx2*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx2*(4))+(3)]);
  data0[(gidx0*(9856))+gidx1+(lidx2*(308))] = exp2(((val0-val4)*(1.4426950408889634f)));
  data0[(gidx0*(9856))+gidx1+(lidx2*(308))+(77)] = exp2(((val1-val5)*(1.4426950408889634f)));
  data0[(gidx0*(9856))+gidx1+(lidx2*(308))+(154)] = exp2(((val2-val6)*(1.4426950408889634f)));
  data0[(gidx0*(9856))+gidx1+(lidx2*(308))+(231)] = exp2(((val3-val7)*(1.4426950408889634f)));
}`;

const r_32_32_77n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 32 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (77); ridx0++) {
    var  val0 = f32(data1[(gidx0*(2464))+(lidx1*(77))+ridx0]);
    acc0 = (val0+acc0);
  }
  data0[(gidx0*(32))+lidx1] = acc0;
}`;

const E_32_77_32 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 32 */
  let gidx1 = i32(gindex.x); /* 77 */
  let lidx2 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(2464))+gidx1+(lidx2*(77))]);
  var  val1 = f32(data2[(gidx0*(32))+lidx2]);
  data0[(gidx0*(2464))+gidx1+(lidx2*(77))] = (val0/val1);
}`;

const r_2_8_5_16_8_77_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 8 */
  let gidx2 = i32(gindex.x); /* 5 */
  let lidx3 = i32(lindex.y); /* 16 */
  let lidx4 = i32(lindex.x); /* 8 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (77); ridx0++) {
    var  val0 = f32(data1[(gidx0*(39424))+(gidx1*(4928))+(lidx3*(308))+ridx0]);
    var  val1 = f32(data1[(gidx0*(39424))+(gidx1*(4928))+(lidx3*(308))+ridx0+(77)]);
    var  val2 = f32(data1[(gidx0*(39424))+(gidx1*(4928))+(lidx3*(308))+ridx0+(154)]);
    var  val3 = f32(data1[(gidx0*(39424))+(gidx1*(4928))+(lidx3*(308))+ridx0+(231)]);
    var  val4 = f32(data2[(gidx0*(98560))+(gidx1*(160))+(gidx2*(32))+(lidx4*(4))+(ridx0*(1280))]);
    var  val5 = f32(data2[(gidx0*(98560))+(gidx1*(160))+(gidx2*(32))+(lidx4*(4))+(ridx0*(1280))+(1)]);
    var  val6 = f32(data2[(gidx0*(98560))+(gidx1*(160))+(gidx2*(32))+(lidx4*(4))+(ridx0*(1280))+(2)]);
    var  val7 = f32(data2[(gidx0*(98560))+(gidx1*(160))+(gidx2*(32))+(lidx4*(4))+(ridx0*(1280))+(3)]);
    acc0 = fma(val0,val4,acc0);
    acc1 = fma(val0,val5,acc1);
    acc2 = fma(val0,val6,acc2);
    acc3 = fma(val0,val7,acc3);
    acc4 = fma(val1,val4,acc4);
    acc5 = fma(val1,val5,acc5);
    acc6 = fma(val1,val6,acc6);
    acc7 = fma(val1,val7,acc7);
    acc8 = fma(val2,val4,acc8);
    acc9 = fma(val2,val5,acc9);
    acc10 = fma(val2,val6,acc10);
    acc11 = fma(val2,val7,acc11);
    acc12 = fma(val3,val4,acc12);
    acc13 = fma(val3,val5,acc13);
    acc14 = fma(val3,val6,acc14);
    acc15 = fma(val3,val7,acc15);
  }
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))] = acc0;
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))+(3)] = acc3;
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))+(160)] = acc4;
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))+(161)] = acc5;
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))+(162)] = acc6;
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))+(163)] = acc7;
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))+(320)] = acc8;
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))+(321)] = acc9;
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))+(322)] = acc10;
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))+(323)] = acc11;
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))+(480)] = acc12;
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))+(481)] = acc13;
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))+(482)] = acc14;
  data0[(gidx0*(81920))+(gidx1*(10240))+(gidx2*(32))+(lidx3*(640))+(lidx4*(4))+(483)] = acc15;
}`;

const r_4_160_8_16_320_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 160 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (320); ridx0++) {
    var  val0 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(1280)]);
    var  val5 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(1281)]);
    var  val6 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(1282)]);
    var  val7 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(1283)]);
    var  val8 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(2560)]);
    var  val9 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(2561)]);
    var  val10 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(2562)]);
    var  val11 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(2563)]);
    var  val12 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(3840)]);
    var  val13 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(3841)]);
    var  val14 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(3842)]);
    var  val15 = f32(data1[(gidx0*(40960))+(lidx2*(5120))+(ridx0*(4))+(3843)]);
    var  val16 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(1280)]);
    var  val21 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(1281)]);
    var  val22 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(1282)]);
    var  val23 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(1283)]);
    var  val24 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(2560)]);
    var  val25 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(2561)]);
    var  val26 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(2562)]);
    var  val27 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(2563)]);
    var  val28 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(3840)]);
    var  val29 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(3841)]);
    var  val30 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(3842)]);
    var  val31 = f32(data2[(gidx1*(81920))+(lidx3*(5120))+(ridx0*(4))+(3843)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val0,val20,acc1);
    acc1 = fma(val1,val21,acc1);
    acc1 = fma(val2,val22,acc1);
    acc1 = fma(val3,val23,acc1);
    acc2 = fma(val0,val24,acc2);
    acc2 = fma(val1,val25,acc2);
    acc2 = fma(val2,val26,acc2);
    acc2 = fma(val3,val27,acc2);
    acc3 = fma(val0,val28,acc3);
    acc3 = fma(val1,val29,acc3);
    acc3 = fma(val2,val30,acc3);
    acc3 = fma(val3,val31,acc3);
    acc4 = fma(val4,val16,acc4);
    acc4 = fma(val5,val17,acc4);
    acc4 = fma(val6,val18,acc4);
    acc4 = fma(val7,val19,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val4,val24,acc6);
    acc6 = fma(val5,val25,acc6);
    acc6 = fma(val6,val26,acc6);
    acc6 = fma(val7,val27,acc6);
    acc7 = fma(val4,val28,acc7);
    acc7 = fma(val5,val29,acc7);
    acc7 = fma(val6,val30,acc7);
    acc7 = fma(val7,val31,acc7);
    acc8 = fma(val8,val16,acc8);
    acc8 = fma(val9,val17,acc8);
    acc8 = fma(val10,val18,acc8);
    acc8 = fma(val11,val19,acc8);
    acc9 = fma(val8,val20,acc9);
    acc9 = fma(val9,val21,acc9);
    acc9 = fma(val10,val22,acc9);
    acc9 = fma(val11,val23,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val8,val28,acc11);
    acc11 = fma(val9,val29,acc11);
    acc11 = fma(val10,val30,acc11);
    acc11 = fma(val11,val31,acc11);
    acc12 = fma(val12,val16,acc12);
    acc12 = fma(val13,val17,acc12);
    acc12 = fma(val14,val18,acc12);
    acc12 = fma(val15,val19,acc12);
    acc13 = fma(val12,val20,acc13);
    acc13 = fma(val13,val21,acc13);
    acc13 = fma(val14,val22,acc13);
    acc13 = fma(val15,val23,acc13);
    acc14 = fma(val12,val24,acc14);
    acc14 = fma(val13,val25,acc14);
    acc14 = fma(val14,val26,acc14);
    acc14 = fma(val15,val27,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))] = acc0;
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))+(3)] = acc3;
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))+(10240)] = acc4;
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))+(10241)] = acc5;
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))+(10242)] = acc6;
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))+(10243)] = acc7;
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))+(20480)] = acc8;
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))+(20481)] = acc9;
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))+(20482)] = acc10;
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))+(20483)] = acc11;
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))+(30720)] = acc12;
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))+(30721)] = acc13;
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))+(30722)] = acc14;
  data0[(gidx0*(327680))+(gidx1*(64))+(lidx2*(40960))+(lidx3*(4))+(30723)] = acc15;
}`;

const E_4_320_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 320 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(327680))+(gidx1*(16))+(lidx2*(40960))+lidx3+(5120)]);
  var  val1 = f32(data1[(gidx0*(327680))+(gidx1*(16))+(lidx2*(40960))+lidx3+(15360)]);
  var  val2 = f32(data1[(gidx0*(327680))+(gidx1*(16))+(lidx2*(40960))+lidx3+(25600)]);
  var  val3 = f32(data1[(gidx0*(327680))+(gidx1*(16))+(lidx2*(40960))+lidx3+(35840)]);
  var  val4 = f32(data2[(gidx1*(16))+lidx3+(5120)]);
  data0[(gidx0*(163840))+(gidx1*(16))+(lidx2*(20480))+lidx3] = ((0.5f)*(val0+val4));
  data0[(gidx0*(163840))+(gidx1*(16))+(lidx2*(20480))+lidx3+(5120)] = ((0.5f)*(val1+val4));
  data0[(gidx0*(163840))+(gidx1*(16))+(lidx2*(20480))+lidx3+(10240)] = ((0.5f)*(val2+val4));
  data0[(gidx0*(163840))+(gidx1*(16))+(lidx2*(20480))+lidx3+(15360)] = ((0.5f)*(val3+val4));
}`;

const E_4_320_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 320 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(327680))+(gidx1*(16))+(lidx2*(40960))+lidx3+(5120)]);
  var  val1 = f32(data1[(gidx0*(327680))+(gidx1*(16))+(lidx2*(40960))+lidx3+(15360)]);
  var  val2 = f32(data1[(gidx0*(327680))+(gidx1*(16))+(lidx2*(40960))+lidx3+(25600)]);
  var  val3 = f32(data1[(gidx0*(327680))+(gidx1*(16))+(lidx2*(40960))+lidx3+(35840)]);
  var  val4 = f32(data2[(gidx1*(16))+lidx3+(5120)]);
  var  alu0 = (val0+val4);
  var  alu1 = (val1+val4);
  var  alu2 = (val2+val4);
  var  alu3 = (val3+val4);
  data0[(gidx0*(163840))+(gidx1*(16))+(lidx2*(20480))+lidx3] = ((1.0f)+(((2.0f)*((1.0f)/((1.0f)+exp2(((2.0f)*(alu0*(0.7978845608f)*((1.0f)+((0.044715f)*alu0*alu0)))*((-1.4426950408889634f)))))))-(1.0f)));
  data0[(gidx0*(163840))+(gidx1*(16))+(lidx2*(20480))+lidx3+(5120)] = ((1.0f)+(((2.0f)*((1.0f)/((1.0f)+exp2(((2.0f)*(alu1*(0.7978845608f)*((1.0f)+((0.044715f)*alu1*alu1)))*((-1.4426950408889634f)))))))-(1.0f)));
  data0[(gidx0*(163840))+(gidx1*(16))+(lidx2*(20480))+lidx3+(10240)] = ((1.0f)+(((2.0f)*((1.0f)/((1.0f)+exp2(((2.0f)*(alu2*(0.7978845608f)*((1.0f)+((0.044715f)*alu2*alu2)))*((-1.4426950408889634f)))))))-(1.0f)));
  data0[(gidx0*(163840))+(gidx1*(16))+(lidx2*(20480))+lidx3+(15360)] = ((1.0f)+(((2.0f)*((1.0f)/((1.0f)+exp2(((2.0f)*(alu3*(0.7978845608f)*((1.0f)+((0.044715f)*alu3*alu3)))*((-1.4426950408889634f)))))))-(1.0f)));
}`;

const E_1280_32_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(4,32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 1280 */
  let lidx1 = i32(lindex.y); /* 32 */
  let lidx2 = i32(lindex.x); /* 4 */
  var  val0 = f32(data1[(gidx0*(4))+(lidx1*(40960))+lidx2]);
  var  val1 = f32(data1[(gidx0*(4))+(lidx1*(40960))+lidx2+(10240)]);
  var  val2 = f32(data1[(gidx0*(4))+(lidx1*(40960))+lidx2+(20480)]);
  var  val3 = f32(data1[(gidx0*(4))+(lidx1*(40960))+lidx2+(30720)]);
  var  val4 = f32(data2[(gidx0*(4))+lidx2]);
  var  val5 = f32(data3[(gidx0*(4))+(lidx1*(20480))+lidx2]);
  var  val6 = f32(data3[(gidx0*(4))+(lidx1*(20480))+lidx2+(5120)]);
  var  val7 = f32(data3[(gidx0*(4))+(lidx1*(20480))+lidx2+(10240)]);
  var  val8 = f32(data3[(gidx0*(4))+(lidx1*(20480))+lidx2+(15360)]);
  var  val9 = f32(data4[(gidx0*(4))+(lidx1*(20480))+lidx2]);
  var  val10 = f32(data4[(gidx0*(4))+(lidx1*(20480))+lidx2+(5120)]);
  var  val11 = f32(data4[(gidx0*(4))+(lidx1*(20480))+lidx2+(10240)]);
  var  val12 = f32(data4[(gidx0*(4))+(lidx1*(20480))+lidx2+(15360)]);
  data0[(gidx0*(4))+(lidx1*(20480))+lidx2] = ((val0+val4)*(val5*val9));
  data0[(gidx0*(4))+(lidx1*(20480))+lidx2+(5120)] = ((val1+val4)*(val6*val10));
  data0[(gidx0*(4))+(lidx1*(20480))+lidx2+(10240)] = ((val2+val4)*(val7*val11));
  data0[(gidx0*(4))+(lidx1*(20480))+lidx2+(15360)] = ((val3+val4)*(val8*val12));
}`;

const r_4_20_8_16_1280_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 20 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (1280); ridx0++) {
    var  val0 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))+(5120)]);
    var  val5 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))+(5121)]);
    var  val6 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))+(5122)]);
    var  val7 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))+(5123)]);
    var  val8 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))+(10240)]);
    var  val9 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))+(10241)]);
    var  val10 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))+(10242)]);
    var  val11 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))+(10243)]);
    var  val12 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))+(15360)]);
    var  val13 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))+(15361)]);
    var  val14 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))+(15362)]);
    var  val15 = f32(data1[(gidx0*(163840))+(lidx2*(20480))+(ridx0*(4))+(15363)]);
    var  val16 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))+(5120)]);
    var  val21 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))+(5121)]);
    var  val22 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))+(5122)]);
    var  val23 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))+(5123)]);
    var  val24 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))+(10240)]);
    var  val25 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))+(10241)]);
    var  val26 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))+(10242)]);
    var  val27 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))+(10243)]);
    var  val28 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))+(15360)]);
    var  val29 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))+(15361)]);
    var  val30 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))+(15362)]);
    var  val31 = f32(data2[(gidx1*(327680))+(lidx3*(20480))+(ridx0*(4))+(15363)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val0,val20,acc1);
    acc1 = fma(val1,val21,acc1);
    acc1 = fma(val2,val22,acc1);
    acc1 = fma(val3,val23,acc1);
    acc2 = fma(val0,val24,acc2);
    acc2 = fma(val1,val25,acc2);
    acc2 = fma(val2,val26,acc2);
    acc2 = fma(val3,val27,acc2);
    acc3 = fma(val0,val28,acc3);
    acc3 = fma(val1,val29,acc3);
    acc3 = fma(val2,val30,acc3);
    acc3 = fma(val3,val31,acc3);
    acc4 = fma(val4,val16,acc4);
    acc4 = fma(val5,val17,acc4);
    acc4 = fma(val6,val18,acc4);
    acc4 = fma(val7,val19,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val4,val24,acc6);
    acc6 = fma(val5,val25,acc6);
    acc6 = fma(val6,val26,acc6);
    acc6 = fma(val7,val27,acc6);
    acc7 = fma(val4,val28,acc7);
    acc7 = fma(val5,val29,acc7);
    acc7 = fma(val6,val30,acc7);
    acc7 = fma(val7,val31,acc7);
    acc8 = fma(val8,val16,acc8);
    acc8 = fma(val9,val17,acc8);
    acc8 = fma(val10,val18,acc8);
    acc8 = fma(val11,val19,acc8);
    acc9 = fma(val8,val20,acc9);
    acc9 = fma(val9,val21,acc9);
    acc9 = fma(val10,val22,acc9);
    acc9 = fma(val11,val23,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val8,val28,acc11);
    acc11 = fma(val9,val29,acc11);
    acc11 = fma(val10,val30,acc11);
    acc11 = fma(val11,val31,acc11);
    acc12 = fma(val12,val16,acc12);
    acc12 = fma(val13,val17,acc12);
    acc12 = fma(val14,val18,acc12);
    acc12 = fma(val15,val19,acc12);
    acc13 = fma(val12,val20,acc13);
    acc13 = fma(val13,val21,acc13);
    acc13 = fma(val14,val22,acc13);
    acc13 = fma(val15,val23,acc13);
    acc14 = fma(val12,val24,acc14);
    acc14 = fma(val13,val25,acc14);
    acc14 = fma(val14,val26,acc14);
    acc14 = fma(val15,val27,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))] = acc0;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3)] = acc3;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1280)] = acc4;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1281)] = acc5;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1282)] = acc6;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(1283)] = acc7;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2560)] = acc8;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2561)] = acc9;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2562)] = acc10;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(2563)] = acc11;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3840)] = acc12;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3841)] = acc13;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3842)] = acc14;
  data0[(gidx0*(40960))+(gidx1*(64))+(lidx2*(5120))+(lidx3*(4))+(3843)] = acc15;
}`;

const E_320_2_4_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,4,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 320 */
  let lidx1 = i32(lindex.z); /* 2 */
  let lidx2 = i32(lindex.y); /* 4 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(4))+(lidx1*(81920))+lidx2+(lidx3*(5120))]);
  var  val1 = f32(data1[(gidx0*(4))+(lidx1*(81920))+lidx2+(lidx3*(5120))+(1280)]);
  var  val2 = f32(data1[(gidx0*(4))+(lidx1*(81920))+lidx2+(lidx3*(5120))+(2560)]);
  var  val3 = f32(data1[(gidx0*(4))+(lidx1*(81920))+lidx2+(lidx3*(5120))+(3840)]);
  var  val4 = f32(data2[(gidx0*(4))+lidx2]);
  var  val5 = f32(data3[(gidx0*(4))+(lidx1*(81920))+lidx2+(lidx3*(5120))]);
  var  val6 = f32(data3[(gidx0*(4))+(lidx1*(81920))+lidx2+(lidx3*(5120))+(1280)]);
  var  val7 = f32(data3[(gidx0*(4))+(lidx1*(81920))+lidx2+(lidx3*(5120))+(2560)]);
  var  val8 = f32(data3[(gidx0*(4))+(lidx1*(81920))+lidx2+(lidx3*(5120))+(3840)]);
  data0[(gidx0*(256))+(lidx1*(81920))+(lidx2*(64))+(lidx3*(4))] = (val0+val4+val5);
  data0[(gidx0*(256))+(lidx1*(81920))+(lidx2*(64))+(lidx3*(4))+(1)] = (val1+val4+val6);
  data0[(gidx0*(256))+(lidx1*(81920))+(lidx2*(64))+(lidx3*(4))+(2)] = (val2+val4+val7);
  data0[(gidx0*(256))+(lidx1*(81920))+(lidx2*(64))+(lidx3*(4))+(3)] = (val3+val4+val8);
}`;

const r_2_40_8_16_320_4_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2 */
  let gidx1 = i32(gindex.x); /* 40 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (320); ridx0++) {
    var  val0 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))]);
    var  val1 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))+(64)]);
    var  val2 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))+(128)]);
    var  val3 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))+(192)]);
    var  val4 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))+(1)]);
    var  val5 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))+(65)]);
    var  val6 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))+(129)]);
    var  val7 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))+(193)]);
    var  val8 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))+(2)]);
    var  val9 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))+(66)]);
    var  val10 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))+(130)]);
    var  val11 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))+(194)]);
    var  val12 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))+(3)]);
    var  val13 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))+(67)]);
    var  val14 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))+(131)]);
    var  val15 = f32(data1[(gidx0*(81920))+(lidx3*(4))+(ridx0*(256))+(195)]);
    var  val16 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))+(1280)]);
    var  val21 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))+(1281)]);
    var  val22 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))+(1282)]);
    var  val23 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))+(1283)]);
    var  val24 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))+(2560)]);
    var  val25 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))+(2561)]);
    var  val26 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))+(2562)]);
    var  val27 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))+(2563)]);
    var  val28 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))+(3840)]);
    var  val29 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))+(3841)]);
    var  val30 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))+(3842)]);
    var  val31 = f32(data2[(gidx1*(40960))+(lidx2*(5120))+(ridx0*(4))+(3843)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  var  val32 = f32(data3[(gidx1*(32))+(lidx2*(4))]);
  var  val33 = f32(data3[(gidx1*(32))+(lidx2*(4))+(1)]);
  var  val34 = f32(data3[(gidx1*(32))+(lidx2*(4))+(2)]);
  var  val35 = f32(data3[(gidx1*(32))+(lidx2*(4))+(3)]);
  var  val36 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))]);
  var  val37 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(1)]);
  var  val38 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(2)]);
  var  val39 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(3)]);
  var  val40 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(64)]);
  var  val41 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(65)]);
  var  val42 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(66)]);
  var  val43 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(67)]);
  var  val44 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(128)]);
  var  val45 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(129)]);
  var  val46 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(130)]);
  var  val47 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(131)]);
  var  val48 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(192)]);
  var  val49 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(193)]);
  var  val50 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(194)]);
  var  val51 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(195)]);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))] = (acc0+val32+val36);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(1)] = (acc1+val32+val37);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(2)] = (acc2+val32+val38);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(3)] = (acc3+val32+val39);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(64)] = (acc4+val33+val40);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(65)] = (acc5+val33+val41);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(66)] = (acc6+val33+val42);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(67)] = (acc7+val33+val43);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(128)] = (acc8+val34+val44);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(129)] = (acc9+val34+val45);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(130)] = (acc10+val34+val46);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(131)] = (acc11+val34+val47);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(192)] = (acc12+val35+val48);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(193)] = (acc13+val35+val49);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(194)] = (acc14+val35+val50);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(195)] = (acc15+val35+val51);
}`;

const E_2_320_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2 */
  let gidx1 = i32(gindex.x); /* 320 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  alu0 = f32((gidx1*(8))<(1280));
  var  val0 = select(f32((0.0f)), f32(data1[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))]), bool(alu0));
  var  val1 = select(f32((0.0f)), f32(data1[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+(1)]), bool(alu0));
  var  val2 = select(f32((0.0f)), f32(data1[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+(2)]), bool(alu0));
  var  val3 = select(f32((0.0f)), f32(data1[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+(3)]), bool(alu0));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(8))+lidx2]), bool(alu0));
  var  val5 = select(f32((0.0f)), f32(data3[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))]), bool(alu0));
  var  val6 = select(f32((0.0f)), f32(data3[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+(1)]), bool(alu0));
  var  val7 = select(f32((0.0f)), f32(data3[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+(2)]), bool(alu0));
  var  val8 = select(f32((0.0f)), f32(data3[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+(3)]), bool(alu0));
  var  val9 = select(f32((0.0f)), f32(data4[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))]), bool(alu0));
  var  val10 = select(f32((0.0f)), f32(data4[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+(1)]), bool(alu0));
  var  val11 = select(f32((0.0f)), f32(data4[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+(2)]), bool(alu0));
  var  val12 = select(f32((0.0f)), f32(data4[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+(3)]), bool(alu0));
  var  val13 = select(f32((0.0f)), f32(data5[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))]), bool(alu0));
  var  val14 = select(f32((0.0f)), f32(data5[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+(1)]), bool(alu0));
  var  val15 = select(f32((0.0f)), f32(data5[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+(2)]), bool(alu0));
  var  val16 = select(f32((0.0f)), f32(data5[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+(3)]), bool(alu0));
  var  val17 = select(f32((0.0f)), f32(data6[(gidx1*(8))+lidx2]), bool(alu0));
  data0[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))] = (val0+val4+(val5+val9)+(val13+val17));
  data0[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(1)] = (val1+val4+(val6+val10)+(val14+val17));
  data0[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(2)] = (val2+val4+(val7+val11)+(val15+val17));
  data0[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(3)] = (val3+val4+(val8+val12)+(val16+val17));
}`;

const E_2_320_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2 */
  let gidx1 = i32(gindex.x); /* 320 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(3)]);
  var  alu0 = f32(((gidx1*((-8)))+(lidx2*((-1))))<((-1279)));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+((-81920))]), bool(alu0));
  var  val5 = select(f32((0.0f)), f32(data2[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+((-81919))]), bool(alu0));
  var  val6 = select(f32((0.0f)), f32(data2[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+((-81918))]), bool(alu0));
  var  val7 = select(f32((0.0f)), f32(data2[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+((-81917))]), bool(alu0));
  data0[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))] = (val0+val4);
  data0[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(1)] = (val1+val5);
  data0[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(2)] = (val2+val6);
  data0[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(3)] = (val3+val7);
}`;

const r_2_40_8_16_640_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2 */
  let gidx1 = i32(gindex.x); /* 40 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (640); ridx0++) {
    var  val0 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))]);
    var  val1 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))+(64)]);
    var  val2 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))+(128)]);
    var  val3 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))+(192)]);
    var  val4 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))+(1)]);
    var  val5 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))+(65)]);
    var  val6 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))+(129)]);
    var  val7 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))+(193)]);
    var  val8 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))+(2)]);
    var  val9 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))+(66)]);
    var  val10 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))+(130)]);
    var  val11 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))+(194)]);
    var  val12 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))+(3)]);
    var  val13 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))+(67)]);
    var  val14 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))+(131)]);
    var  val15 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))+(195)]);
    var  val16 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))+(2560)]);
    var  val21 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))+(2561)]);
    var  val22 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))+(2562)]);
    var  val23 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))+(2563)]);
    var  val24 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))+(5120)]);
    var  val25 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))+(5121)]);
    var  val26 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))+(5122)]);
    var  val27 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))+(5123)]);
    var  val28 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))+(7680)]);
    var  val29 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))+(7681)]);
    var  val30 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))+(7682)]);
    var  val31 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))+(7683)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))] = acc0;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(3)] = acc3;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(64)] = acc4;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(65)] = acc5;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(66)] = acc6;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(67)] = acc7;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(128)] = acc8;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(129)] = acc9;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(130)] = acc10;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(131)] = acc11;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(192)] = acc12;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(193)] = acc13;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(194)] = acc14;
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(195)] = acc15;
}`;

const E_2_4_80_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 4 */
  let gidx2 = i32(gindex.x); /* 80 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(163840))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(163840))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(163840))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(163840))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(3)]);
  var  alu0 = f32(((gidx1*((-640)))+(gidx2*((-1)))+(lidx3*((-80))))<((-1279)));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(gidx0*(81920))+((-81920))]), bool(alu0));
  var  val5 = select(f32((0.0f)), f32(data2[(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(gidx0*(81920))+((-81919))]), bool(alu0));
  var  val6 = select(f32((0.0f)), f32(data2[(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(gidx0*(81920))+((-81918))]), bool(alu0));
  var  val7 = select(f32((0.0f)), f32(data2[(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(gidx0*(81920))+((-81917))]), bool(alu0));
  data0[(gidx0*(163840))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))] = (val0+val4);
  data0[(gidx0*(163840))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(1)] = (val1+val5);
  data0[(gidx0*(163840))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(2)] = (val2+val6);
  data0[(gidx0*(163840))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(3)] = (val3+val7);
}`;

const E_640_2_4_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,4,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 640 */
  let lidx1 = i32(lindex.z); /* 2 */
  let lidx2 = i32(lindex.y); /* 4 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(256))+(lidx1*(163840))+(lidx2*(64))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(256))+(lidx1*(163840))+(lidx2*(64))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(256))+(lidx1*(163840))+(lidx2*(64))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(256))+(lidx1*(163840))+(lidx2*(64))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(lidx1*(32))+(gidx0/(20))]);
  var  val5 = f32(data3[(lidx1*(32))+(gidx0/(20))]);
  var  val6 = f32(data4[(gidx0*(4))+lidx2]);
  var  val7 = f32(data5[(gidx0*(4))+lidx2]);
  data0[(gidx0*(256))+(lidx1*(163840))+(lidx2*(64))+(lidx3*(4))] = (((val0-val4)*val5*val6)+val7);
  data0[(gidx0*(256))+(lidx1*(163840))+(lidx2*(64))+(lidx3*(4))+(1)] = (((val1-val4)*val5*val6)+val7);
  data0[(gidx0*(256))+(lidx1*(163840))+(lidx2*(64))+(lidx3*(4))+(2)] = (((val2-val4)*val5*val6)+val7);
  data0[(gidx0*(256))+(lidx1*(163840))+(lidx2*(64))+(lidx3*(4))+(3)] = (((val3-val4)*val5*val6)+val7);
}`;

const E_2_320_8_16_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2 */
  let gidx1 = i32(gindex.x); /* 320 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(32))+(gidx1/(10))]);
  var  val5 = f32(data3[(gidx0*(32))+(gidx1/(10))]);
  var  val6 = f32(data4[(gidx1*(8))+lidx2]);
  var  val7 = f32(data5[(gidx1*(8))+lidx2]);
  data0[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))] = ((1.0f)/((1.0f)+exp2(((((val0-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(1)] = ((1.0f)/((1.0f)+exp2(((((val1-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(2)] = ((1.0f)/((1.0f)+exp2(((((val2-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(3)] = ((1.0f)/((1.0f)+exp2(((((val3-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
}`;

const E_2560_32_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 2560 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx1*(4))+(3)]);
  data0[(gidx0*(128))+(lidx1*(4))] = (val0*val4);
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (val1*val5);
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (val2*val6);
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (val3*val7);
}`;

const r_2_40_8_8_2_2560_3_3_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(2,8,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2 */
  let gidx1 = i32(gindex.x); /* 40 */
  let lidx2 = i32(lindex.z); /* 8 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 2 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (2560); ridx0++) {
    var  alu0 = f32((lidx4*((-4)))<(0));
    var  alu1 = f32((lidx3*((-1)))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(163840))+(ridx0*(64))+((-9))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(163840))+(ridx0*(64))+((-1))]), bool(alu0));
    var  alu2 = f32(lidx3<(7));
    var  val2 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(163840))+(ridx0*(64))+(7)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(163840))+(ridx0*(64))+((-8))]), bool(alu1));
    var  val4 = f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(163840))+(ridx0*(64))]);
    var  val5 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(163840))+(ridx0*(64))+(8)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(163840))+(ridx0*(64))+((-7))]), bool(alu1));
    var  val7 = f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(163840))+(ridx0*(64))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(163840))+(ridx0*(64))+(9)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(163840))+(ridx0*(64))+((-6))]), bool(alu1));
    var  val10 = f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(163840))+(ridx0*(64))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(163840))+(ridx0*(64))+(10)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(163840))+(ridx0*(64))+((-5))]), bool(alu1));
    var  val13 = f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(163840))+(ridx0*(64))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(163840))+(ridx0*(64))+(11)]), bool(alu2));
    var  alu3 = f32((lidx4*(4))<(4));
    var  val15 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(163840))+(ridx0*(64))+((-4))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(163840))+(ridx0*(64))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(8))+(gidx0*(163840))+(ridx0*(64))+(12)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(23040)]);
    var  val28 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(23043)]);
    var  val29 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(23046)]);
    var  val30 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(23041)]);
    var  val31 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(23044)]);
    var  val32 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(23047)]);
    var  val33 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(23042)]);
    var  val34 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(23045)]);
    var  val35 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(23048)]);
    var  val36 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(46080)]);
    var  val37 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(46083)]);
    var  val38 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(46086)]);
    var  val39 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(46081)]);
    var  val40 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(46084)]);
    var  val41 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(46087)]);
    var  val42 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(46082)]);
    var  val43 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(46085)]);
    var  val44 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(46088)]);
    var  val45 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(69120)]);
    var  val46 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(69123)]);
    var  val47 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(69126)]);
    var  val48 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(69121)]);
    var  val49 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(69124)]);
    var  val50 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(69127)]);
    var  val51 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(69122)]);
    var  val52 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(69125)]);
    var  val53 = f32(data2[(gidx1*(737280))+(lidx2*(92160))+(ridx0*(9))+(69128)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  var  val54 = f32(data3[(gidx1*(32))+(lidx2*(4))]);
  var  val55 = f32(data3[(gidx1*(32))+(lidx2*(4))+(1)]);
  var  val56 = f32(data3[(gidx1*(32))+(lidx2*(4))+(2)]);
  var  val57 = f32(data3[(gidx1*(32))+(lidx2*(4))+(3)]);
  var  val58 = f32(data4[(gidx1*(32))+(lidx2*(4))]);
  var  val59 = f32(data4[(gidx1*(32))+(lidx2*(4))+(1)]);
  var  val60 = f32(data4[(gidx1*(32))+(lidx2*(4))+(2)]);
  var  val61 = f32(data4[(gidx1*(32))+(lidx2*(4))+(3)]);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))] = (acc0+val54+val58);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(1)] = (acc1+val54+val58);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(2)] = (acc2+val54+val58);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(3)] = (acc3+val54+val58);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(64)] = (acc4+val55+val59);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(65)] = (acc5+val55+val59);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(66)] = (acc6+val55+val59);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(67)] = (acc7+val55+val59);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(128)] = (acc8+val56+val60);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(129)] = (acc9+val56+val60);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(130)] = (acc10+val56+val60);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(131)] = (acc11+val56+val60);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(192)] = (acc12+val57+val61);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(193)] = (acc13+val57+val61);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(194)] = (acc14+val57+val61);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(8))+(lidx4*(4))+(195)] = (acc15+val57+val61);
}`;

const E_2_320_8_16_4n3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2 */
  let gidx1 = i32(gindex.x); /* 320 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  alu0 = f32((gidx1*(8))<(1280));
  var  val0 = select(f32((0.0f)), f32(data1[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))]), bool(alu0));
  var  val1 = select(f32((0.0f)), f32(data1[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+(1)]), bool(alu0));
  var  val2 = select(f32((0.0f)), f32(data1[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+(2)]), bool(alu0));
  var  val3 = select(f32((0.0f)), f32(data1[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+(3)]), bool(alu0));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(8))+lidx2]), bool(alu0));
  var  val5 = select(f32((0.0f)), f32(data3[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))]), bool(alu0));
  var  val6 = select(f32((0.0f)), f32(data3[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+(1)]), bool(alu0));
  var  val7 = select(f32((0.0f)), f32(data3[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+(2)]), bool(alu0));
  var  val8 = select(f32((0.0f)), f32(data3[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+(3)]), bool(alu0));
  var  val9 = select(f32((0.0f)), f32(data4[(gidx1*(8))+lidx2]), bool(alu0));
  data0[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))] = (val0+val4+(val5+val9));
  data0[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(1)] = (val1+val4+(val6+val9));
  data0[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(2)] = (val2+val4+(val7+val9));
  data0[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(3)] = (val3+val4+(val8+val9));
}`;

const E_2_320_8_16_4n4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2 */
  let gidx1 = i32(gindex.x); /* 320 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  alu0 = f32(((gidx1*((-8)))+(lidx2*((-1))))<((-1279)));
  var  val0 = select(f32((0.0f)), f32(data1[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+((-81920))]), bool(alu0));
  var  val1 = select(f32((0.0f)), f32(data1[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+((-81919))]), bool(alu0));
  var  val2 = select(f32((0.0f)), f32(data1[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+((-81918))]), bool(alu0));
  var  val3 = select(f32((0.0f)), f32(data1[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+((-81917))]), bool(alu0));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(8))+lidx2+((-1280))]), bool(alu0));
  var  val5 = select(f32((0.0f)), f32(data3[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+((-81920))]), bool(alu0));
  var  val6 = select(f32((0.0f)), f32(data3[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+((-81919))]), bool(alu0));
  var  val7 = select(f32((0.0f)), f32(data3[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+((-81918))]), bool(alu0));
  var  val8 = select(f32((0.0f)), f32(data3[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+((-81917))]), bool(alu0));
  var  val9 = select(f32((0.0f)), f32(data4[(gidx1*(8))+lidx2+((-1280))]), bool(alu0));
  data0[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))] = (val0+val4+(val5+val9));
  data0[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(1)] = (val1+val4+(val6+val9));
  data0[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(2)] = (val2+val4+(val7+val9));
  data0[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(3)] = (val3+val4+(val8+val9));
}`;

const E_2560_32_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 2560 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx1*(4))+(3)]);
  data0[(gidx0*(128))+(lidx1*(4))] = (val0+val4);
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (val1+val5);
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (val2+val6);
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (val3+val7);
}`;

const E_2560_32_4n3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 2560 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx1*(4))+(3)]);
  data0[(gidx0*(128))+(lidx1*(4))] = (val0+val4);
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (val1+val5);
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (val2+val6);
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (val3+val7);
}`;

const E_2_320_8_16_4n5 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2 */
  let gidx1 = i32(gindex.x); /* 320 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  alu0 = f32((gidx1*(8))<(1280));
  var  val0 = select(f32((0.0f)), f32(data1[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))]), bool(alu0));
  var  val1 = select(f32((0.0f)), f32(data1[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+(1)]), bool(alu0));
  var  val2 = select(f32((0.0f)), f32(data1[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+(2)]), bool(alu0));
  var  val3 = select(f32((0.0f)), f32(data1[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+(3)]), bool(alu0));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(8))+lidx2]), bool(alu0));
  var  val5 = select(f32((0.0f)), f32(data3[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))]), bool(alu0));
  var  val6 = select(f32((0.0f)), f32(data3[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+(1)]), bool(alu0));
  var  val7 = select(f32((0.0f)), f32(data3[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+(2)]), bool(alu0));
  var  val8 = select(f32((0.0f)), f32(data3[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+(3)]), bool(alu0));
  var  val9 = select(f32((0.0f)), f32(data4[(gidx1*(8))+lidx2]), bool(alu0));
  var  alu1 = f32(((gidx1*((-8)))+(lidx2*((-1))))<((-1279)));
  var  val10 = select(f32((0.0f)), f32(data5[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+((-81920))]), bool(alu1));
  var  val11 = select(f32((0.0f)), f32(data5[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+((-81919))]), bool(alu1));
  var  val12 = select(f32((0.0f)), f32(data5[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+((-81918))]), bool(alu1));
  var  val13 = select(f32((0.0f)), f32(data5[(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(gidx0*(81920))+((-81917))]), bool(alu1));
  var  val14 = select(f32((0.0f)), f32(data6[(gidx1*(8))+lidx2+((-1280))]), bool(alu1));
  data0[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))] = (val0+val4+(val5+val9)+(val10+val14));
  data0[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(1)] = (val1+val4+(val6+val9)+(val11+val14));
  data0[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(2)] = (val2+val4+(val7+val9)+(val12+val14));
  data0[(gidx0*(163840))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(3)] = (val3+val4+(val8+val9)+(val13+val14));
}`;

const E_2_4_80_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 4 */
  let gidx2 = i32(gindex.x); /* 80 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  alu0 = f32((gidx1*(640))<(1280));
  var  val0 = select(f32((0.0f)), f32(data1[(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(gidx0*(81920))]), bool(alu0));
  var  val1 = select(f32((0.0f)), f32(data1[(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(gidx0*(81920))+(1)]), bool(alu0));
  var  val2 = select(f32((0.0f)), f32(data1[(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(gidx0*(81920))+(2)]), bool(alu0));
  var  val3 = select(f32((0.0f)), f32(data1[(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(gidx0*(81920))+(3)]), bool(alu0));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(640))+gidx2+(lidx3*(80))]), bool(alu0));
  var  val5 = select(f32((0.0f)), f32(data3[(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(gidx0*(81920))]), bool(alu0));
  var  val6 = select(f32((0.0f)), f32(data3[(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(gidx0*(81920))+(1)]), bool(alu0));
  var  val7 = select(f32((0.0f)), f32(data3[(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(gidx0*(81920))+(2)]), bool(alu0));
  var  val8 = select(f32((0.0f)), f32(data3[(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(gidx0*(81920))+(3)]), bool(alu0));
  var  val9 = select(f32((0.0f)), f32(data4[(gidx1*(640))+gidx2+(lidx3*(80))]), bool(alu0));
  var  alu1 = f32(((gidx1*((-640)))+(gidx2*((-1)))+(lidx3*((-80))))<((-1279)));
  var  val10 = select(f32((0.0f)), f32(data5[(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(gidx0*(81920))+((-81920))]), bool(alu1));
  var  val11 = select(f32((0.0f)), f32(data5[(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(gidx0*(81920))+((-81919))]), bool(alu1));
  var  val12 = select(f32((0.0f)), f32(data5[(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(gidx0*(81920))+((-81918))]), bool(alu1));
  var  val13 = select(f32((0.0f)), f32(data5[(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(gidx0*(81920))+((-81917))]), bool(alu1));
  var  val14 = select(f32((0.0f)), f32(data6[(gidx1*(640))+gidx2+(lidx3*(80))+((-1280))]), bool(alu1));
  data0[(gidx0*(163840))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))] = (val0+val4+(val5+val9)+(val10+val14));
  data0[(gidx0*(163840))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(1)] = (val1+val4+(val6+val9)+(val11+val14));
  data0[(gidx0*(163840))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(2)] = (val2+val4+(val7+val9)+(val12+val14));
  data0[(gidx0*(163840))+(gidx1*(40960))+(gidx2*(64))+(lidx3*(5120))+(lidx4*(4))+(3)] = (val3+val4+(val8+val9)+(val13+val14));
}`;

const r_2_40_8_16_640_4_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2 */
  let gidx1 = i32(gindex.x); /* 40 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (640); ridx0++) {
    var  val0 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))]);
    var  val1 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))+(64)]);
    var  val2 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))+(128)]);
    var  val3 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))+(192)]);
    var  val4 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))+(1)]);
    var  val5 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))+(65)]);
    var  val6 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))+(129)]);
    var  val7 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))+(193)]);
    var  val8 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))+(2)]);
    var  val9 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))+(66)]);
    var  val10 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))+(130)]);
    var  val11 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))+(194)]);
    var  val12 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))+(3)]);
    var  val13 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))+(67)]);
    var  val14 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))+(131)]);
    var  val15 = f32(data1[(gidx0*(163840))+(lidx3*(4))+(ridx0*(256))+(195)]);
    var  val16 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))+(2560)]);
    var  val21 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))+(2561)]);
    var  val22 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))+(2562)]);
    var  val23 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))+(2563)]);
    var  val24 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))+(5120)]);
    var  val25 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))+(5121)]);
    var  val26 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))+(5122)]);
    var  val27 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))+(5123)]);
    var  val28 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))+(7680)]);
    var  val29 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))+(7681)]);
    var  val30 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))+(7682)]);
    var  val31 = f32(data2[(gidx1*(81920))+(lidx2*(10240))+(ridx0*(4))+(7683)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  var  val32 = f32(data3[(gidx1*(32))+(lidx2*(4))]);
  var  val33 = f32(data3[(gidx1*(32))+(lidx2*(4))+(1)]);
  var  val34 = f32(data3[(gidx1*(32))+(lidx2*(4))+(2)]);
  var  val35 = f32(data3[(gidx1*(32))+(lidx2*(4))+(3)]);
  var  val36 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))]);
  var  val37 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(1)]);
  var  val38 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(2)]);
  var  val39 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(3)]);
  var  val40 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(64)]);
  var  val41 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(65)]);
  var  val42 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(66)]);
  var  val43 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(67)]);
  var  val44 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(128)]);
  var  val45 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(129)]);
  var  val46 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(130)]);
  var  val47 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(131)]);
  var  val48 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(192)]);
  var  val49 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(193)]);
  var  val50 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(194)]);
  var  val51 = f32(data4[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(195)]);
  var  val52 = f32(data5[(gidx1*(32))+(lidx2*(4))]);
  var  val53 = f32(data5[(gidx1*(32))+(lidx2*(4))+(1)]);
  var  val54 = f32(data5[(gidx1*(32))+(lidx2*(4))+(2)]);
  var  val55 = f32(data5[(gidx1*(32))+(lidx2*(4))+(3)]);
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))] = (acc0+val32+(val36+val52));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(1)] = (acc1+val32+(val37+val52));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(2)] = (acc2+val32+(val38+val52));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(3)] = (acc3+val32+(val39+val52));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(64)] = (acc4+val33+(val40+val53));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(65)] = (acc5+val33+(val41+val53));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(66)] = (acc6+val33+(val42+val53));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(67)] = (acc7+val33+(val43+val53));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(128)] = (acc8+val34+(val44+val54));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(129)] = (acc9+val34+(val45+val54));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(130)] = (acc10+val34+(val46+val54));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(131)] = (acc11+val34+(val47+val54));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(192)] = (acc12+val35+(val48+val55));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(193)] = (acc13+val35+(val49+val55));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(194)] = (acc14+val35+(val50+val55));
  data0[(gidx0*(81920))+(gidx1*(2048))+(lidx2*(256))+(lidx3*(4))+(195)] = (acc15+val35+(val51+val55));
}`;

const r_2_160_2_16_4_1280_3_3_4_4n3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(4,16,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2 */
  let gidx1 = i32(gindex.x); /* 160 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 16 */
  let lidx4 = i32(lindex.x); /* 4 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (1280); ridx0++) {
    var  alu0 = f32((lidx4*((-4)))<(0));
    var  alu1 = f32((lidx3*((-1)))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(((lidx4*(2))+(7))%(8))+((((gidx0*(10240))+(ridx0*(8))+((lidx3+((lidx4+(3))/(4)))/(2))+(20479))%(20480))*(8))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(((lidx4*(2))+(7))%(8))+((((gidx0*(10240))+(ridx0*(8))+((lidx3+((lidx4+(3))/(4))+(1))/(2))+(20479))%(20480))*(8))]), bool(alu0));
    var  alu2 = f32(lidx3<(15));
    var  val2 = select(f32((0.0f)), f32(data1[(((lidx4*(2))+(7))%(8))+((((gidx0*(10240))+(ridx0*(8))+((lidx3+((lidx4+(3))/(4)))/(2)))%(20480))*(8))]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx4*(2))+((((gidx0*(10240))+(ridx0*(8))+((lidx3+(1))/(2))+(20479))%(20480))*(8))]), bool(alu1));
    var  val4 = f32(data1[(lidx4*(2))+(gidx0*(81920))+(ridx0*(64))+((lidx3/(2))*(8))]);
    var  val5 = select(f32((0.0f)), f32(data1[(lidx4*(2))+((((gidx0*(10240))+(ridx0*(8))+((lidx3+(3))/(2))+(20479))%(20480))*(8))]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(lidx4*(2))+((((gidx0*(10240))+(ridx0*(8))+((lidx3+(1))/(2))+(20479))%(20480))*(8))+(1)]), bool(alu1));
    var  val7 = f32(data1[(lidx4*(2))+(gidx0*(81920))+(ridx0*(64))+((lidx3/(2))*(8))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(lidx4*(2))+((((gidx0*(10240))+(ridx0*(8))+((lidx3+(3))/(2))+(20479))%(20480))*(8))+(1)]), bool(alu2));
    var  alu3 = f32((lidx4*(4))<(12));
    var  val9 = select(f32((0.0f)), f32(data1[(((lidx4*(2))+(2))%(8))+((((gidx0*(10240))+(ridx0*(8))+((lidx3+((lidx4+(5))/(4)))/(2))+(20479))%(20480))*(8))]), bool((alu3*alu1)));
    var  val10 = select(f32((0.0f)), f32(data1[(((lidx4*(2))+(2))%(8))+((((gidx0*(10240))+(ridx0*(8))+((lidx3+((lidx4+(5))/(4))+(1))/(2))+(20479))%(20480))*(8))]), bool(alu3));
    var  val11 = select(f32((0.0f)), f32(data1[(((lidx4*(2))+(2))%(8))+((((gidx0*(10240))+(ridx0*(8))+((lidx3+((lidx4+(5))/(4)))/(2)))%(20480))*(8))]), bool((alu3*alu2)));
    var  val12 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))]);
    var  val13 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(3)]);
    var  val14 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(6)]);
    var  val15 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(1)]);
    var  val16 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(4)]);
    var  val17 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(7)]);
    var  val18 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(2)]);
    var  val19 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(5)]);
    var  val20 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(8)]);
    var  val21 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11520)]);
    var  val22 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11523)]);
    var  val23 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11526)]);
    var  val24 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11521)]);
    var  val25 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11524)]);
    var  val26 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11527)]);
    var  val27 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11522)]);
    var  val28 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11525)]);
    var  val29 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(11528)]);
    var  val30 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23040)]);
    var  val31 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23043)]);
    var  val32 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23046)]);
    var  val33 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23041)]);
    var  val34 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23044)]);
    var  val35 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23047)]);
    var  val36 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23042)]);
    var  val37 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23045)]);
    var  val38 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(23048)]);
    var  val39 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34560)]);
    var  val40 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34563)]);
    var  val41 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34566)]);
    var  val42 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34561)]);
    var  val43 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34564)]);
    var  val44 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34567)]);
    var  val45 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34562)]);
    var  val46 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34565)]);
    var  val47 = f32(data2[(gidx1*(92160))+(lidx2*(46080))+(ridx0*(9))+(34568)]);
    acc0 = fma(val0,val12,acc0);
    acc0 = fma(val1,val13,acc0);
    acc0 = fma(val2,val14,acc0);
    acc0 = fma(val3,val15,acc0);
    acc0 = fma(val4,val16,acc0);
    acc0 = fma(val5,val17,acc0);
    acc0 = fma(val3,val18,acc0);
    acc0 = fma(val4,val19,acc0);
    acc0 = fma(val5,val20,acc0);
    acc1 = fma(val3,val12,acc1);
    acc1 = fma(val4,val13,acc1);
    acc1 = fma(val5,val14,acc1);
    acc1 = fma(val3,val15,acc1);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc1 = fma(val8,val20,acc1);
    acc2 = fma(val3,val12,acc2);
    acc2 = fma(val4,val13,acc2);
    acc2 = fma(val5,val14,acc2);
    acc2 = fma(val6,val15,acc2);
    acc2 = fma(val7,val16,acc2);
    acc2 = fma(val8,val17,acc2);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc3 = fma(val6,val12,acc3);
    acc3 = fma(val7,val13,acc3);
    acc3 = fma(val8,val14,acc3);
    acc3 = fma(val6,val15,acc3);
    acc3 = fma(val7,val16,acc3);
    acc3 = fma(val8,val17,acc3);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc4 = fma(val0,val21,acc4);
    acc4 = fma(val1,val22,acc4);
    acc4 = fma(val2,val23,acc4);
    acc4 = fma(val3,val24,acc4);
    acc4 = fma(val4,val25,acc4);
    acc4 = fma(val5,val26,acc4);
    acc4 = fma(val3,val27,acc4);
    acc4 = fma(val4,val28,acc4);
    acc4 = fma(val5,val29,acc4);
    acc5 = fma(val3,val21,acc5);
    acc5 = fma(val4,val22,acc5);
    acc5 = fma(val5,val23,acc5);
    acc5 = fma(val3,val24,acc5);
    acc5 = fma(val4,val25,acc5);
    acc5 = fma(val5,val26,acc5);
    acc5 = fma(val6,val27,acc5);
    acc5 = fma(val7,val28,acc5);
    acc5 = fma(val8,val29,acc5);
    acc6 = fma(val3,val21,acc6);
    acc6 = fma(val4,val22,acc6);
    acc6 = fma(val5,val23,acc6);
    acc6 = fma(val6,val24,acc6);
    acc6 = fma(val7,val25,acc6);
    acc6 = fma(val8,val26,acc6);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc7 = fma(val6,val21,acc7);
    acc7 = fma(val7,val22,acc7);
    acc7 = fma(val8,val23,acc7);
    acc7 = fma(val6,val24,acc7);
    acc7 = fma(val7,val25,acc7);
    acc7 = fma(val8,val26,acc7);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc8 = fma(val0,val30,acc8);
    acc8 = fma(val1,val31,acc8);
    acc8 = fma(val2,val32,acc8);
    acc8 = fma(val3,val33,acc8);
    acc8 = fma(val4,val34,acc8);
    acc8 = fma(val5,val35,acc8);
    acc8 = fma(val3,val36,acc8);
    acc8 = fma(val4,val37,acc8);
    acc8 = fma(val5,val38,acc8);
    acc9 = fma(val3,val30,acc9);
    acc9 = fma(val4,val31,acc9);
    acc9 = fma(val5,val32,acc9);
    acc9 = fma(val3,val33,acc9);
    acc9 = fma(val4,val34,acc9);
    acc9 = fma(val5,val35,acc9);
    acc9 = fma(val6,val36,acc9);
    acc9 = fma(val7,val37,acc9);
    acc9 = fma(val8,val38,acc9);
    acc10 = fma(val3,val30,acc10);
    acc10 = fma(val4,val31,acc10);
    acc10 = fma(val5,val32,acc10);
    acc10 = fma(val6,val33,acc10);
    acc10 = fma(val7,val34,acc10);
    acc10 = fma(val8,val35,acc10);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc11 = fma(val6,val30,acc11);
    acc11 = fma(val7,val31,acc11);
    acc11 = fma(val8,val32,acc11);
    acc11 = fma(val6,val33,acc11);
    acc11 = fma(val7,val34,acc11);
    acc11 = fma(val8,val35,acc11);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc12 = fma(val0,val39,acc12);
    acc12 = fma(val1,val40,acc12);
    acc12 = fma(val2,val41,acc12);
    acc12 = fma(val3,val42,acc12);
    acc12 = fma(val4,val43,acc12);
    acc12 = fma(val5,val44,acc12);
    acc12 = fma(val3,val45,acc12);
    acc12 = fma(val4,val46,acc12);
    acc12 = fma(val5,val47,acc12);
    acc13 = fma(val3,val39,acc13);
    acc13 = fma(val4,val40,acc13);
    acc13 = fma(val5,val41,acc13);
    acc13 = fma(val3,val42,acc13);
    acc13 = fma(val4,val43,acc13);
    acc13 = fma(val5,val44,acc13);
    acc13 = fma(val6,val45,acc13);
    acc13 = fma(val7,val46,acc13);
    acc13 = fma(val8,val47,acc13);
    acc14 = fma(val3,val39,acc14);
    acc14 = fma(val4,val40,acc14);
    acc14 = fma(val5,val41,acc14);
    acc14 = fma(val6,val42,acc14);
    acc14 = fma(val7,val43,acc14);
    acc14 = fma(val8,val44,acc14);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc15 = fma(val6,val39,acc15);
    acc15 = fma(val7,val40,acc15);
    acc15 = fma(val8,val41,acc15);
    acc15 = fma(val6,val42,acc15);
    acc15 = fma(val7,val43,acc15);
    acc15 = fma(val8,val44,acc15);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
  }
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))] = acc0;
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(3)] = acc3;
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(256)] = acc4;
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(257)] = acc5;
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(258)] = acc6;
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(259)] = acc7;
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(512)] = acc8;
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(513)] = acc9;
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(514)] = acc10;
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(515)] = acc11;
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(768)] = acc12;
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(769)] = acc13;
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(770)] = acc14;
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(771)] = acc15;
}`;

const E_2_320_4_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 320 */
  let gidx2 = i32(gindex.x); /* 4 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  alu0 = f32((gidx1*(8))<(1280));
  var  val0 = select(f32((0.0f)), f32(data1[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))]), bool(alu0));
  var  val1 = select(f32((0.0f)), f32(data1[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))+(1)]), bool(alu0));
  var  val2 = select(f32((0.0f)), f32(data1[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))+(2)]), bool(alu0));
  var  val3 = select(f32((0.0f)), f32(data1[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))+(3)]), bool(alu0));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(8))+lidx3]), bool(alu0));
  var  alu1 = f32(((gidx1*((-8)))+(lidx3*((-1))))<((-1279)));
  var  val5 = select(f32((0.0f)), f32(data3[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))+((-327680))]), bool(alu1));
  var  val6 = select(f32((0.0f)), f32(data3[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))+((-327679))]), bool(alu1));
  var  val7 = select(f32((0.0f)), f32(data3[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))+((-327678))]), bool(alu1));
  var  val8 = select(f32((0.0f)), f32(data3[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))+((-327677))]), bool(alu1));
  data0[(gidx0*(655360))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))] = (val0+val4+val5);
  data0[(gidx0*(655360))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)] = (val1+val4+val6);
  data0[(gidx0*(655360))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)] = (val2+val4+val7);
  data0[(gidx0*(655360))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)] = (val3+val4+val8);
}`;

const E_2_4_320_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 4 */
  let gidx2 = i32(gindex.x); /* 320 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  alu0 = f32((gidx1*(640))<(1280));
  var  val0 = select(f32((0.0f)), f32(data1[(gidx1*(163840))+(gidx2*(64))+(lidx3*(20480))+(lidx4*(4))+(gidx0*(327680))]), bool(alu0));
  var  val1 = select(f32((0.0f)), f32(data1[(gidx1*(163840))+(gidx2*(64))+(lidx3*(20480))+(lidx4*(4))+(gidx0*(327680))+(1)]), bool(alu0));
  var  val2 = select(f32((0.0f)), f32(data1[(gidx1*(163840))+(gidx2*(64))+(lidx3*(20480))+(lidx4*(4))+(gidx0*(327680))+(2)]), bool(alu0));
  var  val3 = select(f32((0.0f)), f32(data1[(gidx1*(163840))+(gidx2*(64))+(lidx3*(20480))+(lidx4*(4))+(gidx0*(327680))+(3)]), bool(alu0));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(640))+(lidx3*(80))+(gidx2/(4))]), bool(alu0));
  var  alu1 = f32(((gidx1*((-640)))+(lidx3*((-80)))+((gidx2/(4))*((-1))))<((-1279)));
  var  val5 = select(f32((0.0f)), f32(data3[(gidx1*(163840))+(gidx2*(64))+(lidx3*(20480))+(lidx4*(4))+(gidx0*(327680))+((-327680))]), bool(alu1));
  var  val6 = select(f32((0.0f)), f32(data3[(gidx1*(163840))+(gidx2*(64))+(lidx3*(20480))+(lidx4*(4))+(gidx0*(327680))+((-327679))]), bool(alu1));
  var  val7 = select(f32((0.0f)), f32(data3[(gidx1*(163840))+(gidx2*(64))+(lidx3*(20480))+(lidx4*(4))+(gidx0*(327680))+((-327678))]), bool(alu1));
  var  val8 = select(f32((0.0f)), f32(data3[(gidx1*(163840))+(gidx2*(64))+(lidx3*(20480))+(lidx4*(4))+(gidx0*(327680))+((-327677))]), bool(alu1));
  data0[(gidx0*(655360))+(gidx1*(163840))+(gidx2*(64))+(lidx3*(20480))+(lidx4*(4))] = (val0+val4+val5);
  data0[(gidx0*(655360))+(gidx1*(163840))+(gidx2*(64))+(lidx3*(20480))+(lidx4*(4))+(1)] = (val1+val4+val6);
  data0[(gidx0*(655360))+(gidx1*(163840))+(gidx2*(64))+(lidx3*(20480))+(lidx4*(4))+(2)] = (val2+val4+val7);
  data0[(gidx0*(655360))+(gidx1*(163840))+(gidx2*(64))+(lidx3*(20480))+(lidx4*(4))+(3)] = (val3+val4+val8);
}`;

const E_640_4_2_4_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,4,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 640 */
  let gidx1 = i32(gindex.x); /* 4 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 4 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(1024))+(gidx1*(64))+(lidx2*(655360))+(lidx3*(256))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(1024))+(gidx1*(64))+(lidx2*(655360))+(lidx3*(256))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(1024))+(gidx1*(64))+(lidx2*(655360))+(lidx3*(256))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(1024))+(gidx1*(64))+(lidx2*(655360))+(lidx3*(256))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(lidx2*(32))+(gidx0/(20))]);
  var  val5 = f32(data3[(lidx2*(32))+(gidx0/(20))]);
  var  val6 = f32(data4[(gidx0*(4))+lidx3]);
  var  val7 = f32(data5[(gidx0*(4))+lidx3]);
  data0[(gidx0*(1024))+(gidx1*(64))+(lidx2*(655360))+(lidx3*(256))+(lidx4*(4))] = (((val0-val4)*val5*val6)+val7);
  data0[(gidx0*(1024))+(gidx1*(64))+(lidx2*(655360))+(lidx3*(256))+(lidx4*(4))+(1)] = (((val1-val4)*val5*val6)+val7);
  data0[(gidx0*(1024))+(gidx1*(64))+(lidx2*(655360))+(lidx3*(256))+(lidx4*(4))+(2)] = (((val2-val4)*val5*val6)+val7);
  data0[(gidx0*(1024))+(gidx1*(64))+(lidx2*(655360))+(lidx3*(256))+(lidx4*(4))+(3)] = (((val3-val4)*val5*val6)+val7);
}`;

const E_2_320_4_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 320 */
  let gidx2 = i32(gindex.x); /* 4 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(655360))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(655360))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(655360))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(655360))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(32))+(gidx1/(10))]);
  var  val5 = f32(data3[(gidx0*(32))+(gidx1/(10))]);
  var  val6 = f32(data4[(gidx1*(8))+lidx3]);
  var  val7 = f32(data5[(gidx1*(8))+lidx3]);
  data0[(gidx0*(655360))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))] = ((1.0f)/((1.0f)+exp2(((((val0-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(655360))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)] = ((1.0f)/((1.0f)+exp2(((((val1-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(655360))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)] = ((1.0f)/((1.0f)+exp2(((((val2-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(655360))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)] = ((1.0f)/((1.0f)+exp2(((((val3-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
}`;

const E_10240_32_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 10240 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx1*(4))+(3)]);
  data0[(gidx0*(128))+(lidx1*(4))] = (val0*val4);
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (val1*val5);
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (val2*val6);
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (val3*val7);
}`;

const r_2_160_2_16_4_2560_3_3_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(4,16,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2 */
  let gidx1 = i32(gindex.x); /* 160 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 16 */
  let lidx4 = i32(lindex.x); /* 4 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (2560); ridx0++) {
    var  alu0 = f32((lidx4*((-4)))<(0));
    var  alu1 = f32((lidx3*((-1)))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(655360))+(ridx0*(256))+((-17))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(655360))+(ridx0*(256))+((-1))]), bool(alu0));
    var  alu2 = f32(lidx3<(15));
    var  val2 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(655360))+(ridx0*(256))+(15)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(655360))+(ridx0*(256))+((-16))]), bool(alu1));
    var  val4 = f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(655360))+(ridx0*(256))]);
    var  val5 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(655360))+(ridx0*(256))+(16)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(655360))+(ridx0*(256))+((-15))]), bool(alu1));
    var  val7 = f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(655360))+(ridx0*(256))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(655360))+(ridx0*(256))+(17)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(655360))+(ridx0*(256))+((-14))]), bool(alu1));
    var  val10 = f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(655360))+(ridx0*(256))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(655360))+(ridx0*(256))+(18)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(655360))+(ridx0*(256))+((-13))]), bool(alu1));
    var  val13 = f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(655360))+(ridx0*(256))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(655360))+(ridx0*(256))+(19)]), bool(alu2));
    var  alu3 = f32((lidx4*(4))<(12));
    var  val15 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(655360))+(ridx0*(256))+((-12))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(655360))+(ridx0*(256))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(655360))+(ridx0*(256))+(20)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(23040)]);
    var  val28 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(23043)]);
    var  val29 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(23046)]);
    var  val30 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(23041)]);
    var  val31 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(23044)]);
    var  val32 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(23047)]);
    var  val33 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(23042)]);
    var  val34 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(23045)]);
    var  val35 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(23048)]);
    var  val36 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(46080)]);
    var  val37 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(46083)]);
    var  val38 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(46086)]);
    var  val39 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(46081)]);
    var  val40 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(46084)]);
    var  val41 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(46087)]);
    var  val42 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(46082)]);
    var  val43 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(46085)]);
    var  val44 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(46088)]);
    var  val45 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(69120)]);
    var  val46 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(69123)]);
    var  val47 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(69126)]);
    var  val48 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(69121)]);
    var  val49 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(69124)]);
    var  val50 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(69127)]);
    var  val51 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(69122)]);
    var  val52 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(69125)]);
    var  val53 = f32(data2[(gidx1*(184320))+(lidx2*(92160))+(ridx0*(9))+(69128)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  var  val54 = f32(data3[(gidx1*(8))+(lidx2*(4))]);
  var  val55 = f32(data3[(gidx1*(8))+(lidx2*(4))+(1)]);
  var  val56 = f32(data3[(gidx1*(8))+(lidx2*(4))+(2)]);
  var  val57 = f32(data3[(gidx1*(8))+(lidx2*(4))+(3)]);
  var  val58 = f32(data4[(gidx1*(8))+(lidx2*(4))]);
  var  val59 = f32(data4[(gidx1*(8))+(lidx2*(4))+(1)]);
  var  val60 = f32(data4[(gidx1*(8))+(lidx2*(4))+(2)]);
  var  val61 = f32(data4[(gidx1*(8))+(lidx2*(4))+(3)]);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))] = (acc0+val54+val58);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(1)] = (acc1+val54+val58);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(2)] = (acc2+val54+val58);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(3)] = (acc3+val54+val58);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(256)] = (acc4+val55+val59);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(257)] = (acc5+val55+val59);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(258)] = (acc6+val55+val59);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(259)] = (acc7+val55+val59);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(512)] = (acc8+val56+val60);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(513)] = (acc9+val56+val60);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(514)] = (acc10+val56+val60);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(515)] = (acc11+val56+val60);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(768)] = (acc12+val57+val61);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(769)] = (acc13+val57+val61);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(770)] = (acc14+val57+val61);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(771)] = (acc15+val57+val61);
}`;

const r_2_40_4_8_16_640_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 40 */
  let gidx2 = i32(gindex.x); /* 4 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (640); ridx0++) {
    var  val0 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))]);
    var  val1 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(256)]);
    var  val2 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(512)]);
    var  val3 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(768)]);
    var  val4 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(1)]);
    var  val5 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(257)]);
    var  val6 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(513)]);
    var  val7 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(769)]);
    var  val8 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(2)]);
    var  val9 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(258)]);
    var  val10 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(514)]);
    var  val11 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(770)]);
    var  val12 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(3)]);
    var  val13 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(259)]);
    var  val14 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(515)]);
    var  val15 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(771)]);
    var  val16 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))+(2560)]);
    var  val21 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))+(2561)]);
    var  val22 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))+(2562)]);
    var  val23 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))+(2563)]);
    var  val24 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))+(5120)]);
    var  val25 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))+(5121)]);
    var  val26 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))+(5122)]);
    var  val27 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))+(5123)]);
    var  val28 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))+(7680)]);
    var  val29 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))+(7681)]);
    var  val30 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))+(7682)]);
    var  val31 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))+(7683)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  var  val32 = f32(data3[(gidx1*(32))+(lidx3*(4))]);
  var  val33 = f32(data3[(gidx1*(32))+(lidx3*(4))+(1)]);
  var  val34 = f32(data3[(gidx1*(32))+(lidx3*(4))+(2)]);
  var  val35 = f32(data3[(gidx1*(32))+(lidx3*(4))+(3)]);
  var  val36 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))]);
  var  val37 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)]);
  var  val38 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)]);
  var  val39 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)]);
  var  val40 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(256)]);
  var  val41 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(257)]);
  var  val42 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(258)]);
  var  val43 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(259)]);
  var  val44 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(512)]);
  var  val45 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(513)]);
  var  val46 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(514)]);
  var  val47 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(515)]);
  var  val48 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(768)]);
  var  val49 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(769)]);
  var  val50 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(770)]);
  var  val51 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(771)]);
  var  val52 = f32(data5[(gidx1*(32))+(lidx3*(4))]);
  var  val53 = f32(data5[(gidx1*(32))+(lidx3*(4))+(1)]);
  var  val54 = f32(data5[(gidx1*(32))+(lidx3*(4))+(2)]);
  var  val55 = f32(data5[(gidx1*(32))+(lidx3*(4))+(3)]);
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))] = (acc0+val32+(val36+val52));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)] = (acc1+val32+(val37+val52));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)] = (acc2+val32+(val38+val52));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)] = (acc3+val32+(val39+val52));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(256)] = (acc4+val33+(val40+val53));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(257)] = (acc5+val33+(val41+val53));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(258)] = (acc6+val33+(val42+val53));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(259)] = (acc7+val33+(val43+val53));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(512)] = (acc8+val34+(val44+val54));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(513)] = (acc9+val34+(val45+val54));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(514)] = (acc10+val34+(val46+val54));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(515)] = (acc11+val34+(val47+val54));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(768)] = (acc12+val35+(val48+val55));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(769)] = (acc13+val35+(val49+val55));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(770)] = (acc14+val35+(val50+val55));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(771)] = (acc15+val35+(val51+val55));
}`;

const r_2_40_4_8_16_640_4_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 40 */
  let gidx2 = i32(gindex.x); /* 4 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (640); ridx0++) {
    var  val0 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))]);
    var  val1 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(256)]);
    var  val2 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(512)]);
    var  val3 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(768)]);
    var  val4 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(1)]);
    var  val5 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(257)]);
    var  val6 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(513)]);
    var  val7 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(769)]);
    var  val8 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(2)]);
    var  val9 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(258)]);
    var  val10 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(514)]);
    var  val11 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(770)]);
    var  val12 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(3)]);
    var  val13 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(259)]);
    var  val14 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(515)]);
    var  val15 = f32(data1[(gidx0*(655360))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(771)]);
    var  val16 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))+(2560)]);
    var  val21 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))+(2561)]);
    var  val22 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))+(2562)]);
    var  val23 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))+(2563)]);
    var  val24 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))+(5120)]);
    var  val25 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))+(5121)]);
    var  val26 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))+(5122)]);
    var  val27 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))+(5123)]);
    var  val28 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))+(7680)]);
    var  val29 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))+(7681)]);
    var  val30 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))+(7682)]);
    var  val31 = f32(data2[(gidx1*(81920))+(lidx3*(10240))+(ridx0*(4))+(7683)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))] = acc0;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)] = acc3;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(256)] = acc4;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(257)] = acc5;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(258)] = acc6;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(259)] = acc7;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(512)] = acc8;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(513)] = acc9;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(514)] = acc10;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(515)] = acc11;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(768)] = acc12;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(769)] = acc13;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(770)] = acc14;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(771)] = acc15;
}`;

const E_2_320_4_8_16_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 320 */
  let gidx2 = i32(gindex.x); /* 4 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  alu0 = f32((gidx1*(8))<(1280));
  var  val0 = select(f32((0.0f)), f32(data1[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))]), bool(alu0));
  var  val1 = select(f32((0.0f)), f32(data1[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))+(1)]), bool(alu0));
  var  val2 = select(f32((0.0f)), f32(data1[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))+(2)]), bool(alu0));
  var  val3 = select(f32((0.0f)), f32(data1[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))+(3)]), bool(alu0));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(8))+lidx3]), bool(alu0));
  var  val5 = select(f32((0.0f)), f32(data3[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))]), bool(alu0));
  var  val6 = select(f32((0.0f)), f32(data3[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))+(1)]), bool(alu0));
  var  val7 = select(f32((0.0f)), f32(data3[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))+(2)]), bool(alu0));
  var  val8 = select(f32((0.0f)), f32(data3[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))+(3)]), bool(alu0));
  var  val9 = select(f32((0.0f)), f32(data4[(gidx1*(8))+lidx3]), bool(alu0));
  var  val10 = select(f32((0.0f)), f32(data5[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))]), bool(alu0));
  var  val11 = select(f32((0.0f)), f32(data5[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))+(1)]), bool(alu0));
  var  val12 = select(f32((0.0f)), f32(data5[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))+(2)]), bool(alu0));
  var  val13 = select(f32((0.0f)), f32(data5[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))+(3)]), bool(alu0));
  var  val14 = select(f32((0.0f)), f32(data6[(gidx1*(8))+lidx3]), bool(alu0));
  data0[(gidx0*(655360))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))] = (val0+val4+(val5+val9+(val10+val14)));
  data0[(gidx0*(655360))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)] = (val1+val4+(val6+val9+(val11+val14)));
  data0[(gidx0*(655360))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)] = (val2+val4+(val7+val9+(val12+val14)));
  data0[(gidx0*(655360))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)] = (val3+val4+(val8+val9+(val13+val14)));
}`;

const E_2_320_4_8_16_4n3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 320 */
  let gidx2 = i32(gindex.x); /* 4 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(655360))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(655360))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(655360))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(655360))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)]);
  var  alu0 = f32(((gidx1*((-8)))+(lidx3*((-1))))<((-1279)));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))+((-327680))]), bool(alu0));
  var  val5 = select(f32((0.0f)), f32(data2[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))+((-327679))]), bool(alu0));
  var  val6 = select(f32((0.0f)), f32(data2[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))+((-327678))]), bool(alu0));
  var  val7 = select(f32((0.0f)), f32(data2[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))+((-327677))]), bool(alu0));
  data0[(gidx0*(655360))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))] = (val0+val4);
  data0[(gidx0*(655360))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)] = (val1+val5);
  data0[(gidx0*(655360))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)] = (val2+val6);
  data0[(gidx0*(655360))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)] = (val3+val7);
}`;

const E_2_4_320_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 4 */
  let gidx2 = i32(gindex.x); /* 320 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(655360))+(gidx1*(163840))+(gidx2*(64))+(lidx3*(20480))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(655360))+(gidx1*(163840))+(gidx2*(64))+(lidx3*(20480))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(655360))+(gidx1*(163840))+(gidx2*(64))+(lidx3*(20480))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(655360))+(gidx1*(163840))+(gidx2*(64))+(lidx3*(20480))+(lidx4*(4))+(3)]);
  var  alu0 = f32(((gidx1*((-640)))+(lidx3*((-80)))+((gidx2/(4))*((-1))))<((-1279)));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(163840))+(gidx2*(64))+(lidx3*(20480))+(lidx4*(4))+(gidx0*(327680))+((-327680))]), bool(alu0));
  var  val5 = select(f32((0.0f)), f32(data2[(gidx1*(163840))+(gidx2*(64))+(lidx3*(20480))+(lidx4*(4))+(gidx0*(327680))+((-327679))]), bool(alu0));
  var  val6 = select(f32((0.0f)), f32(data2[(gidx1*(163840))+(gidx2*(64))+(lidx3*(20480))+(lidx4*(4))+(gidx0*(327680))+((-327678))]), bool(alu0));
  var  val7 = select(f32((0.0f)), f32(data2[(gidx1*(163840))+(gidx2*(64))+(lidx3*(20480))+(lidx4*(4))+(gidx0*(327680))+((-327677))]), bool(alu0));
  data0[(gidx0*(655360))+(gidx1*(163840))+(gidx2*(64))+(lidx3*(20480))+(lidx4*(4))] = (val0+val4);
  data0[(gidx0*(655360))+(gidx1*(163840))+(gidx2*(64))+(lidx3*(20480))+(lidx4*(4))+(1)] = (val1+val5);
  data0[(gidx0*(655360))+(gidx1*(163840))+(gidx2*(64))+(lidx3*(20480))+(lidx4*(4))+(2)] = (val2+val6);
  data0[(gidx0*(655360))+(gidx1*(163840))+(gidx2*(64))+(lidx3*(20480))+(lidx4*(4))+(3)] = (val3+val7);
}`;

const E_2_240_4_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 240 */
  let gidx2 = i32(gindex.x); /* 4 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  alu0 = f32((gidx1*(8))<(1280));
  var  val0 = select(f32((0.0f)), f32(data1[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))]), bool(alu0));
  var  val1 = select(f32((0.0f)), f32(data1[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))+(1)]), bool(alu0));
  var  val2 = select(f32((0.0f)), f32(data1[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))+(2)]), bool(alu0));
  var  val3 = select(f32((0.0f)), f32(data1[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))+(3)]), bool(alu0));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(8))+lidx3]), bool(alu0));
  var  val5 = select(f32((0.0f)), f32(data3[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))]), bool(alu0));
  var  val6 = select(f32((0.0f)), f32(data3[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))+(1)]), bool(alu0));
  var  val7 = select(f32((0.0f)), f32(data3[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))+(2)]), bool(alu0));
  var  val8 = select(f32((0.0f)), f32(data3[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))+(3)]), bool(alu0));
  var  val9 = select(f32((0.0f)), f32(data4[(gidx1*(8))+lidx3]), bool(alu0));
  var  val10 = select(f32((0.0f)), f32(data5[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))]), bool(alu0));
  var  val11 = select(f32((0.0f)), f32(data5[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))+(1)]), bool(alu0));
  var  val12 = select(f32((0.0f)), f32(data5[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))+(2)]), bool(alu0));
  var  val13 = select(f32((0.0f)), f32(data5[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(327680))+(3)]), bool(alu0));
  var  val14 = select(f32((0.0f)), f32(data6[(gidx1*(8))+lidx3]), bool(alu0));
  data0[(gidx0*(491520))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))] = (val0+val4+(val5+val9+(val10+val14)));
  data0[(gidx0*(491520))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)] = (val1+val4+(val6+val9+(val11+val14)));
  data0[(gidx0*(491520))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)] = (val2+val4+(val7+val9+(val12+val14)));
  data0[(gidx0*(491520))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)] = (val3+val4+(val8+val9+(val13+val14)));
}`;

const E_2_240_4_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 240 */
  let gidx2 = i32(gindex.x); /* 4 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(491520))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(491520))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(491520))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(491520))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)]);
  var  alu0 = f32(((gidx1*((-8)))+(lidx3*((-1))))<((-1279)));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(163840))+((-327680))]), bool(alu0));
  var  val5 = select(f32((0.0f)), f32(data2[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(163840))+((-327679))]), bool(alu0));
  var  val6 = select(f32((0.0f)), f32(data2[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(163840))+((-327678))]), bool(alu0));
  var  val7 = select(f32((0.0f)), f32(data2[(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(gidx0*(163840))+((-327677))]), bool(alu0));
  data0[(gidx0*(491520))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))] = (val0+val4);
  data0[(gidx0*(491520))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)] = (val1+val5);
  data0[(gidx0*(491520))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)] = (val2+val6);
  data0[(gidx0*(491520))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)] = (val3+val7);
}`;

const E_2_4_240_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 4 */
  let gidx2 = i32(gindex.x); /* 240 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(491520))+(gidx1*(122880))+(gidx2*(64))+(lidx3*(15360))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(491520))+(gidx1*(122880))+(gidx2*(64))+(lidx3*(15360))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(491520))+(gidx1*(122880))+(gidx2*(64))+(lidx3*(15360))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(491520))+(gidx1*(122880))+(gidx2*(64))+(lidx3*(15360))+(lidx4*(4))+(3)]);
  var  alu0 = f32(((gidx1*((-480)))+(lidx3*((-60)))+((gidx2/(4))*((-1))))<((-1279)));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(122880))+(gidx2*(64))+(lidx3*(15360))+(lidx4*(4))+(gidx0*(163840))+((-327680))]), bool(alu0));
  var  val5 = select(f32((0.0f)), f32(data2[(gidx1*(122880))+(gidx2*(64))+(lidx3*(15360))+(lidx4*(4))+(gidx0*(163840))+((-327679))]), bool(alu0));
  var  val6 = select(f32((0.0f)), f32(data2[(gidx1*(122880))+(gidx2*(64))+(lidx3*(15360))+(lidx4*(4))+(gidx0*(163840))+((-327678))]), bool(alu0));
  var  val7 = select(f32((0.0f)), f32(data2[(gidx1*(122880))+(gidx2*(64))+(lidx3*(15360))+(lidx4*(4))+(gidx0*(163840))+((-327677))]), bool(alu0));
  data0[(gidx0*(491520))+(gidx1*(122880))+(gidx2*(64))+(lidx3*(15360))+(lidx4*(4))] = (val0+val4);
  data0[(gidx0*(491520))+(gidx1*(122880))+(gidx2*(64))+(lidx3*(15360))+(lidx4*(4))+(1)] = (val1+val5);
  data0[(gidx0*(491520))+(gidx1*(122880))+(gidx2*(64))+(lidx3*(15360))+(lidx4*(4))+(2)] = (val2+val6);
  data0[(gidx0*(491520))+(gidx1*(122880))+(gidx2*(64))+(lidx3*(15360))+(lidx4*(4))+(3)] = (val3+val7);
}`;

const r_64_16_960 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 64 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (960); ridx0++) {
    var  val0 = f32(data1[(gidx0*(15360))+(lidx1*(960))+ridx0]);
    acc0 = (val0+acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val1 = f32(temp[ridx1]);
    acc1 = (val1+acc1);
  }
  data0[gidx0] = (acc1*(6.510416666666667e-05f));
}`;

const r_64_16_960n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 64 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (960); ridx0++) {
    var  val0 = f32(data1[(gidx0*(15360))+(lidx1*(960))+ridx0]);
    var  val1 = f32(data2[gidx0]);
    var  alu0 = (val0-val1);
    acc0 = fma(alu0,alu0,acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val2 = f32(temp[ridx1]);
    acc1 = (val2+acc1);
  }
  data0[gidx0] = sqrt(((1.0f)/((acc1*(6.510416666666667e-05f))+(1e-05f))));
}`;

const E_480_4_2_4_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,4,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 480 */
  let gidx1 = i32(gindex.x); /* 4 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 4 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(1024))+(gidx1*(64))+(lidx2*(491520))+(lidx3*(256))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(1024))+(gidx1*(64))+(lidx2*(491520))+(lidx3*(256))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(1024))+(gidx1*(64))+(lidx2*(491520))+(lidx3*(256))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(1024))+(gidx1*(64))+(lidx2*(491520))+(lidx3*(256))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(lidx2*(32))+(gidx0/(15))]);
  var  val5 = f32(data3[(lidx2*(32))+(gidx0/(15))]);
  var  val6 = f32(data4[(gidx0*(4))+lidx3]);
  var  val7 = f32(data5[(gidx0*(4))+lidx3]);
  data0[(gidx0*(1024))+(gidx1*(64))+(lidx2*(491520))+(lidx3*(256))+(lidx4*(4))] = (((val0-val4)*val5*val6)+val7);
  data0[(gidx0*(1024))+(gidx1*(64))+(lidx2*(491520))+(lidx3*(256))+(lidx4*(4))+(1)] = (((val1-val4)*val5*val6)+val7);
  data0[(gidx0*(1024))+(gidx1*(64))+(lidx2*(491520))+(lidx3*(256))+(lidx4*(4))+(2)] = (((val2-val4)*val5*val6)+val7);
  data0[(gidx0*(1024))+(gidx1*(64))+(lidx2*(491520))+(lidx3*(256))+(lidx4*(4))+(3)] = (((val3-val4)*val5*val6)+val7);
}`;

const E_2_240_4_8_16_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 240 */
  let gidx2 = i32(gindex.x); /* 4 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(491520))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(491520))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(491520))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(491520))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(32))+(((gidx1*(8))+lidx3)/(60))]);
  var  val5 = f32(data3[(gidx0*(32))+(((gidx1*(8))+lidx3)/(60))]);
  var  val6 = f32(data4[(gidx1*(8))+lidx3]);
  var  val7 = f32(data5[(gidx1*(8))+lidx3]);
  data0[(gidx0*(491520))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))] = ((1.0f)/((1.0f)+exp2(((((val0-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(491520))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)] = ((1.0f)/((1.0f)+exp2(((((val1-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(491520))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)] = ((1.0f)/((1.0f)+exp2(((((val2-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(491520))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)] = ((1.0f)/((1.0f)+exp2(((((val3-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
}`;

const E_7680_32_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 7680 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx1*(4))+(3)]);
  data0[(gidx0*(128))+(lidx1*(4))] = (val0*val4);
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (val1*val5);
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (val2*val6);
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (val3*val7);
}`;

const r_2_160_2_16_4_1920_3_3_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(4,16,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2 */
  let gidx1 = i32(gindex.x); /* 160 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 16 */
  let lidx4 = i32(lindex.x); /* 4 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (1920); ridx0++) {
    var  alu0 = f32((lidx4*((-4)))<(0));
    var  alu1 = f32((lidx3*((-1)))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(491520))+(ridx0*(256))+((-17))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(491520))+(ridx0*(256))+((-1))]), bool(alu0));
    var  alu2 = f32(lidx3<(15));
    var  val2 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(491520))+(ridx0*(256))+(15)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(491520))+(ridx0*(256))+((-16))]), bool(alu1));
    var  val4 = f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(491520))+(ridx0*(256))]);
    var  val5 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(491520))+(ridx0*(256))+(16)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(491520))+(ridx0*(256))+((-15))]), bool(alu1));
    var  val7 = f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(491520))+(ridx0*(256))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(491520))+(ridx0*(256))+(17)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(491520))+(ridx0*(256))+((-14))]), bool(alu1));
    var  val10 = f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(491520))+(ridx0*(256))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(491520))+(ridx0*(256))+(18)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(491520))+(ridx0*(256))+((-13))]), bool(alu1));
    var  val13 = f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(491520))+(ridx0*(256))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(491520))+(ridx0*(256))+(19)]), bool(alu2));
    var  alu3 = f32((lidx4*(4))<(12));
    var  val15 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(491520))+(ridx0*(256))+((-12))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(491520))+(ridx0*(256))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(lidx3*(16))+(gidx0*(491520))+(ridx0*(256))+(20)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(17280)]);
    var  val28 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(17283)]);
    var  val29 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(17286)]);
    var  val30 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(17281)]);
    var  val31 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(17284)]);
    var  val32 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(17287)]);
    var  val33 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(17282)]);
    var  val34 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(17285)]);
    var  val35 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(17288)]);
    var  val36 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(34560)]);
    var  val37 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(34563)]);
    var  val38 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(34566)]);
    var  val39 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(34561)]);
    var  val40 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(34564)]);
    var  val41 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(34567)]);
    var  val42 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(34562)]);
    var  val43 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(34565)]);
    var  val44 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(34568)]);
    var  val45 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(51840)]);
    var  val46 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(51843)]);
    var  val47 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(51846)]);
    var  val48 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(51841)]);
    var  val49 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(51844)]);
    var  val50 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(51847)]);
    var  val51 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(51842)]);
    var  val52 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(51845)]);
    var  val53 = f32(data2[(gidx1*(138240))+(lidx2*(69120))+(ridx0*(9))+(51848)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  var  val54 = f32(data3[(gidx1*(8))+(lidx2*(4))]);
  var  val55 = f32(data3[(gidx1*(8))+(lidx2*(4))+(1)]);
  var  val56 = f32(data3[(gidx1*(8))+(lidx2*(4))+(2)]);
  var  val57 = f32(data3[(gidx1*(8))+(lidx2*(4))+(3)]);
  var  val58 = f32(data4[(gidx1*(8))+(lidx2*(4))]);
  var  val59 = f32(data4[(gidx1*(8))+(lidx2*(4))+(1)]);
  var  val60 = f32(data4[(gidx1*(8))+(lidx2*(4))+(2)]);
  var  val61 = f32(data4[(gidx1*(8))+(lidx2*(4))+(3)]);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))] = (acc0+val54+val58);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(1)] = (acc1+val54+val58);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(2)] = (acc2+val54+val58);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(3)] = (acc3+val54+val58);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(256)] = (acc4+val55+val59);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(257)] = (acc5+val55+val59);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(258)] = (acc6+val55+val59);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(259)] = (acc7+val55+val59);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(512)] = (acc8+val56+val60);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(513)] = (acc9+val56+val60);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(514)] = (acc10+val56+val60);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(515)] = (acc11+val56+val60);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(768)] = (acc12+val57+val61);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(769)] = (acc13+val57+val61);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(770)] = (acc14+val57+val61);
  data0[(gidx0*(327680))+(gidx1*(2048))+(lidx2*(1024))+(lidx3*(16))+(lidx4*(4))+(771)] = (acc15+val57+val61);
}`;

const r_2_40_4_8_16_480_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 40 */
  let gidx2 = i32(gindex.x); /* 4 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (480); ridx0++) {
    var  val0 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))]);
    var  val1 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(256)]);
    var  val2 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(512)]);
    var  val3 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(768)]);
    var  val4 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(1)]);
    var  val5 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(257)]);
    var  val6 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(513)]);
    var  val7 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(769)]);
    var  val8 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(2)]);
    var  val9 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(258)]);
    var  val10 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(514)]);
    var  val11 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(770)]);
    var  val12 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(3)]);
    var  val13 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(259)]);
    var  val14 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(515)]);
    var  val15 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(771)]);
    var  val16 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(1920)]);
    var  val21 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(1921)]);
    var  val22 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(1922)]);
    var  val23 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(1923)]);
    var  val24 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(3840)]);
    var  val25 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(3841)]);
    var  val26 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(3842)]);
    var  val27 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(3843)]);
    var  val28 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(5760)]);
    var  val29 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(5761)]);
    var  val30 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(5762)]);
    var  val31 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(5763)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  var  val32 = f32(data3[(gidx1*(32))+(lidx3*(4))]);
  var  val33 = f32(data3[(gidx1*(32))+(lidx3*(4))+(1)]);
  var  val34 = f32(data3[(gidx1*(32))+(lidx3*(4))+(2)]);
  var  val35 = f32(data3[(gidx1*(32))+(lidx3*(4))+(3)]);
  var  val36 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))]);
  var  val37 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)]);
  var  val38 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)]);
  var  val39 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)]);
  var  val40 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(256)]);
  var  val41 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(257)]);
  var  val42 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(258)]);
  var  val43 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(259)]);
  var  val44 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(512)]);
  var  val45 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(513)]);
  var  val46 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(514)]);
  var  val47 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(515)]);
  var  val48 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(768)]);
  var  val49 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(769)]);
  var  val50 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(770)]);
  var  val51 = f32(data4[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(771)]);
  var  val52 = f32(data5[(gidx1*(32))+(lidx3*(4))]);
  var  val53 = f32(data5[(gidx1*(32))+(lidx3*(4))+(1)]);
  var  val54 = f32(data5[(gidx1*(32))+(lidx3*(4))+(2)]);
  var  val55 = f32(data5[(gidx1*(32))+(lidx3*(4))+(3)]);
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))] = (acc0+val32+(val36+val52));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)] = (acc1+val32+(val37+val52));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)] = (acc2+val32+(val38+val52));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)] = (acc3+val32+(val39+val52));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(256)] = (acc4+val33+(val40+val53));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(257)] = (acc5+val33+(val41+val53));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(258)] = (acc6+val33+(val42+val53));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(259)] = (acc7+val33+(val43+val53));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(512)] = (acc8+val34+(val44+val54));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(513)] = (acc9+val34+(val45+val54));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(514)] = (acc10+val34+(val46+val54));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(515)] = (acc11+val34+(val47+val54));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(768)] = (acc12+val35+(val48+val55));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(769)] = (acc13+val35+(val49+val55));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(770)] = (acc14+val35+(val50+val55));
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(771)] = (acc15+val35+(val51+val55));
}`;

const r_2_40_4_8_16_480_4_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 40 */
  let gidx2 = i32(gindex.x); /* 4 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (480); ridx0++) {
    var  val0 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))]);
    var  val1 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(256)]);
    var  val2 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(512)]);
    var  val3 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(768)]);
    var  val4 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(1)]);
    var  val5 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(257)]);
    var  val6 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(513)]);
    var  val7 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(769)]);
    var  val8 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(2)]);
    var  val9 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(258)]);
    var  val10 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(514)]);
    var  val11 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(770)]);
    var  val12 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(3)]);
    var  val13 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(259)]);
    var  val14 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(515)]);
    var  val15 = f32(data1[(gidx0*(491520))+(gidx2*(64))+(lidx4*(4))+(ridx0*(1024))+(771)]);
    var  val16 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(1920)]);
    var  val21 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(1921)]);
    var  val22 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(1922)]);
    var  val23 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(1923)]);
    var  val24 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(3840)]);
    var  val25 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(3841)]);
    var  val26 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(3842)]);
    var  val27 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(3843)]);
    var  val28 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(5760)]);
    var  val29 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(5761)]);
    var  val30 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(5762)]);
    var  val31 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(5763)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))] = acc0;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)] = acc3;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(256)] = acc4;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(257)] = acc5;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(258)] = acc6;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(259)] = acc7;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(512)] = acc8;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(513)] = acc9;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(514)] = acc10;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(515)] = acc11;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(768)] = acc12;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(769)] = acc13;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(770)] = acc14;
  data0[(gidx0*(327680))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(771)] = acc15;
}`;

const r_2_320_2_16_8_1280_3_3_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 320 */
  let gidx2 = i32(gindex.x); /* 2 */
  let lidx3 = i32(lindex.y); /* 16 */
  let lidx4 = i32(lindex.x); /* 8 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (1280); ridx0++) {
    var  alu0 = f32((lidx4*((-4)))<(0));
    var  alu1 = f32(((gidx2*((-16)))+(lidx3*((-1))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(((lidx4*(2))+(15))%(16))+((((gidx2*(8))+(gidx0*(20480))+(ridx0*(16))+((lidx3+((lidx4+(7))/(8)))/(2))+(40959))%(40960))*(16))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(((lidx4*(2))+(15))%(16))+((((gidx2*(8))+(gidx0*(20480))+(ridx0*(16))+((lidx3+((lidx4+(7))/(8))+(1))/(2))+(40959))%(40960))*(16))]), bool(alu0));
    var  alu2 = f32(((gidx2*(16))+lidx3)<(31));
    var  val2 = select(f32((0.0f)), f32(data1[(((lidx4*(2))+(15))%(16))+((((gidx2*(8))+(gidx0*(20480))+(ridx0*(16))+((lidx3+((lidx4+(7))/(8)))/(2)))%(40960))*(16))]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx4*(2))+((((gidx2*(8))+(gidx0*(20480))+(ridx0*(16))+((lidx3+(1))/(2))+(40959))%(40960))*(16))]), bool(alu1));
    var  val4 = f32(data1[(lidx4*(2))+(gidx2*(128))+(gidx0*(327680))+(ridx0*(256))+((lidx3/(2))*(16))]);
    var  val5 = select(f32((0.0f)), f32(data1[(lidx4*(2))+((((gidx2*(8))+(gidx0*(20480))+(ridx0*(16))+((lidx3+(3))/(2))+(40959))%(40960))*(16))]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(lidx4*(2))+((((gidx2*(8))+(gidx0*(20480))+(ridx0*(16))+((lidx3+(1))/(2))+(40959))%(40960))*(16))+(1)]), bool(alu1));
    var  val7 = f32(data1[(lidx4*(2))+(gidx2*(128))+(gidx0*(327680))+(ridx0*(256))+((lidx3/(2))*(16))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(lidx4*(2))+((((gidx2*(8))+(gidx0*(20480))+(ridx0*(16))+((lidx3+(3))/(2))+(40959))%(40960))*(16))+(1)]), bool(alu2));
    var  alu3 = f32((lidx4*(4))<(28));
    var  val9 = select(f32((0.0f)), f32(data1[(((lidx4*(2))+(2))%(16))+((((gidx2*(8))+(gidx0*(20480))+(ridx0*(16))+((lidx3+((lidx4+(9))/(8)))/(2))+(40959))%(40960))*(16))]), bool((alu3*alu1)));
    var  val10 = select(f32((0.0f)), f32(data1[(((lidx4*(2))+(2))%(16))+((((gidx2*(8))+(gidx0*(20480))+(ridx0*(16))+((lidx3+((lidx4+(9))/(8))+(1))/(2))+(40959))%(40960))*(16))]), bool(alu3));
    var  val11 = select(f32((0.0f)), f32(data1[(((lidx4*(2))+(2))%(16))+((((gidx2*(8))+(gidx0*(20480))+(ridx0*(16))+((lidx3+((lidx4+(9))/(8)))/(2)))%(40960))*(16))]), bool((alu3*alu2)));
    var  val12 = f32(data2[(gidx1*(46080))+(ridx0*(9))]);
    var  val13 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(3)]);
    var  val14 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(6)]);
    var  val15 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(1)]);
    var  val16 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(4)]);
    var  val17 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(7)]);
    var  val18 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(2)]);
    var  val19 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(5)]);
    var  val20 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(8)]);
    var  val21 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(11520)]);
    var  val22 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(11523)]);
    var  val23 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(11526)]);
    var  val24 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(11521)]);
    var  val25 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(11524)]);
    var  val26 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(11527)]);
    var  val27 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(11522)]);
    var  val28 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(11525)]);
    var  val29 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(11528)]);
    var  val30 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(23040)]);
    var  val31 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(23043)]);
    var  val32 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(23046)]);
    var  val33 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(23041)]);
    var  val34 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(23044)]);
    var  val35 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(23047)]);
    var  val36 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(23042)]);
    var  val37 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(23045)]);
    var  val38 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(23048)]);
    var  val39 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(34560)]);
    var  val40 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(34563)]);
    var  val41 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(34566)]);
    var  val42 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(34561)]);
    var  val43 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(34564)]);
    var  val44 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(34567)]);
    var  val45 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(34562)]);
    var  val46 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(34565)]);
    var  val47 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(34568)]);
    acc0 = fma(val0,val12,acc0);
    acc0 = fma(val1,val13,acc0);
    acc0 = fma(val2,val14,acc0);
    acc0 = fma(val3,val15,acc0);
    acc0 = fma(val4,val16,acc0);
    acc0 = fma(val5,val17,acc0);
    acc0 = fma(val3,val18,acc0);
    acc0 = fma(val4,val19,acc0);
    acc0 = fma(val5,val20,acc0);
    acc1 = fma(val3,val12,acc1);
    acc1 = fma(val4,val13,acc1);
    acc1 = fma(val5,val14,acc1);
    acc1 = fma(val3,val15,acc1);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc1 = fma(val8,val20,acc1);
    acc2 = fma(val3,val12,acc2);
    acc2 = fma(val4,val13,acc2);
    acc2 = fma(val5,val14,acc2);
    acc2 = fma(val6,val15,acc2);
    acc2 = fma(val7,val16,acc2);
    acc2 = fma(val8,val17,acc2);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc3 = fma(val6,val12,acc3);
    acc3 = fma(val7,val13,acc3);
    acc3 = fma(val8,val14,acc3);
    acc3 = fma(val6,val15,acc3);
    acc3 = fma(val7,val16,acc3);
    acc3 = fma(val8,val17,acc3);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc4 = fma(val0,val21,acc4);
    acc4 = fma(val1,val22,acc4);
    acc4 = fma(val2,val23,acc4);
    acc4 = fma(val3,val24,acc4);
    acc4 = fma(val4,val25,acc4);
    acc4 = fma(val5,val26,acc4);
    acc4 = fma(val3,val27,acc4);
    acc4 = fma(val4,val28,acc4);
    acc4 = fma(val5,val29,acc4);
    acc5 = fma(val3,val21,acc5);
    acc5 = fma(val4,val22,acc5);
    acc5 = fma(val5,val23,acc5);
    acc5 = fma(val3,val24,acc5);
    acc5 = fma(val4,val25,acc5);
    acc5 = fma(val5,val26,acc5);
    acc5 = fma(val6,val27,acc5);
    acc5 = fma(val7,val28,acc5);
    acc5 = fma(val8,val29,acc5);
    acc6 = fma(val3,val21,acc6);
    acc6 = fma(val4,val22,acc6);
    acc6 = fma(val5,val23,acc6);
    acc6 = fma(val6,val24,acc6);
    acc6 = fma(val7,val25,acc6);
    acc6 = fma(val8,val26,acc6);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc7 = fma(val6,val21,acc7);
    acc7 = fma(val7,val22,acc7);
    acc7 = fma(val8,val23,acc7);
    acc7 = fma(val6,val24,acc7);
    acc7 = fma(val7,val25,acc7);
    acc7 = fma(val8,val26,acc7);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc8 = fma(val0,val30,acc8);
    acc8 = fma(val1,val31,acc8);
    acc8 = fma(val2,val32,acc8);
    acc8 = fma(val3,val33,acc8);
    acc8 = fma(val4,val34,acc8);
    acc8 = fma(val5,val35,acc8);
    acc8 = fma(val3,val36,acc8);
    acc8 = fma(val4,val37,acc8);
    acc8 = fma(val5,val38,acc8);
    acc9 = fma(val3,val30,acc9);
    acc9 = fma(val4,val31,acc9);
    acc9 = fma(val5,val32,acc9);
    acc9 = fma(val3,val33,acc9);
    acc9 = fma(val4,val34,acc9);
    acc9 = fma(val5,val35,acc9);
    acc9 = fma(val6,val36,acc9);
    acc9 = fma(val7,val37,acc9);
    acc9 = fma(val8,val38,acc9);
    acc10 = fma(val3,val30,acc10);
    acc10 = fma(val4,val31,acc10);
    acc10 = fma(val5,val32,acc10);
    acc10 = fma(val6,val33,acc10);
    acc10 = fma(val7,val34,acc10);
    acc10 = fma(val8,val35,acc10);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc11 = fma(val6,val30,acc11);
    acc11 = fma(val7,val31,acc11);
    acc11 = fma(val8,val32,acc11);
    acc11 = fma(val6,val33,acc11);
    acc11 = fma(val7,val34,acc11);
    acc11 = fma(val8,val35,acc11);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc12 = fma(val0,val39,acc12);
    acc12 = fma(val1,val40,acc12);
    acc12 = fma(val2,val41,acc12);
    acc12 = fma(val3,val42,acc12);
    acc12 = fma(val4,val43,acc12);
    acc12 = fma(val5,val44,acc12);
    acc12 = fma(val3,val45,acc12);
    acc12 = fma(val4,val46,acc12);
    acc12 = fma(val5,val47,acc12);
    acc13 = fma(val3,val39,acc13);
    acc13 = fma(val4,val40,acc13);
    acc13 = fma(val5,val41,acc13);
    acc13 = fma(val3,val42,acc13);
    acc13 = fma(val4,val43,acc13);
    acc13 = fma(val5,val44,acc13);
    acc13 = fma(val6,val45,acc13);
    acc13 = fma(val7,val46,acc13);
    acc13 = fma(val8,val47,acc13);
    acc14 = fma(val3,val39,acc14);
    acc14 = fma(val4,val40,acc14);
    acc14 = fma(val5,val41,acc14);
    acc14 = fma(val6,val42,acc14);
    acc14 = fma(val7,val43,acc14);
    acc14 = fma(val8,val44,acc14);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc15 = fma(val6,val39,acc15);
    acc15 = fma(val7,val40,acc15);
    acc15 = fma(val8,val41,acc15);
    acc15 = fma(val6,val42,acc15);
    acc15 = fma(val7,val43,acc15);
    acc15 = fma(val8,val44,acc15);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
  }
  data0[(gidx0*(1310720))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))] = acc0;
  data0[(gidx0*(1310720))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(1310720))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(1310720))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3)] = acc3;
  data0[(gidx0*(1310720))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1024)] = acc4;
  data0[(gidx0*(1310720))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1025)] = acc5;
  data0[(gidx0*(1310720))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1026)] = acc6;
  data0[(gidx0*(1310720))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1027)] = acc7;
  data0[(gidx0*(1310720))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2048)] = acc8;
  data0[(gidx0*(1310720))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2049)] = acc9;
  data0[(gidx0*(1310720))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2050)] = acc10;
  data0[(gidx0*(1310720))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2051)] = acc11;
  data0[(gidx0*(1310720))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3072)] = acc12;
  data0[(gidx0*(1310720))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3073)] = acc13;
  data0[(gidx0*(1310720))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3074)] = acc14;
  data0[(gidx0*(1310720))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3075)] = acc15;
}`;

const E_2_240_16_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 240 */
  let gidx2 = i32(gindex.x); /* 16 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  alu0 = f32((gidx1*(8))<(1280));
  var  val0 = select(f32((0.0f)), f32(data1[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(1310720))]), bool(alu0));
  var  val1 = select(f32((0.0f)), f32(data1[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(1310720))+(1)]), bool(alu0));
  var  val2 = select(f32((0.0f)), f32(data1[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(1310720))+(2)]), bool(alu0));
  var  val3 = select(f32((0.0f)), f32(data1[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(1310720))+(3)]), bool(alu0));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(8))+lidx3]), bool(alu0));
  var  alu1 = f32(((gidx1*((-8)))+(lidx3*((-1))))<((-1279)));
  var  val5 = select(f32((0.0f)), f32(data3[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))+((-1310720))]), bool(alu1));
  var  val6 = select(f32((0.0f)), f32(data3[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))+((-1310719))]), bool(alu1));
  var  val7 = select(f32((0.0f)), f32(data3[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))+((-1310718))]), bool(alu1));
  var  val8 = select(f32((0.0f)), f32(data3[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))+((-1310717))]), bool(alu1));
  data0[(gidx0*(1966080))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))] = (val0+val4+val5);
  data0[(gidx0*(1966080))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)] = (val1+val4+val6);
  data0[(gidx0*(1966080))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)] = (val2+val4+val7);
  data0[(gidx0*(1966080))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)] = (val3+val4+val8);
}`;

const r_2_4_15_8_16_64_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 4 */
  let gidx2 = i32(gindex.x); /* 15 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  alu0 = f32(((gidx1*(480))+(gidx2*(4))+(lidx3*(60))+(lidx4/(4)))<(1280));
    var  val0 = select(f32((0.0f)), f32(data1[(gidx1*(491520))+(gidx2*(4096))+(lidx3*(61440))+(lidx4*(256))+(ridx0*(4))+(gidx0*(1310720))]), bool(alu0));
    var  val1 = select(f32((0.0f)), f32(data1[(gidx1*(491520))+(gidx2*(4096))+(lidx3*(61440))+(lidx4*(256))+(ridx0*(4))+(gidx0*(1310720))+(1)]), bool(alu0));
    var  val2 = select(f32((0.0f)), f32(data1[(gidx1*(491520))+(gidx2*(4096))+(lidx3*(61440))+(lidx4*(256))+(ridx0*(4))+(gidx0*(1310720))+(2)]), bool(alu0));
    var  val3 = select(f32((0.0f)), f32(data1[(gidx1*(491520))+(gidx2*(4096))+(lidx3*(61440))+(lidx4*(256))+(ridx0*(4))+(gidx0*(1310720))+(3)]), bool(alu0));
    var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(480))+(gidx2*(4))+(lidx3*(60))+(lidx4/(4))]), bool(alu0));
    var  alu1 = f32(((gidx1*((-480)))+(gidx2*((-4)))+(lidx3*((-60)))+((lidx4/(4))*((-1))))<((-1279)));
    var  val5 = select(f32((0.0f)), f32(data3[(gidx1*(491520))+(gidx2*(4096))+(lidx3*(61440))+(lidx4*(256))+(ridx0*(4))+(gidx0*(655360))+((-1310720))]), bool(alu1));
    var  val6 = select(f32((0.0f)), f32(data3[(gidx1*(491520))+(gidx2*(4096))+(lidx3*(61440))+(lidx4*(256))+(ridx0*(4))+(gidx0*(655360))+((-1310719))]), bool(alu1));
    var  val7 = select(f32((0.0f)), f32(data3[(gidx1*(491520))+(gidx2*(4096))+(lidx3*(61440))+(lidx4*(256))+(ridx0*(4))+(gidx0*(655360))+((-1310718))]), bool(alu1));
    var  val8 = select(f32((0.0f)), f32(data3[(gidx1*(491520))+(gidx2*(4096))+(lidx3*(61440))+(lidx4*(256))+(ridx0*(4))+(gidx0*(655360))+((-1310717))]), bool(alu1));
    acc0 = (val0+val4+val5+acc0);
    acc0 = (val1+val4+val6+acc0);
    acc0 = (val2+val4+val7+acc0);
    acc0 = (val3+val4+val8+acc0);
  }
  data0[(gidx0*(7680))+(gidx1*(1920))+(gidx2*(16))+(lidx3*(240))+lidx4] = acc0;
}`;

const r_64_16_15 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 64 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (15); ridx0++) {
    var  val0 = f32(data1[(gidx0*(240))+(lidx1*(15))+ridx0]);
    acc0 = (val0+acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val1 = f32(temp[ridx1]);
    acc1 = (val1+acc1);
  }
  data0[gidx0] = (acc1*(1.6276041666666666e-05f));
}`;

const E_2_4_1280_8_16_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 4 */
  let gidx2 = i32(gindex.x); /* 1280 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  alu0 = f32(((gidx1*(480))+(lidx3*(60))+(((gidx2*(48))+(lidx4*(3)))/(1024)))<(1280));
  var  val0 = select(f32((0.0f)), f32(data1[(gidx1*(491520))+(gidx2*(48))+(lidx3*(61440))+(lidx4*(3))+(gidx0*(1310720))]), bool(alu0));
  var  alu1 = f32(((gidx1*(480))+(lidx3*(60))+(((gidx2*(48))+(lidx4*(3))+(1))/(1024)))<(1280));
  var  val1 = select(f32((0.0f)), f32(data1[(gidx1*(491520))+(gidx2*(48))+(lidx3*(61440))+(lidx4*(3))+(gidx0*(1310720))+(1)]), bool(alu1));
  var  alu2 = f32(((gidx1*(480))+(lidx3*(60))+(((gidx2*(48))+(lidx4*(3))+(2))/(1024)))<(1280));
  var  val2 = select(f32((0.0f)), f32(data1[(gidx1*(491520))+(gidx2*(48))+(lidx3*(61440))+(lidx4*(3))+(gidx0*(1310720))+(2)]), bool(alu2));
  var  val3 = select(f32((0.0f)), f32(data2[(gidx1*(480))+(lidx3*(60))+(((gidx2*(48))+(lidx4*(3)))/(1024))]), bool(alu0));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(480))+(lidx3*(60))+(((gidx2*(48))+(lidx4*(3))+(1))/(1024))]), bool(alu1));
  var  val5 = select(f32((0.0f)), f32(data2[(gidx1*(480))+(lidx3*(60))+(((gidx2*(48))+(lidx4*(3))+(2))/(1024))]), bool(alu2));
  var  val6 = select(f32((0.0f)), f32(data3[(gidx1*(491520))+(gidx2*(48))+(lidx3*(61440))+(lidx4*(3))+(gidx0*(655360))+((-1310720))]), bool(f32(((gidx1*((-480)))+(lidx3*((-60)))+((((gidx2*(48))+(lidx4*(3)))/(1024))*((-1))))<((-1279)))));
  var  val7 = select(f32((0.0f)), f32(data3[(gidx1*(491520))+(gidx2*(48))+(lidx3*(61440))+(lidx4*(3))+(gidx0*(655360))+((-1310719))]), bool(f32(((gidx1*((-480)))+(lidx3*((-60)))+((((gidx2*(48))+(lidx4*(3))+(1))/(1024))*((-1))))<((-1279)))));
  var  val8 = select(f32((0.0f)), f32(data3[(gidx1*(491520))+(gidx2*(48))+(lidx3*(61440))+(lidx4*(3))+(gidx0*(655360))+((-1310718))]), bool(f32(((gidx1*((-480)))+(lidx3*((-60)))+((((gidx2*(48))+(lidx4*(3))+(2))/(1024))*((-1))))<((-1279)))));
  var  val9 = f32(data4[(gidx0*(32))+(gidx1*(8))+lidx3]);
  data0[(gidx0*(1966080))+(gidx1*(491520))+(gidx2*(48))+(lidx3*(61440))+(lidx4*(3))] = ((val0+val3+val6)-val9);
  data0[(gidx0*(1966080))+(gidx1*(491520))+(gidx2*(48))+(lidx3*(61440))+(lidx4*(3))+(1)] = ((val1+val4+val7)-val9);
  data0[(gidx0*(1966080))+(gidx1*(491520))+(gidx2*(48))+(lidx3*(61440))+(lidx4*(3))+(2)] = ((val2+val5+val8)-val9);
}`;

const r_960_4_8_32_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,128>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(8,4) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 960 */
  let lidx1 = i32(lindex.y); /* 4 */
  let lidx2 = i32(lindex.x); /* 8 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (32); ridx0++) {
    var  val0 = f32(data1[(gidx0*(4096))+(lidx1*(256))+lidx2+(ridx0*(8))]);
    var  val1 = f32(data1[(gidx0*(4096))+(lidx1*(256))+lidx2+(ridx0*(8))+(1024)]);
    var  val2 = f32(data1[(gidx0*(4096))+(lidx1*(256))+lidx2+(ridx0*(8))+(2048)]);
    var  val3 = f32(data1[(gidx0*(4096))+(lidx1*(256))+lidx2+(ridx0*(8))+(3072)]);
    acc0 = fma(val0,val0,acc0);
    acc1 = fma(val1,val1,acc1);
    acc2 = fma(val2,val2,acc2);
    acc3 = fma(val3,val3,acc3);
  }
  temp[(lidx1*(32))+(lidx2*(4))] = acc0;
  temp[(lidx1*(32))+(lidx2*(4))+(1)] = acc1;
  temp[(lidx1*(32))+(lidx2*(4))+(2)] = acc2;
  temp[(lidx1*(32))+(lidx2*(4))+(3)] = acc3;
  workgroupBarrier();
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  for(var ridx1 = (0); ridx1 < (8); ridx1++) {
    var  val4 = f32(temp[(lidx1*(32))+(ridx1*(4))]);
    var  val5 = f32(temp[(lidx1*(32))+(ridx1*(4))+(1)]);
    var  val6 = f32(temp[(lidx1*(32))+(ridx1*(4))+(2)]);
    var  val7 = f32(temp[(lidx1*(32))+(ridx1*(4))+(3)]);
    acc4 = (val4+acc4);
    acc5 = (val5+acc5);
    acc6 = (val6+acc6);
    acc7 = (val7+acc7);
  }
  data0[(gidx0*(16))+lidx1] = acc4;
  data0[(gidx0*(16))+lidx1+(4)] = acc5;
  data0[(gidx0*(16))+lidx1+(8)] = acc6;
  data0[(gidx0*(16))+lidx1+(12)] = acc7;
}`;

const r_64_16_15n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 64 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (15); ridx0++) {
    var  val0 = f32(data1[(gidx0*(240))+(lidx1*(15))+ridx0]);
    acc0 = (val0+acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val1 = f32(temp[ridx1]);
    acc1 = (val1+acc1);
  }
  data0[gidx0] = sqrt(((1.0f)/((acc1*(1.6276041666666666e-05f))+(1e-05f))));
}`;

const E_480_16_2_4_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,4,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 480 */
  let gidx1 = i32(gindex.x); /* 16 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 4 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(4096))+(gidx1*(64))+(lidx2*(1966080))+(lidx3*(1024))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(4096))+(gidx1*(64))+(lidx2*(1966080))+(lidx3*(1024))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(4096))+(gidx1*(64))+(lidx2*(1966080))+(lidx3*(1024))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(4096))+(gidx1*(64))+(lidx2*(1966080))+(lidx3*(1024))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(lidx2*(32))+(gidx0/(15))]);
  var  val5 = f32(data3[(gidx0*(4))+lidx3]);
  var  val6 = f32(data4[(gidx0*(4))+lidx3]);
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(1966080))+(lidx3*(1024))+(lidx4*(4))] = ((val0*val4*val5)+val6);
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(1966080))+(lidx3*(1024))+(lidx4*(4))+(1)] = ((val1*val4*val5)+val6);
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(1966080))+(lidx3*(1024))+(lidx4*(4))+(2)] = ((val2*val4*val5)+val6);
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(1966080))+(lidx3*(1024))+(lidx4*(4))+(3)] = ((val3*val4*val5)+val6);
}`;

const E_2_240_16_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 240 */
  let gidx2 = i32(gindex.x); /* 16 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(1966080))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(1966080))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(1966080))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(1966080))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(32))+(((gidx1*(8))+lidx3)/(60))]);
  var  val5 = f32(data3[(gidx1*(8))+lidx3]);
  var  val6 = f32(data4[(gidx1*(8))+lidx3]);
  data0[(gidx0*(1966080))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))] = ((1.0f)/((1.0f)+exp2((((val0*val4*val5)+val6)*((-1.4426950408889634f))))));
  data0[(gidx0*(1966080))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)] = ((1.0f)/((1.0f)+exp2((((val1*val4*val5)+val6)*((-1.4426950408889634f))))));
  data0[(gidx0*(1966080))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)] = ((1.0f)/((1.0f)+exp2((((val2*val4*val5)+val6)*((-1.4426950408889634f))))));
  data0[(gidx0*(1966080))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)] = ((1.0f)/((1.0f)+exp2((((val3*val4*val5)+val6)*((-1.4426950408889634f))))));
}`;

const E_30720_32_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 30720 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx1*(4))+(3)]);
  data0[(gidx0*(128))+(lidx1*(4))] = (val0*val4);
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (val1*val5);
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (val2*val6);
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (val3*val7);
}`;

const r_2_160_2_16_8_1920_3_3_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 160 */
  let gidx2 = i32(gindex.x); /* 2 */
  let lidx3 = i32(lindex.y); /* 16 */
  let lidx4 = i32(lindex.x); /* 8 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (1920); ridx0++) {
    var  alu0 = f32((lidx4*((-4)))<(0));
    var  alu1 = f32(((gidx2*((-16)))+(lidx3*((-1))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1966080))+(ridx0*(1024))+((-33))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1966080))+(ridx0*(1024))+((-1))]), bool(alu0));
    var  alu2 = f32(((gidx2*(16))+lidx3)<(31));
    var  val2 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1966080))+(ridx0*(1024))+(31)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1966080))+(ridx0*(1024))+((-32))]), bool(alu1));
    var  val4 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1966080))+(ridx0*(1024))]);
    var  val5 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1966080))+(ridx0*(1024))+(32)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1966080))+(ridx0*(1024))+((-31))]), bool(alu1));
    var  val7 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1966080))+(ridx0*(1024))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1966080))+(ridx0*(1024))+(33)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1966080))+(ridx0*(1024))+((-30))]), bool(alu1));
    var  val10 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1966080))+(ridx0*(1024))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1966080))+(ridx0*(1024))+(34)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1966080))+(ridx0*(1024))+((-29))]), bool(alu1));
    var  val13 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1966080))+(ridx0*(1024))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1966080))+(ridx0*(1024))+(35)]), bool(alu2));
    var  alu3 = f32((lidx4*(4))<(28));
    var  val15 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1966080))+(ridx0*(1024))+((-28))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1966080))+(ridx0*(1024))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1966080))+(ridx0*(1024))+(36)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx1*(69120))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(17280)]);
    var  val28 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(17283)]);
    var  val29 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(17286)]);
    var  val30 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(17281)]);
    var  val31 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(17284)]);
    var  val32 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(17287)]);
    var  val33 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(17282)]);
    var  val34 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(17285)]);
    var  val35 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(17288)]);
    var  val36 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(34560)]);
    var  val37 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(34563)]);
    var  val38 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(34566)]);
    var  val39 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(34561)]);
    var  val40 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(34564)]);
    var  val41 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(34567)]);
    var  val42 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(34562)]);
    var  val43 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(34565)]);
    var  val44 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(34568)]);
    var  val45 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(51840)]);
    var  val46 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(51843)]);
    var  val47 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(51846)]);
    var  val48 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(51841)]);
    var  val49 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(51844)]);
    var  val50 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(51847)]);
    var  val51 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(51842)]);
    var  val52 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(51845)]);
    var  val53 = f32(data2[(gidx1*(69120))+(ridx0*(9))+(51848)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  var  val54 = f32(data3[gidx1*(4)]);
  var  val55 = f32(data3[(gidx1*(4))+(1)]);
  var  val56 = f32(data3[(gidx1*(4))+(2)]);
  var  val57 = f32(data3[(gidx1*(4))+(3)]);
  var  val58 = f32(data4[gidx1*(4)]);
  var  val59 = f32(data4[(gidx1*(4))+(1)]);
  var  val60 = f32(data4[(gidx1*(4))+(2)]);
  var  val61 = f32(data4[(gidx1*(4))+(3)]);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))] = (acc0+val54+val58);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1)] = (acc1+val54+val58);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2)] = (acc2+val54+val58);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3)] = (acc3+val54+val58);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1024)] = (acc4+val55+val59);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1025)] = (acc5+val55+val59);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1026)] = (acc6+val55+val59);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1027)] = (acc7+val55+val59);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2048)] = (acc8+val56+val60);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2049)] = (acc9+val56+val60);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2050)] = (acc10+val56+val60);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2051)] = (acc11+val56+val60);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3072)] = (acc12+val57+val61);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3073)] = (acc13+val57+val61);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3074)] = (acc14+val57+val61);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3075)] = (acc15+val57+val61);
}`;

const r_2_20_16_8_16_480_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 20 */
  let gidx2 = i32(gindex.x); /* 16 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (480); ridx0++) {
    var  val0 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))]);
    var  val1 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1024)]);
    var  val2 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2048)]);
    var  val3 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3072)]);
    var  val4 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1)]);
    var  val5 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1025)]);
    var  val6 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2049)]);
    var  val7 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3073)]);
    var  val8 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2)]);
    var  val9 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1026)]);
    var  val10 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2050)]);
    var  val11 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3074)]);
    var  val12 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3)]);
    var  val13 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1027)]);
    var  val14 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2051)]);
    var  val15 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3075)]);
    var  val16 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(1920)]);
    var  val21 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(1921)]);
    var  val22 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(1922)]);
    var  val23 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(1923)]);
    var  val24 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(3840)]);
    var  val25 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(3841)]);
    var  val26 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(3842)]);
    var  val27 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(3843)]);
    var  val28 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(5760)]);
    var  val29 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(5761)]);
    var  val30 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(5762)]);
    var  val31 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(5763)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  var  val32 = f32(data3[(gidx1*(32))+(lidx3*(4))]);
  var  val33 = f32(data3[(gidx1*(32))+(lidx3*(4))+(1)]);
  var  val34 = f32(data3[(gidx1*(32))+(lidx3*(4))+(2)]);
  var  val35 = f32(data3[(gidx1*(32))+(lidx3*(4))+(3)]);
  var  val36 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))]);
  var  val37 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)]);
  var  val38 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)]);
  var  val39 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)]);
  var  val40 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1024)]);
  var  val41 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1025)]);
  var  val42 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1026)]);
  var  val43 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1027)]);
  var  val44 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2048)]);
  var  val45 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2049)]);
  var  val46 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2050)]);
  var  val47 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2051)]);
  var  val48 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3072)]);
  var  val49 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3073)]);
  var  val50 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3074)]);
  var  val51 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3075)]);
  var  val52 = f32(data5[(gidx1*(32))+(lidx3*(4))]);
  var  val53 = f32(data5[(gidx1*(32))+(lidx3*(4))+(1)]);
  var  val54 = f32(data5[(gidx1*(32))+(lidx3*(4))+(2)]);
  var  val55 = f32(data5[(gidx1*(32))+(lidx3*(4))+(3)]);
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))] = (acc0+val32+(val36+val52));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)] = (acc1+val32+(val37+val52));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)] = (acc2+val32+(val38+val52));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)] = (acc3+val32+(val39+val52));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1024)] = (acc4+val33+(val40+val53));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1025)] = (acc5+val33+(val41+val53));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1026)] = (acc6+val33+(val42+val53));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1027)] = (acc7+val33+(val43+val53));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2048)] = (acc8+val34+(val44+val54));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2049)] = (acc9+val34+(val45+val54));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2050)] = (acc10+val34+(val46+val54));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2051)] = (acc11+val34+(val47+val54));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3072)] = (acc12+val35+(val48+val55));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3073)] = (acc13+val35+(val49+val55));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3074)] = (acc14+val35+(val50+val55));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3075)] = (acc15+val35+(val51+val55));
}`;

const r_2_20_16_8_16_480_4_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 20 */
  let gidx2 = i32(gindex.x); /* 16 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (480); ridx0++) {
    var  val0 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))]);
    var  val1 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1024)]);
    var  val2 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2048)]);
    var  val3 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3072)]);
    var  val4 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1)]);
    var  val5 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1025)]);
    var  val6 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2049)]);
    var  val7 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3073)]);
    var  val8 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2)]);
    var  val9 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1026)]);
    var  val10 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2050)]);
    var  val11 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3074)]);
    var  val12 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3)]);
    var  val13 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1027)]);
    var  val14 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2051)]);
    var  val15 = f32(data1[(gidx0*(1966080))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3075)]);
    var  val16 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(1920)]);
    var  val21 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(1921)]);
    var  val22 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(1922)]);
    var  val23 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(1923)]);
    var  val24 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(3840)]);
    var  val25 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(3841)]);
    var  val26 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(3842)]);
    var  val27 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(3843)]);
    var  val28 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(5760)]);
    var  val29 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(5761)]);
    var  val30 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(5762)]);
    var  val31 = f32(data2[(gidx1*(61440))+(lidx3*(7680))+(ridx0*(4))+(5763)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))] = acc0;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)] = acc3;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1024)] = acc4;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1025)] = acc5;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1026)] = acc6;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1027)] = acc7;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2048)] = acc8;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2049)] = acc9;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2050)] = acc10;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2051)] = acc11;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3072)] = acc12;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3073)] = acc13;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3074)] = acc14;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3075)] = acc15;
}`;

const E_2_160_16_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 160 */
  let gidx2 = i32(gindex.x); /* 16 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  alu0 = f32((gidx1*(8))<(640));
  var  val0 = select(f32((0.0f)), f32(data1[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))]), bool(alu0));
  var  val1 = select(f32((0.0f)), f32(data1[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))+(1)]), bool(alu0));
  var  val2 = select(f32((0.0f)), f32(data1[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))+(2)]), bool(alu0));
  var  val3 = select(f32((0.0f)), f32(data1[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))+(3)]), bool(alu0));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(8))+lidx3]), bool(alu0));
  var  val5 = select(f32((0.0f)), f32(data3[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))]), bool(alu0));
  var  val6 = select(f32((0.0f)), f32(data3[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))+(1)]), bool(alu0));
  var  val7 = select(f32((0.0f)), f32(data3[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))+(2)]), bool(alu0));
  var  val8 = select(f32((0.0f)), f32(data3[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))+(3)]), bool(alu0));
  var  val9 = select(f32((0.0f)), f32(data4[(gidx1*(8))+lidx3]), bool(alu0));
  var  val10 = select(f32((0.0f)), f32(data5[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))]), bool(alu0));
  var  val11 = select(f32((0.0f)), f32(data5[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))+(1)]), bool(alu0));
  var  val12 = select(f32((0.0f)), f32(data5[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))+(2)]), bool(alu0));
  var  val13 = select(f32((0.0f)), f32(data5[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))+(3)]), bool(alu0));
  var  val14 = select(f32((0.0f)), f32(data6[(gidx1*(8))+lidx3]), bool(alu0));
  data0[(gidx0*(1310720))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))] = (val0+val4+(val5+val9+(val10+val14)));
  data0[(gidx0*(1310720))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)] = (val1+val4+(val6+val9+(val11+val14)));
  data0[(gidx0*(1310720))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)] = (val2+val4+(val7+val9+(val12+val14)));
  data0[(gidx0*(1310720))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)] = (val3+val4+(val8+val9+(val13+val14)));
}`;

const E_2_160_16_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 160 */
  let gidx2 = i32(gindex.x); /* 16 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(1310720))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(1310720))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(1310720))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(1310720))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)]);
  var  alu0 = f32(((gidx1*((-8)))+(lidx3*((-1))))<((-639)));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))+((-655360))]), bool(alu0));
  var  val5 = select(f32((0.0f)), f32(data2[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))+((-655359))]), bool(alu0));
  var  val6 = select(f32((0.0f)), f32(data2[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))+((-655358))]), bool(alu0));
  var  val7 = select(f32((0.0f)), f32(data2[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))+((-655357))]), bool(alu0));
  data0[(gidx0*(1310720))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))] = (val0+val4);
  data0[(gidx0*(1310720))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)] = (val1+val5);
  data0[(gidx0*(1310720))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)] = (val2+val6);
  data0[(gidx0*(1310720))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)] = (val3+val7);
}`;

const E_2_32_20_4_8_16_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 32 */
  let gidx2 = i32(gindex.x); /* 80 */
  let lidx4 = i32(lindex.y); /* 8 */
  let lidx5 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))]);
  var  val1 = f32(data1[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(3)]);
  var  alu0 = f32(((gidx1*((-40)))+((gidx2/(4))*((-2)))+((lidx4/(4))*((-1))))<((-639)));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(gidx0*(655360))+((-655360))]), bool(alu0));
  var  val5 = select(f32((0.0f)), f32(data2[(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(gidx0*(655360))+((-655359))]), bool(alu0));
  var  val6 = select(f32((0.0f)), f32(data2[(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(gidx0*(655360))+((-655358))]), bool(alu0));
  var  val7 = select(f32((0.0f)), f32(data2[(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(gidx0*(655360))+((-655357))]), bool(alu0));
  data0[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))] = (val0+val4);
  data0[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(1)] = (val1+val5);
  data0[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(2)] = (val2+val6);
  data0[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(3)] = (val3+val7);
}`;

const E_320_16_2_4_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,4,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 320 */
  let gidx1 = i32(gindex.x); /* 16 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 4 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(4096))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(1024))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(4096))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(1024))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(4096))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(1024))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(4096))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(1024))+(lidx4*(4))+(3)]);
  var  alu0 = f32(((gidx0*((-4)))+(lidx3*((-1))))<((-639)));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx0*(4096))+(gidx1*(64))+(lidx3*(1024))+(lidx4*(4))+(lidx2*(655360))+((-655360))]), bool(alu0));
  var  val5 = select(f32((0.0f)), f32(data2[(gidx0*(4096))+(gidx1*(64))+(lidx3*(1024))+(lidx4*(4))+(lidx2*(655360))+((-655359))]), bool(alu0));
  var  val6 = select(f32((0.0f)), f32(data2[(gidx0*(4096))+(gidx1*(64))+(lidx3*(1024))+(lidx4*(4))+(lidx2*(655360))+((-655358))]), bool(alu0));
  var  val7 = select(f32((0.0f)), f32(data2[(gidx0*(4096))+(gidx1*(64))+(lidx3*(1024))+(lidx4*(4))+(lidx2*(655360))+((-655357))]), bool(alu0));
  var  val8 = f32(data3[(lidx2*(32))+(gidx0/(10))]);
  var  val9 = f32(data4[(lidx2*(32))+(gidx0/(10))]);
  var  val10 = f32(data5[(gidx0*(4))+lidx3]);
  var  val11 = f32(data6[(gidx0*(4))+lidx3]);
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(1024))+(lidx4*(4))] = ((((val0+val4)-val8)*val9*val10)+val11);
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(1024))+(lidx4*(4))+(1)] = ((((val1+val5)-val8)*val9*val10)+val11);
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(1024))+(lidx4*(4))+(2)] = ((((val2+val6)-val8)*val9*val10)+val11);
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(1310720))+(lidx3*(1024))+(lidx4*(4))+(3)] = ((((val3+val7)-val8)*val9*val10)+val11);
}`;

const E_2_160_16_8_16_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 160 */
  let gidx2 = i32(gindex.x); /* 16 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(1310720))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(1310720))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(1310720))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(1310720))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)]);
  var  alu0 = f32(((gidx1*((-8)))+(lidx3*((-1))))<((-639)));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))+((-655360))]), bool(alu0));
  var  val5 = select(f32((0.0f)), f32(data2[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))+((-655359))]), bool(alu0));
  var  val6 = select(f32((0.0f)), f32(data2[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))+((-655358))]), bool(alu0));
  var  val7 = select(f32((0.0f)), f32(data2[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))+((-655357))]), bool(alu0));
  var  val8 = f32(data3[(gidx0*(32))+(gidx1/(5))]);
  var  val9 = f32(data4[(gidx0*(32))+(gidx1/(5))]);
  var  val10 = f32(data5[(gidx1*(8))+lidx3]);
  var  val11 = f32(data6[(gidx1*(8))+lidx3]);
  data0[(gidx0*(1310720))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))] = ((1.0f)/((1.0f)+exp2((((((val0+val4)-val8)*val9*val10)+val11)*((-1.4426950408889634f))))));
  data0[(gidx0*(1310720))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)] = ((1.0f)/((1.0f)+exp2((((((val1+val5)-val8)*val9*val10)+val11)*((-1.4426950408889634f))))));
  data0[(gidx0*(1310720))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)] = ((1.0f)/((1.0f)+exp2((((((val2+val6)-val8)*val9*val10)+val11)*((-1.4426950408889634f))))));
  data0[(gidx0*(1310720))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)] = ((1.0f)/((1.0f)+exp2((((((val3+val7)-val8)*val9*val10)+val11)*((-1.4426950408889634f))))));
}`;

const E_20480_32_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 20480 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx1*(4))+(3)]);
  data0[(gidx0*(128))+(lidx1*(4))] = (val0*val4);
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (val1*val5);
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (val2*val6);
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (val3*val7);
}`;

const r_2_160_2_16_8_1280_3_3_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 160 */
  let gidx2 = i32(gindex.x); /* 2 */
  let lidx3 = i32(lindex.y); /* 16 */
  let lidx4 = i32(lindex.x); /* 8 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (1280); ridx0++) {
    var  alu0 = f32((lidx4*((-4)))<(0));
    var  alu1 = f32(((gidx2*((-16)))+(lidx3*((-1))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1310720))+(ridx0*(1024))+((-33))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1310720))+(ridx0*(1024))+((-1))]), bool(alu0));
    var  alu2 = f32(((gidx2*(16))+lidx3)<(31));
    var  val2 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1310720))+(ridx0*(1024))+(31)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1310720))+(ridx0*(1024))+((-32))]), bool(alu1));
    var  val4 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1310720))+(ridx0*(1024))]);
    var  val5 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1310720))+(ridx0*(1024))+(32)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1310720))+(ridx0*(1024))+((-31))]), bool(alu1));
    var  val7 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1310720))+(ridx0*(1024))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1310720))+(ridx0*(1024))+(33)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1310720))+(ridx0*(1024))+((-30))]), bool(alu1));
    var  val10 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1310720))+(ridx0*(1024))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1310720))+(ridx0*(1024))+(34)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1310720))+(ridx0*(1024))+((-29))]), bool(alu1));
    var  val13 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1310720))+(ridx0*(1024))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1310720))+(ridx0*(1024))+(35)]), bool(alu2));
    var  alu3 = f32((lidx4*(4))<(28));
    var  val15 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1310720))+(ridx0*(1024))+((-28))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1310720))+(ridx0*(1024))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(1310720))+(ridx0*(1024))+(36)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx1*(46080))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(11520)]);
    var  val28 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(11523)]);
    var  val29 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(11526)]);
    var  val30 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(11521)]);
    var  val31 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(11524)]);
    var  val32 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(11527)]);
    var  val33 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(11522)]);
    var  val34 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(11525)]);
    var  val35 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(11528)]);
    var  val36 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(23040)]);
    var  val37 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(23043)]);
    var  val38 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(23046)]);
    var  val39 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(23041)]);
    var  val40 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(23044)]);
    var  val41 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(23047)]);
    var  val42 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(23042)]);
    var  val43 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(23045)]);
    var  val44 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(23048)]);
    var  val45 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(34560)]);
    var  val46 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(34563)]);
    var  val47 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(34566)]);
    var  val48 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(34561)]);
    var  val49 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(34564)]);
    var  val50 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(34567)]);
    var  val51 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(34562)]);
    var  val52 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(34565)]);
    var  val53 = f32(data2[(gidx1*(46080))+(ridx0*(9))+(34568)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  var  val54 = f32(data3[gidx1*(4)]);
  var  val55 = f32(data3[(gidx1*(4))+(1)]);
  var  val56 = f32(data3[(gidx1*(4))+(2)]);
  var  val57 = f32(data3[(gidx1*(4))+(3)]);
  var  val58 = f32(data4[gidx1*(4)]);
  var  val59 = f32(data4[(gidx1*(4))+(1)]);
  var  val60 = f32(data4[(gidx1*(4))+(2)]);
  var  val61 = f32(data4[(gidx1*(4))+(3)]);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))] = (acc0+val54+val58);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1)] = (acc1+val54+val58);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2)] = (acc2+val54+val58);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3)] = (acc3+val54+val58);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1024)] = (acc4+val55+val59);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1025)] = (acc5+val55+val59);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1026)] = (acc6+val55+val59);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1027)] = (acc7+val55+val59);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2048)] = (acc8+val56+val60);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2049)] = (acc9+val56+val60);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2050)] = (acc10+val56+val60);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2051)] = (acc11+val56+val60);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3072)] = (acc12+val57+val61);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3073)] = (acc13+val57+val61);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3074)] = (acc14+val57+val61);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3075)] = (acc15+val57+val61);
}`;

const r_2_20_16_8_16_320_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 20 */
  let gidx2 = i32(gindex.x); /* 16 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (320); ridx0++) {
    var  val0 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))]);
    var  val1 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1024)]);
    var  val2 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2048)]);
    var  val3 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3072)]);
    var  val4 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1)]);
    var  val5 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1025)]);
    var  val6 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2049)]);
    var  val7 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3073)]);
    var  val8 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2)]);
    var  val9 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1026)]);
    var  val10 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2050)]);
    var  val11 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3074)]);
    var  val12 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3)]);
    var  val13 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1027)]);
    var  val14 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2051)]);
    var  val15 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3075)]);
    var  val16 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(1280)]);
    var  val21 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(1281)]);
    var  val22 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(1282)]);
    var  val23 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(1283)]);
    var  val24 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(2560)]);
    var  val25 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(2561)]);
    var  val26 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(2562)]);
    var  val27 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(2563)]);
    var  val28 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(3840)]);
    var  val29 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(3841)]);
    var  val30 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(3842)]);
    var  val31 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(3843)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  var  val32 = f32(data3[(gidx1*(32))+(lidx3*(4))]);
  var  val33 = f32(data3[(gidx1*(32))+(lidx3*(4))+(1)]);
  var  val34 = f32(data3[(gidx1*(32))+(lidx3*(4))+(2)]);
  var  val35 = f32(data3[(gidx1*(32))+(lidx3*(4))+(3)]);
  var  val36 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))]);
  var  val37 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)]);
  var  val38 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)]);
  var  val39 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)]);
  var  val40 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1024)]);
  var  val41 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1025)]);
  var  val42 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1026)]);
  var  val43 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1027)]);
  var  val44 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2048)]);
  var  val45 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2049)]);
  var  val46 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2050)]);
  var  val47 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2051)]);
  var  val48 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3072)]);
  var  val49 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3073)]);
  var  val50 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3074)]);
  var  val51 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3075)]);
  var  val52 = f32(data5[(gidx1*(32))+(lidx3*(4))]);
  var  val53 = f32(data5[(gidx1*(32))+(lidx3*(4))+(1)]);
  var  val54 = f32(data5[(gidx1*(32))+(lidx3*(4))+(2)]);
  var  val55 = f32(data5[(gidx1*(32))+(lidx3*(4))+(3)]);
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))] = (acc0+val32+(val36+val52));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)] = (acc1+val32+(val37+val52));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)] = (acc2+val32+(val38+val52));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)] = (acc3+val32+(val39+val52));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1024)] = (acc4+val33+(val40+val53));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1025)] = (acc5+val33+(val41+val53));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1026)] = (acc6+val33+(val42+val53));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1027)] = (acc7+val33+(val43+val53));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2048)] = (acc8+val34+(val44+val54));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2049)] = (acc9+val34+(val45+val54));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2050)] = (acc10+val34+(val46+val54));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2051)] = (acc11+val34+(val47+val54));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3072)] = (acc12+val35+(val48+val55));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3073)] = (acc13+val35+(val49+val55));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3074)] = (acc14+val35+(val50+val55));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3075)] = (acc15+val35+(val51+val55));
}`;

const r_2_20_16_8_16_320_4_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 20 */
  let gidx2 = i32(gindex.x); /* 16 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (320); ridx0++) {
    var  val0 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))]);
    var  val1 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1024)]);
    var  val2 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2048)]);
    var  val3 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3072)]);
    var  val4 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1)]);
    var  val5 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1025)]);
    var  val6 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2049)]);
    var  val7 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3073)]);
    var  val8 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2)]);
    var  val9 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1026)]);
    var  val10 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2050)]);
    var  val11 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3074)]);
    var  val12 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3)]);
    var  val13 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1027)]);
    var  val14 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2051)]);
    var  val15 = f32(data1[(gidx0*(1310720))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3075)]);
    var  val16 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(1280)]);
    var  val21 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(1281)]);
    var  val22 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(1282)]);
    var  val23 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(1283)]);
    var  val24 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(2560)]);
    var  val25 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(2561)]);
    var  val26 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(2562)]);
    var  val27 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(2563)]);
    var  val28 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(3840)]);
    var  val29 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(3841)]);
    var  val30 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(3842)]);
    var  val31 = f32(data2[(gidx1*(40960))+(lidx3*(5120))+(ridx0*(4))+(3843)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))] = acc0;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)] = acc3;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1024)] = acc4;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1025)] = acc5;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1026)] = acc6;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1027)] = acc7;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2048)] = acc8;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2049)] = acc9;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2050)] = acc10;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2051)] = acc11;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3072)] = acc12;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3073)] = acc13;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3074)] = acc14;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3075)] = acc15;
}`;

const E_2_120_16_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 120 */
  let gidx2 = i32(gindex.x); /* 16 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  alu0 = f32((gidx1*(8))<(640));
  var  val0 = select(f32((0.0f)), f32(data1[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))]), bool(alu0));
  var  val1 = select(f32((0.0f)), f32(data1[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))+(1)]), bool(alu0));
  var  val2 = select(f32((0.0f)), f32(data1[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))+(2)]), bool(alu0));
  var  val3 = select(f32((0.0f)), f32(data1[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))+(3)]), bool(alu0));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(8))+lidx3]), bool(alu0));
  var  val5 = select(f32((0.0f)), f32(data3[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))]), bool(alu0));
  var  val6 = select(f32((0.0f)), f32(data3[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))+(1)]), bool(alu0));
  var  val7 = select(f32((0.0f)), f32(data3[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))+(2)]), bool(alu0));
  var  val8 = select(f32((0.0f)), f32(data3[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))+(3)]), bool(alu0));
  var  val9 = select(f32((0.0f)), f32(data4[(gidx1*(8))+lidx3]), bool(alu0));
  var  val10 = select(f32((0.0f)), f32(data5[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))]), bool(alu0));
  var  val11 = select(f32((0.0f)), f32(data5[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))+(1)]), bool(alu0));
  var  val12 = select(f32((0.0f)), f32(data5[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))+(2)]), bool(alu0));
  var  val13 = select(f32((0.0f)), f32(data5[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(655360))+(3)]), bool(alu0));
  var  val14 = select(f32((0.0f)), f32(data6[(gidx1*(8))+lidx3]), bool(alu0));
  data0[(gidx0*(983040))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))] = (val0+val4+(val5+val9+(val10+val14)));
  data0[(gidx0*(983040))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)] = (val1+val4+(val6+val9+(val11+val14)));
  data0[(gidx0*(983040))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)] = (val2+val4+(val7+val9+(val12+val14)));
  data0[(gidx0*(983040))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)] = (val3+val4+(val8+val9+(val13+val14)));
}`;

const E_2_120_16_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 120 */
  let gidx2 = i32(gindex.x); /* 16 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(983040))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(983040))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(983040))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(983040))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)]);
  var  alu0 = f32(((gidx1*((-8)))+(lidx3*((-1))))<((-639)));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(327680))+((-655360))]), bool(alu0));
  var  val5 = select(f32((0.0f)), f32(data2[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(327680))+((-655359))]), bool(alu0));
  var  val6 = select(f32((0.0f)), f32(data2[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(327680))+((-655358))]), bool(alu0));
  var  val7 = select(f32((0.0f)), f32(data2[(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(gidx0*(327680))+((-655357))]), bool(alu0));
  data0[(gidx0*(983040))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))] = (val0+val4);
  data0[(gidx0*(983040))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)] = (val1+val5);
  data0[(gidx0*(983040))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)] = (val2+val6);
  data0[(gidx0*(983040))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)] = (val3+val7);
}`;

const E_2_4_480_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 4 */
  let gidx2 = i32(gindex.x); /* 480 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(983040))+(gidx1*(245760))+(gidx2*(64))+(lidx3*(30720))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(983040))+(gidx1*(245760))+(gidx2*(64))+(lidx3*(30720))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(983040))+(gidx1*(245760))+(gidx2*(64))+(lidx3*(30720))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(983040))+(gidx1*(245760))+(gidx2*(64))+(lidx3*(30720))+(lidx4*(4))+(3)]);
  var  alu0 = f32(((gidx1*((-240)))+(lidx3*((-30)))+((gidx2/(16))*((-1))))<((-639)));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(245760))+(gidx2*(64))+(lidx3*(30720))+(lidx4*(4))+(gidx0*(327680))+((-655360))]), bool(alu0));
  var  val5 = select(f32((0.0f)), f32(data2[(gidx1*(245760))+(gidx2*(64))+(lidx3*(30720))+(lidx4*(4))+(gidx0*(327680))+((-655359))]), bool(alu0));
  var  val6 = select(f32((0.0f)), f32(data2[(gidx1*(245760))+(gidx2*(64))+(lidx3*(30720))+(lidx4*(4))+(gidx0*(327680))+((-655358))]), bool(alu0));
  var  val7 = select(f32((0.0f)), f32(data2[(gidx1*(245760))+(gidx2*(64))+(lidx3*(30720))+(lidx4*(4))+(gidx0*(327680))+((-655357))]), bool(alu0));
  data0[(gidx0*(983040))+(gidx1*(245760))+(gidx2*(64))+(lidx3*(30720))+(lidx4*(4))] = (val0+val4);
  data0[(gidx0*(983040))+(gidx1*(245760))+(gidx2*(64))+(lidx3*(30720))+(lidx4*(4))+(1)] = (val1+val5);
  data0[(gidx0*(983040))+(gidx1*(245760))+(gidx2*(64))+(lidx3*(30720))+(lidx4*(4))+(2)] = (val2+val6);
  data0[(gidx0*(983040))+(gidx1*(245760))+(gidx2*(64))+(lidx3*(30720))+(lidx4*(4))+(3)] = (val3+val7);
}`;

const r_64_16_1920 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 64 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (1920); ridx0++) {
    var  val0 = f32(data1[(gidx0*(30720))+(lidx1*(1920))+ridx0]);
    acc0 = (val0+acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val1 = f32(temp[ridx1]);
    acc1 = (val1+acc1);
  }
  data0[gidx0] = (acc1*(3.255208333333333e-05f));
}`;

const r_64_16_1920n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 64 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (1920); ridx0++) {
    var  val0 = f32(data1[(gidx0*(30720))+(lidx1*(1920))+ridx0]);
    var  val1 = f32(data2[gidx0]);
    var  alu0 = (val0-val1);
    acc0 = fma(alu0,alu0,acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val2 = f32(temp[ridx1]);
    acc1 = (val2+acc1);
  }
  data0[gidx0] = sqrt(((1.0f)/((acc1*(3.255208333333333e-05f))+(1e-05f))));
}`;

const E_240_16_2_4_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,4,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 240 */
  let gidx1 = i32(gindex.x); /* 16 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 4 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(4096))+(gidx1*(64))+(lidx2*(983040))+(lidx3*(1024))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(4096))+(gidx1*(64))+(lidx2*(983040))+(lidx3*(1024))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(4096))+(gidx1*(64))+(lidx2*(983040))+(lidx3*(1024))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(4096))+(gidx1*(64))+(lidx2*(983040))+(lidx3*(1024))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(lidx2*(32))+(((gidx0*(4))+lidx3)/(30))]);
  var  val5 = f32(data3[(lidx2*(32))+(((gidx0*(4))+lidx3)/(30))]);
  var  val6 = f32(data4[(gidx0*(4))+lidx3]);
  var  val7 = f32(data5[(gidx0*(4))+lidx3]);
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(983040))+(lidx3*(1024))+(lidx4*(4))] = (((val0-val4)*val5*val6)+val7);
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(983040))+(lidx3*(1024))+(lidx4*(4))+(1)] = (((val1-val4)*val5*val6)+val7);
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(983040))+(lidx3*(1024))+(lidx4*(4))+(2)] = (((val2-val4)*val5*val6)+val7);
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(983040))+(lidx3*(1024))+(lidx4*(4))+(3)] = (((val3-val4)*val5*val6)+val7);
}`;

const E_2_120_16_8_16_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 120 */
  let gidx2 = i32(gindex.x); /* 16 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(983040))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(983040))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(983040))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(983040))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(32))+(((gidx1*(8))+lidx3)/(30))]);
  var  val5 = f32(data3[(gidx0*(32))+(((gidx1*(8))+lidx3)/(30))]);
  var  val6 = f32(data4[(gidx1*(8))+lidx3]);
  var  val7 = f32(data5[(gidx1*(8))+lidx3]);
  data0[(gidx0*(983040))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))] = ((1.0f)/((1.0f)+exp2(((((val0-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(983040))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(1)] = ((1.0f)/((1.0f)+exp2(((((val1-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(983040))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(2)] = ((1.0f)/((1.0f)+exp2(((((val2-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(983040))+(gidx1*(8192))+(gidx2*(64))+(lidx3*(1024))+(lidx4*(4))+(3)] = ((1.0f)/((1.0f)+exp2(((((val3-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
}`;

const E_15360_32_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 15360 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx1*(4))+(3)]);
  data0[(gidx0*(128))+(lidx1*(4))] = (val0*val4);
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (val1*val5);
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (val2*val6);
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (val3*val7);
}`;

const r_2_160_2_16_8_960_3_3_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(8,16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 160 */
  let gidx2 = i32(gindex.x); /* 2 */
  let lidx3 = i32(lindex.y); /* 16 */
  let lidx4 = i32(lindex.x); /* 8 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (960); ridx0++) {
    var  alu0 = f32((lidx4*((-4)))<(0));
    var  alu1 = f32(((gidx2*((-16)))+(lidx3*((-1))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(983040))+(ridx0*(1024))+((-33))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(983040))+(ridx0*(1024))+((-1))]), bool(alu0));
    var  alu2 = f32(((gidx2*(16))+lidx3)<(31));
    var  val2 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(983040))+(ridx0*(1024))+(31)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(983040))+(ridx0*(1024))+((-32))]), bool(alu1));
    var  val4 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(983040))+(ridx0*(1024))]);
    var  val5 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(983040))+(ridx0*(1024))+(32)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(983040))+(ridx0*(1024))+((-31))]), bool(alu1));
    var  val7 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(983040))+(ridx0*(1024))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(983040))+(ridx0*(1024))+(33)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(983040))+(ridx0*(1024))+((-30))]), bool(alu1));
    var  val10 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(983040))+(ridx0*(1024))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(983040))+(ridx0*(1024))+(34)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(983040))+(ridx0*(1024))+((-29))]), bool(alu1));
    var  val13 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(983040))+(ridx0*(1024))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(983040))+(ridx0*(1024))+(35)]), bool(alu2));
    var  alu3 = f32((lidx4*(4))<(28));
    var  val15 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(983040))+(ridx0*(1024))+((-28))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(983040))+(ridx0*(1024))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(32))+(gidx0*(983040))+(ridx0*(1024))+(36)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx1*(34560))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(8640)]);
    var  val28 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(8643)]);
    var  val29 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(8646)]);
    var  val30 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(8641)]);
    var  val31 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(8644)]);
    var  val32 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(8647)]);
    var  val33 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(8642)]);
    var  val34 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(8645)]);
    var  val35 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(8648)]);
    var  val36 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(17280)]);
    var  val37 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(17283)]);
    var  val38 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(17286)]);
    var  val39 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(17281)]);
    var  val40 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(17284)]);
    var  val41 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(17287)]);
    var  val42 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(17282)]);
    var  val43 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(17285)]);
    var  val44 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(17288)]);
    var  val45 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(25920)]);
    var  val46 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(25923)]);
    var  val47 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(25926)]);
    var  val48 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(25921)]);
    var  val49 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(25924)]);
    var  val50 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(25927)]);
    var  val51 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(25922)]);
    var  val52 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(25925)]);
    var  val53 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(25928)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  var  val54 = f32(data3[gidx1*(4)]);
  var  val55 = f32(data3[(gidx1*(4))+(1)]);
  var  val56 = f32(data3[(gidx1*(4))+(2)]);
  var  val57 = f32(data3[(gidx1*(4))+(3)]);
  var  val58 = f32(data4[gidx1*(4)]);
  var  val59 = f32(data4[(gidx1*(4))+(1)]);
  var  val60 = f32(data4[(gidx1*(4))+(2)]);
  var  val61 = f32(data4[(gidx1*(4))+(3)]);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))] = (acc0+val54+val58);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1)] = (acc1+val54+val58);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2)] = (acc2+val54+val58);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3)] = (acc3+val54+val58);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1024)] = (acc4+val55+val59);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1025)] = (acc5+val55+val59);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1026)] = (acc6+val55+val59);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(1027)] = (acc7+val55+val59);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2048)] = (acc8+val56+val60);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2049)] = (acc9+val56+val60);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2050)] = (acc10+val56+val60);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(2051)] = (acc11+val56+val60);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3072)] = (acc12+val57+val61);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3073)] = (acc13+val57+val61);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3074)] = (acc14+val57+val61);
  data0[(gidx0*(655360))+(gidx1*(4096))+(gidx2*(512))+(lidx3*(32))+(lidx4*(4))+(3075)] = (acc15+val57+val61);
}`;

const r_2_20_16_8_16_240_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 20 */
  let gidx2 = i32(gindex.x); /* 16 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (240); ridx0++) {
    var  val0 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))]);
    var  val1 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1024)]);
    var  val2 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2048)]);
    var  val3 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3072)]);
    var  val4 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1)]);
    var  val5 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1025)]);
    var  val6 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2049)]);
    var  val7 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3073)]);
    var  val8 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2)]);
    var  val9 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1026)]);
    var  val10 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2050)]);
    var  val11 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3074)]);
    var  val12 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3)]);
    var  val13 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1027)]);
    var  val14 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2051)]);
    var  val15 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3075)]);
    var  val16 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(960)]);
    var  val21 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(961)]);
    var  val22 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(962)]);
    var  val23 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(963)]);
    var  val24 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(1920)]);
    var  val25 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(1921)]);
    var  val26 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(1922)]);
    var  val27 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(1923)]);
    var  val28 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(2880)]);
    var  val29 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(2881)]);
    var  val30 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(2882)]);
    var  val31 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(2883)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  var  val32 = f32(data3[(gidx1*(32))+(lidx3*(4))]);
  var  val33 = f32(data3[(gidx1*(32))+(lidx3*(4))+(1)]);
  var  val34 = f32(data3[(gidx1*(32))+(lidx3*(4))+(2)]);
  var  val35 = f32(data3[(gidx1*(32))+(lidx3*(4))+(3)]);
  var  val36 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))]);
  var  val37 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)]);
  var  val38 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)]);
  var  val39 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)]);
  var  val40 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1024)]);
  var  val41 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1025)]);
  var  val42 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1026)]);
  var  val43 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1027)]);
  var  val44 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2048)]);
  var  val45 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2049)]);
  var  val46 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2050)]);
  var  val47 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2051)]);
  var  val48 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3072)]);
  var  val49 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3073)]);
  var  val50 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3074)]);
  var  val51 = f32(data4[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3075)]);
  var  val52 = f32(data5[(gidx1*(32))+(lidx3*(4))]);
  var  val53 = f32(data5[(gidx1*(32))+(lidx3*(4))+(1)]);
  var  val54 = f32(data5[(gidx1*(32))+(lidx3*(4))+(2)]);
  var  val55 = f32(data5[(gidx1*(32))+(lidx3*(4))+(3)]);
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))] = (acc0+val32+(val36+val52));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)] = (acc1+val32+(val37+val52));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)] = (acc2+val32+(val38+val52));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)] = (acc3+val32+(val39+val52));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1024)] = (acc4+val33+(val40+val53));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1025)] = (acc5+val33+(val41+val53));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1026)] = (acc6+val33+(val42+val53));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1027)] = (acc7+val33+(val43+val53));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2048)] = (acc8+val34+(val44+val54));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2049)] = (acc9+val34+(val45+val54));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2050)] = (acc10+val34+(val46+val54));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2051)] = (acc11+val34+(val47+val54));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3072)] = (acc12+val35+(val48+val55));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3073)] = (acc13+val35+(val49+val55));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3074)] = (acc14+val35+(val50+val55));
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3075)] = (acc15+val35+(val51+val55));
}`;

const r_2_20_16_8_16_240_4_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 20 */
  let gidx2 = i32(gindex.x); /* 16 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (240); ridx0++) {
    var  val0 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))]);
    var  val1 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1024)]);
    var  val2 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2048)]);
    var  val3 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3072)]);
    var  val4 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1)]);
    var  val5 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1025)]);
    var  val6 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2049)]);
    var  val7 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3073)]);
    var  val8 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2)]);
    var  val9 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1026)]);
    var  val10 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2050)]);
    var  val11 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3074)]);
    var  val12 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3)]);
    var  val13 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(1027)]);
    var  val14 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(2051)]);
    var  val15 = f32(data1[(gidx0*(983040))+(gidx2*(64))+(lidx4*(4))+(ridx0*(4096))+(3075)]);
    var  val16 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(960)]);
    var  val21 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(961)]);
    var  val22 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(962)]);
    var  val23 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(963)]);
    var  val24 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(1920)]);
    var  val25 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(1921)]);
    var  val26 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(1922)]);
    var  val27 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(1923)]);
    var  val28 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(2880)]);
    var  val29 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(2881)]);
    var  val30 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(2882)]);
    var  val31 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(2883)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))] = acc0;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)] = acc3;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1024)] = acc4;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1025)] = acc5;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1026)] = acc6;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1027)] = acc7;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2048)] = acc8;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2049)] = acc9;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2050)] = acc10;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2051)] = acc11;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3072)] = acc12;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3073)] = acc13;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3074)] = acc14;
  data0[(gidx0*(655360))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3075)] = acc15;
}`;

const r_2_160_8_8_16_640_3_3_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 160 */
  let gidx2 = i32(gindex.x); /* 8 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (640); ridx0++) {
    var  alu0 = f32((lidx4*((-4)))<(0));
    var  alu1 = f32(((gidx2*((-8)))+(lidx3*((-1))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(((lidx4*(2))+(31))%(32))+((((gidx2*(4))+(gidx0*(20480))+(ridx0*(32))+((lidx3+((lidx4+(15))/(16)))/(2))+(40959))%(40960))*(32))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(((lidx4*(2))+(31))%(32))+((((gidx2*(4))+(gidx0*(20480))+(ridx0*(32))+((lidx3+((lidx4+(15))/(16))+(1))/(2))+(40959))%(40960))*(32))]), bool(alu0));
    var  alu2 = f32(((gidx2*(8))+lidx3)<(63));
    var  val2 = select(f32((0.0f)), f32(data1[(((lidx4*(2))+(31))%(32))+((((gidx2*(4))+(gidx0*(20480))+(ridx0*(32))+((lidx3+((lidx4+(15))/(16)))/(2)))%(40960))*(32))]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx4*(2))+((((gidx2*(4))+(gidx0*(20480))+(ridx0*(32))+((lidx3+(1))/(2))+(40959))%(40960))*(32))]), bool(alu1));
    var  val4 = f32(data1[(lidx4*(2))+(gidx2*(128))+(gidx0*(655360))+(ridx0*(1024))+((lidx3/(2))*(32))]);
    var  val5 = select(f32((0.0f)), f32(data1[(lidx4*(2))+((((gidx2*(4))+(gidx0*(20480))+(ridx0*(32))+((lidx3+(3))/(2))+(40959))%(40960))*(32))]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(lidx4*(2))+((((gidx2*(4))+(gidx0*(20480))+(ridx0*(32))+((lidx3+(1))/(2))+(40959))%(40960))*(32))+(1)]), bool(alu1));
    var  val7 = f32(data1[(lidx4*(2))+(gidx2*(128))+(gidx0*(655360))+(ridx0*(1024))+((lidx3/(2))*(32))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(lidx4*(2))+((((gidx2*(4))+(gidx0*(20480))+(ridx0*(32))+((lidx3+(3))/(2))+(40959))%(40960))*(32))+(1)]), bool(alu2));
    var  alu3 = f32((lidx4*(4))<(60));
    var  val9 = select(f32((0.0f)), f32(data1[(((lidx4*(2))+(2))%(32))+((((gidx2*(4))+(gidx0*(20480))+(ridx0*(32))+((lidx3+((lidx4+(17))/(16)))/(2))+(40959))%(40960))*(32))]), bool((alu3*alu1)));
    var  val10 = select(f32((0.0f)), f32(data1[(((lidx4*(2))+(2))%(32))+((((gidx2*(4))+(gidx0*(20480))+(ridx0*(32))+((lidx3+((lidx4+(17))/(16))+(1))/(2))+(40959))%(40960))*(32))]), bool(alu3));
    var  val11 = select(f32((0.0f)), f32(data1[(((lidx4*(2))+(2))%(32))+((((gidx2*(4))+(gidx0*(20480))+(ridx0*(32))+((lidx3+((lidx4+(17))/(16)))/(2)))%(40960))*(32))]), bool((alu3*alu2)));
    var  val12 = f32(data2[(gidx1*(23040))+(ridx0*(9))]);
    var  val13 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(3)]);
    var  val14 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(6)]);
    var  val15 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(1)]);
    var  val16 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(4)]);
    var  val17 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(7)]);
    var  val18 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(2)]);
    var  val19 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5)]);
    var  val20 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(8)]);
    var  val21 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5760)]);
    var  val22 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5763)]);
    var  val23 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5766)]);
    var  val24 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5761)]);
    var  val25 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5764)]);
    var  val26 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5767)]);
    var  val27 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5762)]);
    var  val28 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5765)]);
    var  val29 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5768)]);
    var  val30 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11520)]);
    var  val31 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11523)]);
    var  val32 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11526)]);
    var  val33 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11521)]);
    var  val34 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11524)]);
    var  val35 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11527)]);
    var  val36 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11522)]);
    var  val37 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11525)]);
    var  val38 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11528)]);
    var  val39 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17280)]);
    var  val40 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17283)]);
    var  val41 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17286)]);
    var  val42 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17281)]);
    var  val43 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17284)]);
    var  val44 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17287)]);
    var  val45 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17282)]);
    var  val46 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17285)]);
    var  val47 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17288)]);
    acc0 = fma(val0,val12,acc0);
    acc0 = fma(val1,val13,acc0);
    acc0 = fma(val2,val14,acc0);
    acc0 = fma(val3,val15,acc0);
    acc0 = fma(val4,val16,acc0);
    acc0 = fma(val5,val17,acc0);
    acc0 = fma(val3,val18,acc0);
    acc0 = fma(val4,val19,acc0);
    acc0 = fma(val5,val20,acc0);
    acc1 = fma(val3,val12,acc1);
    acc1 = fma(val4,val13,acc1);
    acc1 = fma(val5,val14,acc1);
    acc1 = fma(val3,val15,acc1);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc1 = fma(val8,val20,acc1);
    acc2 = fma(val3,val12,acc2);
    acc2 = fma(val4,val13,acc2);
    acc2 = fma(val5,val14,acc2);
    acc2 = fma(val6,val15,acc2);
    acc2 = fma(val7,val16,acc2);
    acc2 = fma(val8,val17,acc2);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc3 = fma(val6,val12,acc3);
    acc3 = fma(val7,val13,acc3);
    acc3 = fma(val8,val14,acc3);
    acc3 = fma(val6,val15,acc3);
    acc3 = fma(val7,val16,acc3);
    acc3 = fma(val8,val17,acc3);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc4 = fma(val0,val21,acc4);
    acc4 = fma(val1,val22,acc4);
    acc4 = fma(val2,val23,acc4);
    acc4 = fma(val3,val24,acc4);
    acc4 = fma(val4,val25,acc4);
    acc4 = fma(val5,val26,acc4);
    acc4 = fma(val3,val27,acc4);
    acc4 = fma(val4,val28,acc4);
    acc4 = fma(val5,val29,acc4);
    acc5 = fma(val3,val21,acc5);
    acc5 = fma(val4,val22,acc5);
    acc5 = fma(val5,val23,acc5);
    acc5 = fma(val3,val24,acc5);
    acc5 = fma(val4,val25,acc5);
    acc5 = fma(val5,val26,acc5);
    acc5 = fma(val6,val27,acc5);
    acc5 = fma(val7,val28,acc5);
    acc5 = fma(val8,val29,acc5);
    acc6 = fma(val3,val21,acc6);
    acc6 = fma(val4,val22,acc6);
    acc6 = fma(val5,val23,acc6);
    acc6 = fma(val6,val24,acc6);
    acc6 = fma(val7,val25,acc6);
    acc6 = fma(val8,val26,acc6);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc7 = fma(val6,val21,acc7);
    acc7 = fma(val7,val22,acc7);
    acc7 = fma(val8,val23,acc7);
    acc7 = fma(val6,val24,acc7);
    acc7 = fma(val7,val25,acc7);
    acc7 = fma(val8,val26,acc7);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc8 = fma(val0,val30,acc8);
    acc8 = fma(val1,val31,acc8);
    acc8 = fma(val2,val32,acc8);
    acc8 = fma(val3,val33,acc8);
    acc8 = fma(val4,val34,acc8);
    acc8 = fma(val5,val35,acc8);
    acc8 = fma(val3,val36,acc8);
    acc8 = fma(val4,val37,acc8);
    acc8 = fma(val5,val38,acc8);
    acc9 = fma(val3,val30,acc9);
    acc9 = fma(val4,val31,acc9);
    acc9 = fma(val5,val32,acc9);
    acc9 = fma(val3,val33,acc9);
    acc9 = fma(val4,val34,acc9);
    acc9 = fma(val5,val35,acc9);
    acc9 = fma(val6,val36,acc9);
    acc9 = fma(val7,val37,acc9);
    acc9 = fma(val8,val38,acc9);
    acc10 = fma(val3,val30,acc10);
    acc10 = fma(val4,val31,acc10);
    acc10 = fma(val5,val32,acc10);
    acc10 = fma(val6,val33,acc10);
    acc10 = fma(val7,val34,acc10);
    acc10 = fma(val8,val35,acc10);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc11 = fma(val6,val30,acc11);
    acc11 = fma(val7,val31,acc11);
    acc11 = fma(val8,val32,acc11);
    acc11 = fma(val6,val33,acc11);
    acc11 = fma(val7,val34,acc11);
    acc11 = fma(val8,val35,acc11);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc12 = fma(val0,val39,acc12);
    acc12 = fma(val1,val40,acc12);
    acc12 = fma(val2,val41,acc12);
    acc12 = fma(val3,val42,acc12);
    acc12 = fma(val4,val43,acc12);
    acc12 = fma(val5,val44,acc12);
    acc12 = fma(val3,val45,acc12);
    acc12 = fma(val4,val46,acc12);
    acc12 = fma(val5,val47,acc12);
    acc13 = fma(val3,val39,acc13);
    acc13 = fma(val4,val40,acc13);
    acc13 = fma(val5,val41,acc13);
    acc13 = fma(val3,val42,acc13);
    acc13 = fma(val4,val43,acc13);
    acc13 = fma(val5,val44,acc13);
    acc13 = fma(val6,val45,acc13);
    acc13 = fma(val7,val46,acc13);
    acc13 = fma(val8,val47,acc13);
    acc14 = fma(val3,val39,acc14);
    acc14 = fma(val4,val40,acc14);
    acc14 = fma(val5,val41,acc14);
    acc14 = fma(val6,val42,acc14);
    acc14 = fma(val7,val43,acc14);
    acc14 = fma(val8,val44,acc14);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc15 = fma(val6,val39,acc15);
    acc15 = fma(val7,val40,acc15);
    acc15 = fma(val8,val41,acc15);
    acc15 = fma(val6,val42,acc15);
    acc15 = fma(val7,val43,acc15);
    acc15 = fma(val8,val44,acc15);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
  }
  data0[(gidx0*(2621440))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))] = acc0;
  data0[(gidx0*(2621440))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(2621440))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(2621440))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(3)] = acc3;
  data0[(gidx0*(2621440))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(4096)] = acc4;
  data0[(gidx0*(2621440))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(4097)] = acc5;
  data0[(gidx0*(2621440))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(4098)] = acc6;
  data0[(gidx0*(2621440))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(4099)] = acc7;
  data0[(gidx0*(2621440))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(8192)] = acc8;
  data0[(gidx0*(2621440))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(8193)] = acc9;
  data0[(gidx0*(2621440))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(8194)] = acc10;
  data0[(gidx0*(2621440))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(8195)] = acc11;
  data0[(gidx0*(2621440))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(12288)] = acc12;
  data0[(gidx0*(2621440))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(12289)] = acc13;
  data0[(gidx0*(2621440))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(12290)] = acc14;
  data0[(gidx0*(2621440))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(12291)] = acc15;
}`;

const E_2_120_64_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 120 */
  let gidx2 = i32(gindex.x); /* 64 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  alu0 = f32((gidx1*(8))<(640));
  var  val0 = select(f32((0.0f)), f32(data1[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(2621440))]), bool(alu0));
  var  val1 = select(f32((0.0f)), f32(data1[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(2621440))+(1)]), bool(alu0));
  var  val2 = select(f32((0.0f)), f32(data1[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(2621440))+(2)]), bool(alu0));
  var  val3 = select(f32((0.0f)), f32(data1[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(2621440))+(3)]), bool(alu0));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(8))+lidx3]), bool(alu0));
  var  alu1 = f32(((gidx1*((-8)))+(lidx3*((-1))))<((-639)));
  var  val5 = select(f32((0.0f)), f32(data3[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(1310720))+((-2621440))]), bool(alu1));
  var  val6 = select(f32((0.0f)), f32(data3[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(1310720))+((-2621439))]), bool(alu1));
  var  val7 = select(f32((0.0f)), f32(data3[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(1310720))+((-2621438))]), bool(alu1));
  var  val8 = select(f32((0.0f)), f32(data3[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(1310720))+((-2621437))]), bool(alu1));
  data0[(gidx0*(3932160))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))] = (val0+val4+val5);
  data0[(gidx0*(3932160))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)] = (val1+val4+val6);
  data0[(gidx0*(3932160))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)] = (val2+val4+val7);
  data0[(gidx0*(3932160))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)] = (val3+val4+val8);
}`;

const r_2_10_64_8_16_240_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 10 */
  let gidx2 = i32(gindex.x); /* 64 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (240); ridx0++) {
    var  val0 = f32(data1[(gidx0*(3932160))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))]);
    var  val1 = f32(data1[(gidx0*(3932160))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(4096)]);
    var  val2 = f32(data1[(gidx0*(3932160))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(8192)]);
    var  val3 = f32(data1[(gidx0*(3932160))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(12288)]);
    var  val4 = f32(data1[(gidx0*(3932160))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(1)]);
    var  val5 = f32(data1[(gidx0*(3932160))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(4097)]);
    var  val6 = f32(data1[(gidx0*(3932160))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(8193)]);
    var  val7 = f32(data1[(gidx0*(3932160))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(12289)]);
    var  val8 = f32(data1[(gidx0*(3932160))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(2)]);
    var  val9 = f32(data1[(gidx0*(3932160))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(4098)]);
    var  val10 = f32(data1[(gidx0*(3932160))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(8194)]);
    var  val11 = f32(data1[(gidx0*(3932160))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(12290)]);
    var  val12 = f32(data1[(gidx0*(3932160))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(3)]);
    var  val13 = f32(data1[(gidx0*(3932160))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(4099)]);
    var  val14 = f32(data1[(gidx0*(3932160))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(8195)]);
    var  val15 = f32(data1[(gidx0*(3932160))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(12291)]);
    var  val16 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(960)]);
    var  val21 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(961)]);
    var  val22 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(962)]);
    var  val23 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(963)]);
    var  val24 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(1920)]);
    var  val25 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(1921)]);
    var  val26 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(1922)]);
    var  val27 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(1923)]);
    var  val28 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(2880)]);
    var  val29 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(2881)]);
    var  val30 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(2882)]);
    var  val31 = f32(data2[(gidx1*(30720))+(lidx3*(3840))+(ridx0*(4))+(2883)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))] = acc0;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(3)] = acc3;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(4096)] = acc4;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(4097)] = acc5;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(4098)] = acc6;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(4099)] = acc7;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(8192)] = acc8;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(8193)] = acc9;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(8194)] = acc10;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(8195)] = acc11;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(12288)] = acc12;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(12289)] = acc13;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(12290)] = acc14;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(12291)] = acc15;
}`;

const r_2_4_30_8_16_64_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 4 */
  let gidx2 = i32(gindex.x); /* 30 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  alu0 = f32(((gidx1*(240))+gidx2+(lidx3*(30)))<(640));
    var  val0 = select(f32((0.0f)), f32(data1[(gidx1*(983040))+(gidx2*(4096))+(lidx3*(122880))+(lidx4*(256))+(ridx0*(4))+(gidx0*(2621440))]), bool(alu0));
    var  val1 = select(f32((0.0f)), f32(data1[(gidx1*(983040))+(gidx2*(4096))+(lidx3*(122880))+(lidx4*(256))+(ridx0*(4))+(gidx0*(2621440))+(1)]), bool(alu0));
    var  val2 = select(f32((0.0f)), f32(data1[(gidx1*(983040))+(gidx2*(4096))+(lidx3*(122880))+(lidx4*(256))+(ridx0*(4))+(gidx0*(2621440))+(2)]), bool(alu0));
    var  val3 = select(f32((0.0f)), f32(data1[(gidx1*(983040))+(gidx2*(4096))+(lidx3*(122880))+(lidx4*(256))+(ridx0*(4))+(gidx0*(2621440))+(3)]), bool(alu0));
    var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(240))+gidx2+(lidx3*(30))]), bool(alu0));
    var  alu1 = f32(((gidx1*((-240)))+(gidx2*((-1)))+(lidx3*((-30))))<((-639)));
    var  val5 = select(f32((0.0f)), f32(data3[(gidx1*(983040))+(gidx2*(4096))+(lidx3*(122880))+(lidx4*(256))+(ridx0*(4))+(gidx0*(1310720))+((-2621440))]), bool(alu1));
    var  val6 = select(f32((0.0f)), f32(data3[(gidx1*(983040))+(gidx2*(4096))+(lidx3*(122880))+(lidx4*(256))+(ridx0*(4))+(gidx0*(1310720))+((-2621439))]), bool(alu1));
    var  val7 = select(f32((0.0f)), f32(data3[(gidx1*(983040))+(gidx2*(4096))+(lidx3*(122880))+(lidx4*(256))+(ridx0*(4))+(gidx0*(1310720))+((-2621438))]), bool(alu1));
    var  val8 = select(f32((0.0f)), f32(data3[(gidx1*(983040))+(gidx2*(4096))+(lidx3*(122880))+(lidx4*(256))+(ridx0*(4))+(gidx0*(1310720))+((-2621437))]), bool(alu1));
    acc0 = (val0+val4+val5+acc0);
    acc0 = (val1+val4+val6+acc0);
    acc0 = (val2+val4+val7+acc0);
    acc0 = (val3+val4+val8+acc0);
  }
  data0[(gidx0*(15360))+(gidx1*(3840))+(gidx2*(16))+(lidx3*(480))+lidx4] = acc0;
}`;

const r_64_16_30 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 64 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (30); ridx0++) {
    var  val0 = f32(data1[(gidx0*(480))+(lidx1*(30))+ridx0]);
    acc0 = (val0+acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val1 = f32(temp[ridx1]);
    acc1 = (val1+acc1);
  }
  data0[gidx0] = (acc1*(8.138020833333333e-06f));
}`;

const E_2_4_2560_8_16_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 4 */
  let gidx2 = i32(gindex.x); /* 2560 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  alu0 = f32(((gidx1*(240))+(lidx3*(30))+(((gidx2*(48))+(lidx4*(3)))/(4096)))<(640));
  var  val0 = select(f32((0.0f)), f32(data1[(gidx1*(983040))+(gidx2*(48))+(lidx3*(122880))+(lidx4*(3))+(gidx0*(2621440))]), bool(alu0));
  var  alu1 = f32(((gidx1*(240))+(lidx3*(30))+(((gidx2*(48))+(lidx4*(3))+(1))/(4096)))<(640));
  var  val1 = select(f32((0.0f)), f32(data1[(gidx1*(983040))+(gidx2*(48))+(lidx3*(122880))+(lidx4*(3))+(gidx0*(2621440))+(1)]), bool(alu1));
  var  alu2 = f32(((gidx1*(240))+(lidx3*(30))+(((gidx2*(48))+(lidx4*(3))+(2))/(4096)))<(640));
  var  val2 = select(f32((0.0f)), f32(data1[(gidx1*(983040))+(gidx2*(48))+(lidx3*(122880))+(lidx4*(3))+(gidx0*(2621440))+(2)]), bool(alu2));
  var  val3 = select(f32((0.0f)), f32(data2[(gidx1*(240))+(lidx3*(30))+(((gidx2*(48))+(lidx4*(3)))/(4096))]), bool(alu0));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(240))+(lidx3*(30))+(((gidx2*(48))+(lidx4*(3))+(1))/(4096))]), bool(alu1));
  var  val5 = select(f32((0.0f)), f32(data2[(gidx1*(240))+(lidx3*(30))+(((gidx2*(48))+(lidx4*(3))+(2))/(4096))]), bool(alu2));
  var  val6 = select(f32((0.0f)), f32(data3[(gidx1*(983040))+(gidx2*(48))+(lidx3*(122880))+(lidx4*(3))+(gidx0*(1310720))+((-2621440))]), bool(f32(((gidx1*((-240)))+(lidx3*((-30)))+((((gidx2*(48))+(lidx4*(3)))/(4096))*((-1))))<((-639)))));
  var  val7 = select(f32((0.0f)), f32(data3[(gidx1*(983040))+(gidx2*(48))+(lidx3*(122880))+(lidx4*(3))+(gidx0*(1310720))+((-2621439))]), bool(f32(((gidx1*((-240)))+(lidx3*((-30)))+((((gidx2*(48))+(lidx4*(3))+(1))/(4096))*((-1))))<((-639)))));
  var  val8 = select(f32((0.0f)), f32(data3[(gidx1*(983040))+(gidx2*(48))+(lidx3*(122880))+(lidx4*(3))+(gidx0*(1310720))+((-2621438))]), bool(f32(((gidx1*((-240)))+(lidx3*((-30)))+((((gidx2*(48))+(lidx4*(3))+(2))/(4096))*((-1))))<((-639)))));
  var  val9 = f32(data4[(gidx0*(32))+(gidx1*(8))+lidx3]);
  data0[(gidx0*(3932160))+(gidx1*(983040))+(gidx2*(48))+(lidx3*(122880))+(lidx4*(3))] = ((val0+val3+val6)-val9);
  data0[(gidx0*(3932160))+(gidx1*(983040))+(gidx2*(48))+(lidx3*(122880))+(lidx4*(3))+(1)] = ((val1+val4+val7)-val9);
  data0[(gidx0*(3932160))+(gidx1*(983040))+(gidx2*(48))+(lidx3*(122880))+(lidx4*(3))+(2)] = ((val2+val5+val8)-val9);
}`;

const r_1920_4_8_32_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,128>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(8,4) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 1920 */
  let lidx1 = i32(lindex.y); /* 4 */
  let lidx2 = i32(lindex.x); /* 8 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (32); ridx0++) {
    var  val0 = f32(data1[(gidx0*(4096))+(lidx1*(256))+lidx2+(ridx0*(8))]);
    var  val1 = f32(data1[(gidx0*(4096))+(lidx1*(256))+lidx2+(ridx0*(8))+(1024)]);
    var  val2 = f32(data1[(gidx0*(4096))+(lidx1*(256))+lidx2+(ridx0*(8))+(2048)]);
    var  val3 = f32(data1[(gidx0*(4096))+(lidx1*(256))+lidx2+(ridx0*(8))+(3072)]);
    acc0 = fma(val0,val0,acc0);
    acc1 = fma(val1,val1,acc1);
    acc2 = fma(val2,val2,acc2);
    acc3 = fma(val3,val3,acc3);
  }
  temp[(lidx1*(32))+(lidx2*(4))] = acc0;
  temp[(lidx1*(32))+(lidx2*(4))+(1)] = acc1;
  temp[(lidx1*(32))+(lidx2*(4))+(2)] = acc2;
  temp[(lidx1*(32))+(lidx2*(4))+(3)] = acc3;
  workgroupBarrier();
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  for(var ridx1 = (0); ridx1 < (8); ridx1++) {
    var  val4 = f32(temp[(lidx1*(32))+(ridx1*(4))]);
    var  val5 = f32(temp[(lidx1*(32))+(ridx1*(4))+(1)]);
    var  val6 = f32(temp[(lidx1*(32))+(ridx1*(4))+(2)]);
    var  val7 = f32(temp[(lidx1*(32))+(ridx1*(4))+(3)]);
    acc4 = (val4+acc4);
    acc5 = (val5+acc5);
    acc6 = (val6+acc6);
    acc7 = (val7+acc7);
  }
  data0[(gidx0*(16))+lidx1] = acc4;
  data0[(gidx0*(16))+lidx1+(4)] = acc5;
  data0[(gidx0*(16))+lidx1+(8)] = acc6;
  data0[(gidx0*(16))+lidx1+(12)] = acc7;
}`;

const r_64_16_30n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 64 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (30); ridx0++) {
    var  val0 = f32(data1[(gidx0*(480))+(lidx1*(30))+ridx0]);
    acc0 = (val0+acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val1 = f32(temp[ridx1]);
    acc1 = (val1+acc1);
  }
  data0[gidx0] = sqrt(((1.0f)/((acc1*(8.138020833333333e-06f))+(1e-05f))));
}`;

const E_240_64_2_4_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,4,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 240 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 4 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(3932160))+(lidx3*(4096))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(3932160))+(lidx3*(4096))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(3932160))+(lidx3*(4096))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(3932160))+(lidx3*(4096))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(lidx2*(32))+(((gidx0*(4))+lidx3)/(30))]);
  var  val5 = f32(data3[(gidx0*(4))+lidx3]);
  var  val6 = f32(data4[(gidx0*(4))+lidx3]);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(3932160))+(lidx3*(4096))+(lidx4*(4))] = ((val0*val4*val5)+val6);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(3932160))+(lidx3*(4096))+(lidx4*(4))+(1)] = ((val1*val4*val5)+val6);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(3932160))+(lidx3*(4096))+(lidx4*(4))+(2)] = ((val2*val4*val5)+val6);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(3932160))+(lidx3*(4096))+(lidx4*(4))+(3)] = ((val3*val4*val5)+val6);
}`;

const E_2_120_64_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 120 */
  let gidx2 = i32(gindex.x); /* 64 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(3932160))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(3932160))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(3932160))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(3932160))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(32))+(((gidx1*(8))+lidx3)/(30))]);
  var  val5 = f32(data3[(gidx1*(8))+lidx3]);
  var  val6 = f32(data4[(gidx1*(8))+lidx3]);
  data0[(gidx0*(3932160))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))] = ((1.0f)/((1.0f)+exp2((((val0*val4*val5)+val6)*((-1.4426950408889634f))))));
  data0[(gidx0*(3932160))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)] = ((1.0f)/((1.0f)+exp2((((val1*val4*val5)+val6)*((-1.4426950408889634f))))));
  data0[(gidx0*(3932160))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)] = ((1.0f)/((1.0f)+exp2((((val2*val4*val5)+val6)*((-1.4426950408889634f))))));
  data0[(gidx0*(3932160))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)] = ((1.0f)/((1.0f)+exp2((((val3*val4*val5)+val6)*((-1.4426950408889634f))))));
}`;

const E_61440_32_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 61440 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx1*(4))+(3)]);
  data0[(gidx0*(128))+(lidx1*(4))] = (val0*val4);
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (val1*val5);
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (val2*val6);
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (val3*val7);
}`;

const r_2_80_8_8_16_960_3_3_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 80 */
  let gidx2 = i32(gindex.x); /* 8 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (960); ridx0++) {
    var  alu0 = f32((lidx4*((-4)))<(0));
    var  alu1 = f32(((gidx2*((-8)))+(lidx3*((-1))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(3932160))+(ridx0*(4096))+((-65))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(3932160))+(ridx0*(4096))+((-1))]), bool(alu0));
    var  alu2 = f32(((gidx2*(8))+lidx3)<(63));
    var  val2 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(3932160))+(ridx0*(4096))+(63)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(3932160))+(ridx0*(4096))+((-64))]), bool(alu1));
    var  val4 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(3932160))+(ridx0*(4096))]);
    var  val5 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(3932160))+(ridx0*(4096))+(64)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(3932160))+(ridx0*(4096))+((-63))]), bool(alu1));
    var  val7 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(3932160))+(ridx0*(4096))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(3932160))+(ridx0*(4096))+(65)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(3932160))+(ridx0*(4096))+((-62))]), bool(alu1));
    var  val10 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(3932160))+(ridx0*(4096))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(3932160))+(ridx0*(4096))+(66)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(3932160))+(ridx0*(4096))+((-61))]), bool(alu1));
    var  val13 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(3932160))+(ridx0*(4096))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(3932160))+(ridx0*(4096))+(67)]), bool(alu2));
    var  alu3 = f32((lidx4*(4))<(60));
    var  val15 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(3932160))+(ridx0*(4096))+((-60))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(3932160))+(ridx0*(4096))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(3932160))+(ridx0*(4096))+(68)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx1*(34560))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(8640)]);
    var  val28 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(8643)]);
    var  val29 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(8646)]);
    var  val30 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(8641)]);
    var  val31 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(8644)]);
    var  val32 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(8647)]);
    var  val33 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(8642)]);
    var  val34 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(8645)]);
    var  val35 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(8648)]);
    var  val36 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(17280)]);
    var  val37 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(17283)]);
    var  val38 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(17286)]);
    var  val39 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(17281)]);
    var  val40 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(17284)]);
    var  val41 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(17287)]);
    var  val42 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(17282)]);
    var  val43 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(17285)]);
    var  val44 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(17288)]);
    var  val45 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(25920)]);
    var  val46 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(25923)]);
    var  val47 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(25926)]);
    var  val48 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(25921)]);
    var  val49 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(25924)]);
    var  val50 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(25927)]);
    var  val51 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(25922)]);
    var  val52 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(25925)]);
    var  val53 = f32(data2[(gidx1*(34560))+(ridx0*(9))+(25928)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))] = acc0;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(3)] = acc3;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(4096)] = acc4;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(4097)] = acc5;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(4098)] = acc6;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(4099)] = acc7;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(8192)] = acc8;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(8193)] = acc9;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(8194)] = acc10;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(8195)] = acc11;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(12288)] = acc12;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(12289)] = acc13;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(12290)] = acc14;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(12291)] = acc15;
}`;

const r_2_4_10_8_16_64_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 4 */
  let gidx2 = i32(gindex.x); /* 10 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(4096))+(lidx3*(40960))+(lidx4*(256))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(4096))+(lidx3*(40960))+(lidx4*(256))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(4096))+(lidx3*(40960))+(lidx4*(256))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(4096))+(lidx3*(40960))+(lidx4*(256))+(ridx0*(4))+(3)]);
    var  val4 = f32(data2[(gidx1*(80))+gidx2+(lidx3*(10))]);
    var  val5 = f32(data3[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(4096))+(lidx3*(40960))+(lidx4*(256))+(ridx0*(4))]);
    var  val6 = f32(data3[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(4096))+(lidx3*(40960))+(lidx4*(256))+(ridx0*(4))+(1)]);
    var  val7 = f32(data3[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(4096))+(lidx3*(40960))+(lidx4*(256))+(ridx0*(4))+(2)]);
    var  val8 = f32(data3[(gidx0*(1310720))+(gidx1*(327680))+(gidx2*(4096))+(lidx3*(40960))+(lidx4*(256))+(ridx0*(4))+(3)]);
    var  val9 = f32(data4[(gidx1*(80))+gidx2+(lidx3*(10))]);
    acc0 = (val0+val4+(val5+val9)+acc0);
    acc0 = (val1+val4+(val6+val9)+acc0);
    acc0 = (val2+val4+(val7+val9)+acc0);
    acc0 = (val3+val4+(val8+val9)+acc0);
  }
  data0[(gidx0*(5120))+(gidx1*(1280))+(gidx2*(16))+(lidx3*(160))+lidx4] = acc0;
}`;

const E_2_80_64_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 80 */
  let gidx2 = i32(gindex.x); /* 64 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  alu0 = f32((gidx1*(8))<(320));
  var  val0 = select(f32((0.0f)), f32(data1[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(1310720))]), bool(alu0));
  var  val1 = select(f32((0.0f)), f32(data1[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(1310720))+(1)]), bool(alu0));
  var  val2 = select(f32((0.0f)), f32(data1[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(1310720))+(2)]), bool(alu0));
  var  val3 = select(f32((0.0f)), f32(data1[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(1310720))+(3)]), bool(alu0));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(8))+lidx3]), bool(alu0));
  var  val5 = select(f32((0.0f)), f32(data3[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(1310720))]), bool(alu0));
  var  val6 = select(f32((0.0f)), f32(data3[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(1310720))+(1)]), bool(alu0));
  var  val7 = select(f32((0.0f)), f32(data3[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(1310720))+(2)]), bool(alu0));
  var  val8 = select(f32((0.0f)), f32(data3[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(1310720))+(3)]), bool(alu0));
  var  val9 = select(f32((0.0f)), f32(data4[(gidx1*(8))+lidx3]), bool(alu0));
  var  val10 = select(f32((0.0f)), f32(data5[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(1310720))]), bool(alu0));
  var  val11 = select(f32((0.0f)), f32(data5[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(1310720))+(1)]), bool(alu0));
  var  val12 = select(f32((0.0f)), f32(data5[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(1310720))+(2)]), bool(alu0));
  var  val13 = select(f32((0.0f)), f32(data5[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(1310720))+(3)]), bool(alu0));
  var  val14 = select(f32((0.0f)), f32(data6[(gidx1*(8))+lidx3]), bool(alu0));
  data0[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))] = (val0+val4+(val5+val9+(val10+val14)));
  data0[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)] = (val1+val4+(val6+val9+(val11+val14)));
  data0[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)] = (val2+val4+(val7+val9+(val12+val14)));
  data0[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)] = (val3+val4+(val8+val9+(val13+val14)));
}`;

const E_2_80_64_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 80 */
  let gidx2 = i32(gindex.x); /* 64 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)]);
  var  alu0 = f32(((gidx1*((-8)))+(lidx3*((-1))))<((-319)));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(1310720))+((-1310720))]), bool(alu0));
  var  val5 = select(f32((0.0f)), f32(data2[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(1310720))+((-1310719))]), bool(alu0));
  var  val6 = select(f32((0.0f)), f32(data2[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(1310720))+((-1310718))]), bool(alu0));
  var  val7 = select(f32((0.0f)), f32(data2[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(1310720))+((-1310717))]), bool(alu0));
  data0[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))] = (val0+val4);
  data0[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)] = (val1+val5);
  data0[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)] = (val2+val6);
  data0[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)] = (val3+val7);
}`;

const r_2_10_64_8_16_160_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 10 */
  let gidx2 = i32(gindex.x); /* 64 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (160); ridx0++) {
    var  val0 = f32(data1[(gidx0*(2621440))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))]);
    var  val1 = f32(data1[(gidx0*(2621440))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(4096)]);
    var  val2 = f32(data1[(gidx0*(2621440))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(8192)]);
    var  val3 = f32(data1[(gidx0*(2621440))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(12288)]);
    var  val4 = f32(data1[(gidx0*(2621440))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(1)]);
    var  val5 = f32(data1[(gidx0*(2621440))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(4097)]);
    var  val6 = f32(data1[(gidx0*(2621440))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(8193)]);
    var  val7 = f32(data1[(gidx0*(2621440))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(12289)]);
    var  val8 = f32(data1[(gidx0*(2621440))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(2)]);
    var  val9 = f32(data1[(gidx0*(2621440))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(4098)]);
    var  val10 = f32(data1[(gidx0*(2621440))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(8194)]);
    var  val11 = f32(data1[(gidx0*(2621440))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(12290)]);
    var  val12 = f32(data1[(gidx0*(2621440))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(3)]);
    var  val13 = f32(data1[(gidx0*(2621440))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(4099)]);
    var  val14 = f32(data1[(gidx0*(2621440))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(8195)]);
    var  val15 = f32(data1[(gidx0*(2621440))+(gidx2*(64))+(lidx4*(4))+(ridx0*(16384))+(12291)]);
    var  val16 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(640)]);
    var  val21 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(641)]);
    var  val22 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(642)]);
    var  val23 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(643)]);
    var  val24 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1280)]);
    var  val25 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1281)]);
    var  val26 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1282)]);
    var  val27 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1283)]);
    var  val28 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1920)]);
    var  val29 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1921)]);
    var  val30 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1922)]);
    var  val31 = f32(data2[(gidx1*(20480))+(lidx3*(2560))+(ridx0*(4))+(1923)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))] = acc0;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(3)] = acc3;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(4096)] = acc4;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(4097)] = acc5;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(4098)] = acc6;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(4099)] = acc7;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(8192)] = acc8;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(8193)] = acc9;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(8194)] = acc10;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(8195)] = acc11;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(12288)] = acc12;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(12289)] = acc13;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(12290)] = acc14;
  data0[(gidx0*(1310720))+(gidx1*(131072))+(gidx2*(64))+(lidx3*(16384))+(lidx4*(4))+(12291)] = acc15;
}`;

const E_2_32_40_4_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 32 */
  let gidx2 = i32(gindex.x); /* 160 */
  let lidx4 = i32(lindex.y); /* 8 */
  let lidx5 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(2621440))+(gidx1*(81920))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))]);
  var  val1 = f32(data1[(gidx0*(2621440))+(gidx1*(81920))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(2621440))+(gidx1*(81920))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(2621440))+(gidx1*(81920))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(3)]);
  var  alu0 = f32(((gidx1*((-20)))+((gidx2/(8))*((-1))))<((-319)));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(81920))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(gidx0*(1310720))+((-1310720))]), bool(alu0));
  var  val5 = select(f32((0.0f)), f32(data2[(gidx1*(81920))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(gidx0*(1310720))+((-1310719))]), bool(alu0));
  var  val6 = select(f32((0.0f)), f32(data2[(gidx1*(81920))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(gidx0*(1310720))+((-1310718))]), bool(alu0));
  var  val7 = select(f32((0.0f)), f32(data2[(gidx1*(81920))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(gidx0*(1310720))+((-1310717))]), bool(alu0));
  data0[(gidx0*(2621440))+(gidx1*(81920))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))] = (val0+val4);
  data0[(gidx0*(2621440))+(gidx1*(81920))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(1)] = (val1+val5);
  data0[(gidx0*(2621440))+(gidx1*(81920))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(2)] = (val2+val6);
  data0[(gidx0*(2621440))+(gidx1*(81920))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(3)] = (val3+val7);
}`;

const r_640_32_64_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 640 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))+(3)]);
    acc0 = (val0+acc0);
    acc0 = (val1+acc0);
    acc0 = (val2+acc0);
    acc0 = (val3+acc0);
  }
  data0[(gidx0*(32))+lidx1] = acc0;
}`;

const r_64_16_20 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 64 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (20); ridx0++) {
    var  val0 = f32(data1[(gidx0*(320))+(lidx1*(20))+ridx0]);
    acc0 = (val0+acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val1 = f32(temp[ridx1]);
    acc1 = (val1+acc1);
  }
  data0[gidx0] = (acc1*(1.220703125e-05f));
}`;

const r_8_5_8_16_64_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 8 */
  let gidx1 = i32(gindex.x); /* 5 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(655360))+(gidx1*(16384))+(lidx2*(81920))+(lidx3*(1024))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(655360))+(gidx1*(16384))+(lidx2*(81920))+(lidx3*(1024))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(655360))+(gidx1*(16384))+(lidx2*(81920))+(lidx3*(1024))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(655360))+(gidx1*(16384))+(lidx2*(81920))+(lidx3*(1024))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(655360))+(gidx1*(16384))+(lidx2*(81920))+(lidx3*(1024))+(ridx0*(4))+(256)]);
    var  val5 = f32(data1[(gidx0*(655360))+(gidx1*(16384))+(lidx2*(81920))+(lidx3*(1024))+(ridx0*(4))+(257)]);
    var  val6 = f32(data1[(gidx0*(655360))+(gidx1*(16384))+(lidx2*(81920))+(lidx3*(1024))+(ridx0*(4))+(258)]);
    var  val7 = f32(data1[(gidx0*(655360))+(gidx1*(16384))+(lidx2*(81920))+(lidx3*(1024))+(ridx0*(4))+(259)]);
    var  val8 = f32(data1[(gidx0*(655360))+(gidx1*(16384))+(lidx2*(81920))+(lidx3*(1024))+(ridx0*(4))+(512)]);
    var  val9 = f32(data1[(gidx0*(655360))+(gidx1*(16384))+(lidx2*(81920))+(lidx3*(1024))+(ridx0*(4))+(513)]);
    var  val10 = f32(data1[(gidx0*(655360))+(gidx1*(16384))+(lidx2*(81920))+(lidx3*(1024))+(ridx0*(4))+(514)]);
    var  val11 = f32(data1[(gidx0*(655360))+(gidx1*(16384))+(lidx2*(81920))+(lidx3*(1024))+(ridx0*(4))+(515)]);
    var  val12 = f32(data1[(gidx0*(655360))+(gidx1*(16384))+(lidx2*(81920))+(lidx3*(1024))+(ridx0*(4))+(768)]);
    var  val13 = f32(data1[(gidx0*(655360))+(gidx1*(16384))+(lidx2*(81920))+(lidx3*(1024))+(ridx0*(4))+(769)]);
    var  val14 = f32(data1[(gidx0*(655360))+(gidx1*(16384))+(lidx2*(81920))+(lidx3*(1024))+(ridx0*(4))+(770)]);
    var  val15 = f32(data1[(gidx0*(655360))+(gidx1*(16384))+(lidx2*(81920))+(lidx3*(1024))+(ridx0*(4))+(771)]);
    var  val16 = f32(data2[(gidx0*(8))+lidx2]);
    var  alu0 = (val0-val16);
    var  alu1 = (val1-val16);
    var  alu2 = (val2-val16);
    var  alu3 = (val3-val16);
    var  alu4 = (val4-val16);
    var  alu5 = (val5-val16);
    var  alu6 = (val6-val16);
    var  alu7 = (val7-val16);
    var  alu8 = (val8-val16);
    var  alu9 = (val9-val16);
    var  alu10 = (val10-val16);
    var  alu11 = (val11-val16);
    var  alu12 = (val12-val16);
    var  alu13 = (val13-val16);
    var  alu14 = (val14-val16);
    var  alu15 = (val15-val16);
    acc0 = fma(alu0,alu0,acc0);
    acc0 = fma(alu1,alu1,acc0);
    acc0 = fma(alu2,alu2,acc0);
    acc0 = fma(alu3,alu3,acc0);
    acc1 = fma(alu4,alu4,acc1);
    acc1 = fma(alu5,alu5,acc1);
    acc1 = fma(alu6,alu6,acc1);
    acc1 = fma(alu7,alu7,acc1);
    acc2 = fma(alu8,alu8,acc2);
    acc2 = fma(alu9,alu9,acc2);
    acc2 = fma(alu10,alu10,acc2);
    acc2 = fma(alu11,alu11,acc2);
    acc3 = fma(alu12,alu12,acc3);
    acc3 = fma(alu13,alu13,acc3);
    acc3 = fma(alu14,alu14,acc3);
    acc3 = fma(alu15,alu15,acc3);
  }
  data0[(gidx0*(2560))+(gidx1*(64))+(lidx2*(320))+(lidx3*(4))] = acc0;
  data0[(gidx0*(2560))+(gidx1*(64))+(lidx2*(320))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(2560))+(gidx1*(64))+(lidx2*(320))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(2560))+(gidx1*(64))+(lidx2*(320))+(lidx3*(4))+(3)] = acc3;
}`;

const r_64_16_20n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,16>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(16) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 64 */
  let lidx1 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (20); ridx0++) {
    var  val0 = f32(data1[(gidx0*(320))+(lidx1*(20))+ridx0]);
    acc0 = (val0+acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (16); ridx1++) {
    var  val1 = f32(temp[ridx1]);
    acc1 = (val1+acc1);
  }
  data0[gidx0] = sqrt(((1.0f)/((acc1*(1.220703125e-05f))+(1e-05f))));
}`;

const E_160_64_2_4_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,4,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 160 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 4 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2621440))+(lidx3*(4096))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2621440))+(lidx3*(4096))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2621440))+(lidx3*(4096))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2621440))+(lidx3*(4096))+(lidx4*(4))+(3)]);
  var  alu0 = f32(((gidx0*((-4)))+(lidx3*((-1))))<((-319)));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx0*(16384))+(gidx1*(64))+(lidx3*(4096))+(lidx4*(4))+(lidx2*(1310720))+((-1310720))]), bool(alu0));
  var  val5 = select(f32((0.0f)), f32(data2[(gidx0*(16384))+(gidx1*(64))+(lidx3*(4096))+(lidx4*(4))+(lidx2*(1310720))+((-1310719))]), bool(alu0));
  var  val6 = select(f32((0.0f)), f32(data2[(gidx0*(16384))+(gidx1*(64))+(lidx3*(4096))+(lidx4*(4))+(lidx2*(1310720))+((-1310718))]), bool(alu0));
  var  val7 = select(f32((0.0f)), f32(data2[(gidx0*(16384))+(gidx1*(64))+(lidx3*(4096))+(lidx4*(4))+(lidx2*(1310720))+((-1310717))]), bool(alu0));
  var  val8 = f32(data3[(lidx2*(32))+(gidx0/(5))]);
  var  val9 = f32(data4[(lidx2*(32))+(gidx0/(5))]);
  var  val10 = f32(data5[(gidx0*(4))+lidx3]);
  var  val11 = f32(data6[(gidx0*(4))+lidx3]);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2621440))+(lidx3*(4096))+(lidx4*(4))] = ((((val0+val4)-val8)*val9*val10)+val11);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2621440))+(lidx3*(4096))+(lidx4*(4))+(1)] = ((((val1+val5)-val8)*val9*val10)+val11);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2621440))+(lidx3*(4096))+(lidx4*(4))+(2)] = ((((val2+val6)-val8)*val9*val10)+val11);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2621440))+(lidx3*(4096))+(lidx4*(4))+(3)] = ((((val3+val7)-val8)*val9*val10)+val11);
}`;

const E_2_80_64_8_16_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 80 */
  let gidx2 = i32(gindex.x); /* 64 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)]);
  var  alu0 = f32(((gidx1*((-8)))+(lidx3*((-1))))<((-319)));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(1310720))+((-1310720))]), bool(alu0));
  var  val5 = select(f32((0.0f)), f32(data2[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(1310720))+((-1310719))]), bool(alu0));
  var  val6 = select(f32((0.0f)), f32(data2[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(1310720))+((-1310718))]), bool(alu0));
  var  val7 = select(f32((0.0f)), f32(data2[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(1310720))+((-1310717))]), bool(alu0));
  var  val8 = f32(data3[(gidx0*(32))+(((gidx1*(8))+lidx3)/(20))]);
  var  val9 = f32(data4[(gidx0*(32))+(((gidx1*(8))+lidx3)/(20))]);
  var  val10 = f32(data5[(gidx1*(8))+lidx3]);
  var  val11 = f32(data6[(gidx1*(8))+lidx3]);
  data0[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))] = ((1.0f)/((1.0f)+exp2((((((val0+val4)-val8)*val9*val10)+val11)*((-1.4426950408889634f))))));
  data0[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)] = ((1.0f)/((1.0f)+exp2((((((val1+val5)-val8)*val9*val10)+val11)*((-1.4426950408889634f))))));
  data0[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)] = ((1.0f)/((1.0f)+exp2((((((val2+val6)-val8)*val9*val10)+val11)*((-1.4426950408889634f))))));
  data0[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)] = ((1.0f)/((1.0f)+exp2((((((val3+val7)-val8)*val9*val10)+val11)*((-1.4426950408889634f))))));
}`;

const E_40960_32_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 40960 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx1*(4))+(3)]);
  data0[(gidx0*(128))+(lidx1*(4))] = (val0*val4);
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (val1*val5);
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (val2*val6);
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (val3*val7);
}`;

const r_2_80_8_8_16_640_3_3_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 80 */
  let gidx2 = i32(gindex.x); /* 8 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (640); ridx0++) {
    var  alu0 = f32((lidx4*((-4)))<(0));
    var  alu1 = f32(((gidx2*((-8)))+(lidx3*((-1))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(2621440))+(ridx0*(4096))+((-65))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(2621440))+(ridx0*(4096))+((-1))]), bool(alu0));
    var  alu2 = f32(((gidx2*(8))+lidx3)<(63));
    var  val2 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(2621440))+(ridx0*(4096))+(63)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(2621440))+(ridx0*(4096))+((-64))]), bool(alu1));
    var  val4 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(2621440))+(ridx0*(4096))]);
    var  val5 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(2621440))+(ridx0*(4096))+(64)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(2621440))+(ridx0*(4096))+((-63))]), bool(alu1));
    var  val7 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(2621440))+(ridx0*(4096))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(2621440))+(ridx0*(4096))+(65)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(2621440))+(ridx0*(4096))+((-62))]), bool(alu1));
    var  val10 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(2621440))+(ridx0*(4096))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(2621440))+(ridx0*(4096))+(66)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(2621440))+(ridx0*(4096))+((-61))]), bool(alu1));
    var  val13 = f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(2621440))+(ridx0*(4096))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(2621440))+(ridx0*(4096))+(67)]), bool(alu2));
    var  alu3 = f32((lidx4*(4))<(60));
    var  val15 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(2621440))+(ridx0*(4096))+((-60))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(2621440))+(ridx0*(4096))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(lidx4*(4))+(gidx2*(512))+(lidx3*(64))+(gidx0*(2621440))+(ridx0*(4096))+(68)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx1*(23040))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5760)]);
    var  val28 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5763)]);
    var  val29 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5766)]);
    var  val30 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5761)]);
    var  val31 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5764)]);
    var  val32 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5767)]);
    var  val33 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5762)]);
    var  val34 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5765)]);
    var  val35 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(5768)]);
    var  val36 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11520)]);
    var  val37 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11523)]);
    var  val38 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11526)]);
    var  val39 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11521)]);
    var  val40 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11524)]);
    var  val41 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11527)]);
    var  val42 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11522)]);
    var  val43 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11525)]);
    var  val44 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(11528)]);
    var  val45 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17280)]);
    var  val46 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17283)]);
    var  val47 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17286)]);
    var  val48 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17281)]);
    var  val49 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17284)]);
    var  val50 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17287)]);
    var  val51 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17282)]);
    var  val52 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17285)]);
    var  val53 = f32(data2[(gidx1*(23040))+(ridx0*(9))+(17288)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))] = acc0;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(3)] = acc3;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(4096)] = acc4;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(4097)] = acc5;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(4098)] = acc6;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(4099)] = acc7;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(8192)] = acc8;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(8193)] = acc9;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(8194)] = acc10;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(8195)] = acc11;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(12288)] = acc12;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(12289)] = acc13;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(12290)] = acc14;
  data0[(gidx0*(1310720))+(gidx1*(16384))+(gidx2*(512))+(lidx3*(64))+(lidx4*(4))+(12291)] = acc15;
}`;

const E_2_80_64_8_16_4n3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 80 */
  let gidx2 = i32(gindex.x); /* 64 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  alu0 = f32(((gidx1*((-8)))+(lidx3*((-1))))<((-319)));
  var  val0 = select(f32((0.0f)), f32(data1[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(1310720))+((-1310720))]), bool(alu0));
  var  val1 = select(f32((0.0f)), f32(data1[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(1310720))+((-1310719))]), bool(alu0));
  var  val2 = select(f32((0.0f)), f32(data1[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(1310720))+((-1310718))]), bool(alu0));
  var  val3 = select(f32((0.0f)), f32(data1[(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(gidx0*(1310720))+((-1310717))]), bool(alu0));
  var  val4 = select(f32((0.0f)), f32(data2[(gidx1*(8))+lidx3+((-320))]), bool(alu0));
  data0[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))] = (val0+val4);
  data0[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)] = (val1+val4);
  data0[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)] = (val2+val4);
  data0[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)] = (val3+val4);
}`;

const E_40960_32_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 40960 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx1*(4))+(3)]);
  data0[(gidx0*(128))+(lidx1*(4))] = (val0+val4);
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (val1+val5);
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (val2+val6);
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (val3+val7);
}`;

const E_40960_32_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 40960 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx1*(4))+(3)]);
  data0[(gidx0*(128))+(lidx1*(4))] = (val0+val4);
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (val1+val5);
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (val2+val6);
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (val3+val7);
}`;

const E_160_64_2_4_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,4,2) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 160 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.z); /* 2 */
  let lidx3 = i32(lindex.y); /* 4 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2621440))+(lidx3*(4096))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2621440))+(lidx3*(4096))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2621440))+(lidx3*(4096))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2621440))+(lidx3*(4096))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2621440))+(lidx3*(4096))+(lidx4*(4))]);
  var  val5 = f32(data2[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2621440))+(lidx3*(4096))+(lidx4*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2621440))+(lidx3*(4096))+(lidx4*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2621440))+(lidx3*(4096))+(lidx4*(4))+(3)]);
  var  val8 = f32(data3[(lidx2*(32))+(gidx0/(5))]);
  var  val9 = f32(data4[(lidx2*(32))+(gidx0/(5))]);
  var  val10 = f32(data5[(gidx0*(4))+lidx3]);
  var  val11 = f32(data6[(gidx0*(4))+lidx3]);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2621440))+(lidx3*(4096))+(lidx4*(4))] = ((((val0+val4)-val8)*val9*val10)+val11);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2621440))+(lidx3*(4096))+(lidx4*(4))+(1)] = ((((val1+val5)-val8)*val9*val10)+val11);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2621440))+(lidx3*(4096))+(lidx4*(4))+(2)] = ((((val2+val6)-val8)*val9*val10)+val11);
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2621440))+(lidx3*(4096))+(lidx4*(4))+(3)] = ((((val3+val7)-val8)*val9*val10)+val11);
}`;

const E_2_80_64_8_16_4n4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 80 */
  let gidx2 = i32(gindex.x); /* 64 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))]);
  var  val5 = f32(data2[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)]);
  var  val8 = f32(data3[(gidx0*(32))+(((gidx1*(8))+lidx3)/(20))]);
  var  val9 = f32(data4[(gidx0*(32))+(((gidx1*(8))+lidx3)/(20))]);
  var  val10 = f32(data5[(gidx1*(8))+lidx3]);
  var  val11 = f32(data6[(gidx1*(8))+lidx3]);
  data0[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))] = ((1.0f)/((1.0f)+exp2((((((val0+val4)-val8)*val9*val10)+val11)*((-1.4426950408889634f))))));
  data0[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(1)] = ((1.0f)/((1.0f)+exp2((((((val1+val5)-val8)*val9*val10)+val11)*((-1.4426950408889634f))))));
  data0[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(2)] = ((1.0f)/((1.0f)+exp2((((((val2+val6)-val8)*val9*val10)+val11)*((-1.4426950408889634f))))));
  data0[(gidx0*(2621440))+(gidx1*(32768))+(gidx2*(64))+(lidx3*(4096))+(lidx4*(4))+(3)] = ((1.0f)/((1.0f)+exp2((((((val3+val7)-val8)*val9*val10)+val11)*((-1.4426950408889634f))))));
}`;

const E_2_32_20_4_8_16_4n3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 2 */
  let gidx1 = i32(gindex.y); /* 32 */
  let gidx2 = i32(gindex.x); /* 80 */
  let lidx4 = i32(lindex.y); /* 8 */
  let lidx5 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))]);
  var  val1 = f32(data1[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(3)]);
  var  val4 = f32(data2[(gidx1*(10))+(gidx2/(8))]);
  var  val5 = f32(data3[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))]);
  var  val6 = f32(data3[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(1)]);
  var  val7 = f32(data3[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(2)]);
  var  val8 = f32(data3[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(3)]);
  var  val9 = f32(data4[(gidx1*(10))+(gidx2/(8))]);
  data0[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))] = (val0+val4+(val5+val9));
  data0[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(1)] = (val1+val4+(val6+val9));
  data0[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(2)] = (val2+val4+(val7+val9));
  data0[(gidx0*(1310720))+(gidx1*(40960))+((gidx2/(4))*(2048))+((gidx2%(4))*(64))+(lidx4*(256))+(lidx5*(4))+(3)] = (val3+val4+(val8+val9));
}`;

const r_2_8_8_16_320_3_3_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 2 */
  let gidx1 = i32(gindex.x); /* 8 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (320); ridx0++) {
    var  alu0 = f32((lidx3*((-4)))<(0));
    var  alu1 = f32(((gidx1*((-8)))+(lidx2*((-1))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(gidx0*(1310720))+(ridx0*(4096))+((-65))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(gidx0*(1310720))+(ridx0*(4096))+((-1))]), bool(alu0));
    var  alu2 = f32(((gidx1*(8))+lidx2)<(63));
    var  val2 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(gidx0*(1310720))+(ridx0*(4096))+(63)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(gidx0*(1310720))+(ridx0*(4096))+((-64))]), bool(alu1));
    var  val4 = f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(gidx0*(1310720))+(ridx0*(4096))]);
    var  val5 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(gidx0*(1310720))+(ridx0*(4096))+(64)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(gidx0*(1310720))+(ridx0*(4096))+((-63))]), bool(alu1));
    var  val7 = f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(gidx0*(1310720))+(ridx0*(4096))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(gidx0*(1310720))+(ridx0*(4096))+(65)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(gidx0*(1310720))+(ridx0*(4096))+((-62))]), bool(alu1));
    var  val10 = f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(gidx0*(1310720))+(ridx0*(4096))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(gidx0*(1310720))+(ridx0*(4096))+(66)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(gidx0*(1310720))+(ridx0*(4096))+((-61))]), bool(alu1));
    var  val13 = f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(gidx0*(1310720))+(ridx0*(4096))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(gidx0*(1310720))+(ridx0*(4096))+(67)]), bool(alu2));
    var  alu3 = f32((lidx3*(4))<(60));
    var  val15 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(gidx0*(1310720))+(ridx0*(4096))+((-60))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(gidx0*(1310720))+(ridx0*(4096))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(gidx0*(1310720))+(ridx0*(4096))+(68)]), bool((alu3*alu2)));
    var  val18 = f32(data2[ridx0*(9)]);
    var  val19 = f32(data2[(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(ridx0*(9))+(2880)]);
    var  val28 = f32(data2[(ridx0*(9))+(2883)]);
    var  val29 = f32(data2[(ridx0*(9))+(2886)]);
    var  val30 = f32(data2[(ridx0*(9))+(2881)]);
    var  val31 = f32(data2[(ridx0*(9))+(2884)]);
    var  val32 = f32(data2[(ridx0*(9))+(2887)]);
    var  val33 = f32(data2[(ridx0*(9))+(2882)]);
    var  val34 = f32(data2[(ridx0*(9))+(2885)]);
    var  val35 = f32(data2[(ridx0*(9))+(2888)]);
    var  val36 = f32(data2[(ridx0*(9))+(5760)]);
    var  val37 = f32(data2[(ridx0*(9))+(5763)]);
    var  val38 = f32(data2[(ridx0*(9))+(5766)]);
    var  val39 = f32(data2[(ridx0*(9))+(5761)]);
    var  val40 = f32(data2[(ridx0*(9))+(5764)]);
    var  val41 = f32(data2[(ridx0*(9))+(5767)]);
    var  val42 = f32(data2[(ridx0*(9))+(5762)]);
    var  val43 = f32(data2[(ridx0*(9))+(5765)]);
    var  val44 = f32(data2[(ridx0*(9))+(5768)]);
    var  val45 = f32(data2[(ridx0*(9))+(8640)]);
    var  val46 = f32(data2[(ridx0*(9))+(8643)]);
    var  val47 = f32(data2[(ridx0*(9))+(8646)]);
    var  val48 = f32(data2[(ridx0*(9))+(8641)]);
    var  val49 = f32(data2[(ridx0*(9))+(8644)]);
    var  val50 = f32(data2[(ridx0*(9))+(8647)]);
    var  val51 = f32(data2[(ridx0*(9))+(8642)]);
    var  val52 = f32(data2[(ridx0*(9))+(8645)]);
    var  val53 = f32(data2[(ridx0*(9))+(8648)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))] = acc0;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(3)] = acc3;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(4096)] = acc4;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(4097)] = acc5;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(4098)] = acc6;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(4099)] = acc7;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(8192)] = acc8;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(8193)] = acc9;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(8194)] = acc10;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(8195)] = acc11;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(12288)] = acc12;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(12289)] = acc13;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(12290)] = acc14;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(12291)] = acc15;
}`;

const E_64_4_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,4) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 64 */
  let lidx1 = i32(lindex.y); /* 4 */
  let lidx2 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(64))+(lidx1*(4096))+(lidx2*(4))]);
  var  val1 = f32(data1[(gidx0*(64))+(lidx1*(4096))+(lidx2*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(64))+(lidx1*(4096))+(lidx2*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(64))+(lidx1*(4096))+(lidx2*(4))+(3)]);
  var  val4 = f32(data2[lidx1]);
  var  val5 = f32(data1[(gidx0*(64))+(lidx1*(4096))+(lidx2*(4))+(16384)]);
  var  val6 = f32(data1[(gidx0*(64))+(lidx1*(4096))+(lidx2*(4))+(16385)]);
  var  val7 = f32(data1[(gidx0*(64))+(lidx1*(4096))+(lidx2*(4))+(16386)]);
  var  val8 = f32(data1[(gidx0*(64))+(lidx1*(4096))+(lidx2*(4))+(16387)]);
  var  alu0 = (val0+val4);
  var  alu1 = (val1+val4);
  var  alu2 = (val2+val4);
  var  alu3 = (val3+val4);
  data0[(gidx0*(64))+(lidx1*(4096))+(lidx2*(4))] = (alu0+((7.5f)*((val5+val4)-alu0)));
  data0[(gidx0*(64))+(lidx1*(4096))+(lidx2*(4))+(1)] = (alu1+((7.5f)*((val6+val4)-alu1)));
  data0[(gidx0*(64))+(lidx1*(4096))+(lidx2*(4))+(2)] = (alu2+((7.5f)*((val7+val4)-alu2)));
  data0[(gidx0*(64))+(lidx1*(4096))+(lidx2*(4))+(3)] = (alu3+((7.5f)*((val8+val4)-alu3)));
}`;

    return {
      "setup": async (device, safetensor) => {
        const metadata = getTensorMetadata(safetensor[0]);

        const buf_0 = createEmptyBuf(device, 10485760);;
    const input0 = createEmptyBuf(device, 65536);;
    const buf_1 = createWeightBuf(device, 46080, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.0.0.weight'], 'model.diffusion_model.input_blocks.0.0.weight'));
    const buf_2 = createEmptyBuf(device, 1073741824);;
    const buf_3 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.0.0.bias'], 'model.diffusion_model.input_blocks.0.0.bias'));
    const buf_4 = createEmptyBuf(device, 1073741824);;
    const buf_5 = createEmptyBuf(device, 41943040);;
    const buf_6 = createEmptyBuf(device, 15728640);;
    const buf_7 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.0.in_layers.0.weight'], 'model.diffusion_model.input_blocks.1.0.in_layers.0.weight'));
    const buf_8 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.0.in_layers.0.bias'], 'model.diffusion_model.input_blocks.1.0.in_layers.0.bias'));
    const buf_9 = createEmptyBuf(device, 41943040);;
    const buf_10 = createWeightBuf(device, 3686400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.0.in_layers.2.weight'], 'model.diffusion_model.input_blocks.1.0.in_layers.2.weight'));
    const input1 = createEmptyBuf(device, 4);;
    const buf_11 = createEmptyBuf(device, 10485760);;
    const buf_12 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.time_embed.0.weight'], 'model.diffusion_model.time_embed.0.weight'));
    const buf_13 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.time_embed.0.bias'], 'model.diffusion_model.time_embed.0.bias'));
    const buf_14 = createEmptyBuf(device, 5120);;
    const buf_15 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.time_embed.2.weight'], 'model.diffusion_model.time_embed.2.weight'));
    const buf_16 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.time_embed.2.bias'], 'model.diffusion_model.time_embed.2.bias'));
    const buf_17 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.0.emb_layers.1.weight'], 'model.diffusion_model.input_blocks.1.0.emb_layers.1.weight'));
    const buf_18 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.0.emb_layers.1.bias'], 'model.diffusion_model.input_blocks.1.0.emb_layers.1.bias'));
    const buf_19 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.0.in_layers.2.bias'], 'model.diffusion_model.input_blocks.1.0.in_layers.2.bias'));
    const buf_20 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.0.out_layers.0.weight'], 'model.diffusion_model.input_blocks.1.0.out_layers.0.weight'));
    const buf_21 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.0.out_layers.0.bias'], 'model.diffusion_model.input_blocks.1.0.out_layers.0.bias'));
    const buf_22 = createWeightBuf(device, 3686400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.0.out_layers.3.weight'], 'model.diffusion_model.input_blocks.1.0.out_layers.3.weight'));
    const buf_23 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.0.out_layers.3.bias'], 'model.diffusion_model.input_blocks.1.0.out_layers.3.bias'));
    const buf_24 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.norm.weight'], 'model.diffusion_model.input_blocks.1.1.norm.weight'));
    const buf_25 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.norm.bias'], 'model.diffusion_model.input_blocks.1.1.norm.bias'));
    const buf_26 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.proj_in.weight'], 'model.diffusion_model.input_blocks.1.1.proj_in.weight'));
    const buf_27 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.proj_in.bias'], 'model.diffusion_model.input_blocks.1.1.proj_in.bias'));
    const buf_28 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.norm1.weight'));
    const buf_29 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.norm1.bias'));
    const buf_30 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_31 = createEmptyBuf(device, 10485760);;
    const buf_32 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_33 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_34 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_35 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_36 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.norm2.weight'));
    const buf_37 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.norm2.bias'));
    const buf_38 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_39 = createEmptyBuf(device, 473088);;
    const input2 = createEmptyBuf(device, 236544);;
    const input3 = createEmptyBuf(device, 236544);;
    const buf_40 = createWeightBuf(device, 983040, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_41 = createWeightBuf(device, 983040, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_42 = createEmptyBuf(device, 10485760);;
    const buf_43 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_44 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_45 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.norm3.weight'));
    const buf_46 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.norm3.bias'));
    const buf_47 = createWeightBuf(device, 3276800, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_48 = createWeightBuf(device, 10240, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_49 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_50 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.input_blocks.1.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_51 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.proj_out.weight'], 'model.diffusion_model.input_blocks.1.1.proj_out.weight'));
    const buf_52 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.1.1.proj_out.bias'], 'model.diffusion_model.input_blocks.1.1.proj_out.bias'));
    const buf_53 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.0.in_layers.0.weight'], 'model.diffusion_model.input_blocks.2.0.in_layers.0.weight'));
    const buf_54 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.0.in_layers.0.bias'], 'model.diffusion_model.input_blocks.2.0.in_layers.0.bias'));
    const buf_55 = createWeightBuf(device, 3686400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.0.in_layers.2.weight'], 'model.diffusion_model.input_blocks.2.0.in_layers.2.weight'));
    const buf_56 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.0.emb_layers.1.weight'], 'model.diffusion_model.input_blocks.2.0.emb_layers.1.weight'));
    const buf_57 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.0.emb_layers.1.bias'], 'model.diffusion_model.input_blocks.2.0.emb_layers.1.bias'));
    const buf_58 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.0.in_layers.2.bias'], 'model.diffusion_model.input_blocks.2.0.in_layers.2.bias'));
    const buf_59 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.0.out_layers.0.weight'], 'model.diffusion_model.input_blocks.2.0.out_layers.0.weight'));
    const buf_60 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.0.out_layers.0.bias'], 'model.diffusion_model.input_blocks.2.0.out_layers.0.bias'));
    const buf_61 = createWeightBuf(device, 3686400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.0.out_layers.3.weight'], 'model.diffusion_model.input_blocks.2.0.out_layers.3.weight'));
    const buf_62 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.0.out_layers.3.bias'], 'model.diffusion_model.input_blocks.2.0.out_layers.3.bias'));
    const buf_63 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.norm.weight'], 'model.diffusion_model.input_blocks.2.1.norm.weight'));
    const buf_64 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.norm.bias'], 'model.diffusion_model.input_blocks.2.1.norm.bias'));
    const buf_65 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.proj_in.weight'], 'model.diffusion_model.input_blocks.2.1.proj_in.weight'));
    const buf_66 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.proj_in.bias'], 'model.diffusion_model.input_blocks.2.1.proj_in.bias'));
    const buf_67 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.norm1.weight'));
    const buf_68 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.norm1.bias'));
    const buf_69 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_70 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_71 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_72 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_73 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_74 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.norm2.weight'));
    const buf_75 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.norm2.bias'));
    const buf_76 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_77 = createWeightBuf(device, 983040, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_78 = createWeightBuf(device, 983040, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_79 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_80 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_81 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.norm3.weight'));
    const buf_82 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.norm3.bias'));
    const buf_83 = createWeightBuf(device, 3276800, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_84 = createWeightBuf(device, 10240, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_85 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_86 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.input_blocks.2.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_87 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.proj_out.weight'], 'model.diffusion_model.input_blocks.2.1.proj_out.weight'));
    const buf_88 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.2.1.proj_out.bias'], 'model.diffusion_model.input_blocks.2.1.proj_out.bias'));
    const buf_89 = createEmptyBuf(device, 2621440);;
    const buf_90 = createWeightBuf(device, 3686400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.3.0.op.weight'], 'model.diffusion_model.input_blocks.3.0.op.weight'));
    const buf_91 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.3.0.op.bias'], 'model.diffusion_model.input_blocks.3.0.op.bias'));
    const buf_92 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.0.in_layers.0.weight'], 'model.diffusion_model.input_blocks.4.0.in_layers.0.weight'));
    const buf_93 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.0.in_layers.0.bias'], 'model.diffusion_model.input_blocks.4.0.in_layers.0.bias'));
    const buf_94 = createWeightBuf(device, 3276800, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.0.emb_layers.1.weight'], 'model.diffusion_model.input_blocks.4.0.emb_layers.1.weight'));
    const buf_95 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.0.emb_layers.1.bias'], 'model.diffusion_model.input_blocks.4.0.emb_layers.1.bias'));
    const buf_96 = createWeightBuf(device, 7372800, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.0.in_layers.2.weight'], 'model.diffusion_model.input_blocks.4.0.in_layers.2.weight'));
    const buf_97 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.0.in_layers.2.bias'], 'model.diffusion_model.input_blocks.4.0.in_layers.2.bias'));
    const buf_98 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.0.out_layers.0.weight'], 'model.diffusion_model.input_blocks.4.0.out_layers.0.weight'));
    const buf_99 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.0.out_layers.0.bias'], 'model.diffusion_model.input_blocks.4.0.out_layers.0.bias'));
    const buf_100 = createWeightBuf(device, 14745600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.0.out_layers.3.weight'], 'model.diffusion_model.input_blocks.4.0.out_layers.3.weight'));
    const buf_101 = createWeightBuf(device, 819200, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.0.skip_connection.weight'], 'model.diffusion_model.input_blocks.4.0.skip_connection.weight'));
    const buf_102 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.0.skip_connection.bias'], 'model.diffusion_model.input_blocks.4.0.skip_connection.bias'));
    const buf_103 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.0.out_layers.3.bias'], 'model.diffusion_model.input_blocks.4.0.out_layers.3.bias'));
    const buf_104 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.norm.weight'], 'model.diffusion_model.input_blocks.4.1.norm.weight'));
    const buf_105 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.norm.bias'], 'model.diffusion_model.input_blocks.4.1.norm.bias'));
    const buf_106 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.proj_in.weight'], 'model.diffusion_model.input_blocks.4.1.proj_in.weight'));
    const buf_107 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.proj_in.bias'], 'model.diffusion_model.input_blocks.4.1.proj_in.bias'));
    const buf_108 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.norm1.weight'));
    const buf_109 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.norm1.bias'));
    const buf_110 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_111 = createEmptyBuf(device, 10485760);;
    const buf_112 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_113 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_114 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_115 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_116 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.norm2.weight'));
    const buf_117 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.norm2.bias'));
    const buf_118 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_119 = createWeightBuf(device, 1966080, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_120 = createWeightBuf(device, 1966080, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_121 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_122 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_123 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.norm3.weight'));
    const buf_124 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.norm3.bias'));
    const buf_125 = createWeightBuf(device, 13107200, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_126 = createWeightBuf(device, 20480, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_127 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_128 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.input_blocks.4.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_129 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.proj_out.weight'], 'model.diffusion_model.input_blocks.4.1.proj_out.weight'));
    const buf_130 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.4.1.proj_out.bias'], 'model.diffusion_model.input_blocks.4.1.proj_out.bias'));
    const buf_131 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.0.in_layers.0.weight'], 'model.diffusion_model.input_blocks.5.0.in_layers.0.weight'));
    const buf_132 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.0.in_layers.0.bias'], 'model.diffusion_model.input_blocks.5.0.in_layers.0.bias'));
    const buf_133 = createWeightBuf(device, 3276800, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.0.emb_layers.1.weight'], 'model.diffusion_model.input_blocks.5.0.emb_layers.1.weight'));
    const buf_134 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.0.emb_layers.1.bias'], 'model.diffusion_model.input_blocks.5.0.emb_layers.1.bias'));
    const buf_135 = createWeightBuf(device, 14745600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.0.in_layers.2.weight'], 'model.diffusion_model.input_blocks.5.0.in_layers.2.weight'));
    const buf_136 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.0.in_layers.2.bias'], 'model.diffusion_model.input_blocks.5.0.in_layers.2.bias'));
    const buf_137 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.0.out_layers.0.weight'], 'model.diffusion_model.input_blocks.5.0.out_layers.0.weight'));
    const buf_138 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.0.out_layers.0.bias'], 'model.diffusion_model.input_blocks.5.0.out_layers.0.bias'));
    const buf_139 = createWeightBuf(device, 14745600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.0.out_layers.3.weight'], 'model.diffusion_model.input_blocks.5.0.out_layers.3.weight'));
    const buf_140 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.0.out_layers.3.bias'], 'model.diffusion_model.input_blocks.5.0.out_layers.3.bias'));
    const buf_141 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.norm.weight'], 'model.diffusion_model.input_blocks.5.1.norm.weight'));
    const buf_142 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.norm.bias'], 'model.diffusion_model.input_blocks.5.1.norm.bias'));
    const buf_143 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.proj_in.weight'], 'model.diffusion_model.input_blocks.5.1.proj_in.weight'));
    const buf_144 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.proj_in.bias'], 'model.diffusion_model.input_blocks.5.1.proj_in.bias'));
    const buf_145 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.norm1.weight'));
    const buf_146 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.norm1.bias'));
    const buf_147 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_148 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_149 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_150 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_151 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_152 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.norm2.weight'));
    const buf_153 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.norm2.bias'));
    const buf_154 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_155 = createWeightBuf(device, 1966080, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_156 = createWeightBuf(device, 1966080, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_157 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_158 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_159 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.norm3.weight'));
    const buf_160 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.norm3.bias'));
    const buf_161 = createWeightBuf(device, 13107200, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_162 = createWeightBuf(device, 20480, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_163 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_164 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.input_blocks.5.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_165 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.proj_out.weight'], 'model.diffusion_model.input_blocks.5.1.proj_out.weight'));
    const buf_166 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.5.1.proj_out.bias'], 'model.diffusion_model.input_blocks.5.1.proj_out.bias'));
    const buf_167 = createEmptyBuf(device, 1310720);;
    const buf_168 = createWeightBuf(device, 14745600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.6.0.op.weight'], 'model.diffusion_model.input_blocks.6.0.op.weight'));
    const buf_169 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.6.0.op.bias'], 'model.diffusion_model.input_blocks.6.0.op.bias'));
    const buf_170 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.0.in_layers.0.weight'], 'model.diffusion_model.input_blocks.7.0.in_layers.0.weight'));
    const buf_171 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.0.in_layers.0.bias'], 'model.diffusion_model.input_blocks.7.0.in_layers.0.bias'));
    const buf_172 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.0.emb_layers.1.weight'], 'model.diffusion_model.input_blocks.7.0.emb_layers.1.weight'));
    const buf_173 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.0.emb_layers.1.bias'], 'model.diffusion_model.input_blocks.7.0.emb_layers.1.bias'));
    const buf_174 = createWeightBuf(device, 29491200, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.0.in_layers.2.weight'], 'model.diffusion_model.input_blocks.7.0.in_layers.2.weight'));
    const buf_175 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.0.in_layers.2.bias'], 'model.diffusion_model.input_blocks.7.0.in_layers.2.bias'));
    const buf_176 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.0.out_layers.0.weight'], 'model.diffusion_model.input_blocks.7.0.out_layers.0.weight'));
    const buf_177 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.0.out_layers.0.bias'], 'model.diffusion_model.input_blocks.7.0.out_layers.0.bias'));
    const buf_178 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.0.out_layers.3.weight'], 'model.diffusion_model.input_blocks.7.0.out_layers.3.weight'));
    const buf_179 = createEmptyBuf(device, 5242880);;
    const buf_180 = createWeightBuf(device, 3276800, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.0.skip_connection.weight'], 'model.diffusion_model.input_blocks.7.0.skip_connection.weight'));
    const buf_181 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.0.skip_connection.bias'], 'model.diffusion_model.input_blocks.7.0.skip_connection.bias'));
    const buf_182 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.0.out_layers.3.bias'], 'model.diffusion_model.input_blocks.7.0.out_layers.3.bias'));
    const buf_183 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.norm.weight'], 'model.diffusion_model.input_blocks.7.1.norm.weight'));
    const buf_184 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.norm.bias'], 'model.diffusion_model.input_blocks.7.1.norm.bias'));
    const buf_185 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.proj_in.weight'], 'model.diffusion_model.input_blocks.7.1.proj_in.weight'));
    const buf_186 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.proj_in.bias'], 'model.diffusion_model.input_blocks.7.1.proj_in.bias'));
    const buf_187 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.norm1.weight'));
    const buf_188 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.norm1.bias'));
    const buf_189 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_190 = createEmptyBuf(device, 2621440);;
    const buf_191 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_192 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_193 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_194 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_195 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.norm2.weight'));
    const buf_196 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.norm2.bias'));
    const buf_197 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_198 = createWeightBuf(device, 3932160, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_199 = createWeightBuf(device, 3932160, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_200 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_201 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_202 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.norm3.weight'));
    const buf_203 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.norm3.bias'));
    const buf_204 = createWeightBuf(device, 52428800, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_205 = createWeightBuf(device, 40960, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_206 = createWeightBuf(device, 26214400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_207 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.input_blocks.7.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_208 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.proj_out.weight'], 'model.diffusion_model.input_blocks.7.1.proj_out.weight'));
    const buf_209 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.7.1.proj_out.bias'], 'model.diffusion_model.input_blocks.7.1.proj_out.bias'));
    const buf_210 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.0.in_layers.0.weight'], 'model.diffusion_model.input_blocks.8.0.in_layers.0.weight'));
    const buf_211 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.0.in_layers.0.bias'], 'model.diffusion_model.input_blocks.8.0.in_layers.0.bias'));
    const buf_212 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.0.emb_layers.1.weight'], 'model.diffusion_model.input_blocks.8.0.emb_layers.1.weight'));
    const buf_213 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.0.emb_layers.1.bias'], 'model.diffusion_model.input_blocks.8.0.emb_layers.1.bias'));
    const buf_214 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.0.in_layers.2.weight'], 'model.diffusion_model.input_blocks.8.0.in_layers.2.weight'));
    const buf_215 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.0.in_layers.2.bias'], 'model.diffusion_model.input_blocks.8.0.in_layers.2.bias'));
    const buf_216 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.0.out_layers.0.weight'], 'model.diffusion_model.input_blocks.8.0.out_layers.0.weight'));
    const buf_217 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.0.out_layers.0.bias'], 'model.diffusion_model.input_blocks.8.0.out_layers.0.bias'));
    const buf_218 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.0.out_layers.3.weight'], 'model.diffusion_model.input_blocks.8.0.out_layers.3.weight'));
    const buf_219 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.0.out_layers.3.bias'], 'model.diffusion_model.input_blocks.8.0.out_layers.3.bias'));
    const buf_220 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.norm.weight'], 'model.diffusion_model.input_blocks.8.1.norm.weight'));
    const buf_221 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.norm.bias'], 'model.diffusion_model.input_blocks.8.1.norm.bias'));
    const buf_222 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.proj_in.weight'], 'model.diffusion_model.input_blocks.8.1.proj_in.weight'));
    const buf_223 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.proj_in.bias'], 'model.diffusion_model.input_blocks.8.1.proj_in.bias'));
    const buf_224 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.norm1.weight'));
    const buf_225 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.norm1.bias'));
    const buf_226 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_227 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_228 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_229 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_230 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_231 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.norm2.weight'));
    const buf_232 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.norm2.bias'));
    const buf_233 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_234 = createWeightBuf(device, 3932160, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_235 = createWeightBuf(device, 3932160, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_236 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_237 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_238 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.norm3.weight'));
    const buf_239 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.norm3.bias'));
    const buf_240 = createWeightBuf(device, 52428800, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_241 = createWeightBuf(device, 40960, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_242 = createWeightBuf(device, 26214400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_243 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.input_blocks.8.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_244 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.proj_out.weight'], 'model.diffusion_model.input_blocks.8.1.proj_out.weight'));
    const buf_245 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.8.1.proj_out.bias'], 'model.diffusion_model.input_blocks.8.1.proj_out.bias'));
    const buf_246 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.9.0.op.weight'], 'model.diffusion_model.input_blocks.9.0.op.weight'));
    const buf_247 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.9.0.op.bias'], 'model.diffusion_model.input_blocks.9.0.op.bias'));
    const buf_248 = createEmptyBuf(device, 2621440);;
    const buf_249 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.10.0.in_layers.0.weight'], 'model.diffusion_model.input_blocks.10.0.in_layers.0.weight'));
    const buf_250 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.10.0.in_layers.0.bias'], 'model.diffusion_model.input_blocks.10.0.in_layers.0.bias'));
    const buf_251 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.10.0.emb_layers.1.weight'], 'model.diffusion_model.input_blocks.10.0.emb_layers.1.weight'));
    const buf_252 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.10.0.emb_layers.1.bias'], 'model.diffusion_model.input_blocks.10.0.emb_layers.1.bias'));
    const buf_253 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.10.0.in_layers.2.weight'], 'model.diffusion_model.input_blocks.10.0.in_layers.2.weight'));
    const buf_254 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.10.0.in_layers.2.bias'], 'model.diffusion_model.input_blocks.10.0.in_layers.2.bias'));
    const buf_255 = createEmptyBuf(device, 655360);;
    const buf_256 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.10.0.out_layers.0.weight'], 'model.diffusion_model.input_blocks.10.0.out_layers.0.weight'));
    const buf_257 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.10.0.out_layers.0.bias'], 'model.diffusion_model.input_blocks.10.0.out_layers.0.bias'));
    const buf_258 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.10.0.out_layers.3.weight'], 'model.diffusion_model.input_blocks.10.0.out_layers.3.weight'));
    const buf_259 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.10.0.out_layers.3.bias'], 'model.diffusion_model.input_blocks.10.0.out_layers.3.bias'));
    const buf_260 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.11.0.in_layers.0.weight'], 'model.diffusion_model.input_blocks.11.0.in_layers.0.weight'));
    const buf_261 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.11.0.in_layers.0.bias'], 'model.diffusion_model.input_blocks.11.0.in_layers.0.bias'));
    const buf_262 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.11.0.emb_layers.1.weight'], 'model.diffusion_model.input_blocks.11.0.emb_layers.1.weight'));
    const buf_263 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.11.0.emb_layers.1.bias'], 'model.diffusion_model.input_blocks.11.0.emb_layers.1.bias'));
    const buf_264 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.11.0.in_layers.2.weight'], 'model.diffusion_model.input_blocks.11.0.in_layers.2.weight'));
    const buf_265 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.11.0.in_layers.2.bias'], 'model.diffusion_model.input_blocks.11.0.in_layers.2.bias'));
    const buf_266 = createEmptyBuf(device, 655360);;
    const buf_267 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.11.0.out_layers.0.weight'], 'model.diffusion_model.input_blocks.11.0.out_layers.0.weight'));
    const buf_268 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.11.0.out_layers.0.bias'], 'model.diffusion_model.input_blocks.11.0.out_layers.0.bias'));
    const buf_269 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.11.0.out_layers.3.weight'], 'model.diffusion_model.input_blocks.11.0.out_layers.3.weight'));
    const buf_270 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.input_blocks.11.0.out_layers.3.bias'], 'model.diffusion_model.input_blocks.11.0.out_layers.3.bias'));
    const buf_271 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.0.in_layers.0.weight'], 'model.diffusion_model.middle_block.0.in_layers.0.weight'));
    const buf_272 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.0.in_layers.0.bias'], 'model.diffusion_model.middle_block.0.in_layers.0.bias'));
    const buf_273 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.0.emb_layers.1.weight'], 'model.diffusion_model.middle_block.0.emb_layers.1.weight'));
    const buf_274 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.0.emb_layers.1.bias'], 'model.diffusion_model.middle_block.0.emb_layers.1.bias'));
    const buf_275 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.0.in_layers.2.weight'], 'model.diffusion_model.middle_block.0.in_layers.2.weight'));
    const buf_276 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.0.in_layers.2.bias'], 'model.diffusion_model.middle_block.0.in_layers.2.bias'));
    const buf_277 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.0.out_layers.0.weight'], 'model.diffusion_model.middle_block.0.out_layers.0.weight'));
    const buf_278 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.0.out_layers.0.bias'], 'model.diffusion_model.middle_block.0.out_layers.0.bias'));
    const buf_279 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.0.out_layers.3.weight'], 'model.diffusion_model.middle_block.0.out_layers.3.weight'));
    const buf_280 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.0.out_layers.3.bias'], 'model.diffusion_model.middle_block.0.out_layers.3.bias'));
    const buf_281 = createEmptyBuf(device, 655360);;
    const buf_282 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.norm.weight'], 'model.diffusion_model.middle_block.1.norm.weight'));
    const buf_283 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.norm.bias'], 'model.diffusion_model.middle_block.1.norm.bias'));
    const buf_284 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.proj_in.weight'], 'model.diffusion_model.middle_block.1.proj_in.weight'));
    const buf_285 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.proj_in.bias'], 'model.diffusion_model.middle_block.1.proj_in.bias'));
    const buf_286 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.norm1.weight'));
    const buf_287 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.norm1.bias'));
    const buf_288 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_289 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_290 = createEmptyBuf(device, 655360);;
    const buf_291 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_292 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_293 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_294 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.norm2.weight'));
    const buf_295 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.norm2.bias'));
    const buf_296 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_297 = createWeightBuf(device, 3932160, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_298 = createWeightBuf(device, 3932160, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_299 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_300 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_301 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.norm3.weight'));
    const buf_302 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.norm3.bias'));
    const buf_303 = createWeightBuf(device, 52428800, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_304 = createWeightBuf(device, 40960, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_305 = createWeightBuf(device, 26214400, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_306 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.middle_block.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_307 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.proj_out.weight'], 'model.diffusion_model.middle_block.1.proj_out.weight'));
    const buf_308 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.1.proj_out.bias'], 'model.diffusion_model.middle_block.1.proj_out.bias'));
    const buf_309 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.2.in_layers.0.weight'], 'model.diffusion_model.middle_block.2.in_layers.0.weight'));
    const buf_310 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.2.in_layers.0.bias'], 'model.diffusion_model.middle_block.2.in_layers.0.bias'));
    const buf_311 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.2.emb_layers.1.weight'], 'model.diffusion_model.middle_block.2.emb_layers.1.weight'));
    const buf_312 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.2.emb_layers.1.bias'], 'model.diffusion_model.middle_block.2.emb_layers.1.bias'));
    const buf_313 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.2.in_layers.2.weight'], 'model.diffusion_model.middle_block.2.in_layers.2.weight'));
    const buf_314 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.2.in_layers.2.bias'], 'model.diffusion_model.middle_block.2.in_layers.2.bias'));
    const buf_315 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.2.out_layers.0.weight'], 'model.diffusion_model.middle_block.2.out_layers.0.weight'));
    const buf_316 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.2.out_layers.0.bias'], 'model.diffusion_model.middle_block.2.out_layers.0.bias'));
    const buf_317 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.2.out_layers.3.weight'], 'model.diffusion_model.middle_block.2.out_layers.3.weight'));
    const buf_318 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.middle_block.2.out_layers.3.bias'], 'model.diffusion_model.middle_block.2.out_layers.3.bias'));
    const buf_319 = createWeightBuf(device, 13107200, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.0.0.skip_connection.weight'], 'model.diffusion_model.output_blocks.0.0.skip_connection.weight'));
    const buf_320 = createWeightBuf(device, 10240, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.0.0.in_layers.0.weight'], 'model.diffusion_model.output_blocks.0.0.in_layers.0.weight'));
    const buf_321 = createWeightBuf(device, 10240, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.0.0.in_layers.0.bias'], 'model.diffusion_model.output_blocks.0.0.in_layers.0.bias'));
    const buf_322 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.0.0.emb_layers.1.weight'], 'model.diffusion_model.output_blocks.0.0.emb_layers.1.weight'));
    const buf_323 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.0.0.emb_layers.1.bias'], 'model.diffusion_model.output_blocks.0.0.emb_layers.1.bias'));
    const buf_324 = createWeightBuf(device, 117964800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.0.0.in_layers.2.weight'], 'model.diffusion_model.output_blocks.0.0.in_layers.2.weight'));
    const buf_325 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.0.0.in_layers.2.bias'], 'model.diffusion_model.output_blocks.0.0.in_layers.2.bias'));
    const buf_326 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.0.0.out_layers.0.weight'], 'model.diffusion_model.output_blocks.0.0.out_layers.0.weight'));
    const buf_327 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.0.0.out_layers.0.bias'], 'model.diffusion_model.output_blocks.0.0.out_layers.0.bias'));
    const buf_328 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.0.0.out_layers.3.weight'], 'model.diffusion_model.output_blocks.0.0.out_layers.3.weight'));
    const buf_329 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.0.0.skip_connection.bias'], 'model.diffusion_model.output_blocks.0.0.skip_connection.bias'));
    const buf_330 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.0.0.out_layers.3.bias'], 'model.diffusion_model.output_blocks.0.0.out_layers.3.bias'));
    const buf_331 = createWeightBuf(device, 13107200, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.1.0.skip_connection.weight'], 'model.diffusion_model.output_blocks.1.0.skip_connection.weight'));
    const buf_332 = createWeightBuf(device, 10240, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.1.0.in_layers.0.weight'], 'model.diffusion_model.output_blocks.1.0.in_layers.0.weight'));
    const buf_333 = createWeightBuf(device, 10240, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.1.0.in_layers.0.bias'], 'model.diffusion_model.output_blocks.1.0.in_layers.0.bias'));
    const buf_334 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.1.0.emb_layers.1.weight'], 'model.diffusion_model.output_blocks.1.0.emb_layers.1.weight'));
    const buf_335 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.1.0.emb_layers.1.bias'], 'model.diffusion_model.output_blocks.1.0.emb_layers.1.bias'));
    const buf_336 = createWeightBuf(device, 117964800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.1.0.in_layers.2.weight'], 'model.diffusion_model.output_blocks.1.0.in_layers.2.weight'));
    const buf_337 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.1.0.in_layers.2.bias'], 'model.diffusion_model.output_blocks.1.0.in_layers.2.bias'));
    const buf_338 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.1.0.out_layers.0.weight'], 'model.diffusion_model.output_blocks.1.0.out_layers.0.weight'));
    const buf_339 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.1.0.out_layers.0.bias'], 'model.diffusion_model.output_blocks.1.0.out_layers.0.bias'));
    const buf_340 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.1.0.out_layers.3.weight'], 'model.diffusion_model.output_blocks.1.0.out_layers.3.weight'));
    const buf_341 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.1.0.skip_connection.bias'], 'model.diffusion_model.output_blocks.1.0.skip_connection.bias'));
    const buf_342 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.1.0.out_layers.3.bias'], 'model.diffusion_model.output_blocks.1.0.out_layers.3.bias'));
    const buf_343 = createWeightBuf(device, 10240, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.2.0.in_layers.0.weight'], 'model.diffusion_model.output_blocks.2.0.in_layers.0.weight'));
    const buf_344 = createWeightBuf(device, 10240, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.2.0.in_layers.0.bias'], 'model.diffusion_model.output_blocks.2.0.in_layers.0.bias'));
    const buf_345 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.2.0.emb_layers.1.weight'], 'model.diffusion_model.output_blocks.2.0.emb_layers.1.weight'));
    const buf_346 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.2.0.emb_layers.1.bias'], 'model.diffusion_model.output_blocks.2.0.emb_layers.1.bias'));
    const buf_347 = createWeightBuf(device, 117964800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.2.0.in_layers.2.weight'], 'model.diffusion_model.output_blocks.2.0.in_layers.2.weight'));
    const buf_348 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.2.0.in_layers.2.bias'], 'model.diffusion_model.output_blocks.2.0.in_layers.2.bias'));
    const buf_349 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.2.0.out_layers.0.weight'], 'model.diffusion_model.output_blocks.2.0.out_layers.0.weight'));
    const buf_350 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.2.0.out_layers.0.bias'], 'model.diffusion_model.output_blocks.2.0.out_layers.0.bias'));
    const buf_351 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.2.0.out_layers.3.weight'], 'model.diffusion_model.output_blocks.2.0.out_layers.3.weight'));
    const buf_352 = createWeightBuf(device, 13107200, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.2.0.skip_connection.weight'], 'model.diffusion_model.output_blocks.2.0.skip_connection.weight'));
    const buf_353 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.2.0.skip_connection.bias'], 'model.diffusion_model.output_blocks.2.0.skip_connection.bias'));
    const buf_354 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.2.0.out_layers.3.bias'], 'model.diffusion_model.output_blocks.2.0.out_layers.3.bias'));
    const buf_355 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.2.1.conv.weight'], 'model.diffusion_model.output_blocks.2.1.conv.weight'));
    const buf_356 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.2.1.conv.bias'], 'model.diffusion_model.output_blocks.2.1.conv.bias'));
    const buf_357 = createWeightBuf(device, 10240, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.0.in_layers.0.weight'], 'model.diffusion_model.output_blocks.3.0.in_layers.0.weight'));
    const buf_358 = createWeightBuf(device, 10240, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.0.in_layers.0.bias'], 'model.diffusion_model.output_blocks.3.0.in_layers.0.bias'));
    const buf_359 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.0.emb_layers.1.weight'], 'model.diffusion_model.output_blocks.3.0.emb_layers.1.weight'));
    const buf_360 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.0.emb_layers.1.bias'], 'model.diffusion_model.output_blocks.3.0.emb_layers.1.bias'));
    const buf_361 = createWeightBuf(device, 117964800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.0.in_layers.2.weight'], 'model.diffusion_model.output_blocks.3.0.in_layers.2.weight'));
    const buf_362 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.0.in_layers.2.bias'], 'model.diffusion_model.output_blocks.3.0.in_layers.2.bias'));
    const buf_363 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.0.out_layers.0.weight'], 'model.diffusion_model.output_blocks.3.0.out_layers.0.weight'));
    const buf_364 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.0.out_layers.0.bias'], 'model.diffusion_model.output_blocks.3.0.out_layers.0.bias'));
    const buf_365 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.0.out_layers.3.weight'], 'model.diffusion_model.output_blocks.3.0.out_layers.3.weight'));
    const buf_366 = createWeightBuf(device, 13107200, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.0.skip_connection.weight'], 'model.diffusion_model.output_blocks.3.0.skip_connection.weight'));
    const buf_367 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.0.skip_connection.bias'], 'model.diffusion_model.output_blocks.3.0.skip_connection.bias'));
    const buf_368 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.0.out_layers.3.bias'], 'model.diffusion_model.output_blocks.3.0.out_layers.3.bias'));
    const buf_369 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.norm.weight'], 'model.diffusion_model.output_blocks.3.1.norm.weight'));
    const buf_370 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.norm.bias'], 'model.diffusion_model.output_blocks.3.1.norm.bias'));
    const buf_371 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.proj_in.weight'], 'model.diffusion_model.output_blocks.3.1.proj_in.weight'));
    const buf_372 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.proj_in.bias'], 'model.diffusion_model.output_blocks.3.1.proj_in.bias'));
    const buf_373 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.norm1.weight'));
    const buf_374 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.norm1.bias'));
    const buf_375 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_376 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_377 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_378 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_379 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_380 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.norm2.weight'));
    const buf_381 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.norm2.bias'));
    const buf_382 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_383 = createWeightBuf(device, 3932160, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_384 = createWeightBuf(device, 3932160, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_385 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_386 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_387 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.norm3.weight'));
    const buf_388 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.norm3.bias'));
    const buf_389 = createWeightBuf(device, 52428800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_390 = createWeightBuf(device, 40960, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_391 = createWeightBuf(device, 26214400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_392 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.output_blocks.3.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_393 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.proj_out.weight'], 'model.diffusion_model.output_blocks.3.1.proj_out.weight'));
    const buf_394 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.3.1.proj_out.bias'], 'model.diffusion_model.output_blocks.3.1.proj_out.bias'));
    const buf_395 = createWeightBuf(device, 10240, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.0.in_layers.0.weight'], 'model.diffusion_model.output_blocks.4.0.in_layers.0.weight'));
    const buf_396 = createWeightBuf(device, 10240, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.0.in_layers.0.bias'], 'model.diffusion_model.output_blocks.4.0.in_layers.0.bias'));
    const buf_397 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.0.emb_layers.1.weight'], 'model.diffusion_model.output_blocks.4.0.emb_layers.1.weight'));
    const buf_398 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.0.emb_layers.1.bias'], 'model.diffusion_model.output_blocks.4.0.emb_layers.1.bias'));
    const buf_399 = createWeightBuf(device, 117964800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.0.in_layers.2.weight'], 'model.diffusion_model.output_blocks.4.0.in_layers.2.weight'));
    const buf_400 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.0.in_layers.2.bias'], 'model.diffusion_model.output_blocks.4.0.in_layers.2.bias'));
    const buf_401 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.0.out_layers.0.weight'], 'model.diffusion_model.output_blocks.4.0.out_layers.0.weight'));
    const buf_402 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.0.out_layers.0.bias'], 'model.diffusion_model.output_blocks.4.0.out_layers.0.bias'));
    const buf_403 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.0.out_layers.3.weight'], 'model.diffusion_model.output_blocks.4.0.out_layers.3.weight'));
    const buf_404 = createWeightBuf(device, 13107200, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.0.skip_connection.weight'], 'model.diffusion_model.output_blocks.4.0.skip_connection.weight'));
    const buf_405 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.0.skip_connection.bias'], 'model.diffusion_model.output_blocks.4.0.skip_connection.bias'));
    const buf_406 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.0.out_layers.3.bias'], 'model.diffusion_model.output_blocks.4.0.out_layers.3.bias'));
    const buf_407 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.norm.weight'], 'model.diffusion_model.output_blocks.4.1.norm.weight'));
    const buf_408 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.norm.bias'], 'model.diffusion_model.output_blocks.4.1.norm.bias'));
    const buf_409 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.proj_in.weight'], 'model.diffusion_model.output_blocks.4.1.proj_in.weight'));
    const buf_410 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.proj_in.bias'], 'model.diffusion_model.output_blocks.4.1.proj_in.bias'));
    const buf_411 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.norm1.weight'));
    const buf_412 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.norm1.bias'));
    const buf_413 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_414 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_415 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_416 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_417 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_418 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.norm2.weight'));
    const buf_419 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.norm2.bias'));
    const buf_420 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_421 = createWeightBuf(device, 3932160, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_422 = createWeightBuf(device, 3932160, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_423 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_424 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_425 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.norm3.weight'));
    const buf_426 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.norm3.bias'));
    const buf_427 = createWeightBuf(device, 52428800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_428 = createWeightBuf(device, 40960, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_429 = createWeightBuf(device, 26214400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_430 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.output_blocks.4.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_431 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.proj_out.weight'], 'model.diffusion_model.output_blocks.4.1.proj_out.weight'));
    const buf_432 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.4.1.proj_out.bias'], 'model.diffusion_model.output_blocks.4.1.proj_out.bias'));
    const buf_433 = createWeightBuf(device, 7680, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.0.in_layers.0.weight'], 'model.diffusion_model.output_blocks.5.0.in_layers.0.weight'));
    const buf_434 = createWeightBuf(device, 7680, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.0.in_layers.0.bias'], 'model.diffusion_model.output_blocks.5.0.in_layers.0.bias'));
    const buf_435 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.0.emb_layers.1.weight'], 'model.diffusion_model.output_blocks.5.0.emb_layers.1.weight'));
    const buf_436 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.0.emb_layers.1.bias'], 'model.diffusion_model.output_blocks.5.0.emb_layers.1.bias'));
    const buf_437 = createWeightBuf(device, 88473600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.0.in_layers.2.weight'], 'model.diffusion_model.output_blocks.5.0.in_layers.2.weight'));
    const buf_438 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.0.in_layers.2.bias'], 'model.diffusion_model.output_blocks.5.0.in_layers.2.bias'));
    const buf_439 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.0.out_layers.0.weight'], 'model.diffusion_model.output_blocks.5.0.out_layers.0.weight'));
    const buf_440 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.0.out_layers.0.bias'], 'model.diffusion_model.output_blocks.5.0.out_layers.0.bias'));
    const buf_441 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.0.out_layers.3.weight'], 'model.diffusion_model.output_blocks.5.0.out_layers.3.weight'));
    const buf_442 = createWeightBuf(device, 9830400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.0.skip_connection.weight'], 'model.diffusion_model.output_blocks.5.0.skip_connection.weight'));
    const buf_443 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.0.skip_connection.bias'], 'model.diffusion_model.output_blocks.5.0.skip_connection.bias'));
    const buf_444 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.0.out_layers.3.bias'], 'model.diffusion_model.output_blocks.5.0.out_layers.3.bias'));
    const buf_445 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.norm.weight'], 'model.diffusion_model.output_blocks.5.1.norm.weight'));
    const buf_446 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.norm.bias'], 'model.diffusion_model.output_blocks.5.1.norm.bias'));
    const buf_447 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.proj_in.weight'], 'model.diffusion_model.output_blocks.5.1.proj_in.weight'));
    const buf_448 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.proj_in.bias'], 'model.diffusion_model.output_blocks.5.1.proj_in.bias'));
    const buf_449 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.norm1.weight'));
    const buf_450 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.norm1.bias'));
    const buf_451 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_452 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_453 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_454 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_455 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_456 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.norm2.weight'));
    const buf_457 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.norm2.bias'));
    const buf_458 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_459 = createWeightBuf(device, 3932160, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_460 = createWeightBuf(device, 3932160, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_461 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_462 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_463 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.norm3.weight'));
    const buf_464 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.norm3.bias'));
    const buf_465 = createWeightBuf(device, 52428800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_466 = createWeightBuf(device, 40960, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_467 = createWeightBuf(device, 26214400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_468 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.output_blocks.5.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_469 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.proj_out.weight'], 'model.diffusion_model.output_blocks.5.1.proj_out.weight'));
    const buf_470 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.1.proj_out.bias'], 'model.diffusion_model.output_blocks.5.1.proj_out.bias'));
    const buf_471 = createWeightBuf(device, 58982400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.2.conv.weight'], 'model.diffusion_model.output_blocks.5.2.conv.weight'));
    const buf_472 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.5.2.conv.bias'], 'model.diffusion_model.output_blocks.5.2.conv.bias'));
    const buf_473 = createWeightBuf(device, 7680, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.0.in_layers.0.weight'], 'model.diffusion_model.output_blocks.6.0.in_layers.0.weight'));
    const buf_474 = createWeightBuf(device, 7680, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.0.in_layers.0.bias'], 'model.diffusion_model.output_blocks.6.0.in_layers.0.bias'));
    const buf_475 = createWeightBuf(device, 3276800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.0.emb_layers.1.weight'], 'model.diffusion_model.output_blocks.6.0.emb_layers.1.weight'));
    const buf_476 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.0.emb_layers.1.bias'], 'model.diffusion_model.output_blocks.6.0.emb_layers.1.bias'));
    const buf_477 = createWeightBuf(device, 44236800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.0.in_layers.2.weight'], 'model.diffusion_model.output_blocks.6.0.in_layers.2.weight'));
    const buf_478 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.0.in_layers.2.bias'], 'model.diffusion_model.output_blocks.6.0.in_layers.2.bias'));
    const buf_479 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.0.out_layers.0.weight'], 'model.diffusion_model.output_blocks.6.0.out_layers.0.weight'));
    const buf_480 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.0.out_layers.0.bias'], 'model.diffusion_model.output_blocks.6.0.out_layers.0.bias'));
    const buf_481 = createWeightBuf(device, 14745600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.0.out_layers.3.weight'], 'model.diffusion_model.output_blocks.6.0.out_layers.3.weight'));
    const buf_482 = createWeightBuf(device, 4915200, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.0.skip_connection.weight'], 'model.diffusion_model.output_blocks.6.0.skip_connection.weight'));
    const buf_483 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.0.skip_connection.bias'], 'model.diffusion_model.output_blocks.6.0.skip_connection.bias'));
    const buf_484 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.0.out_layers.3.bias'], 'model.diffusion_model.output_blocks.6.0.out_layers.3.bias'));
    const buf_485 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.norm.weight'], 'model.diffusion_model.output_blocks.6.1.norm.weight'));
    const buf_486 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.norm.bias'], 'model.diffusion_model.output_blocks.6.1.norm.bias'));
    const buf_487 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.proj_in.weight'], 'model.diffusion_model.output_blocks.6.1.proj_in.weight'));
    const buf_488 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.proj_in.bias'], 'model.diffusion_model.output_blocks.6.1.proj_in.bias'));
    const buf_489 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.norm1.weight'));
    const buf_490 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.norm1.bias'));
    const buf_491 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_492 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_493 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_494 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_495 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_496 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.norm2.weight'));
    const buf_497 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.norm2.bias'));
    const buf_498 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_499 = createWeightBuf(device, 1966080, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_500 = createWeightBuf(device, 1966080, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_501 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_502 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_503 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.norm3.weight'));
    const buf_504 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.norm3.bias'));
    const buf_505 = createWeightBuf(device, 13107200, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_506 = createWeightBuf(device, 20480, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_507 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_508 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.output_blocks.6.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_509 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.proj_out.weight'], 'model.diffusion_model.output_blocks.6.1.proj_out.weight'));
    const buf_510 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.6.1.proj_out.bias'], 'model.diffusion_model.output_blocks.6.1.proj_out.bias'));
    const buf_511 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.0.in_layers.0.weight'], 'model.diffusion_model.output_blocks.7.0.in_layers.0.weight'));
    const buf_512 = createWeightBuf(device, 5120, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.0.in_layers.0.bias'], 'model.diffusion_model.output_blocks.7.0.in_layers.0.bias'));
    const buf_513 = createWeightBuf(device, 3276800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.0.emb_layers.1.weight'], 'model.diffusion_model.output_blocks.7.0.emb_layers.1.weight'));
    const buf_514 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.0.emb_layers.1.bias'], 'model.diffusion_model.output_blocks.7.0.emb_layers.1.bias'));
    const buf_515 = createWeightBuf(device, 29491200, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.0.in_layers.2.weight'], 'model.diffusion_model.output_blocks.7.0.in_layers.2.weight'));
    const buf_516 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.0.in_layers.2.bias'], 'model.diffusion_model.output_blocks.7.0.in_layers.2.bias'));
    const buf_517 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.0.out_layers.0.weight'], 'model.diffusion_model.output_blocks.7.0.out_layers.0.weight'));
    const buf_518 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.0.out_layers.0.bias'], 'model.diffusion_model.output_blocks.7.0.out_layers.0.bias'));
    const buf_519 = createWeightBuf(device, 14745600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.0.out_layers.3.weight'], 'model.diffusion_model.output_blocks.7.0.out_layers.3.weight'));
    const buf_520 = createWeightBuf(device, 3276800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.0.skip_connection.weight'], 'model.diffusion_model.output_blocks.7.0.skip_connection.weight'));
    const buf_521 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.0.skip_connection.bias'], 'model.diffusion_model.output_blocks.7.0.skip_connection.bias'));
    const buf_522 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.0.out_layers.3.bias'], 'model.diffusion_model.output_blocks.7.0.out_layers.3.bias'));
    const buf_523 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.norm.weight'], 'model.diffusion_model.output_blocks.7.1.norm.weight'));
    const buf_524 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.norm.bias'], 'model.diffusion_model.output_blocks.7.1.norm.bias'));
    const buf_525 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.proj_in.weight'], 'model.diffusion_model.output_blocks.7.1.proj_in.weight'));
    const buf_526 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.proj_in.bias'], 'model.diffusion_model.output_blocks.7.1.proj_in.bias'));
    const buf_527 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.norm1.weight'));
    const buf_528 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.norm1.bias'));
    const buf_529 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_530 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_531 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_532 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_533 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_534 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.norm2.weight'));
    const buf_535 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.norm2.bias'));
    const buf_536 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_537 = createWeightBuf(device, 1966080, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_538 = createWeightBuf(device, 1966080, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_539 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_540 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_541 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.norm3.weight'));
    const buf_542 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.norm3.bias'));
    const buf_543 = createWeightBuf(device, 13107200, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_544 = createWeightBuf(device, 20480, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_545 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_546 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.output_blocks.7.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_547 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.proj_out.weight'], 'model.diffusion_model.output_blocks.7.1.proj_out.weight'));
    const buf_548 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.7.1.proj_out.bias'], 'model.diffusion_model.output_blocks.7.1.proj_out.bias'));
    const buf_549 = createWeightBuf(device, 3840, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.0.in_layers.0.weight'], 'model.diffusion_model.output_blocks.8.0.in_layers.0.weight'));
    const buf_550 = createWeightBuf(device, 3840, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.0.in_layers.0.bias'], 'model.diffusion_model.output_blocks.8.0.in_layers.0.bias'));
    const buf_551 = createWeightBuf(device, 3276800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.0.emb_layers.1.weight'], 'model.diffusion_model.output_blocks.8.0.emb_layers.1.weight'));
    const buf_552 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.0.emb_layers.1.bias'], 'model.diffusion_model.output_blocks.8.0.emb_layers.1.bias'));
    const buf_553 = createWeightBuf(device, 22118400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.0.in_layers.2.weight'], 'model.diffusion_model.output_blocks.8.0.in_layers.2.weight'));
    const buf_554 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.0.in_layers.2.bias'], 'model.diffusion_model.output_blocks.8.0.in_layers.2.bias'));
    const buf_555 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.0.out_layers.0.weight'], 'model.diffusion_model.output_blocks.8.0.out_layers.0.weight'));
    const buf_556 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.0.out_layers.0.bias'], 'model.diffusion_model.output_blocks.8.0.out_layers.0.bias'));
    const buf_557 = createWeightBuf(device, 14745600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.0.out_layers.3.weight'], 'model.diffusion_model.output_blocks.8.0.out_layers.3.weight'));
    const buf_558 = createWeightBuf(device, 2457600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.0.skip_connection.weight'], 'model.diffusion_model.output_blocks.8.0.skip_connection.weight'));
    const buf_559 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.0.skip_connection.bias'], 'model.diffusion_model.output_blocks.8.0.skip_connection.bias'));
    const buf_560 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.0.out_layers.3.bias'], 'model.diffusion_model.output_blocks.8.0.out_layers.3.bias'));
    const buf_561 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.norm.weight'], 'model.diffusion_model.output_blocks.8.1.norm.weight'));
    const buf_562 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.norm.bias'], 'model.diffusion_model.output_blocks.8.1.norm.bias'));
    const buf_563 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.proj_in.weight'], 'model.diffusion_model.output_blocks.8.1.proj_in.weight'));
    const buf_564 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.proj_in.bias'], 'model.diffusion_model.output_blocks.8.1.proj_in.bias'));
    const buf_565 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.norm1.weight'));
    const buf_566 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.norm1.bias'));
    const buf_567 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_568 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_569 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_570 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_571 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_572 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.norm2.weight'));
    const buf_573 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.norm2.bias'));
    const buf_574 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_575 = createWeightBuf(device, 1966080, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_576 = createWeightBuf(device, 1966080, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_577 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_578 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_579 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.norm3.weight'));
    const buf_580 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.norm3.bias'));
    const buf_581 = createWeightBuf(device, 13107200, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_582 = createWeightBuf(device, 20480, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_583 = createWeightBuf(device, 6553600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_584 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.output_blocks.8.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_585 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.proj_out.weight'], 'model.diffusion_model.output_blocks.8.1.proj_out.weight'));
    const buf_586 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.1.proj_out.bias'], 'model.diffusion_model.output_blocks.8.1.proj_out.bias'));
    const buf_587 = createWeightBuf(device, 14745600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.2.conv.weight'], 'model.diffusion_model.output_blocks.8.2.conv.weight'));
    const buf_588 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.8.2.conv.bias'], 'model.diffusion_model.output_blocks.8.2.conv.bias'));
    const buf_589 = createWeightBuf(device, 1228800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.0.skip_connection.weight'], 'model.diffusion_model.output_blocks.9.0.skip_connection.weight'));
    const buf_590 = createWeightBuf(device, 3840, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.0.in_layers.0.weight'], 'model.diffusion_model.output_blocks.9.0.in_layers.0.weight'));
    const buf_591 = createWeightBuf(device, 3840, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.0.in_layers.0.bias'], 'model.diffusion_model.output_blocks.9.0.in_layers.0.bias'));
    const buf_592 = createWeightBuf(device, 11059200, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.0.in_layers.2.weight'], 'model.diffusion_model.output_blocks.9.0.in_layers.2.weight'));
    const buf_593 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.0.emb_layers.1.weight'], 'model.diffusion_model.output_blocks.9.0.emb_layers.1.weight'));
    const buf_594 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.0.emb_layers.1.bias'], 'model.diffusion_model.output_blocks.9.0.emb_layers.1.bias'));
    const buf_595 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.0.in_layers.2.bias'], 'model.diffusion_model.output_blocks.9.0.in_layers.2.bias'));
    const buf_596 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.0.out_layers.0.weight'], 'model.diffusion_model.output_blocks.9.0.out_layers.0.weight'));
    const buf_597 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.0.out_layers.0.bias'], 'model.diffusion_model.output_blocks.9.0.out_layers.0.bias'));
    const buf_598 = createWeightBuf(device, 3686400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.0.out_layers.3.weight'], 'model.diffusion_model.output_blocks.9.0.out_layers.3.weight'));
    const buf_599 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.0.skip_connection.bias'], 'model.diffusion_model.output_blocks.9.0.skip_connection.bias'));
    const buf_600 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.0.out_layers.3.bias'], 'model.diffusion_model.output_blocks.9.0.out_layers.3.bias'));
    const buf_601 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.norm.weight'], 'model.diffusion_model.output_blocks.9.1.norm.weight'));
    const buf_602 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.norm.bias'], 'model.diffusion_model.output_blocks.9.1.norm.bias'));
    const buf_603 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.proj_in.weight'], 'model.diffusion_model.output_blocks.9.1.proj_in.weight'));
    const buf_604 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.proj_in.bias'], 'model.diffusion_model.output_blocks.9.1.proj_in.bias'));
    const buf_605 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.norm1.weight'));
    const buf_606 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.norm1.bias'));
    const buf_607 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_608 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_609 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_610 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_611 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_612 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.norm2.weight'));
    const buf_613 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.norm2.bias'));
    const buf_614 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_615 = createWeightBuf(device, 983040, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_616 = createWeightBuf(device, 983040, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_617 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_618 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_619 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.norm3.weight'));
    const buf_620 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.norm3.bias'));
    const buf_621 = createWeightBuf(device, 3276800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_622 = createWeightBuf(device, 10240, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_623 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_624 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.output_blocks.9.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_625 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.proj_out.weight'], 'model.diffusion_model.output_blocks.9.1.proj_out.weight'));
    const buf_626 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.9.1.proj_out.bias'], 'model.diffusion_model.output_blocks.9.1.proj_out.bias'));
    const buf_627 = createWeightBuf(device, 819200, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.0.skip_connection.weight'], 'model.diffusion_model.output_blocks.10.0.skip_connection.weight'));
    const buf_628 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.0.in_layers.0.weight'], 'model.diffusion_model.output_blocks.10.0.in_layers.0.weight'));
    const buf_629 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.0.in_layers.0.bias'], 'model.diffusion_model.output_blocks.10.0.in_layers.0.bias'));
    const buf_630 = createWeightBuf(device, 7372800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.0.in_layers.2.weight'], 'model.diffusion_model.output_blocks.10.0.in_layers.2.weight'));
    const buf_631 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.0.emb_layers.1.weight'], 'model.diffusion_model.output_blocks.10.0.emb_layers.1.weight'));
    const buf_632 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.0.emb_layers.1.bias'], 'model.diffusion_model.output_blocks.10.0.emb_layers.1.bias'));
    const buf_633 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.0.in_layers.2.bias'], 'model.diffusion_model.output_blocks.10.0.in_layers.2.bias'));
    const buf_634 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.0.out_layers.0.weight'], 'model.diffusion_model.output_blocks.10.0.out_layers.0.weight'));
    const buf_635 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.0.out_layers.0.bias'], 'model.diffusion_model.output_blocks.10.0.out_layers.0.bias'));
    const buf_636 = createWeightBuf(device, 3686400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.0.out_layers.3.weight'], 'model.diffusion_model.output_blocks.10.0.out_layers.3.weight'));
    const buf_637 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.0.skip_connection.bias'], 'model.diffusion_model.output_blocks.10.0.skip_connection.bias'));
    const buf_638 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.0.out_layers.3.bias'], 'model.diffusion_model.output_blocks.10.0.out_layers.3.bias'));
    const buf_639 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.norm.weight'], 'model.diffusion_model.output_blocks.10.1.norm.weight'));
    const buf_640 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.norm.bias'], 'model.diffusion_model.output_blocks.10.1.norm.bias'));
    const buf_641 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.proj_in.weight'], 'model.diffusion_model.output_blocks.10.1.proj_in.weight'));
    const buf_642 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.proj_in.bias'], 'model.diffusion_model.output_blocks.10.1.proj_in.bias'));
    const buf_643 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.norm1.weight'));
    const buf_644 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.norm1.bias'));
    const buf_645 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_646 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_647 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_648 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_649 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_650 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.norm2.weight'));
    const buf_651 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.norm2.bias'));
    const buf_652 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_653 = createWeightBuf(device, 983040, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_654 = createWeightBuf(device, 983040, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_655 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_656 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_657 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.norm3.weight'));
    const buf_658 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.norm3.bias'));
    const buf_659 = createWeightBuf(device, 3276800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_660 = createWeightBuf(device, 10240, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_661 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_662 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.output_blocks.10.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_663 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.proj_out.weight'], 'model.diffusion_model.output_blocks.10.1.proj_out.weight'));
    const buf_664 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.10.1.proj_out.bias'], 'model.diffusion_model.output_blocks.10.1.proj_out.bias'));
    const buf_665 = createWeightBuf(device, 819200, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.0.skip_connection.weight'], 'model.diffusion_model.output_blocks.11.0.skip_connection.weight'));
    const buf_666 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.0.in_layers.0.weight'], 'model.diffusion_model.output_blocks.11.0.in_layers.0.weight'));
    const buf_667 = createWeightBuf(device, 2560, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.0.in_layers.0.bias'], 'model.diffusion_model.output_blocks.11.0.in_layers.0.bias'));
    const buf_668 = createWeightBuf(device, 7372800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.0.in_layers.2.weight'], 'model.diffusion_model.output_blocks.11.0.in_layers.2.weight'));
    const buf_669 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.0.emb_layers.1.weight'], 'model.diffusion_model.output_blocks.11.0.emb_layers.1.weight'));
    const buf_670 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.0.emb_layers.1.bias'], 'model.diffusion_model.output_blocks.11.0.emb_layers.1.bias'));
    const buf_671 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.0.in_layers.2.bias'], 'model.diffusion_model.output_blocks.11.0.in_layers.2.bias'));
    const buf_672 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.0.out_layers.0.weight'], 'model.diffusion_model.output_blocks.11.0.out_layers.0.weight'));
    const buf_673 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.0.out_layers.0.bias'], 'model.diffusion_model.output_blocks.11.0.out_layers.0.bias'));
    const buf_674 = createWeightBuf(device, 3686400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.0.out_layers.3.weight'], 'model.diffusion_model.output_blocks.11.0.out_layers.3.weight'));
    const buf_675 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.0.skip_connection.bias'], 'model.diffusion_model.output_blocks.11.0.skip_connection.bias'));
    const buf_676 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.0.out_layers.3.bias'], 'model.diffusion_model.output_blocks.11.0.out_layers.3.bias'));
    const buf_677 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.norm.weight'], 'model.diffusion_model.output_blocks.11.1.norm.weight'));
    const buf_678 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.norm.bias'], 'model.diffusion_model.output_blocks.11.1.norm.bias'));
    const buf_679 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.proj_in.weight'], 'model.diffusion_model.output_blocks.11.1.proj_in.weight'));
    const buf_680 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.proj_in.bias'], 'model.diffusion_model.output_blocks.11.1.proj_in.bias'));
    const buf_681 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.norm1.weight'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.norm1.weight'));
    const buf_682 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.norm1.bias'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.norm1.bias'));
    const buf_683 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn1.to_q.weight'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn1.to_q.weight'));
    const buf_684 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn1.to_k.weight'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn1.to_k.weight'));
    const buf_685 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn1.to_v.weight'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn1.to_v.weight'));
    const buf_686 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn1.to_out.0.weight'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn1.to_out.0.weight'));
    const buf_687 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn1.to_out.0.bias'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn1.to_out.0.bias'));
    const buf_688 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.norm2.weight'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.norm2.weight'));
    const buf_689 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.norm2.bias'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.norm2.bias'));
    const buf_690 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn2.to_q.weight'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn2.to_q.weight'));
    const buf_691 = createWeightBuf(device, 983040, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn2.to_k.weight'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn2.to_k.weight'));
    const buf_692 = createWeightBuf(device, 983040, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn2.to_v.weight'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn2.to_v.weight'));
    const buf_693 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn2.to_out.0.weight'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn2.to_out.0.weight'));
    const buf_694 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn2.to_out.0.bias'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.attn2.to_out.0.bias'));
    const buf_695 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.norm3.weight'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.norm3.weight'));
    const buf_696 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.norm3.bias'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.norm3.bias'));
    const buf_697 = createWeightBuf(device, 3276800, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.ff.net.0.proj.weight'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.ff.net.0.proj.weight'));
    const buf_698 = createWeightBuf(device, 10240, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.ff.net.0.proj.bias'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.ff.net.0.proj.bias'));
    const buf_699 = createWeightBuf(device, 1638400, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.ff.net.2.weight'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.ff.net.2.weight'));
    const buf_700 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.transformer_blocks.0.ff.net.2.bias'], 'model.diffusion_model.output_blocks.11.1.transformer_blocks.0.ff.net.2.bias'));
    const buf_701 = createWeightBuf(device, 409600, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.proj_out.weight'], 'model.diffusion_model.output_blocks.11.1.proj_out.weight'));
    const buf_702 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.output_blocks.11.1.proj_out.bias'], 'model.diffusion_model.output_blocks.11.1.proj_out.bias'));
    const buf_703 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.out.0.weight'], 'model.diffusion_model.out.0.weight'));
    const buf_704 = createWeightBuf(device, 1280, getTensorBuffer(safetensor, metadata['model.diffusion_model.out.0.bias'], 'model.diffusion_model.out.0.bias'));
    const buf_705 = createWeightBuf(device, 46080, getTensorBuffer(safetensor, metadata['model.diffusion_model.out.2.weight'], 'model.diffusion_model.out.2.weight'));
    const outputs = createEmptyBuf(device, 65536);;
    const buf_706 = createWeightBuf(device, 16, getTensorBuffer(safetensor, metadata['model.diffusion_model.out.2.bias'], 'model.diffusion_model.out.2.bias'));

        
        const gpuWriteBuffer0 = device.createBuffer({size:input0.size, usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE });
    const gpuWriteBuffer1 = device.createBuffer({size:input1.size, usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE });
    const gpuWriteBuffer2 = device.createBuffer({size:input2.size, usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE });
    const gpuWriteBuffer3 = device.createBuffer({size:input3.size, usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE });
        const gpuReadBuffer = device.createBuffer({ size: outputs.size, usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ });

        const kernels = [r_2_80_8_8_16_4_3_3_4_4, E_2_32_20_4_8_16_4, r_320_32_64_4, r_64_16_10, r_2_2_5_16_8_64_4_4, r_64_16_10n1, E_80_64_2_4_16_4, E_2_40_64_8_16_4, E_20480_32_4, r_2_80_8_8_16_320_3_3_4_4, r_160_16_10, E_5_8_4, E_5_8_4n1, E_5_16_4, r_80_4_8_40_4, r_80_4_8_160_4, E_10_32_4, r_20_4_8_160_4, r_2_4_10_8_16_64_4, r_64_16_10, E_2_4_640_8_16_4, r_640_4_8_32_4, r_64_16_10n1, E_80_64_2_4_16_4n1, E_2_40_64_8_16_4n1, E_20480_32_4, r_2_80_8_8_16_320_3_3_4_4, E_2_32_20_4_8_16_4n1, r_320_32_64_4, r_64_16_10, E_2_4_640_8_16_4n1, r_640_4_8_32_4, r_64_16_10n1, E_80_64_2_4_16_4n1, r_2_10_64_8_16_80_4_4_4, E_64_80_2_16_4_4, r_64_32_80_4_4, r_64_32_80_4_4n1, E_256_5_8_16_4_4, r_256_5_8_16_80_4_4_4, r_256_5_8_16_80_4_4_4, r_2_8_128_64_8_16_10_4_4_4, r_2048_32_1024_4, E_8192_64_8_16_4, r_2048_32_1024_4n1, E_8192_64_8_16_4n1, r_256_5_8_16_80_4_4_4, r_2_2_64_5_4_16_2_1024_4_4_4, r_2_128_5_8_16_80_4_4_4, r_64_32_80_4_4, r_64_32_80_4_4n1, E_256_5_8_16_4_4, r_256_5_8_16_80_4_4_4, E_1848_32_2, r_77_5_2_16_192_4_4, r_2_64_77_8_16_10_4_4, r_2048_32_77, E_512_77_32_4, r_2048_32_77n1, E_2048_77_32, r_77_5_2_16_192_4_4, r_2_2_64_5_4_16_2_77_4_4, r_2_128_5_8_16_80_4_4_4, r_64_32_80_4_4, r_64_32_80_4_4n1, E_256_5_8_16_4_4, r_256_40_8_16_80_4_4_4, E_256_80_8_16_4, E_256_80_8_16_4n1, E_64_320_32_4_4, r_256_5_8_16_320_4_4_4, E_80_64_2_4_16_4n2, r_2_10_64_8_16_80_4_4_4, E_80_64_2_4_16_4n3, E_2_4_640_8_16_4n2, r_2_4_10_8_16_64_4n1, r_64_16_10, r_4_5_16_8_64_4_4, r_64_16_10n1, E_80_64_2_4_16_4n4, E_2_40_64_8_16_4n2, E_20480_32_4, r_2_80_8_8_16_320_3_3_4_4, E_10_32_4, r_20_4_8_160_4, r_2_4_10_8_16_64_4, r_64_16_10, E_2_4_640_8_16_4, r_640_4_8_32_4, r_64_16_10n1, E_80_64_2_4_16_4n1, E_2_40_64_8_16_4n1, E_20480_32_4, r_2_80_8_8_16_320_3_3_4_4n1, E_20480_32_4n1, r_320_32_64_4, r_64_16_10, r_4_5_16_8_64_4_4, r_64_16_10n1, E_80_64_2_4_16_4n5, r_2_10_64_8_16_80_4_4_4, E_64_80_2_16_4_4, r_64_32_80_4_4, r_64_32_80_4_4n1, E_256_5_8_16_4_4, r_256_5_8_16_80_4_4_4, r_256_5_8_16_80_4_4_4, r_2_8_128_64_8_16_10_4_4_4, r_2048_32_1024_4, E_8192_64_8_16_4, r_2048_32_1024_4n1, E_8192_64_8_16_4n1, r_256_5_8_16_80_4_4_4, r_2_2_64_5_4_16_2_1024_4_4_4, r_2_128_5_8_16_80_4_4_4, r_64_32_80_4_4, r_64_32_80_4_4n1, E_256_5_8_16_4_4, r_256_5_8_16_80_4_4_4, r_77_5_2_16_192_4_4, r_2_64_77_8_16_10_4_4, r_2048_32_77, E_512_77_32_4, r_2048_32_77n1, E_2048_77_32, r_77_5_2_16_192_4_4, r_2_2_64_5_4_16_2_77_4_4, r_2_128_5_8_16_80_4_4_4, r_64_32_80_4_4, r_64_32_80_4_4n1, E_256_5_8_16_4_4, r_256_40_8_16_80_4_4_4, E_256_80_8_16_4, E_256_80_8_16_4n1, E_64_320_32_4_4, r_256_5_8_16_320_4_4_4, E_80_64_2_4_16_4n2, r_2_10_64_8_16_80_4_4_4n1, r_2_80_2_16_8_320_3_3_4_4, r_2_80_2_16_8_320_3_3_4_4, r_64_16_640, r_64_16_640n1, E_80_16_2_4_16_4, E_2_40_16_8_16_4, E_5120_32_4, E_10_32_4, r_40_4_8_160_4, r_2_160_2_16_8_320_3_3_4_4, r_64_16_1280, r_64_16_1280n1, E_160_16_2_4_16_4, E_2_80_16_8_16_4, E_10240_32_4, r_2_160_2_16_8_640_3_3_4_4, r_2_20_16_8_16_80_4_4_4, r_64_16_1280, r_64_16_1280n1, E_160_16_2_4_16_4, r_2_20_16_8_16_160_4_4_4, E_16_160_2_16_4_4, r_2048_16_40, r_2048_16_40n1, E_64_10_8_16_4_4, r_64_10_8_16_160_4_4_4, r_64_10_8_16_160_4_4_4, r_2_8_32_16_8_16_20_4_4_4, r_512_32_256_4, E_2048_16_8_16_4, r_512_32_256_4n1, E_2048_16_8_16_4n1, r_64_10_8_16_160_4_4_4, r_2_4_16_5_2_16_4_256_4_4_4, r_2_32_10_8_16_160_4_4_4, r_2048_16_40, r_2048_16_40n1, E_64_10_8_16_4_4, r_64_10_8_16_160_4_4_4, r_77_10_2_16_192_4_4, r_2_16_77_8_16_20_4_4, r_512_32_77, E_128_77_32_4, r_512_32_77n1, E_512_77_32, r_77_10_2_16_192_4_4, r_2_4_16_5_2_16_4_77_4_4, r_2_32_10_8_16_160_4_4_4, r_2048_16_40, r_2048_16_40n1, E_64_10_8_16_4_4, r_64_80_8_16_160_4_4_4, E_64_160_8_16_4, E_64_160_8_16_4n1, E_16_640_32_4_4, r_64_10_8_16_640_4_4_4, E_160_16_2_4_16_4n1, r_2_20_16_8_16_80_4_4_4n1, r_2_20_16_8_16_160_4_4_4n1, r_2_20_16_8_16_160_4_4_4n2, r_64_16_1280, r_64_16_1280n1, E_160_16_2_4_16_4, E_2_80_16_8_16_4, E_10240_32_4, E_10_32_4, r_40_4_8_160_4, r_2_160_2_16_8_640_3_3_4_4n1, r_64_16_1280, r_64_16_1280n1, E_160_16_2_4_16_4, E_2_80_16_8_16_4, E_10240_32_4, r_2_160_2_16_8_640_3_3_4_4n2, E_10240_32_4n1, r_64_16_1280, r_64_16_1280n1, E_160_16_2_4_16_4, r_2_20_16_8_16_160_4_4_4, E_16_160_2_16_4_4, r_2048_16_40, r_2048_16_40n1, E_64_10_8_16_4_4, r_64_10_8_16_160_4_4_4, r_64_10_8_16_160_4_4_4, r_2_8_32_16_8_16_20_4_4_4, r_512_32_256_4, E_2048_16_8_16_4, r_512_32_256_4n1, E_2048_16_8_16_4n1, r_64_10_8_16_160_4_4_4, r_2_4_16_5_2_16_4_256_4_4_4, r_2_32_10_8_16_160_4_4_4, r_2048_16_40, r_2048_16_40n1, E_64_10_8_16_4_4, r_64_10_8_16_160_4_4_4, r_77_10_2_16_192_4_4, r_2_16_77_8_16_20_4_4, r_512_32_77, E_128_77_32_4, r_512_32_77n1, E_512_77_32, r_77_10_2_16_192_4_4, r_2_4_16_5_2_16_4_77_4_4, r_2_32_10_8_16_160_4_4_4, r_2048_16_40, r_2048_16_40n1, E_64_10_8_16_4_4, r_64_80_8_16_160_4_4_4, E_64_160_8_16_4, E_64_160_8_16_4n1, E_16_640_32_4_4, r_64_10_8_16_640_4_4_4, E_160_16_2_4_16_4n1, r_2_20_16_8_16_160_4_4_4n3, r_2_80_2_16_4_640_3_3_4_4, r_2_80_2_16_4_640_3_3_4_4, r_64_16_320, r_64_16_320n1, E_160_4_2_4_16_4, E_2_80_4_8_16_4, E_2560_32_4, E_10_32_4, r_80_4_8_160_4n1, r_2_160_2_16_4_640_3_3_4_4, r_64_16_640, r_64_16_640n1, E_320_4_2_4_16_4, E_2_160_4_8_16_4, E_5120_32_4n1, r_2_160_2_16_4_1280_3_3_4_4, r_2_40_4_8_16_160_4_4_4, r_64_16_640, r_64_16_640n1, E_320_4_2_4_16_4, r_2_40_4_8_16_320_4_4_4, E_4_320_2_16_4_4, r_512_16_80, r_512_16_80n1, E_16_20_8_16_4_4, r_16_20_8_16_320_4_4_4, r_16_20_8_16_320_4_4_4, r_2_8_8_4_8_16_40_4_4_4, r_128_32_64_4, E_512_4_8_16_4, r_128_32_64_4n1, E_512_4_8_16_4n1, r_16_20_8_16_320_4_4_4, r_2_8_4_5_16_8_64_4_4_4, r_2_8_20_8_16_320_4_4_4, r_512_16_80, r_512_16_80n1, E_16_20_8_16_4_4, r_16_20_8_16_320_4_4_4, r_77_20_2_16_192_4_4, r_2_4_77_8_16_40_4_4, r_128_32_77, E_32_77_32_4, r_128_32_77n1, E_128_77_32, r_77_20_2_16_192_4_4, r_2_8_4_5_16_8_77_4_4, r_2_8_20_8_16_320_4_4_4, r_512_16_80, r_512_16_80n1, E_16_20_8_16_4_4, r_16_160_8_16_320_4_4_4, E_16_320_8_16_4, E_16_320_8_16_4n1, E_4_1280_32_4_4, r_16_20_8_16_1280_4_4_4, E_320_4_2_4_16_4n1, r_2_40_4_8_16_160_4_4_4n1, r_2_40_4_8_16_320_4_4_4n1, r_2_40_4_8_16_320_4_4_4n2, r_64_16_640, r_64_16_640n1, E_320_4_2_4_16_4, E_2_160_4_8_16_4, E_5120_32_4n1, E_10_32_4, r_80_4_8_160_4n1, r_2_160_2_16_4_1280_3_3_4_4n1, r_64_16_640, r_64_16_640n1, E_320_4_2_4_16_4, E_2_160_4_8_16_4, E_5120_32_4n1, r_2_160_2_16_4_1280_3_3_4_4n2, E_5120_32_4n2, r_64_16_640, r_64_16_640n1, E_320_4_2_4_16_4, r_2_40_4_8_16_320_4_4_4, E_4_320_2_16_4_4, r_512_16_80, r_512_16_80n1, E_16_20_8_16_4_4, r_16_20_8_16_320_4_4_4, r_16_20_8_16_320_4_4_4, r_2_8_8_4_8_16_40_4_4_4, r_128_32_64_4, E_512_4_8_16_4, r_128_32_64_4n1, E_512_4_8_16_4n1, r_16_20_8_16_320_4_4_4, r_2_8_4_5_16_8_64_4_4_4, r_2_8_20_8_16_320_4_4_4, r_512_16_80, r_512_16_80n1, E_16_20_8_16_4_4, r_16_20_8_16_320_4_4_4, r_77_20_2_16_192_4_4, r_2_4_77_8_16_40_4_4, r_128_32_77, E_32_77_32_4, r_128_32_77n1, E_128_77_32, r_77_20_2_16_192_4_4, r_2_8_4_5_16_8_77_4_4, r_2_8_20_8_16_320_4_4_4, r_512_16_80, r_512_16_80n1, E_16_20_8_16_4_4, r_16_160_8_16_320_4_4_4, E_16_320_8_16_4, E_16_320_8_16_4n1, E_4_1280_32_4_4, r_16_20_8_16_1280_4_4_4, E_320_4_2_4_16_4n1, r_2_40_4_8_16_320_4_4_4n3, r_2_40_8_8_2_1280_3_3_4_4, r_2_40_8_8_2_1280_3_3_4_4n1, r_64_16_160, r_64_16_160n1, E_320_2_4_16_4, E_2_160_8_16_4, E_1280_32_4, E_10_32_4, r_80_4_8_160_4n1, r_2_40_8_8_2_1280_3_3_4_4n2, r_64_16_160, r_64_16_160n1, E_320_2_4_16_4, E_2_160_8_16_4, E_1280_32_4, r_2_40_8_8_2_1280_3_3_4_4n3, r_2_40_8_8_2_1280_3_3_4_4n4, r_64_16_160, r_64_16_160n1, E_320_2_4_16_4, E_2_160_8_16_4, E_1280_32_4, E_10_32_4, r_80_4_8_160_4n1, r_2_40_8_8_2_1280_3_3_4_4n2, r_64_16_160, r_64_16_160n1, E_320_2_4_16_4, E_2_160_8_16_4, E_1280_32_4, r_2_40_8_8_2_1280_3_3_4_4n5, r_2_40_8_8_2_1280_3_3_4_4n4, r_64_16_160, r_64_16_160n1, E_320_2_4_16_4, E_2_160_8_16_4, E_1280_32_4, E_10_32_4, r_80_4_8_160_4n1, r_2_40_8_8_2_1280_3_3_4_4n2, r_64_16_160, r_64_16_160n1, E_320_2_4_16_4, E_2_160_8_16_4, E_1280_32_4, r_2_40_8_8_2_1280_3_3_4_4n6, E_1280_32_4n1, r_64_16_160, r_64_16_160n1, E_320_2_4_16_4, r_2_40_8_16_320_4_4_4, E_320_2_16_4_4, r_128_16_80, r_128_16_80n1, E_4_20_8_16_4_4, r_4_20_8_16_320_4_4_4, r_4_20_8_16_320_4_4_4, r_2_8_2_8_16_40_4_4_4, r_1024_16_4, E_128_8_16_4, r_1024_16_4n1, E_128_8_16_4n1, r_4_20_8_16_320_4_4_4, r_2_8_5_16_8_16_4_4_4, r_2_2_20_8_16_320_4_4_4, r_128_16_80, r_128_16_80n1, E_4_20_8_16_4_4, r_4_20_8_16_320_4_4_4, r_77_20_2_16_192_4_4, r_2_77_8_16_40_4_4, r_32_32_77, E_8_77_32_4, r_32_32_77n1, E_32_77_32, r_77_20_2_16_192_4_4, r_2_8_5_16_8_77_4_4, r_2_2_20_8_16_320_4_4_4, r_128_16_80, r_128_16_80n1, E_4_20_8_16_4_4, r_4_160_8_16_320_4_4_4, E_4_320_8_16_4, E_4_320_8_16_4n1, E_1280_32_4_4, r_4_20_8_16_1280_4_4_4, E_320_2_4_16_4n1, r_2_40_8_16_320_4_4_4, r_2_40_8_16_320_4_4_4n1, r_64_16_160, r_64_16_160n1, E_320_2_4_16_4, E_2_160_8_16_4, E_1280_32_4, E_10_32_4, r_80_4_8_160_4n1, r_2_40_8_8_2_1280_3_3_4_4n2, r_64_16_160, r_64_16_160n1, E_320_2_4_16_4, E_2_160_8_16_4, E_1280_32_4, r_2_40_8_8_2_1280_3_3_4_4n3, E_2_320_8_16_4, E_2_320_8_16_4n1, r_2_40_8_16_640_4_4_4, E_2_4_80_8_16_4, r_64_16_320, r_64_16_320n1, E_640_2_4_16_4, E_2_320_8_16_4n2, E_2560_32_4n1, E_10_32_4, r_80_4_8_160_4n1, r_2_40_8_8_2_2560_3_3_4_4, r_64_16_160, r_64_16_160n1, E_320_2_4_16_4, E_2_160_8_16_4, E_1280_32_4, r_2_40_8_8_2_1280_3_3_4_4n3, E_2_320_8_16_4n3, E_2_320_8_16_4n4, E_2560_32_4n2, r_2_40_8_16_640_4_4_4, E_2560_32_4n3, r_64_16_320, r_64_16_320n1, E_640_2_4_16_4, E_2_320_8_16_4n2, E_2560_32_4n1, E_10_32_4, r_80_4_8_160_4n1, r_2_40_8_8_2_2560_3_3_4_4, r_64_16_160, r_64_16_160n1, E_320_2_4_16_4, E_2_160_8_16_4, E_1280_32_4, r_2_40_8_8_2_1280_3_3_4_4n3, E_2_320_8_16_4n5, E_2_4_80_8_16_4n1, r_64_16_320, r_64_16_320n1, E_640_2_4_16_4, E_2_320_8_16_4n2, E_2560_32_4n1, E_10_32_4, r_80_4_8_160_4n1, r_2_40_8_8_2_2560_3_3_4_4, r_64_16_160, r_64_16_160n1, E_320_2_4_16_4, E_2_160_8_16_4, E_1280_32_4, r_2_40_8_8_2_1280_3_3_4_4n3, r_2_40_8_16_640_4_4_4n1, r_2_160_2_16_4_1280_3_3_4_4n3, E_2_320_4_8_16_4, E_2_4_320_8_16_4, r_64_16_1280, r_64_16_1280n1, E_640_4_2_4_16_4, E_2_320_4_8_16_4n1, E_10240_32_4n2, E_10_32_4, r_80_4_8_160_4n1, r_2_160_2_16_4_2560_3_3_4_4, r_64_16_640, r_64_16_640n1, E_320_4_2_4_16_4, E_2_160_4_8_16_4, E_5120_32_4n1, r_2_160_2_16_4_1280_3_3_4_4, r_2_40_4_8_16_640_4_4_4, r_64_16_640, r_64_16_640n1, E_320_4_2_4_16_4, r_2_40_4_8_16_320_4_4_4, E_4_320_2_16_4_4, r_512_16_80, r_512_16_80n1, E_16_20_8_16_4_4, r_16_20_8_16_320_4_4_4, r_16_20_8_16_320_4_4_4, r_2_8_8_4_8_16_40_4_4_4, r_128_32_64_4, E_512_4_8_16_4, r_128_32_64_4n1, E_512_4_8_16_4n1, r_16_20_8_16_320_4_4_4, r_2_8_4_5_16_8_64_4_4_4, r_2_8_20_8_16_320_4_4_4, r_512_16_80, r_512_16_80n1, E_16_20_8_16_4_4, r_16_20_8_16_320_4_4_4, r_77_20_2_16_192_4_4, r_2_4_77_8_16_40_4_4, r_128_32_77, E_32_77_32_4, r_128_32_77n1, E_128_77_32, r_77_20_2_16_192_4_4, r_2_8_4_5_16_8_77_4_4, r_2_8_20_8_16_320_4_4_4, r_512_16_80, r_512_16_80n1, E_16_20_8_16_4_4, r_16_160_8_16_320_4_4_4, E_16_320_8_16_4, E_16_320_8_16_4n1, E_4_1280_32_4_4, r_16_20_8_16_1280_4_4_4, E_320_4_2_4_16_4n1, r_2_40_4_8_16_320_4_4_4, r_2_40_4_8_16_640_4_4_4n1, E_2_320_4_8_16_4n2, E_2_320_4_8_16_4n3, E_2_4_320_8_16_4n1, r_64_16_1280, r_64_16_1280n1, E_640_4_2_4_16_4, E_2_320_4_8_16_4n1, E_10240_32_4n2, E_10_32_4, r_80_4_8_160_4n1, r_2_160_2_16_4_2560_3_3_4_4, r_64_16_640, r_64_16_640n1, E_320_4_2_4_16_4, E_2_160_4_8_16_4, E_5120_32_4n1, r_2_160_2_16_4_1280_3_3_4_4, r_2_40_4_8_16_640_4_4_4, r_64_16_640, r_64_16_640n1, E_320_4_2_4_16_4, r_2_40_4_8_16_320_4_4_4, E_4_320_2_16_4_4, r_512_16_80, r_512_16_80n1, E_16_20_8_16_4_4, r_16_20_8_16_320_4_4_4, r_16_20_8_16_320_4_4_4, r_2_8_8_4_8_16_40_4_4_4, r_128_32_64_4, E_512_4_8_16_4, r_128_32_64_4n1, E_512_4_8_16_4n1, r_16_20_8_16_320_4_4_4, r_2_8_4_5_16_8_64_4_4_4, r_2_8_20_8_16_320_4_4_4, r_512_16_80, r_512_16_80n1, E_16_20_8_16_4_4, r_16_20_8_16_320_4_4_4, r_77_20_2_16_192_4_4, r_2_4_77_8_16_40_4_4, r_128_32_77, E_32_77_32_4, r_128_32_77n1, E_128_77_32, r_77_20_2_16_192_4_4, r_2_8_4_5_16_8_77_4_4, r_2_8_20_8_16_320_4_4_4, r_512_16_80, r_512_16_80n1, E_16_20_8_16_4_4, r_16_160_8_16_320_4_4_4, E_16_320_8_16_4, E_16_320_8_16_4n1, E_4_1280_32_4_4, r_16_20_8_16_1280_4_4_4, E_320_4_2_4_16_4n1, r_2_40_4_8_16_320_4_4_4, r_2_40_4_8_16_640_4_4_4n1, E_2_240_4_8_16_4, E_2_240_4_8_16_4n1, E_2_4_240_8_16_4, r_64_16_960, r_64_16_960n1, E_480_4_2_4_16_4, E_2_240_4_8_16_4n2, E_7680_32_4, E_10_32_4, r_80_4_8_160_4n1, r_2_160_2_16_4_1920_3_3_4_4, r_64_16_640, r_64_16_640n1, E_320_4_2_4_16_4, E_2_160_4_8_16_4, E_5120_32_4n1, r_2_160_2_16_4_1280_3_3_4_4, r_2_40_4_8_16_480_4_4_4, r_64_16_640, r_64_16_640n1, E_320_4_2_4_16_4, r_2_40_4_8_16_320_4_4_4, E_4_320_2_16_4_4, r_512_16_80, r_512_16_80n1, E_16_20_8_16_4_4, r_16_20_8_16_320_4_4_4, r_16_20_8_16_320_4_4_4, r_2_8_8_4_8_16_40_4_4_4, r_128_32_64_4, E_512_4_8_16_4, r_128_32_64_4n1, E_512_4_8_16_4n1, r_16_20_8_16_320_4_4_4, r_2_8_4_5_16_8_64_4_4_4, r_2_8_20_8_16_320_4_4_4, r_512_16_80, r_512_16_80n1, E_16_20_8_16_4_4, r_16_20_8_16_320_4_4_4, r_77_20_2_16_192_4_4, r_2_4_77_8_16_40_4_4, r_128_32_77, E_32_77_32_4, r_128_32_77n1, E_128_77_32, r_77_20_2_16_192_4_4, r_2_8_4_5_16_8_77_4_4, r_2_8_20_8_16_320_4_4_4, r_512_16_80, r_512_16_80n1, E_16_20_8_16_4_4, r_16_160_8_16_320_4_4_4, E_16_320_8_16_4, E_16_320_8_16_4n1, E_4_1280_32_4_4, r_16_20_8_16_1280_4_4_4, E_320_4_2_4_16_4n1, r_2_40_4_8_16_480_4_4_4n1, r_2_40_4_8_16_320_4_4_4n1, r_2_320_2_16_8_1280_3_3_4_4, E_2_240_16_8_16_4, r_2_4_15_8_16_64_4, r_64_16_15, E_2_4_1280_8_16_3, r_960_4_8_32_4, r_64_16_15n1, E_480_16_2_4_16_4, E_2_240_16_8_16_4n1, E_30720_32_4, E_10_32_4, r_40_4_8_160_4, r_2_160_2_16_8_1920_3_3_4_4, r_64_16_1280, r_64_16_1280n1, E_160_16_2_4_16_4, E_2_80_16_8_16_4, E_10240_32_4, r_2_160_2_16_8_640_3_3_4_4, r_2_20_16_8_16_480_4_4_4, r_64_16_1280, r_64_16_1280n1, E_160_16_2_4_16_4, r_2_20_16_8_16_160_4_4_4, E_16_160_2_16_4_4, r_2048_16_40, r_2048_16_40n1, E_64_10_8_16_4_4, r_64_10_8_16_160_4_4_4, r_64_10_8_16_160_4_4_4, r_2_8_32_16_8_16_20_4_4_4, r_512_32_256_4, E_2048_16_8_16_4, r_512_32_256_4n1, E_2048_16_8_16_4n1, r_64_10_8_16_160_4_4_4, r_2_4_16_5_2_16_4_256_4_4_4, r_2_32_10_8_16_160_4_4_4, r_2048_16_40, r_2048_16_40n1, E_64_10_8_16_4_4, r_64_10_8_16_160_4_4_4, r_77_10_2_16_192_4_4, r_2_16_77_8_16_20_4_4, r_512_32_77, E_128_77_32_4, r_512_32_77n1, E_512_77_32, r_77_10_2_16_192_4_4, r_2_4_16_5_2_16_4_77_4_4, r_2_32_10_8_16_160_4_4_4, r_2048_16_40, r_2048_16_40n1, E_64_10_8_16_4_4, r_64_80_8_16_160_4_4_4, E_64_160_8_16_4, E_64_160_8_16_4n1, E_16_640_32_4_4, r_64_10_8_16_640_4_4_4, E_160_16_2_4_16_4n1, r_2_20_16_8_16_160_4_4_4, r_2_20_16_8_16_480_4_4_4n1, E_2_160_16_8_16_4, E_2_160_16_8_16_4n1, E_2_32_20_4_8_16_4n2, r_320_32_64_4, r_64_16_10, r_4_5_16_8_64_4_4, r_64_16_10n1, E_320_16_2_4_16_4, E_2_160_16_8_16_4n2, E_20480_32_4n2, E_10_32_4, r_40_4_8_160_4, r_2_160_2_16_8_1280_3_3_4_4, r_64_16_1280, r_64_16_1280n1, E_160_16_2_4_16_4, E_2_80_16_8_16_4, E_10240_32_4, r_2_160_2_16_8_640_3_3_4_4, r_2_20_16_8_16_320_4_4_4, r_64_16_1280, r_64_16_1280n1, E_160_16_2_4_16_4, r_2_20_16_8_16_160_4_4_4, E_16_160_2_16_4_4, r_2048_16_40, r_2048_16_40n1, E_64_10_8_16_4_4, r_64_10_8_16_160_4_4_4, r_64_10_8_16_160_4_4_4, r_2_8_32_16_8_16_20_4_4_4, r_512_32_256_4, E_2048_16_8_16_4, r_512_32_256_4n1, E_2048_16_8_16_4n1, r_64_10_8_16_160_4_4_4, r_2_4_16_5_2_16_4_256_4_4_4, r_2_32_10_8_16_160_4_4_4, r_2048_16_40, r_2048_16_40n1, E_64_10_8_16_4_4, r_64_10_8_16_160_4_4_4, r_77_10_2_16_192_4_4, r_2_16_77_8_16_20_4_4, r_512_32_77, E_128_77_32_4, r_512_32_77n1, E_512_77_32, r_77_10_2_16_192_4_4, r_2_4_16_5_2_16_4_77_4_4, r_2_32_10_8_16_160_4_4_4, r_2048_16_40, r_2048_16_40n1, E_64_10_8_16_4_4, r_64_80_8_16_160_4_4_4, E_64_160_8_16_4, E_64_160_8_16_4n1, E_16_640_32_4_4, r_64_10_8_16_640_4_4_4, E_160_16_2_4_16_4n1, r_2_20_16_8_16_160_4_4_4, r_2_20_16_8_16_320_4_4_4n1, E_2_120_16_8_16_4, E_2_120_16_8_16_4n1, E_2_4_480_8_16_4, r_64_16_1920, r_64_16_1920n1, E_240_16_2_4_16_4, E_2_120_16_8_16_4n2, E_15360_32_4, E_10_32_4, r_40_4_8_160_4, r_2_160_2_16_8_960_3_3_4_4, r_64_16_1280, r_64_16_1280n1, E_160_16_2_4_16_4, E_2_80_16_8_16_4, E_10240_32_4, r_2_160_2_16_8_640_3_3_4_4, r_2_20_16_8_16_240_4_4_4, r_64_16_1280, r_64_16_1280n1, E_160_16_2_4_16_4, r_2_20_16_8_16_160_4_4_4, E_16_160_2_16_4_4, r_2048_16_40, r_2048_16_40n1, E_64_10_8_16_4_4, r_64_10_8_16_160_4_4_4, r_64_10_8_16_160_4_4_4, r_2_8_32_16_8_16_20_4_4_4, r_512_32_256_4, E_2048_16_8_16_4, r_512_32_256_4n1, E_2048_16_8_16_4n1, r_64_10_8_16_160_4_4_4, r_2_4_16_5_2_16_4_256_4_4_4, r_2_32_10_8_16_160_4_4_4, r_2048_16_40, r_2048_16_40n1, E_64_10_8_16_4_4, r_64_10_8_16_160_4_4_4, r_77_10_2_16_192_4_4, r_2_16_77_8_16_20_4_4, r_512_32_77, E_128_77_32_4, r_512_32_77n1, E_512_77_32, r_77_10_2_16_192_4_4, r_2_4_16_5_2_16_4_77_4_4, r_2_32_10_8_16_160_4_4_4, r_2048_16_40, r_2048_16_40n1, E_64_10_8_16_4_4, r_64_80_8_16_160_4_4_4, E_64_160_8_16_4, E_64_160_8_16_4n1, E_16_640_32_4_4, r_64_10_8_16_640_4_4_4, E_160_16_2_4_16_4n1, r_2_20_16_8_16_240_4_4_4n1, r_2_20_16_8_16_160_4_4_4n1, r_2_160_8_8_16_640_3_3_4_4, E_2_120_64_8_16_4, r_2_10_64_8_16_240_4_4_4, r_2_4_30_8_16_64_4, r_64_16_30, E_2_4_2560_8_16_3, r_1920_4_8_32_4, r_64_16_30n1, E_240_64_2_4_16_4, E_2_120_64_8_16_4n1, E_61440_32_4, r_2_80_8_8_16_960_3_3_4_4, E_10_32_4, r_20_4_8_160_4, r_2_4_10_8_16_64_4, r_64_16_10, E_2_4_640_8_16_4, r_640_4_8_32_4, r_64_16_10n1, E_80_64_2_4_16_4n1, E_2_40_64_8_16_4n1, E_20480_32_4, r_2_80_8_8_16_320_3_3_4_4, r_2_4_10_8_16_64_4n2, r_64_16_10, E_2_4_640_8_16_4n1, r_640_4_8_32_4, r_64_16_10n1, E_80_64_2_4_16_4n1, r_2_10_64_8_16_80_4_4_4, E_64_80_2_16_4_4, r_64_32_80_4_4, r_64_32_80_4_4n1, E_256_5_8_16_4_4, r_256_5_8_16_80_4_4_4, r_256_5_8_16_80_4_4_4, r_2_8_128_64_8_16_10_4_4_4, r_2048_32_1024_4, E_8192_64_8_16_4, r_2048_32_1024_4n1, E_8192_64_8_16_4n1, r_256_5_8_16_80_4_4_4, r_2_2_64_5_4_16_2_1024_4_4_4, r_2_128_5_8_16_80_4_4_4, r_64_32_80_4_4, r_64_32_80_4_4n1, E_256_5_8_16_4_4, r_256_5_8_16_80_4_4_4, r_77_5_2_16_192_4_4, r_2_64_77_8_16_10_4_4, r_2048_32_77, E_512_77_32_4, r_2048_32_77n1, E_2048_77_32, r_77_5_2_16_192_4_4, r_2_2_64_5_4_16_2_77_4_4, r_2_128_5_8_16_80_4_4_4, r_64_32_80_4_4, r_64_32_80_4_4n1, E_256_5_8_16_4_4, r_256_40_8_16_80_4_4_4, E_256_80_8_16_4, E_256_80_8_16_4n1, E_64_320_32_4_4, r_256_5_8_16_320_4_4_4, E_80_64_2_4_16_4n2, r_2_10_64_8_16_80_4_4_4, E_2_80_64_8_16_4, E_2_80_64_8_16_4n1, r_2_10_64_8_16_160_4_4_4, E_2_32_40_4_8_16_4, r_640_32_64_4, r_64_16_20, r_8_5_8_16_64_4_4, r_64_16_20n1, E_160_64_2_4_16_4, E_2_80_64_8_16_4n2, E_40960_32_4, r_2_80_8_8_16_640_3_3_4_4, E_10_32_4, r_20_4_8_160_4, r_2_4_10_8_16_64_4, r_64_16_10, E_2_4_640_8_16_4, r_640_4_8_32_4, r_64_16_10n1, E_80_64_2_4_16_4n1, E_2_40_64_8_16_4n1, E_20480_32_4, r_2_80_8_8_16_320_3_3_4_4, r_2_4_10_8_16_64_4n2, r_64_16_10, E_2_4_640_8_16_4n1, r_640_4_8_32_4, r_64_16_10n1, E_80_64_2_4_16_4n1, r_2_10_64_8_16_80_4_4_4, E_64_80_2_16_4_4, r_64_32_80_4_4, r_64_32_80_4_4n1, E_256_5_8_16_4_4, r_256_5_8_16_80_4_4_4, r_256_5_8_16_80_4_4_4, r_2_8_128_64_8_16_10_4_4_4, r_2048_32_1024_4, E_8192_64_8_16_4, r_2048_32_1024_4n1, E_8192_64_8_16_4n1, r_256_5_8_16_80_4_4_4, r_2_2_64_5_4_16_2_1024_4_4_4, r_2_128_5_8_16_80_4_4_4, r_64_32_80_4_4, r_64_32_80_4_4n1, E_256_5_8_16_4_4, r_256_5_8_16_80_4_4_4, r_77_5_2_16_192_4_4, r_2_64_77_8_16_10_4_4, r_2048_32_77, E_512_77_32_4, r_2048_32_77n1, E_2048_77_32, r_77_5_2_16_192_4_4, r_2_2_64_5_4_16_2_77_4_4, r_2_128_5_8_16_80_4_4_4, r_64_32_80_4_4, r_64_32_80_4_4n1, E_256_5_8_16_4_4, r_256_40_8_16_80_4_4_4, E_256_80_8_16_4, E_256_80_8_16_4n1, E_64_320_32_4_4, r_256_5_8_16_320_4_4_4, E_80_64_2_4_16_4n2, r_2_10_64_8_16_80_4_4_4, E_2_80_64_8_16_4, E_2_80_64_8_16_4n3, E_40960_32_4n1, r_2_10_64_8_16_160_4_4_4, E_40960_32_4n2, r_640_32_64_4, r_64_16_20, r_8_5_8_16_64_4_4, r_64_16_20n1, E_160_64_2_4_16_4n1, E_2_80_64_8_16_4n4, E_40960_32_4, r_2_80_8_8_16_640_3_3_4_4, E_10_32_4, r_20_4_8_160_4, r_2_4_10_8_16_64_4, r_64_16_10, E_2_4_640_8_16_4, r_640_4_8_32_4, r_64_16_10n1, E_80_64_2_4_16_4n1, E_2_40_64_8_16_4n1, E_20480_32_4, r_2_80_8_8_16_320_3_3_4_4, E_2_32_20_4_8_16_4n3, r_320_32_64_4, r_64_16_10, E_2_4_640_8_16_4n1, r_640_4_8_32_4, r_64_16_10n1, E_80_64_2_4_16_4n1, r_2_10_64_8_16_80_4_4_4, E_64_80_2_16_4_4, r_64_32_80_4_4, r_64_32_80_4_4n1, E_256_5_8_16_4_4, r_256_5_8_16_80_4_4_4, r_256_5_8_16_80_4_4_4, r_2_8_128_64_8_16_10_4_4_4, r_2048_32_1024_4, E_8192_64_8_16_4, r_2048_32_1024_4n1, E_8192_64_8_16_4n1, r_256_5_8_16_80_4_4_4, r_2_2_64_5_4_16_2_1024_4_4_4, r_2_128_5_8_16_80_4_4_4, r_64_32_80_4_4, r_64_32_80_4_4n1, E_256_5_8_16_4_4, r_256_5_8_16_80_4_4_4, r_77_5_2_16_192_4_4, r_2_64_77_8_16_10_4_4, r_2048_32_77, E_512_77_32_4, r_2048_32_77n1, E_2048_77_32, r_77_5_2_16_192_4_4, r_2_2_64_5_4_16_2_77_4_4, r_2_128_5_8_16_80_4_4_4, r_64_32_80_4_4, r_64_32_80_4_4n1, E_256_5_8_16_4_4, r_256_40_8_16_80_4_4_4, E_256_80_8_16_4, E_256_80_8_16_4n1, E_64_320_32_4_4, r_256_5_8_16_320_4_4_4, E_80_64_2_4_16_4n2, r_2_10_64_8_16_80_4_4_4, E_2_4_640_8_16_4n2, r_2_4_10_8_16_64_4n1, r_64_16_10, r_4_5_16_8_64_4_4, r_64_16_10n1, E_80_64_2_4_16_4n4, E_2_40_64_8_16_4n2, E_20480_32_4, r_2_8_8_16_320_3_3_4_4, E_64_4_16_4];
        const piplines = await Promise.all(kernels.map(name => device.createComputePipelineAsync({layout: "auto", compute: { module: device.createShaderModule({ code: name }), entryPoint: "main" }})));

        return async (data0,data1,data2,data3) => {
            const commandEncoder = device.createCommandEncoder();

            await gpuWriteBuffer0.mapAsync(GPUMapMode.WRITE);
    new Float32Array(gpuWriteBuffer0.getMappedRange()).set(data0);
    gpuWriteBuffer0.unmap();
commandEncoder.copyBufferToBuffer(gpuWriteBuffer0, 0, input0, 0, gpuWriteBuffer0.size);
    await gpuWriteBuffer1.mapAsync(GPUMapMode.WRITE);
    new Float32Array(gpuWriteBuffer1.getMappedRange()).set(data1);
    gpuWriteBuffer1.unmap();
commandEncoder.copyBufferToBuffer(gpuWriteBuffer1, 0, input1, 0, gpuWriteBuffer1.size);
    await gpuWriteBuffer2.mapAsync(GPUMapMode.WRITE);
    new Float32Array(gpuWriteBuffer2.getMappedRange()).set(data2);
    gpuWriteBuffer2.unmap();
commandEncoder.copyBufferToBuffer(gpuWriteBuffer2, 0, input2, 0, gpuWriteBuffer2.size);
    await gpuWriteBuffer3.mapAsync(GPUMapMode.WRITE);
    new Float32Array(gpuWriteBuffer3.getMappedRange()).set(data3);
    gpuWriteBuffer3.unmap();
commandEncoder.copyBufferToBuffer(gpuWriteBuffer3, 0, input3, 0, gpuWriteBuffer3.size);

            addComputePass(device, commandEncoder, piplines[0], [buf_0, input0, buf_1], [8, 80, 2]);
        addComputePass(device, commandEncoder, piplines[1], [buf_2, buf_0, buf_3], [80, 32, 2]);
        addComputePass(device, commandEncoder, piplines[2], [buf_4, buf_2], [320, 1, 1]);
        addComputePass(device, commandEncoder, piplines[3], [buf_5, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[4], [buf_4, buf_0, buf_3, buf_5], [5, 2, 2]);
        addComputePass(device, commandEncoder, piplines[5], [buf_6, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[6], [buf_4, buf_0, buf_3, buf_5, buf_6, buf_7, buf_8], [64, 80, 1]);
        addComputePass(device, commandEncoder, piplines[7], [buf_9, buf_0, buf_3, buf_5, buf_6, buf_7, buf_8], [64, 40, 2]);
        addComputePass(device, commandEncoder, piplines[8], [buf_5, buf_4, buf_9], [20480, 1, 1]);
        addComputePass(device, commandEncoder, piplines[9], [buf_4, buf_5, buf_10], [8, 80, 2]);
        addComputePass(device, commandEncoder, piplines[10], [buf_9], [160, 1, 1]);
        addComputePass(device, commandEncoder, piplines[11], [buf_6, input1, buf_9], [5, 1, 1]);
        addComputePass(device, commandEncoder, piplines[12], [buf_11, input1, buf_9], [5, 1, 1]);
        addComputePass(device, commandEncoder, piplines[13], [buf_5, buf_6, buf_11], [5, 1, 1]);
        addComputePass(device, commandEncoder, piplines[14], [buf_9, buf_5, buf_12, buf_13], [80, 1, 1]);
        addComputePass(device, commandEncoder, piplines[15], [buf_14, buf_9, buf_15], [80, 1, 1]);
        addComputePass(device, commandEncoder, piplines[16], [buf_9, buf_14, buf_16], [10, 1, 1]);
        addComputePass(device, commandEncoder, piplines[17], [buf_5, buf_9, buf_17, buf_18], [20, 1, 1]);
        addComputePass(device, commandEncoder, piplines[18], [buf_9, buf_4, buf_19, buf_5], [10, 4, 2]);
        addComputePass(device, commandEncoder, piplines[19], [buf_6, buf_9], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[20], [buf_9, buf_4, buf_19, buf_5, buf_6], [640, 4, 2]);
        addComputePass(device, commandEncoder, piplines[21], [buf_4, buf_9], [640, 1, 1]);
        addComputePass(device, commandEncoder, piplines[22], [buf_6, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[23], [buf_4, buf_9, buf_6, buf_20, buf_21], [64, 80, 1]);
        addComputePass(device, commandEncoder, piplines[24], [buf_5, buf_9, buf_6, buf_20, buf_21], [64, 40, 2]);
        addComputePass(device, commandEncoder, piplines[25], [buf_9, buf_4, buf_5], [20480, 1, 1]);
        addComputePass(device, commandEncoder, piplines[26], [buf_6, buf_9, buf_22], [8, 80, 2]);
        addComputePass(device, commandEncoder, piplines[27], [buf_11, buf_2, buf_6, buf_23], [80, 32, 2]);
        addComputePass(device, commandEncoder, piplines[28], [buf_2, buf_11], [320, 1, 1]);
        addComputePass(device, commandEncoder, piplines[29], [buf_4, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[30], [buf_2, buf_0, buf_3, buf_6, buf_23, buf_4], [640, 4, 2]);
        addComputePass(device, commandEncoder, piplines[31], [buf_4, buf_2], [640, 1, 1]);
        addComputePass(device, commandEncoder, piplines[32], [buf_9, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[33], [buf_4, buf_2, buf_9, buf_24, buf_25], [64, 80, 1]);
        addComputePass(device, commandEncoder, piplines[34], [buf_2, buf_4, buf_26], [64, 10, 2]);
        addComputePass(device, commandEncoder, piplines[35], [buf_9, buf_2, buf_27], [80, 64, 1]);
        addComputePass(device, commandEncoder, piplines[36], [buf_2, buf_9], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[37], [buf_4, buf_9, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[38], [buf_5, buf_9, buf_2, buf_4, buf_28, buf_29], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[39], [buf_4, buf_5, buf_30], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[40], [buf_31, buf_5, buf_32], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[41], [buf_2, buf_4, buf_31], [8192, 8, 2]);
        addComputePass(device, commandEncoder, piplines[42], [buf_31, buf_2], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[43], [buf_4, buf_2, buf_31], [64, 8192, 1]);
        addComputePass(device, commandEncoder, piplines[44], [buf_31, buf_4], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[45], [buf_2, buf_4, buf_31], [64, 8192, 1]);
        addComputePass(device, commandEncoder, piplines[46], [buf_4, buf_5, buf_33], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[47], [buf_5, buf_2, buf_4], [320, 2, 2]);
        addComputePass(device, commandEncoder, piplines[48], [buf_31, buf_5, buf_34, buf_35, buf_9], [5, 128, 2]);
        addComputePass(device, commandEncoder, piplines[49], [buf_4, buf_31], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[50], [buf_9, buf_31, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[51], [buf_2, buf_31, buf_4, buf_9, buf_36, buf_37], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[52], [buf_4, buf_2, buf_38], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[53], [buf_39, input2, input3], [1848, 1, 1]);
        addComputePass(device, commandEncoder, piplines[54], [buf_9, buf_39, buf_40], [5, 77, 1]);
        addComputePass(device, commandEncoder, piplines[55], [buf_2, buf_4, buf_9], [77, 64, 2]);
        addComputePass(device, commandEncoder, piplines[56], [buf_9, buf_2], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[57], [buf_4, buf_2, buf_9], [77, 512, 1]);
        addComputePass(device, commandEncoder, piplines[58], [buf_9, buf_4], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[59], [buf_2, buf_4, buf_9], [77, 2048, 1]);
        addComputePass(device, commandEncoder, piplines[60], [buf_9, buf_39, buf_41], [5, 77, 1]);
        addComputePass(device, commandEncoder, piplines[61], [buf_4, buf_2, buf_9], [320, 2, 2]);
        addComputePass(device, commandEncoder, piplines[62], [buf_42, buf_4, buf_43, buf_44, buf_31], [5, 128, 2]);
        addComputePass(device, commandEncoder, piplines[63], [buf_2, buf_42], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[64], [buf_9, buf_42, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[65], [buf_4, buf_42, buf_2, buf_9, buf_45, buf_46], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[66], [buf_2, buf_4, buf_47], [40, 256, 1]);
        addComputePass(device, commandEncoder, piplines[67], [buf_4, buf_2, buf_48], [80, 256, 1]);
        addComputePass(device, commandEncoder, piplines[68], [buf_9, buf_2, buf_48], [80, 256, 1]);
        addComputePass(device, commandEncoder, piplines[69], [buf_5, buf_2, buf_48, buf_4, buf_9], [320, 64, 1]);
        addComputePass(device, commandEncoder, piplines[70], [buf_2, buf_5, buf_49], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[71], [buf_4, buf_2, buf_50, buf_42], [64, 80, 1]);
        addComputePass(device, commandEncoder, piplines[72], [buf_2, buf_4, buf_51], [64, 10, 2]);
        addComputePass(device, commandEncoder, piplines[73], [buf_31, buf_2, buf_52, buf_0, buf_3, buf_6, buf_23], [64, 80, 1]);
        addComputePass(device, commandEncoder, piplines[74], [buf_4, buf_2, buf_52, buf_0, buf_3, buf_6, buf_23], [640, 4, 2]);
        addComputePass(device, commandEncoder, piplines[75], [buf_9, buf_2, buf_52, buf_11], [10, 4, 2]);
        addComputePass(device, commandEncoder, piplines[76], [buf_5, buf_9], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[77], [buf_2, buf_4, buf_5], [5, 4, 1]);
        addComputePass(device, commandEncoder, piplines[78], [buf_6, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[79], [buf_2, buf_4, buf_5, buf_6, buf_53, buf_54], [64, 80, 1]);
        addComputePass(device, commandEncoder, piplines[80], [buf_9, buf_4, buf_5, buf_6, buf_53, buf_54], [64, 40, 2]);
        addComputePass(device, commandEncoder, piplines[81], [buf_4, buf_2, buf_9], [20480, 1, 1]);
        addComputePass(device, commandEncoder, piplines[82], [buf_2, buf_4, buf_55], [8, 80, 2]);
        addComputePass(device, commandEncoder, piplines[83], [buf_4, buf_14, buf_16], [10, 1, 1]);
        addComputePass(device, commandEncoder, piplines[84], [buf_9, buf_4, buf_56, buf_57], [20, 1, 1]);
        addComputePass(device, commandEncoder, piplines[85], [buf_4, buf_2, buf_58, buf_9], [10, 4, 2]);
        addComputePass(device, commandEncoder, piplines[86], [buf_5, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[87], [buf_4, buf_2, buf_58, buf_9, buf_5], [640, 4, 2]);
        addComputePass(device, commandEncoder, piplines[88], [buf_2, buf_4], [640, 1, 1]);
        addComputePass(device, commandEncoder, piplines[89], [buf_5, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[90], [buf_2, buf_4, buf_5, buf_59, buf_60], [64, 80, 1]);
        addComputePass(device, commandEncoder, piplines[91], [buf_9, buf_4, buf_5, buf_59, buf_60], [64, 40, 2]);
        addComputePass(device, commandEncoder, piplines[92], [buf_4, buf_2, buf_9], [20480, 1, 1]);
        addComputePass(device, commandEncoder, piplines[93], [buf_6, buf_4, buf_61, buf_62], [8, 80, 2]);
        addComputePass(device, commandEncoder, piplines[94], [buf_2, buf_31, buf_6], [20480, 1, 1]);
        addComputePass(device, commandEncoder, piplines[95], [buf_4, buf_2], [320, 1, 1]);
        addComputePass(device, commandEncoder, piplines[96], [buf_9, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[97], [buf_4, buf_2, buf_9], [5, 4, 1]);
        addComputePass(device, commandEncoder, piplines[98], [buf_5, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[99], [buf_2, buf_31, buf_6, buf_9, buf_5, buf_63, buf_64], [64, 80, 1]);
        addComputePass(device, commandEncoder, piplines[100], [buf_4, buf_2, buf_65], [64, 10, 2]);
        addComputePass(device, commandEncoder, piplines[101], [buf_9, buf_4, buf_66], [80, 64, 1]);
        addComputePass(device, commandEncoder, piplines[102], [buf_2, buf_9], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[103], [buf_4, buf_9, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[104], [buf_5, buf_9, buf_2, buf_4, buf_67, buf_68], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[105], [buf_4, buf_5, buf_69], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[106], [buf_11, buf_5, buf_70], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[107], [buf_2, buf_4, buf_11], [8192, 8, 2]);
        addComputePass(device, commandEncoder, piplines[108], [buf_11, buf_2], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[109], [buf_4, buf_2, buf_11], [64, 8192, 1]);
        addComputePass(device, commandEncoder, piplines[110], [buf_11, buf_4], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[111], [buf_2, buf_4, buf_11], [64, 8192, 1]);
        addComputePass(device, commandEncoder, piplines[112], [buf_4, buf_5, buf_71], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[113], [buf_5, buf_2, buf_4], [320, 2, 2]);
        addComputePass(device, commandEncoder, piplines[114], [buf_11, buf_5, buf_72, buf_73, buf_9], [5, 128, 2]);
        addComputePass(device, commandEncoder, piplines[115], [buf_4, buf_11], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[116], [buf_9, buf_11, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[117], [buf_2, buf_11, buf_4, buf_9, buf_74, buf_75], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[118], [buf_4, buf_2, buf_76], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[119], [buf_9, buf_39, buf_77], [5, 77, 1]);
        addComputePass(device, commandEncoder, piplines[120], [buf_2, buf_4, buf_9], [77, 64, 2]);
        addComputePass(device, commandEncoder, piplines[121], [buf_9, buf_2], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[122], [buf_4, buf_2, buf_9], [77, 512, 1]);
        addComputePass(device, commandEncoder, piplines[123], [buf_9, buf_4], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[124], [buf_2, buf_4, buf_9], [77, 2048, 1]);
        addComputePass(device, commandEncoder, piplines[125], [buf_9, buf_39, buf_78], [5, 77, 1]);
        addComputePass(device, commandEncoder, piplines[126], [buf_4, buf_2, buf_9], [320, 2, 2]);
        addComputePass(device, commandEncoder, piplines[127], [buf_42, buf_4, buf_79, buf_80, buf_11], [5, 128, 2]);
        addComputePass(device, commandEncoder, piplines[128], [buf_2, buf_42], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[129], [buf_9, buf_42, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[130], [buf_4, buf_42, buf_2, buf_9, buf_81, buf_82], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[131], [buf_2, buf_4, buf_83], [40, 256, 1]);
        addComputePass(device, commandEncoder, piplines[132], [buf_4, buf_2, buf_84], [80, 256, 1]);
        addComputePass(device, commandEncoder, piplines[133], [buf_9, buf_2, buf_84], [80, 256, 1]);
        addComputePass(device, commandEncoder, piplines[134], [buf_5, buf_2, buf_84, buf_4, buf_9], [320, 64, 1]);
        addComputePass(device, commandEncoder, piplines[135], [buf_2, buf_5, buf_85], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[136], [buf_4, buf_2, buf_86, buf_42], [64, 80, 1]);
        addComputePass(device, commandEncoder, piplines[137], [buf_11, buf_4, buf_87, buf_88, buf_31, buf_6], [64, 10, 2]);
        addComputePass(device, commandEncoder, piplines[138], [buf_89, buf_11, buf_90, buf_91], [2, 80, 2]);
        addComputePass(device, commandEncoder, piplines[139], [buf_2, buf_11, buf_90, buf_91], [2, 80, 2]);
        addComputePass(device, commandEncoder, piplines[140], [buf_5, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[141], [buf_6, buf_2, buf_5], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[142], [buf_4, buf_2, buf_5, buf_6, buf_92, buf_93], [16, 80, 1]);
        addComputePass(device, commandEncoder, piplines[143], [buf_9, buf_2, buf_5, buf_6, buf_92, buf_93], [16, 40, 2]);
        addComputePass(device, commandEncoder, piplines[144], [buf_5, buf_4, buf_9], [5120, 1, 1]);
        addComputePass(device, commandEncoder, piplines[145], [buf_2, buf_14, buf_16], [10, 1, 1]);
        addComputePass(device, commandEncoder, piplines[146], [buf_4, buf_2, buf_94, buf_95], [40, 1, 1]);
        addComputePass(device, commandEncoder, piplines[147], [buf_2, buf_5, buf_96, buf_97, buf_4], [2, 160, 2]);
        addComputePass(device, commandEncoder, piplines[148], [buf_5, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[149], [buf_6, buf_2, buf_5], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[150], [buf_4, buf_2, buf_5, buf_6, buf_98, buf_99], [16, 160, 1]);
        addComputePass(device, commandEncoder, piplines[151], [buf_9, buf_2, buf_5, buf_6, buf_98, buf_99], [16, 80, 2]);
        addComputePass(device, commandEncoder, piplines[152], [buf_2, buf_4, buf_9], [10240, 1, 1]);
        addComputePass(device, commandEncoder, piplines[153], [buf_6, buf_2, buf_100], [2, 160, 2]);
        addComputePass(device, commandEncoder, piplines[154], [buf_42, buf_89, buf_101, buf_102, buf_6, buf_103], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[155], [buf_4, buf_42], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[156], [buf_9, buf_42, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[157], [buf_2, buf_42, buf_4, buf_9, buf_104, buf_105], [16, 160, 1]);
        addComputePass(device, commandEncoder, piplines[158], [buf_4, buf_2, buf_106], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[159], [buf_9, buf_4, buf_107], [160, 16, 1]);
        addComputePass(device, commandEncoder, piplines[160], [buf_2, buf_9], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[161], [buf_4, buf_9, buf_2], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[162], [buf_5, buf_9, buf_2, buf_4, buf_108, buf_109], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[163], [buf_4, buf_5, buf_110], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[164], [buf_111, buf_5, buf_112], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[165], [buf_2, buf_4, buf_111], [512, 8, 2]);
        addComputePass(device, commandEncoder, piplines[166], [buf_111, buf_2], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[167], [buf_4, buf_2, buf_111], [16, 2048, 1]);
        addComputePass(device, commandEncoder, piplines[168], [buf_111, buf_4], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[169], [buf_2, buf_4, buf_111], [16, 2048, 1]);
        addComputePass(device, commandEncoder, piplines[170], [buf_4, buf_5, buf_113], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[171], [buf_5, buf_2, buf_4], [80, 4, 2]);
        addComputePass(device, commandEncoder, piplines[172], [buf_2, buf_5, buf_114, buf_115, buf_9], [10, 32, 2]);
        addComputePass(device, commandEncoder, piplines[173], [buf_9, buf_2], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[174], [buf_5, buf_2, buf_9], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[175], [buf_4, buf_2, buf_9, buf_5, buf_116, buf_117], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[176], [buf_9, buf_4, buf_118], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[177], [buf_5, buf_39, buf_119], [10, 77, 1]);
        addComputePass(device, commandEncoder, piplines[178], [buf_4, buf_9, buf_5], [77, 16, 2]);
        addComputePass(device, commandEncoder, piplines[179], [buf_5, buf_4], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[180], [buf_9, buf_4, buf_5], [77, 128, 1]);
        addComputePass(device, commandEncoder, piplines[181], [buf_4, buf_9], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[182], [buf_5, buf_9, buf_4], [77, 512, 1]);
        addComputePass(device, commandEncoder, piplines[183], [buf_9, buf_39, buf_120], [10, 77, 1]);
        addComputePass(device, commandEncoder, piplines[184], [buf_4, buf_5, buf_9], [80, 4, 2]);
        addComputePass(device, commandEncoder, piplines[185], [buf_111, buf_4, buf_121, buf_122, buf_2], [10, 32, 2]);
        addComputePass(device, commandEncoder, piplines[186], [buf_2, buf_111], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[187], [buf_9, buf_111, buf_2], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[188], [buf_4, buf_111, buf_2, buf_9, buf_123, buf_124], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[189], [buf_2, buf_4, buf_125], [80, 64, 1]);
        addComputePass(device, commandEncoder, piplines[190], [buf_4, buf_2, buf_126], [160, 64, 1]);
        addComputePass(device, commandEncoder, piplines[191], [buf_9, buf_2, buf_126], [160, 64, 1]);
        addComputePass(device, commandEncoder, piplines[192], [buf_5, buf_2, buf_126, buf_4, buf_9], [640, 16, 1]);
        addComputePass(device, commandEncoder, piplines[193], [buf_2, buf_5, buf_127], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[194], [buf_4, buf_2, buf_128, buf_111], [16, 160, 1]);
        addComputePass(device, commandEncoder, piplines[195], [buf_2, buf_89, buf_101], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[196], [buf_111, buf_4, buf_129, buf_130, buf_2, buf_102, buf_6, buf_103], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[197], [buf_2, buf_4, buf_129, buf_130, buf_42], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[198], [buf_5, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[199], [buf_6, buf_2, buf_5], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[200], [buf_4, buf_2, buf_5, buf_6, buf_131, buf_132], [16, 160, 1]);
        addComputePass(device, commandEncoder, piplines[201], [buf_9, buf_2, buf_5, buf_6, buf_131, buf_132], [16, 80, 2]);
        addComputePass(device, commandEncoder, piplines[202], [buf_2, buf_4, buf_9], [10240, 1, 1]);
        addComputePass(device, commandEncoder, piplines[203], [buf_4, buf_14, buf_16], [10, 1, 1]);
        addComputePass(device, commandEncoder, piplines[204], [buf_9, buf_4, buf_133, buf_134], [40, 1, 1]);
        addComputePass(device, commandEncoder, piplines[205], [buf_4, buf_2, buf_135, buf_136, buf_9], [2, 160, 2]);
        addComputePass(device, commandEncoder, piplines[206], [buf_5, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[207], [buf_6, buf_4, buf_5], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[208], [buf_2, buf_4, buf_5, buf_6, buf_137, buf_138], [16, 160, 1]);
        addComputePass(device, commandEncoder, piplines[209], [buf_9, buf_4, buf_5, buf_6, buf_137, buf_138], [16, 80, 2]);
        addComputePass(device, commandEncoder, piplines[210], [buf_4, buf_2, buf_9], [10240, 1, 1]);
        addComputePass(device, commandEncoder, piplines[211], [buf_6, buf_4, buf_139, buf_140], [2, 160, 2]);
        addComputePass(device, commandEncoder, piplines[212], [buf_2, buf_111, buf_6], [10240, 1, 1]);
        addComputePass(device, commandEncoder, piplines[213], [buf_9, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[214], [buf_5, buf_2, buf_9], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[215], [buf_4, buf_2, buf_9, buf_5, buf_141, buf_142], [16, 160, 1]);
        addComputePass(device, commandEncoder, piplines[216], [buf_2, buf_4, buf_143], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[217], [buf_9, buf_2, buf_144], [160, 16, 1]);
        addComputePass(device, commandEncoder, piplines[218], [buf_2, buf_9], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[219], [buf_4, buf_9, buf_2], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[220], [buf_5, buf_9, buf_2, buf_4, buf_145, buf_146], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[221], [buf_4, buf_5, buf_147], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[222], [buf_42, buf_5, buf_148], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[223], [buf_2, buf_4, buf_42], [512, 8, 2]);
        addComputePass(device, commandEncoder, piplines[224], [buf_42, buf_2], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[225], [buf_4, buf_2, buf_42], [16, 2048, 1]);
        addComputePass(device, commandEncoder, piplines[226], [buf_42, buf_4], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[227], [buf_2, buf_4, buf_42], [16, 2048, 1]);
        addComputePass(device, commandEncoder, piplines[228], [buf_4, buf_5, buf_149], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[229], [buf_5, buf_2, buf_4], [80, 4, 2]);
        addComputePass(device, commandEncoder, piplines[230], [buf_2, buf_5, buf_150, buf_151, buf_9], [10, 32, 2]);
        addComputePass(device, commandEncoder, piplines[231], [buf_9, buf_2], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[232], [buf_5, buf_2, buf_9], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[233], [buf_4, buf_2, buf_9, buf_5, buf_152, buf_153], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[234], [buf_9, buf_4, buf_154], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[235], [buf_5, buf_39, buf_155], [10, 77, 1]);
        addComputePass(device, commandEncoder, piplines[236], [buf_4, buf_9, buf_5], [77, 16, 2]);
        addComputePass(device, commandEncoder, piplines[237], [buf_5, buf_4], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[238], [buf_9, buf_4, buf_5], [77, 128, 1]);
        addComputePass(device, commandEncoder, piplines[239], [buf_4, buf_9], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[240], [buf_5, buf_9, buf_4], [77, 512, 1]);
        addComputePass(device, commandEncoder, piplines[241], [buf_9, buf_39, buf_156], [10, 77, 1]);
        addComputePass(device, commandEncoder, piplines[242], [buf_4, buf_5, buf_9], [80, 4, 2]);
        addComputePass(device, commandEncoder, piplines[243], [buf_42, buf_4, buf_157, buf_158, buf_2], [10, 32, 2]);
        addComputePass(device, commandEncoder, piplines[244], [buf_2, buf_42], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[245], [buf_9, buf_42, buf_2], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[246], [buf_4, buf_42, buf_2, buf_9, buf_159, buf_160], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[247], [buf_2, buf_4, buf_161], [80, 64, 1]);
        addComputePass(device, commandEncoder, piplines[248], [buf_4, buf_2, buf_162], [160, 64, 1]);
        addComputePass(device, commandEncoder, piplines[249], [buf_9, buf_2, buf_162], [160, 64, 1]);
        addComputePass(device, commandEncoder, piplines[250], [buf_5, buf_2, buf_162, buf_4, buf_9], [640, 16, 1]);
        addComputePass(device, commandEncoder, piplines[251], [buf_2, buf_5, buf_163], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[252], [buf_4, buf_2, buf_164, buf_42], [16, 160, 1]);
        addComputePass(device, commandEncoder, piplines[253], [buf_42, buf_4, buf_165, buf_166, buf_111, buf_6], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[254], [buf_167, buf_42, buf_168, buf_169], [80, 2, 1]);
        addComputePass(device, commandEncoder, piplines[255], [buf_2, buf_42, buf_168, buf_169], [80, 2, 1]);
        addComputePass(device, commandEncoder, piplines[256], [buf_5, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[257], [buf_6, buf_2, buf_5], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[258], [buf_4, buf_2, buf_5, buf_6, buf_170, buf_171], [4, 160, 1]);
        addComputePass(device, commandEncoder, piplines[259], [buf_9, buf_2, buf_5, buf_6, buf_170, buf_171], [4, 80, 2]);
        addComputePass(device, commandEncoder, piplines[260], [buf_5, buf_4, buf_9], [2560, 1, 1]);
        addComputePass(device, commandEncoder, piplines[261], [buf_2, buf_14, buf_16], [10, 1, 1]);
        addComputePass(device, commandEncoder, piplines[262], [buf_4, buf_2, buf_172, buf_173], [80, 1, 1]);
        addComputePass(device, commandEncoder, piplines[263], [buf_2, buf_5, buf_174, buf_175, buf_4], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[264], [buf_5, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[265], [buf_6, buf_2, buf_5], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[266], [buf_4, buf_2, buf_5, buf_6, buf_176, buf_177], [4, 320, 1]);
        addComputePass(device, commandEncoder, piplines[267], [buf_9, buf_2, buf_5, buf_6, buf_176, buf_177], [4, 160, 2]);
        addComputePass(device, commandEncoder, piplines[268], [buf_2, buf_4, buf_9], [5120, 1, 1]);
        addComputePass(device, commandEncoder, piplines[269], [buf_6, buf_2, buf_178], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[270], [buf_179, buf_167, buf_180, buf_181, buf_6, buf_182], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[271], [buf_4, buf_179], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[272], [buf_9, buf_179, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[273], [buf_2, buf_179, buf_4, buf_9, buf_183, buf_184], [4, 320, 1]);
        addComputePass(device, commandEncoder, piplines[274], [buf_4, buf_2, buf_185], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[275], [buf_9, buf_4, buf_186], [320, 4, 1]);
        addComputePass(device, commandEncoder, piplines[276], [buf_2, buf_9], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[277], [buf_4, buf_9, buf_2], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[278], [buf_5, buf_9, buf_2, buf_4, buf_187, buf_188], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[279], [buf_4, buf_5, buf_189], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[280], [buf_190, buf_5, buf_191], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[281], [buf_2, buf_4, buf_190], [32, 8, 2]);
        addComputePass(device, commandEncoder, piplines[282], [buf_190, buf_2], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[283], [buf_4, buf_2, buf_190], [4, 512, 1]);
        addComputePass(device, commandEncoder, piplines[284], [buf_190, buf_4], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[285], [buf_2, buf_4, buf_190], [4, 512, 1]);
        addComputePass(device, commandEncoder, piplines[286], [buf_4, buf_5, buf_192], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[287], [buf_5, buf_2, buf_4], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[288], [buf_2, buf_5, buf_193, buf_194, buf_9], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[289], [buf_9, buf_2], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[290], [buf_5, buf_2, buf_9], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[291], [buf_4, buf_2, buf_9, buf_5, buf_195, buf_196], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[292], [buf_9, buf_4, buf_197], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[293], [buf_5, buf_39, buf_198], [20, 77, 1]);
        addComputePass(device, commandEncoder, piplines[294], [buf_4, buf_9, buf_5], [77, 4, 2]);
        addComputePass(device, commandEncoder, piplines[295], [buf_5, buf_4], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[296], [buf_9, buf_4, buf_5], [77, 32, 1]);
        addComputePass(device, commandEncoder, piplines[297], [buf_4, buf_9], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[298], [buf_5, buf_9, buf_4], [77, 128, 1]);
        addComputePass(device, commandEncoder, piplines[299], [buf_9, buf_39, buf_199], [20, 77, 1]);
        addComputePass(device, commandEncoder, piplines[300], [buf_4, buf_5, buf_9], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[301], [buf_190, buf_4, buf_200, buf_201, buf_2], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[302], [buf_2, buf_190], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[303], [buf_9, buf_190, buf_2], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[304], [buf_4, buf_190, buf_2, buf_9, buf_202, buf_203], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[305], [buf_2, buf_4, buf_204], [160, 16, 1]);
        addComputePass(device, commandEncoder, piplines[306], [buf_4, buf_2, buf_205], [320, 16, 1]);
        addComputePass(device, commandEncoder, piplines[307], [buf_9, buf_2, buf_205], [320, 16, 1]);
        addComputePass(device, commandEncoder, piplines[308], [buf_5, buf_2, buf_205, buf_4, buf_9], [1280, 4, 1]);
        addComputePass(device, commandEncoder, piplines[309], [buf_2, buf_5, buf_206], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[310], [buf_4, buf_2, buf_207, buf_190], [4, 320, 1]);
        addComputePass(device, commandEncoder, piplines[311], [buf_2, buf_167, buf_180], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[312], [buf_190, buf_4, buf_208, buf_209, buf_2, buf_181, buf_6, buf_182], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[313], [buf_2, buf_4, buf_208, buf_209, buf_179], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[314], [buf_5, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[315], [buf_6, buf_2, buf_5], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[316], [buf_4, buf_2, buf_5, buf_6, buf_210, buf_211], [4, 320, 1]);
        addComputePass(device, commandEncoder, piplines[317], [buf_9, buf_2, buf_5, buf_6, buf_210, buf_211], [4, 160, 2]);
        addComputePass(device, commandEncoder, piplines[318], [buf_2, buf_4, buf_9], [5120, 1, 1]);
        addComputePass(device, commandEncoder, piplines[319], [buf_4, buf_14, buf_16], [10, 1, 1]);
        addComputePass(device, commandEncoder, piplines[320], [buf_9, buf_4, buf_212, buf_213], [80, 1, 1]);
        addComputePass(device, commandEncoder, piplines[321], [buf_4, buf_2, buf_214, buf_215, buf_9], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[322], [buf_5, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[323], [buf_6, buf_4, buf_5], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[324], [buf_2, buf_4, buf_5, buf_6, buf_216, buf_217], [4, 320, 1]);
        addComputePass(device, commandEncoder, piplines[325], [buf_9, buf_4, buf_5, buf_6, buf_216, buf_217], [4, 160, 2]);
        addComputePass(device, commandEncoder, piplines[326], [buf_4, buf_2, buf_9], [5120, 1, 1]);
        addComputePass(device, commandEncoder, piplines[327], [buf_6, buf_4, buf_218, buf_219], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[328], [buf_2, buf_190, buf_6], [5120, 1, 1]);
        addComputePass(device, commandEncoder, piplines[329], [buf_9, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[330], [buf_5, buf_2, buf_9], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[331], [buf_4, buf_2, buf_9, buf_5, buf_220, buf_221], [4, 320, 1]);
        addComputePass(device, commandEncoder, piplines[332], [buf_2, buf_4, buf_222], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[333], [buf_9, buf_2, buf_223], [320, 4, 1]);
        addComputePass(device, commandEncoder, piplines[334], [buf_2, buf_9], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[335], [buf_4, buf_9, buf_2], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[336], [buf_5, buf_9, buf_2, buf_4, buf_224, buf_225], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[337], [buf_4, buf_5, buf_226], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[338], [buf_179, buf_5, buf_227], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[339], [buf_2, buf_4, buf_179], [32, 8, 2]);
        addComputePass(device, commandEncoder, piplines[340], [buf_179, buf_2], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[341], [buf_4, buf_2, buf_179], [4, 512, 1]);
        addComputePass(device, commandEncoder, piplines[342], [buf_179, buf_4], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[343], [buf_2, buf_4, buf_179], [4, 512, 1]);
        addComputePass(device, commandEncoder, piplines[344], [buf_4, buf_5, buf_228], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[345], [buf_5, buf_2, buf_4], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[346], [buf_2, buf_5, buf_229, buf_230, buf_9], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[347], [buf_9, buf_2], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[348], [buf_5, buf_2, buf_9], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[349], [buf_4, buf_2, buf_9, buf_5, buf_231, buf_232], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[350], [buf_9, buf_4, buf_233], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[351], [buf_5, buf_39, buf_234], [20, 77, 1]);
        addComputePass(device, commandEncoder, piplines[352], [buf_4, buf_9, buf_5], [77, 4, 2]);
        addComputePass(device, commandEncoder, piplines[353], [buf_5, buf_4], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[354], [buf_9, buf_4, buf_5], [77, 32, 1]);
        addComputePass(device, commandEncoder, piplines[355], [buf_4, buf_9], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[356], [buf_5, buf_9, buf_4], [77, 128, 1]);
        addComputePass(device, commandEncoder, piplines[357], [buf_9, buf_39, buf_235], [20, 77, 1]);
        addComputePass(device, commandEncoder, piplines[358], [buf_4, buf_5, buf_9], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[359], [buf_179, buf_4, buf_236, buf_237, buf_2], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[360], [buf_2, buf_179], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[361], [buf_9, buf_179, buf_2], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[362], [buf_4, buf_179, buf_2, buf_9, buf_238, buf_239], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[363], [buf_2, buf_4, buf_240], [160, 16, 1]);
        addComputePass(device, commandEncoder, piplines[364], [buf_4, buf_2, buf_241], [320, 16, 1]);
        addComputePass(device, commandEncoder, piplines[365], [buf_9, buf_2, buf_241], [320, 16, 1]);
        addComputePass(device, commandEncoder, piplines[366], [buf_5, buf_2, buf_241, buf_4, buf_9], [1280, 4, 1]);
        addComputePass(device, commandEncoder, piplines[367], [buf_2, buf_5, buf_242], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[368], [buf_4, buf_2, buf_243, buf_179], [4, 320, 1]);
        addComputePass(device, commandEncoder, piplines[369], [buf_9, buf_4, buf_244, buf_245, buf_190, buf_6], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[370], [buf_179, buf_9, buf_246], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[371], [buf_2, buf_9, buf_246, buf_247], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[372], [buf_6, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[373], [buf_248, buf_2, buf_6], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[374], [buf_4, buf_2, buf_6, buf_248, buf_249, buf_250], [320, 1, 1]);
        addComputePass(device, commandEncoder, piplines[375], [buf_5, buf_2, buf_6, buf_248, buf_249, buf_250], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[376], [buf_6, buf_4, buf_5], [1280, 1, 1]);
        addComputePass(device, commandEncoder, piplines[377], [buf_4, buf_14, buf_16], [10, 1, 1]);
        addComputePass(device, commandEncoder, piplines[378], [buf_5, buf_4, buf_251, buf_252], [80, 1, 1]);
        addComputePass(device, commandEncoder, piplines[379], [buf_4, buf_6, buf_253, buf_254, buf_5], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[380], [buf_248, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[381], [buf_255, buf_4, buf_248], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[382], [buf_5, buf_4, buf_248, buf_255, buf_256, buf_257], [320, 1, 1]);
        addComputePass(device, commandEncoder, piplines[383], [buf_6, buf_4, buf_248, buf_255, buf_256, buf_257], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[384], [buf_4, buf_5, buf_6], [1280, 1, 1]);
        addComputePass(device, commandEncoder, piplines[385], [buf_248, buf_4, buf_258], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[386], [buf_5, buf_2, buf_4, buf_258, buf_259], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[387], [buf_6, buf_5], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[388], [buf_255, buf_5, buf_6], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[389], [buf_2, buf_5, buf_6, buf_255, buf_260, buf_261], [320, 1, 1]);
        addComputePass(device, commandEncoder, piplines[390], [buf_4, buf_5, buf_6, buf_255, buf_260, buf_261], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[391], [buf_6, buf_2, buf_4], [1280, 1, 1]);
        addComputePass(device, commandEncoder, piplines[392], [buf_2, buf_14, buf_16], [10, 1, 1]);
        addComputePass(device, commandEncoder, piplines[393], [buf_4, buf_2, buf_262, buf_263], [80, 1, 1]);
        addComputePass(device, commandEncoder, piplines[394], [buf_2, buf_6, buf_264, buf_265, buf_4], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[395], [buf_255, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[396], [buf_266, buf_2, buf_255], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[397], [buf_4, buf_2, buf_255, buf_266, buf_267, buf_268], [320, 1, 1]);
        addComputePass(device, commandEncoder, piplines[398], [buf_6, buf_2, buf_255, buf_266, buf_267, buf_268], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[399], [buf_2, buf_4, buf_6], [1280, 1, 1]);
        addComputePass(device, commandEncoder, piplines[400], [buf_255, buf_179, buf_247, buf_248, buf_259, buf_2, buf_269, buf_270], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[401], [buf_4, buf_5, buf_2, buf_269, buf_270], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[402], [buf_6, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[403], [buf_266, buf_4, buf_6], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[404], [buf_2, buf_4, buf_6, buf_266, buf_271, buf_272], [320, 1, 1]);
        addComputePass(device, commandEncoder, piplines[405], [buf_5, buf_4, buf_6, buf_266, buf_271, buf_272], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[406], [buf_4, buf_2, buf_5], [1280, 1, 1]);
        addComputePass(device, commandEncoder, piplines[407], [buf_2, buf_14, buf_16], [10, 1, 1]);
        addComputePass(device, commandEncoder, piplines[408], [buf_5, buf_2, buf_273, buf_274], [80, 1, 1]);
        addComputePass(device, commandEncoder, piplines[409], [buf_2, buf_4, buf_275, buf_276, buf_5], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[410], [buf_6, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[411], [buf_266, buf_2, buf_6], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[412], [buf_4, buf_2, buf_6, buf_266, buf_277, buf_278], [320, 1, 1]);
        addComputePass(device, commandEncoder, piplines[413], [buf_5, buf_2, buf_6, buf_266, buf_277, buf_278], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[414], [buf_2, buf_4, buf_5], [1280, 1, 1]);
        addComputePass(device, commandEncoder, piplines[415], [buf_266, buf_2, buf_279, buf_280], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[416], [buf_281, buf_255, buf_266], [1280, 1, 1]);
        addComputePass(device, commandEncoder, piplines[417], [buf_4, buf_281], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[418], [buf_5, buf_281, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[419], [buf_2, buf_281, buf_4, buf_5, buf_282, buf_283], [320, 1, 1]);
        addComputePass(device, commandEncoder, piplines[420], [buf_4, buf_2, buf_284], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[421], [buf_2, buf_4, buf_285], [320, 1, 1]);
        addComputePass(device, commandEncoder, piplines[422], [buf_5, buf_2], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[423], [buf_6, buf_2, buf_5], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[424], [buf_4, buf_2, buf_5, buf_6, buf_286, buf_287], [20, 4, 1]);
        addComputePass(device, commandEncoder, piplines[425], [buf_5, buf_4, buf_288], [20, 4, 1]);
        addComputePass(device, commandEncoder, piplines[426], [buf_6, buf_4, buf_289], [20, 4, 1]);
        addComputePass(device, commandEncoder, piplines[427], [buf_290, buf_5, buf_6], [2, 8, 2]);
        addComputePass(device, commandEncoder, piplines[428], [buf_6, buf_290], [1024, 1, 1]);
        addComputePass(device, commandEncoder, piplines[429], [buf_5, buf_290, buf_6], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[430], [buf_290, buf_5], [1024, 1, 1]);
        addComputePass(device, commandEncoder, piplines[431], [buf_6, buf_5, buf_290], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[432], [buf_5, buf_4, buf_291], [20, 4, 1]);
        addComputePass(device, commandEncoder, piplines[433], [buf_4, buf_6, buf_5], [5, 8, 2]);
        addComputePass(device, commandEncoder, piplines[434], [buf_5, buf_4, buf_292, buf_293, buf_2], [20, 2, 2]);
        addComputePass(device, commandEncoder, piplines[435], [buf_4, buf_5], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[436], [buf_6, buf_5, buf_4], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[437], [buf_2, buf_5, buf_4, buf_6, buf_294, buf_295], [20, 4, 1]);
        addComputePass(device, commandEncoder, piplines[438], [buf_4, buf_2, buf_296], [20, 4, 1]);
        addComputePass(device, commandEncoder, piplines[439], [buf_2, buf_39, buf_297], [20, 77, 1]);
        addComputePass(device, commandEncoder, piplines[440], [buf_6, buf_4, buf_2], [77, 2, 1]);
        addComputePass(device, commandEncoder, piplines[441], [buf_4, buf_6], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[442], [buf_2, buf_6, buf_4], [77, 8, 1]);
        addComputePass(device, commandEncoder, piplines[443], [buf_4, buf_2], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[444], [buf_6, buf_2, buf_4], [77, 32, 1]);
        addComputePass(device, commandEncoder, piplines[445], [buf_2, buf_39, buf_298], [20, 77, 1]);
        addComputePass(device, commandEncoder, piplines[446], [buf_4, buf_6, buf_2], [5, 8, 2]);
        addComputePass(device, commandEncoder, piplines[447], [buf_290, buf_4, buf_299, buf_300, buf_5], [20, 2, 2]);
        addComputePass(device, commandEncoder, piplines[448], [buf_2, buf_290], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[449], [buf_5, buf_290, buf_2], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[450], [buf_4, buf_290, buf_2, buf_5, buf_301, buf_302], [20, 4, 1]);
        addComputePass(device, commandEncoder, piplines[451], [buf_2, buf_4, buf_303], [160, 4, 1]);
        addComputePass(device, commandEncoder, piplines[452], [buf_4, buf_2, buf_304], [320, 4, 1]);
        addComputePass(device, commandEncoder, piplines[453], [buf_5, buf_2, buf_304], [320, 4, 1]);
        addComputePass(device, commandEncoder, piplines[454], [buf_6, buf_2, buf_304, buf_4, buf_5], [1280, 1, 1]);
        addComputePass(device, commandEncoder, piplines[455], [buf_2, buf_6, buf_305], [20, 4, 1]);
        addComputePass(device, commandEncoder, piplines[456], [buf_4, buf_2, buf_306, buf_290], [320, 1, 1]);
        addComputePass(device, commandEncoder, piplines[457], [buf_5, buf_4, buf_307], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[458], [buf_2, buf_4, buf_307, buf_308, buf_281], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[459], [buf_281, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[460], [buf_290, buf_2, buf_281], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[461], [buf_4, buf_2, buf_281, buf_290, buf_309, buf_310], [320, 1, 1]);
        addComputePass(device, commandEncoder, piplines[462], [buf_6, buf_2, buf_281, buf_290, buf_309, buf_310], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[463], [buf_2, buf_4, buf_6], [1280, 1, 1]);
        addComputePass(device, commandEncoder, piplines[464], [buf_4, buf_14, buf_16], [10, 1, 1]);
        addComputePass(device, commandEncoder, piplines[465], [buf_6, buf_4, buf_311, buf_312], [80, 1, 1]);
        addComputePass(device, commandEncoder, piplines[466], [buf_4, buf_2, buf_313, buf_314, buf_6], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[467], [buf_281, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[468], [buf_290, buf_4, buf_281], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[469], [buf_2, buf_4, buf_281, buf_290, buf_315, buf_316], [320, 1, 1]);
        addComputePass(device, commandEncoder, piplines[470], [buf_6, buf_4, buf_281, buf_290, buf_315, buf_316], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[471], [buf_4, buf_2, buf_6], [1280, 1, 1]);
        addComputePass(device, commandEncoder, piplines[472], [buf_6, buf_4, buf_317], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[473], [buf_2, buf_5, buf_308, buf_255, buf_266, buf_6, buf_318], [320, 2, 1]);
        addComputePass(device, commandEncoder, piplines[474], [buf_4, buf_2, buf_255], [320, 2, 1]);
        addComputePass(device, commandEncoder, piplines[475], [buf_6, buf_4, buf_319], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[476], [buf_4, buf_2, buf_255], [80, 4, 2]);
        addComputePass(device, commandEncoder, piplines[477], [buf_255, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[478], [buf_266, buf_4, buf_255], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[479], [buf_2, buf_4, buf_255, buf_266, buf_320, buf_321], [640, 1, 1]);
        addComputePass(device, commandEncoder, piplines[480], [buf_5, buf_4, buf_255, buf_266, buf_320, buf_321], [320, 2, 1]);
        addComputePass(device, commandEncoder, piplines[481], [buf_4, buf_2, buf_5], [2560, 1, 1]);
        addComputePass(device, commandEncoder, piplines[482], [buf_2, buf_14, buf_16], [10, 1, 1]);
        addComputePass(device, commandEncoder, piplines[483], [buf_5, buf_2, buf_322, buf_323], [80, 1, 1]);
        addComputePass(device, commandEncoder, piplines[484], [buf_2, buf_4, buf_324, buf_325, buf_5], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[485], [buf_255, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[486], [buf_266, buf_2, buf_255], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[487], [buf_4, buf_2, buf_255, buf_266, buf_326, buf_327], [320, 1, 1]);
        addComputePass(device, commandEncoder, piplines[488], [buf_5, buf_2, buf_255, buf_266, buf_326, buf_327], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[489], [buf_2, buf_4, buf_5], [1280, 1, 1]);
        addComputePass(device, commandEncoder, piplines[490], [buf_4, buf_2, buf_328], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[491], [buf_2, buf_6, buf_329, buf_4, buf_330], [320, 2, 1]);
        addComputePass(device, commandEncoder, piplines[492], [buf_4, buf_179, buf_247, buf_248, buf_259], [320, 2, 1]);
        addComputePass(device, commandEncoder, piplines[493], [buf_5, buf_2, buf_4], [2560, 1, 1]);
        addComputePass(device, commandEncoder, piplines[494], [buf_6, buf_5, buf_331], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[495], [buf_5, buf_2, buf_4], [2560, 1, 1]);
        addComputePass(device, commandEncoder, piplines[496], [buf_248, buf_5], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[497], [buf_255, buf_5, buf_248], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[498], [buf_2, buf_5, buf_248, buf_255, buf_332, buf_333], [640, 1, 1]);
        addComputePass(device, commandEncoder, piplines[499], [buf_4, buf_5, buf_248, buf_255, buf_332, buf_333], [320, 2, 1]);
        addComputePass(device, commandEncoder, piplines[500], [buf_5, buf_2, buf_4], [2560, 1, 1]);
        addComputePass(device, commandEncoder, piplines[501], [buf_2, buf_14, buf_16], [10, 1, 1]);
        addComputePass(device, commandEncoder, piplines[502], [buf_4, buf_2, buf_334, buf_335], [80, 1, 1]);
        addComputePass(device, commandEncoder, piplines[503], [buf_2, buf_5, buf_336, buf_337, buf_4], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[504], [buf_248, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[505], [buf_255, buf_2, buf_248], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[506], [buf_4, buf_2, buf_248, buf_255, buf_338, buf_339], [320, 1, 1]);
        addComputePass(device, commandEncoder, piplines[507], [buf_5, buf_2, buf_248, buf_255, buf_338, buf_339], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[508], [buf_2, buf_4, buf_5], [1280, 1, 1]);
        addComputePass(device, commandEncoder, piplines[509], [buf_5, buf_2, buf_340], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[510], [buf_2, buf_6, buf_341, buf_5, buf_342, buf_179, buf_247], [320, 2, 1]);
        addComputePass(device, commandEncoder, piplines[511], [buf_4, buf_6, buf_341, buf_5, buf_342, buf_179, buf_247], [80, 4, 2]);
        addComputePass(device, commandEncoder, piplines[512], [buf_179, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[513], [buf_248, buf_4, buf_179], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[514], [buf_5, buf_4, buf_179, buf_248, buf_343, buf_344], [640, 1, 1]);
        addComputePass(device, commandEncoder, piplines[515], [buf_6, buf_4, buf_179, buf_248, buf_343, buf_344], [320, 2, 1]);
        addComputePass(device, commandEncoder, piplines[516], [buf_4, buf_5, buf_6], [2560, 1, 1]);
        addComputePass(device, commandEncoder, piplines[517], [buf_5, buf_14, buf_16], [10, 1, 1]);
        addComputePass(device, commandEncoder, piplines[518], [buf_6, buf_5, buf_345, buf_346], [80, 1, 1]);
        addComputePass(device, commandEncoder, piplines[519], [buf_5, buf_4, buf_347, buf_348, buf_6], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[520], [buf_179, buf_5], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[521], [buf_248, buf_5, buf_179], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[522], [buf_4, buf_5, buf_179, buf_248, buf_349, buf_350], [320, 1, 1]);
        addComputePass(device, commandEncoder, piplines[523], [buf_6, buf_5, buf_179, buf_248, buf_349, buf_350], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[524], [buf_5, buf_4, buf_6], [1280, 1, 1]);
        addComputePass(device, commandEncoder, piplines[525], [buf_4, buf_5, buf_351], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[526], [buf_5, buf_2, buf_352, buf_353, buf_4, buf_354], [40, 2, 1]);
        addComputePass(device, commandEncoder, piplines[527], [buf_4, buf_5, buf_355], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[528], [buf_6, buf_4, buf_356, buf_9], [4, 320, 2]);
        addComputePass(device, commandEncoder, piplines[529], [buf_2, buf_4, buf_356, buf_9], [320, 4, 2]);
        addComputePass(device, commandEncoder, piplines[530], [buf_5, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[531], [buf_179, buf_2, buf_5], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[532], [buf_4, buf_2, buf_5, buf_179, buf_357, buf_358], [4, 640, 1]);
        addComputePass(device, commandEncoder, piplines[533], [buf_9, buf_2, buf_5, buf_179, buf_357, buf_358], [4, 320, 2]);
        addComputePass(device, commandEncoder, piplines[534], [buf_2, buf_4, buf_9], [10240, 1, 1]);
        addComputePass(device, commandEncoder, piplines[535], [buf_4, buf_14, buf_16], [10, 1, 1]);
        addComputePass(device, commandEncoder, piplines[536], [buf_9, buf_4, buf_359, buf_360], [80, 1, 1]);
        addComputePass(device, commandEncoder, piplines[537], [buf_4, buf_2, buf_361, buf_362, buf_9], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[538], [buf_5, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[539], [buf_179, buf_4, buf_5], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[540], [buf_2, buf_4, buf_5, buf_179, buf_363, buf_364], [4, 320, 1]);
        addComputePass(device, commandEncoder, piplines[541], [buf_9, buf_4, buf_5, buf_179, buf_363, buf_364], [4, 160, 2]);
        addComputePass(device, commandEncoder, piplines[542], [buf_4, buf_2, buf_9], [5120, 1, 1]);
        addComputePass(device, commandEncoder, piplines[543], [buf_179, buf_4, buf_365], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[544], [buf_2, buf_6, buf_366, buf_367, buf_179, buf_368], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[545], [buf_9, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[546], [buf_5, buf_2, buf_9], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[547], [buf_4, buf_2, buf_9, buf_5, buf_369, buf_370], [4, 320, 1]);
        addComputePass(device, commandEncoder, piplines[548], [buf_2, buf_4, buf_371], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[549], [buf_9, buf_2, buf_372], [320, 4, 1]);
        addComputePass(device, commandEncoder, piplines[550], [buf_2, buf_9], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[551], [buf_4, buf_9, buf_2], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[552], [buf_5, buf_9, buf_2, buf_4, buf_373, buf_374], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[553], [buf_4, buf_5, buf_375], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[554], [buf_248, buf_5, buf_376], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[555], [buf_2, buf_4, buf_248], [32, 8, 2]);
        addComputePass(device, commandEncoder, piplines[556], [buf_248, buf_2], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[557], [buf_4, buf_2, buf_248], [4, 512, 1]);
        addComputePass(device, commandEncoder, piplines[558], [buf_248, buf_4], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[559], [buf_2, buf_4, buf_248], [4, 512, 1]);
        addComputePass(device, commandEncoder, piplines[560], [buf_4, buf_5, buf_377], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[561], [buf_5, buf_2, buf_4], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[562], [buf_2, buf_5, buf_378, buf_379, buf_9], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[563], [buf_9, buf_2], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[564], [buf_5, buf_2, buf_9], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[565], [buf_4, buf_2, buf_9, buf_5, buf_380, buf_381], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[566], [buf_9, buf_4, buf_382], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[567], [buf_5, buf_39, buf_383], [20, 77, 1]);
        addComputePass(device, commandEncoder, piplines[568], [buf_4, buf_9, buf_5], [77, 4, 2]);
        addComputePass(device, commandEncoder, piplines[569], [buf_5, buf_4], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[570], [buf_9, buf_4, buf_5], [77, 32, 1]);
        addComputePass(device, commandEncoder, piplines[571], [buf_4, buf_9], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[572], [buf_5, buf_9, buf_4], [77, 128, 1]);
        addComputePass(device, commandEncoder, piplines[573], [buf_9, buf_39, buf_384], [20, 77, 1]);
        addComputePass(device, commandEncoder, piplines[574], [buf_4, buf_5, buf_9], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[575], [buf_248, buf_4, buf_385, buf_386, buf_2], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[576], [buf_2, buf_248], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[577], [buf_9, buf_248, buf_2], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[578], [buf_4, buf_248, buf_2, buf_9, buf_387, buf_388], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[579], [buf_2, buf_4, buf_389], [160, 16, 1]);
        addComputePass(device, commandEncoder, piplines[580], [buf_4, buf_2, buf_390], [320, 16, 1]);
        addComputePass(device, commandEncoder, piplines[581], [buf_9, buf_2, buf_390], [320, 16, 1]);
        addComputePass(device, commandEncoder, piplines[582], [buf_5, buf_2, buf_390, buf_4, buf_9], [1280, 4, 1]);
        addComputePass(device, commandEncoder, piplines[583], [buf_2, buf_5, buf_391], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[584], [buf_4, buf_2, buf_392, buf_248], [4, 320, 1]);
        addComputePass(device, commandEncoder, piplines[585], [buf_9, buf_4, buf_393], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[586], [buf_4, buf_6, buf_366], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[587], [buf_2, buf_9, buf_394, buf_4, buf_367, buf_179, buf_368], [4, 320, 2]);
        addComputePass(device, commandEncoder, piplines[588], [buf_6, buf_2, buf_190], [4, 320, 2]);
        addComputePass(device, commandEncoder, piplines[589], [buf_4, buf_2, buf_190], [320, 4, 2]);
        addComputePass(device, commandEncoder, piplines[590], [buf_5, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[591], [buf_179, buf_4, buf_5], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[592], [buf_2, buf_4, buf_5, buf_179, buf_395, buf_396], [4, 640, 1]);
        addComputePass(device, commandEncoder, piplines[593], [buf_9, buf_4, buf_5, buf_179, buf_395, buf_396], [4, 320, 2]);
        addComputePass(device, commandEncoder, piplines[594], [buf_4, buf_2, buf_9], [10240, 1, 1]);
        addComputePass(device, commandEncoder, piplines[595], [buf_2, buf_14, buf_16], [10, 1, 1]);
        addComputePass(device, commandEncoder, piplines[596], [buf_9, buf_2, buf_397, buf_398], [80, 1, 1]);
        addComputePass(device, commandEncoder, piplines[597], [buf_2, buf_4, buf_399, buf_400, buf_9], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[598], [buf_5, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[599], [buf_179, buf_2, buf_5], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[600], [buf_4, buf_2, buf_5, buf_179, buf_401, buf_402], [4, 320, 1]);
        addComputePass(device, commandEncoder, piplines[601], [buf_9, buf_2, buf_5, buf_179, buf_401, buf_402], [4, 160, 2]);
        addComputePass(device, commandEncoder, piplines[602], [buf_2, buf_4, buf_9], [5120, 1, 1]);
        addComputePass(device, commandEncoder, piplines[603], [buf_179, buf_2, buf_403], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[604], [buf_2, buf_6, buf_404, buf_405, buf_179, buf_406], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[605], [buf_9, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[606], [buf_5, buf_2, buf_9], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[607], [buf_4, buf_2, buf_9, buf_5, buf_407, buf_408], [4, 320, 1]);
        addComputePass(device, commandEncoder, piplines[608], [buf_2, buf_4, buf_409], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[609], [buf_9, buf_2, buf_410], [320, 4, 1]);
        addComputePass(device, commandEncoder, piplines[610], [buf_2, buf_9], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[611], [buf_4, buf_9, buf_2], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[612], [buf_5, buf_9, buf_2, buf_4, buf_411, buf_412], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[613], [buf_4, buf_5, buf_413], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[614], [buf_190, buf_5, buf_414], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[615], [buf_2, buf_4, buf_190], [32, 8, 2]);
        addComputePass(device, commandEncoder, piplines[616], [buf_190, buf_2], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[617], [buf_4, buf_2, buf_190], [4, 512, 1]);
        addComputePass(device, commandEncoder, piplines[618], [buf_190, buf_4], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[619], [buf_2, buf_4, buf_190], [4, 512, 1]);
        addComputePass(device, commandEncoder, piplines[620], [buf_4, buf_5, buf_415], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[621], [buf_5, buf_2, buf_4], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[622], [buf_2, buf_5, buf_416, buf_417, buf_9], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[623], [buf_9, buf_2], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[624], [buf_5, buf_2, buf_9], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[625], [buf_4, buf_2, buf_9, buf_5, buf_418, buf_419], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[626], [buf_9, buf_4, buf_420], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[627], [buf_5, buf_39, buf_421], [20, 77, 1]);
        addComputePass(device, commandEncoder, piplines[628], [buf_4, buf_9, buf_5], [77, 4, 2]);
        addComputePass(device, commandEncoder, piplines[629], [buf_5, buf_4], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[630], [buf_9, buf_4, buf_5], [77, 32, 1]);
        addComputePass(device, commandEncoder, piplines[631], [buf_4, buf_9], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[632], [buf_5, buf_9, buf_4], [77, 128, 1]);
        addComputePass(device, commandEncoder, piplines[633], [buf_9, buf_39, buf_422], [20, 77, 1]);
        addComputePass(device, commandEncoder, piplines[634], [buf_4, buf_5, buf_9], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[635], [buf_190, buf_4, buf_423, buf_424, buf_2], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[636], [buf_2, buf_190], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[637], [buf_9, buf_190, buf_2], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[638], [buf_4, buf_190, buf_2, buf_9, buf_425, buf_426], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[639], [buf_2, buf_4, buf_427], [160, 16, 1]);
        addComputePass(device, commandEncoder, piplines[640], [buf_4, buf_2, buf_428], [320, 16, 1]);
        addComputePass(device, commandEncoder, piplines[641], [buf_9, buf_2, buf_428], [320, 16, 1]);
        addComputePass(device, commandEncoder, piplines[642], [buf_5, buf_2, buf_428, buf_4, buf_9], [1280, 4, 1]);
        addComputePass(device, commandEncoder, piplines[643], [buf_2, buf_5, buf_429], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[644], [buf_4, buf_2, buf_430, buf_190], [4, 320, 1]);
        addComputePass(device, commandEncoder, piplines[645], [buf_9, buf_4, buf_431], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[646], [buf_4, buf_6, buf_404], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[647], [buf_2, buf_9, buf_432, buf_4, buf_405, buf_179, buf_406], [4, 240, 2]);
        addComputePass(device, commandEncoder, piplines[648], [buf_6, buf_2, buf_167], [4, 240, 2]);
        addComputePass(device, commandEncoder, piplines[649], [buf_4, buf_2, buf_167], [240, 4, 2]);
        addComputePass(device, commandEncoder, piplines[650], [buf_5, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[651], [buf_179, buf_4, buf_5], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[652], [buf_2, buf_4, buf_5, buf_179, buf_433, buf_434], [4, 480, 1]);
        addComputePass(device, commandEncoder, piplines[653], [buf_9, buf_4, buf_5, buf_179, buf_433, buf_434], [4, 240, 2]);
        addComputePass(device, commandEncoder, piplines[654], [buf_4, buf_2, buf_9], [7680, 1, 1]);
        addComputePass(device, commandEncoder, piplines[655], [buf_2, buf_14, buf_16], [10, 1, 1]);
        addComputePass(device, commandEncoder, piplines[656], [buf_9, buf_2, buf_435, buf_436], [80, 1, 1]);
        addComputePass(device, commandEncoder, piplines[657], [buf_2, buf_4, buf_437, buf_438, buf_9], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[658], [buf_5, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[659], [buf_179, buf_2, buf_5], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[660], [buf_4, buf_2, buf_5, buf_179, buf_439, buf_440], [4, 320, 1]);
        addComputePass(device, commandEncoder, piplines[661], [buf_9, buf_2, buf_5, buf_179, buf_439, buf_440], [4, 160, 2]);
        addComputePass(device, commandEncoder, piplines[662], [buf_2, buf_4, buf_9], [5120, 1, 1]);
        addComputePass(device, commandEncoder, piplines[663], [buf_179, buf_2, buf_441], [160, 2, 1]);
        addComputePass(device, commandEncoder, piplines[664], [buf_2, buf_6, buf_442, buf_443, buf_179, buf_444], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[665], [buf_9, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[666], [buf_5, buf_2, buf_9], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[667], [buf_4, buf_2, buf_9, buf_5, buf_445, buf_446], [4, 320, 1]);
        addComputePass(device, commandEncoder, piplines[668], [buf_2, buf_4, buf_447], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[669], [buf_9, buf_2, buf_448], [320, 4, 1]);
        addComputePass(device, commandEncoder, piplines[670], [buf_2, buf_9], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[671], [buf_4, buf_9, buf_2], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[672], [buf_5, buf_9, buf_2, buf_4, buf_449, buf_450], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[673], [buf_4, buf_5, buf_451], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[674], [buf_190, buf_5, buf_452], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[675], [buf_2, buf_4, buf_190], [32, 8, 2]);
        addComputePass(device, commandEncoder, piplines[676], [buf_190, buf_2], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[677], [buf_4, buf_2, buf_190], [4, 512, 1]);
        addComputePass(device, commandEncoder, piplines[678], [buf_190, buf_4], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[679], [buf_2, buf_4, buf_190], [4, 512, 1]);
        addComputePass(device, commandEncoder, piplines[680], [buf_4, buf_5, buf_453], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[681], [buf_5, buf_2, buf_4], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[682], [buf_2, buf_5, buf_454, buf_455, buf_9], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[683], [buf_9, buf_2], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[684], [buf_5, buf_2, buf_9], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[685], [buf_4, buf_2, buf_9, buf_5, buf_456, buf_457], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[686], [buf_9, buf_4, buf_458], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[687], [buf_5, buf_39, buf_459], [20, 77, 1]);
        addComputePass(device, commandEncoder, piplines[688], [buf_4, buf_9, buf_5], [77, 4, 2]);
        addComputePass(device, commandEncoder, piplines[689], [buf_5, buf_4], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[690], [buf_9, buf_4, buf_5], [77, 32, 1]);
        addComputePass(device, commandEncoder, piplines[691], [buf_4, buf_9], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[692], [buf_5, buf_9, buf_4], [77, 128, 1]);
        addComputePass(device, commandEncoder, piplines[693], [buf_9, buf_39, buf_460], [20, 77, 1]);
        addComputePass(device, commandEncoder, piplines[694], [buf_4, buf_5, buf_9], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[695], [buf_190, buf_4, buf_461, buf_462, buf_2], [20, 8, 2]);
        addComputePass(device, commandEncoder, piplines[696], [buf_2, buf_190], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[697], [buf_9, buf_190, buf_2], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[698], [buf_4, buf_190, buf_2, buf_9, buf_463, buf_464], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[699], [buf_2, buf_4, buf_465], [160, 16, 1]);
        addComputePass(device, commandEncoder, piplines[700], [buf_4, buf_2, buf_466], [320, 16, 1]);
        addComputePass(device, commandEncoder, piplines[701], [buf_9, buf_2, buf_466], [320, 16, 1]);
        addComputePass(device, commandEncoder, piplines[702], [buf_5, buf_2, buf_466, buf_4, buf_9], [1280, 4, 1]);
        addComputePass(device, commandEncoder, piplines[703], [buf_2, buf_5, buf_467], [20, 16, 1]);
        addComputePass(device, commandEncoder, piplines[704], [buf_4, buf_2, buf_468, buf_190], [4, 320, 1]);
        addComputePass(device, commandEncoder, piplines[705], [buf_2, buf_6, buf_442], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[706], [buf_9, buf_4, buf_469, buf_470, buf_2, buf_443, buf_179, buf_444], [4, 40, 2]);
        addComputePass(device, commandEncoder, piplines[707], [buf_4, buf_9, buf_471], [2, 320, 2]);
        addComputePass(device, commandEncoder, piplines[708], [buf_6, buf_4, buf_472, buf_42], [16, 240, 2]);
        addComputePass(device, commandEncoder, piplines[709], [buf_2, buf_4, buf_472, buf_42], [15, 4, 2]);
        addComputePass(device, commandEncoder, piplines[710], [buf_9, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[711], [buf_2, buf_4, buf_472, buf_42, buf_9], [1280, 4, 2]);
        addComputePass(device, commandEncoder, piplines[712], [buf_4, buf_2], [960, 1, 1]);
        addComputePass(device, commandEncoder, piplines[713], [buf_5, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[714], [buf_4, buf_2, buf_5, buf_473, buf_474], [16, 480, 1]);
        addComputePass(device, commandEncoder, piplines[715], [buf_9, buf_2, buf_5, buf_473, buf_474], [16, 240, 2]);
        addComputePass(device, commandEncoder, piplines[716], [buf_2, buf_4, buf_9], [30720, 1, 1]);
        addComputePass(device, commandEncoder, piplines[717], [buf_4, buf_14, buf_16], [10, 1, 1]);
        addComputePass(device, commandEncoder, piplines[718], [buf_9, buf_4, buf_475, buf_476], [40, 1, 1]);
        addComputePass(device, commandEncoder, piplines[719], [buf_4, buf_2, buf_477, buf_478, buf_9], [2, 160, 2]);
        addComputePass(device, commandEncoder, piplines[720], [buf_5, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[721], [buf_42, buf_4, buf_5], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[722], [buf_2, buf_4, buf_5, buf_42, buf_479, buf_480], [16, 160, 1]);
        addComputePass(device, commandEncoder, piplines[723], [buf_9, buf_4, buf_5, buf_42, buf_479, buf_480], [16, 80, 2]);
        addComputePass(device, commandEncoder, piplines[724], [buf_4, buf_2, buf_9], [10240, 1, 1]);
        addComputePass(device, commandEncoder, piplines[725], [buf_42, buf_4, buf_481], [2, 160, 2]);
        addComputePass(device, commandEncoder, piplines[726], [buf_2, buf_6, buf_482, buf_483, buf_42, buf_484], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[727], [buf_9, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[728], [buf_5, buf_2, buf_9], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[729], [buf_4, buf_2, buf_9, buf_5, buf_485, buf_486], [16, 160, 1]);
        addComputePass(device, commandEncoder, piplines[730], [buf_2, buf_4, buf_487], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[731], [buf_9, buf_2, buf_488], [160, 16, 1]);
        addComputePass(device, commandEncoder, piplines[732], [buf_2, buf_9], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[733], [buf_4, buf_9, buf_2], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[734], [buf_5, buf_9, buf_2, buf_4, buf_489, buf_490], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[735], [buf_4, buf_5, buf_491], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[736], [buf_179, buf_5, buf_492], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[737], [buf_2, buf_4, buf_179], [512, 8, 2]);
        addComputePass(device, commandEncoder, piplines[738], [buf_179, buf_2], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[739], [buf_4, buf_2, buf_179], [16, 2048, 1]);
        addComputePass(device, commandEncoder, piplines[740], [buf_179, buf_4], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[741], [buf_2, buf_4, buf_179], [16, 2048, 1]);
        addComputePass(device, commandEncoder, piplines[742], [buf_4, buf_5, buf_493], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[743], [buf_5, buf_2, buf_4], [80, 4, 2]);
        addComputePass(device, commandEncoder, piplines[744], [buf_2, buf_5, buf_494, buf_495, buf_9], [10, 32, 2]);
        addComputePass(device, commandEncoder, piplines[745], [buf_9, buf_2], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[746], [buf_5, buf_2, buf_9], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[747], [buf_4, buf_2, buf_9, buf_5, buf_496, buf_497], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[748], [buf_9, buf_4, buf_498], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[749], [buf_5, buf_39, buf_499], [10, 77, 1]);
        addComputePass(device, commandEncoder, piplines[750], [buf_4, buf_9, buf_5], [77, 16, 2]);
        addComputePass(device, commandEncoder, piplines[751], [buf_5, buf_4], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[752], [buf_9, buf_4, buf_5], [77, 128, 1]);
        addComputePass(device, commandEncoder, piplines[753], [buf_4, buf_9], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[754], [buf_5, buf_9, buf_4], [77, 512, 1]);
        addComputePass(device, commandEncoder, piplines[755], [buf_9, buf_39, buf_500], [10, 77, 1]);
        addComputePass(device, commandEncoder, piplines[756], [buf_4, buf_5, buf_9], [80, 4, 2]);
        addComputePass(device, commandEncoder, piplines[757], [buf_179, buf_4, buf_501, buf_502, buf_2], [10, 32, 2]);
        addComputePass(device, commandEncoder, piplines[758], [buf_2, buf_179], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[759], [buf_9, buf_179, buf_2], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[760], [buf_4, buf_179, buf_2, buf_9, buf_503, buf_504], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[761], [buf_2, buf_4, buf_505], [80, 64, 1]);
        addComputePass(device, commandEncoder, piplines[762], [buf_4, buf_2, buf_506], [160, 64, 1]);
        addComputePass(device, commandEncoder, piplines[763], [buf_9, buf_2, buf_506], [160, 64, 1]);
        addComputePass(device, commandEncoder, piplines[764], [buf_5, buf_2, buf_506, buf_4, buf_9], [640, 16, 1]);
        addComputePass(device, commandEncoder, piplines[765], [buf_2, buf_5, buf_507], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[766], [buf_4, buf_2, buf_508, buf_179], [16, 160, 1]);
        addComputePass(device, commandEncoder, piplines[767], [buf_9, buf_4, buf_509], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[768], [buf_4, buf_6, buf_482], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[769], [buf_2, buf_9, buf_510, buf_4, buf_483, buf_42, buf_484], [16, 160, 2]);
        addComputePass(device, commandEncoder, piplines[770], [buf_6, buf_2, buf_111], [16, 160, 2]);
        addComputePass(device, commandEncoder, piplines[771], [buf_4, buf_2, buf_111], [80, 32, 2]);
        addComputePass(device, commandEncoder, piplines[772], [buf_9, buf_4], [320, 1, 1]);
        addComputePass(device, commandEncoder, piplines[773], [buf_5, buf_9], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[774], [buf_9, buf_4, buf_5], [5, 4, 1]);
        addComputePass(device, commandEncoder, piplines[775], [buf_42, buf_9], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[776], [buf_4, buf_2, buf_111, buf_5, buf_42, buf_511, buf_512], [16, 320, 1]);
        addComputePass(device, commandEncoder, piplines[777], [buf_9, buf_2, buf_111, buf_5, buf_42, buf_511, buf_512], [16, 160, 2]);
        addComputePass(device, commandEncoder, piplines[778], [buf_2, buf_4, buf_9], [20480, 1, 1]);
        addComputePass(device, commandEncoder, piplines[779], [buf_4, buf_14, buf_16], [10, 1, 1]);
        addComputePass(device, commandEncoder, piplines[780], [buf_9, buf_4, buf_513, buf_514], [40, 1, 1]);
        addComputePass(device, commandEncoder, piplines[781], [buf_4, buf_2, buf_515, buf_516, buf_9], [2, 160, 2]);
        addComputePass(device, commandEncoder, piplines[782], [buf_5, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[783], [buf_42, buf_4, buf_5], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[784], [buf_2, buf_4, buf_5, buf_42, buf_517, buf_518], [16, 160, 1]);
        addComputePass(device, commandEncoder, piplines[785], [buf_9, buf_4, buf_5, buf_42, buf_517, buf_518], [16, 80, 2]);
        addComputePass(device, commandEncoder, piplines[786], [buf_4, buf_2, buf_9], [10240, 1, 1]);
        addComputePass(device, commandEncoder, piplines[787], [buf_42, buf_4, buf_519], [2, 160, 2]);
        addComputePass(device, commandEncoder, piplines[788], [buf_2, buf_6, buf_520, buf_521, buf_42, buf_522], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[789], [buf_9, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[790], [buf_5, buf_2, buf_9], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[791], [buf_4, buf_2, buf_9, buf_5, buf_523, buf_524], [16, 160, 1]);
        addComputePass(device, commandEncoder, piplines[792], [buf_2, buf_4, buf_525], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[793], [buf_9, buf_2, buf_526], [160, 16, 1]);
        addComputePass(device, commandEncoder, piplines[794], [buf_2, buf_9], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[795], [buf_4, buf_9, buf_2], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[796], [buf_5, buf_9, buf_2, buf_4, buf_527, buf_528], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[797], [buf_4, buf_5, buf_529], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[798], [buf_111, buf_5, buf_530], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[799], [buf_2, buf_4, buf_111], [512, 8, 2]);
        addComputePass(device, commandEncoder, piplines[800], [buf_111, buf_2], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[801], [buf_4, buf_2, buf_111], [16, 2048, 1]);
        addComputePass(device, commandEncoder, piplines[802], [buf_111, buf_4], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[803], [buf_2, buf_4, buf_111], [16, 2048, 1]);
        addComputePass(device, commandEncoder, piplines[804], [buf_4, buf_5, buf_531], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[805], [buf_5, buf_2, buf_4], [80, 4, 2]);
        addComputePass(device, commandEncoder, piplines[806], [buf_2, buf_5, buf_532, buf_533, buf_9], [10, 32, 2]);
        addComputePass(device, commandEncoder, piplines[807], [buf_9, buf_2], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[808], [buf_5, buf_2, buf_9], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[809], [buf_4, buf_2, buf_9, buf_5, buf_534, buf_535], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[810], [buf_9, buf_4, buf_536], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[811], [buf_5, buf_39, buf_537], [10, 77, 1]);
        addComputePass(device, commandEncoder, piplines[812], [buf_4, buf_9, buf_5], [77, 16, 2]);
        addComputePass(device, commandEncoder, piplines[813], [buf_5, buf_4], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[814], [buf_9, buf_4, buf_5], [77, 128, 1]);
        addComputePass(device, commandEncoder, piplines[815], [buf_4, buf_9], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[816], [buf_5, buf_9, buf_4], [77, 512, 1]);
        addComputePass(device, commandEncoder, piplines[817], [buf_9, buf_39, buf_538], [10, 77, 1]);
        addComputePass(device, commandEncoder, piplines[818], [buf_4, buf_5, buf_9], [80, 4, 2]);
        addComputePass(device, commandEncoder, piplines[819], [buf_111, buf_4, buf_539, buf_540, buf_2], [10, 32, 2]);
        addComputePass(device, commandEncoder, piplines[820], [buf_2, buf_111], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[821], [buf_9, buf_111, buf_2], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[822], [buf_4, buf_111, buf_2, buf_9, buf_541, buf_542], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[823], [buf_2, buf_4, buf_543], [80, 64, 1]);
        addComputePass(device, commandEncoder, piplines[824], [buf_4, buf_2, buf_544], [160, 64, 1]);
        addComputePass(device, commandEncoder, piplines[825], [buf_9, buf_2, buf_544], [160, 64, 1]);
        addComputePass(device, commandEncoder, piplines[826], [buf_5, buf_2, buf_544, buf_4, buf_9], [640, 16, 1]);
        addComputePass(device, commandEncoder, piplines[827], [buf_2, buf_5, buf_545], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[828], [buf_4, buf_2, buf_546, buf_111], [16, 160, 1]);
        addComputePass(device, commandEncoder, piplines[829], [buf_9, buf_4, buf_547], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[830], [buf_4, buf_6, buf_520], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[831], [buf_2, buf_9, buf_548, buf_4, buf_521, buf_42, buf_522], [16, 120, 2]);
        addComputePass(device, commandEncoder, piplines[832], [buf_6, buf_2, buf_89], [16, 120, 2]);
        addComputePass(device, commandEncoder, piplines[833], [buf_4, buf_2, buf_89], [480, 4, 2]);
        addComputePass(device, commandEncoder, piplines[834], [buf_5, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[835], [buf_42, buf_4, buf_5], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[836], [buf_2, buf_4, buf_5, buf_42, buf_549, buf_550], [16, 240, 1]);
        addComputePass(device, commandEncoder, piplines[837], [buf_9, buf_4, buf_5, buf_42, buf_549, buf_550], [16, 120, 2]);
        addComputePass(device, commandEncoder, piplines[838], [buf_4, buf_2, buf_9], [15360, 1, 1]);
        addComputePass(device, commandEncoder, piplines[839], [buf_2, buf_14, buf_16], [10, 1, 1]);
        addComputePass(device, commandEncoder, piplines[840], [buf_9, buf_2, buf_551, buf_552], [40, 1, 1]);
        addComputePass(device, commandEncoder, piplines[841], [buf_2, buf_4, buf_553, buf_554, buf_9], [2, 160, 2]);
        addComputePass(device, commandEncoder, piplines[842], [buf_5, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[843], [buf_42, buf_2, buf_5], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[844], [buf_4, buf_2, buf_5, buf_42, buf_555, buf_556], [16, 160, 1]);
        addComputePass(device, commandEncoder, piplines[845], [buf_9, buf_2, buf_5, buf_42, buf_555, buf_556], [16, 80, 2]);
        addComputePass(device, commandEncoder, piplines[846], [buf_2, buf_4, buf_9], [10240, 1, 1]);
        addComputePass(device, commandEncoder, piplines[847], [buf_42, buf_2, buf_557], [2, 160, 2]);
        addComputePass(device, commandEncoder, piplines[848], [buf_2, buf_6, buf_558, buf_559, buf_42, buf_560], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[849], [buf_9, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[850], [buf_5, buf_2, buf_9], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[851], [buf_4, buf_2, buf_9, buf_5, buf_561, buf_562], [16, 160, 1]);
        addComputePass(device, commandEncoder, piplines[852], [buf_2, buf_4, buf_563], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[853], [buf_9, buf_2, buf_564], [160, 16, 1]);
        addComputePass(device, commandEncoder, piplines[854], [buf_2, buf_9], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[855], [buf_4, buf_9, buf_2], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[856], [buf_5, buf_9, buf_2, buf_4, buf_565, buf_566], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[857], [buf_4, buf_5, buf_567], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[858], [buf_111, buf_5, buf_568], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[859], [buf_2, buf_4, buf_111], [512, 8, 2]);
        addComputePass(device, commandEncoder, piplines[860], [buf_111, buf_2], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[861], [buf_4, buf_2, buf_111], [16, 2048, 1]);
        addComputePass(device, commandEncoder, piplines[862], [buf_111, buf_4], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[863], [buf_2, buf_4, buf_111], [16, 2048, 1]);
        addComputePass(device, commandEncoder, piplines[864], [buf_4, buf_5, buf_569], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[865], [buf_5, buf_2, buf_4], [80, 4, 2]);
        addComputePass(device, commandEncoder, piplines[866], [buf_2, buf_5, buf_570, buf_571, buf_9], [10, 32, 2]);
        addComputePass(device, commandEncoder, piplines[867], [buf_9, buf_2], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[868], [buf_5, buf_2, buf_9], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[869], [buf_4, buf_2, buf_9, buf_5, buf_572, buf_573], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[870], [buf_9, buf_4, buf_574], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[871], [buf_5, buf_39, buf_575], [10, 77, 1]);
        addComputePass(device, commandEncoder, piplines[872], [buf_4, buf_9, buf_5], [77, 16, 2]);
        addComputePass(device, commandEncoder, piplines[873], [buf_5, buf_4], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[874], [buf_9, buf_4, buf_5], [77, 128, 1]);
        addComputePass(device, commandEncoder, piplines[875], [buf_4, buf_9], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[876], [buf_5, buf_9, buf_4], [77, 512, 1]);
        addComputePass(device, commandEncoder, piplines[877], [buf_9, buf_39, buf_576], [10, 77, 1]);
        addComputePass(device, commandEncoder, piplines[878], [buf_4, buf_5, buf_9], [80, 4, 2]);
        addComputePass(device, commandEncoder, piplines[879], [buf_111, buf_4, buf_577, buf_578, buf_2], [10, 32, 2]);
        addComputePass(device, commandEncoder, piplines[880], [buf_2, buf_111], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[881], [buf_9, buf_111, buf_2], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[882], [buf_4, buf_111, buf_2, buf_9, buf_579, buf_580], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[883], [buf_2, buf_4, buf_581], [80, 64, 1]);
        addComputePass(device, commandEncoder, piplines[884], [buf_4, buf_2, buf_582], [160, 64, 1]);
        addComputePass(device, commandEncoder, piplines[885], [buf_9, buf_2, buf_582], [160, 64, 1]);
        addComputePass(device, commandEncoder, piplines[886], [buf_5, buf_2, buf_582, buf_4, buf_9], [640, 16, 1]);
        addComputePass(device, commandEncoder, piplines[887], [buf_2, buf_5, buf_583], [10, 64, 1]);
        addComputePass(device, commandEncoder, piplines[888], [buf_4, buf_2, buf_584, buf_111], [16, 160, 1]);
        addComputePass(device, commandEncoder, piplines[889], [buf_2, buf_6, buf_558], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[890], [buf_9, buf_4, buf_585, buf_586, buf_2, buf_559, buf_42, buf_560], [16, 20, 2]);
        addComputePass(device, commandEncoder, piplines[891], [buf_4, buf_9, buf_587], [8, 160, 2]);
        addComputePass(device, commandEncoder, piplines[892], [buf_2, buf_4, buf_588, buf_11], [64, 120, 2]);
        addComputePass(device, commandEncoder, piplines[893], [buf_6, buf_2, buf_589], [64, 10, 2]);
        addComputePass(device, commandEncoder, piplines[894], [buf_2, buf_4, buf_588, buf_11], [30, 4, 2]);
        addComputePass(device, commandEncoder, piplines[895], [buf_9, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[896], [buf_2, buf_4, buf_588, buf_11, buf_9], [2560, 4, 2]);
        addComputePass(device, commandEncoder, piplines[897], [buf_4, buf_2], [1920, 1, 1]);
        addComputePass(device, commandEncoder, piplines[898], [buf_5, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[899], [buf_4, buf_2, buf_5, buf_590, buf_591], [64, 240, 1]);
        addComputePass(device, commandEncoder, piplines[900], [buf_9, buf_2, buf_5, buf_590, buf_591], [64, 120, 2]);
        addComputePass(device, commandEncoder, piplines[901], [buf_2, buf_4, buf_9], [61440, 1, 1]);
        addComputePass(device, commandEncoder, piplines[902], [buf_4, buf_2, buf_592], [8, 80, 2]);
        addComputePass(device, commandEncoder, piplines[903], [buf_2, buf_14, buf_16], [10, 1, 1]);
        addComputePass(device, commandEncoder, piplines[904], [buf_9, buf_2, buf_593, buf_594], [20, 1, 1]);
        addComputePass(device, commandEncoder, piplines[905], [buf_2, buf_4, buf_595, buf_9], [10, 4, 2]);
        addComputePass(device, commandEncoder, piplines[906], [buf_5, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[907], [buf_2, buf_4, buf_595, buf_9, buf_5], [640, 4, 2]);
        addComputePass(device, commandEncoder, piplines[908], [buf_4, buf_2], [640, 1, 1]);
        addComputePass(device, commandEncoder, piplines[909], [buf_5, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[910], [buf_4, buf_2, buf_5, buf_596, buf_597], [64, 80, 1]);
        addComputePass(device, commandEncoder, piplines[911], [buf_9, buf_2, buf_5, buf_596, buf_597], [64, 40, 2]);
        addComputePass(device, commandEncoder, piplines[912], [buf_2, buf_4, buf_9], [20480, 1, 1]);
        addComputePass(device, commandEncoder, piplines[913], [buf_11, buf_2, buf_598], [8, 80, 2]);
        addComputePass(device, commandEncoder, piplines[914], [buf_2, buf_6, buf_599, buf_11, buf_600], [10, 4, 2]);
        addComputePass(device, commandEncoder, piplines[915], [buf_4, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[916], [buf_2, buf_6, buf_599, buf_11, buf_600, buf_4], [640, 4, 2]);
        addComputePass(device, commandEncoder, piplines[917], [buf_4, buf_2], [640, 1, 1]);
        addComputePass(device, commandEncoder, piplines[918], [buf_9, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[919], [buf_4, buf_2, buf_9, buf_601, buf_602], [64, 80, 1]);
        addComputePass(device, commandEncoder, piplines[920], [buf_2, buf_4, buf_603], [64, 10, 2]);
        addComputePass(device, commandEncoder, piplines[921], [buf_9, buf_2, buf_604], [80, 64, 1]);
        addComputePass(device, commandEncoder, piplines[922], [buf_2, buf_9], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[923], [buf_4, buf_9, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[924], [buf_5, buf_9, buf_2, buf_4, buf_605, buf_606], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[925], [buf_4, buf_5, buf_607], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[926], [buf_42, buf_5, buf_608], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[927], [buf_2, buf_4, buf_42], [8192, 8, 2]);
        addComputePass(device, commandEncoder, piplines[928], [buf_42, buf_2], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[929], [buf_4, buf_2, buf_42], [64, 8192, 1]);
        addComputePass(device, commandEncoder, piplines[930], [buf_42, buf_4], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[931], [buf_2, buf_4, buf_42], [64, 8192, 1]);
        addComputePass(device, commandEncoder, piplines[932], [buf_4, buf_5, buf_609], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[933], [buf_5, buf_2, buf_4], [320, 2, 2]);
        addComputePass(device, commandEncoder, piplines[934], [buf_42, buf_5, buf_610, buf_611, buf_9], [5, 128, 2]);
        addComputePass(device, commandEncoder, piplines[935], [buf_4, buf_42], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[936], [buf_9, buf_42, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[937], [buf_2, buf_42, buf_4, buf_9, buf_612, buf_613], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[938], [buf_4, buf_2, buf_614], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[939], [buf_9, buf_39, buf_615], [5, 77, 1]);
        addComputePass(device, commandEncoder, piplines[940], [buf_2, buf_4, buf_9], [77, 64, 2]);
        addComputePass(device, commandEncoder, piplines[941], [buf_9, buf_2], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[942], [buf_4, buf_2, buf_9], [77, 512, 1]);
        addComputePass(device, commandEncoder, piplines[943], [buf_9, buf_4], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[944], [buf_2, buf_4, buf_9], [77, 2048, 1]);
        addComputePass(device, commandEncoder, piplines[945], [buf_9, buf_39, buf_616], [5, 77, 1]);
        addComputePass(device, commandEncoder, piplines[946], [buf_4, buf_2, buf_9], [320, 2, 2]);
        addComputePass(device, commandEncoder, piplines[947], [buf_111, buf_4, buf_617, buf_618, buf_42], [5, 128, 2]);
        addComputePass(device, commandEncoder, piplines[948], [buf_2, buf_111], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[949], [buf_9, buf_111, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[950], [buf_4, buf_111, buf_2, buf_9, buf_619, buf_620], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[951], [buf_2, buf_4, buf_621], [40, 256, 1]);
        addComputePass(device, commandEncoder, piplines[952], [buf_4, buf_2, buf_622], [80, 256, 1]);
        addComputePass(device, commandEncoder, piplines[953], [buf_9, buf_2, buf_622], [80, 256, 1]);
        addComputePass(device, commandEncoder, piplines[954], [buf_5, buf_2, buf_622, buf_4, buf_9], [320, 64, 1]);
        addComputePass(device, commandEncoder, piplines[955], [buf_2, buf_5, buf_623], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[956], [buf_4, buf_2, buf_624, buf_111], [64, 80, 1]);
        addComputePass(device, commandEncoder, piplines[957], [buf_9, buf_4, buf_625], [64, 10, 2]);
        addComputePass(device, commandEncoder, piplines[958], [buf_2, buf_9, buf_626, buf_6, buf_599, buf_11, buf_600], [64, 80, 2]);
        addComputePass(device, commandEncoder, piplines[959], [buf_4, buf_2, buf_31], [64, 80, 2]);
        addComputePass(device, commandEncoder, piplines[960], [buf_6, buf_4, buf_627], [64, 10, 2]);
        addComputePass(device, commandEncoder, piplines[961], [buf_4, buf_2, buf_31], [160, 32, 2]);
        addComputePass(device, commandEncoder, piplines[962], [buf_9, buf_4], [640, 1, 1]);
        addComputePass(device, commandEncoder, piplines[963], [buf_5, buf_9], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[964], [buf_9, buf_4, buf_5], [5, 8, 1]);
        addComputePass(device, commandEncoder, piplines[965], [buf_11, buf_9], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[966], [buf_4, buf_2, buf_31, buf_5, buf_11, buf_628, buf_629], [64, 160, 1]);
        addComputePass(device, commandEncoder, piplines[967], [buf_9, buf_2, buf_31, buf_5, buf_11, buf_628, buf_629], [64, 80, 2]);
        addComputePass(device, commandEncoder, piplines[968], [buf_2, buf_4, buf_9], [40960, 1, 1]);
        addComputePass(device, commandEncoder, piplines[969], [buf_4, buf_2, buf_630], [8, 80, 2]);
        addComputePass(device, commandEncoder, piplines[970], [buf_2, buf_14, buf_16], [10, 1, 1]);
        addComputePass(device, commandEncoder, piplines[971], [buf_9, buf_2, buf_631, buf_632], [20, 1, 1]);
        addComputePass(device, commandEncoder, piplines[972], [buf_2, buf_4, buf_633, buf_9], [10, 4, 2]);
        addComputePass(device, commandEncoder, piplines[973], [buf_5, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[974], [buf_2, buf_4, buf_633, buf_9, buf_5], [640, 4, 2]);
        addComputePass(device, commandEncoder, piplines[975], [buf_4, buf_2], [640, 1, 1]);
        addComputePass(device, commandEncoder, piplines[976], [buf_5, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[977], [buf_4, buf_2, buf_5, buf_634, buf_635], [64, 80, 1]);
        addComputePass(device, commandEncoder, piplines[978], [buf_9, buf_2, buf_5, buf_634, buf_635], [64, 40, 2]);
        addComputePass(device, commandEncoder, piplines[979], [buf_2, buf_4, buf_9], [20480, 1, 1]);
        addComputePass(device, commandEncoder, piplines[980], [buf_11, buf_2, buf_636], [8, 80, 2]);
        addComputePass(device, commandEncoder, piplines[981], [buf_2, buf_6, buf_637, buf_11, buf_638], [10, 4, 2]);
        addComputePass(device, commandEncoder, piplines[982], [buf_4, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[983], [buf_2, buf_6, buf_637, buf_11, buf_638, buf_4], [640, 4, 2]);
        addComputePass(device, commandEncoder, piplines[984], [buf_4, buf_2], [640, 1, 1]);
        addComputePass(device, commandEncoder, piplines[985], [buf_9, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[986], [buf_4, buf_2, buf_9, buf_639, buf_640], [64, 80, 1]);
        addComputePass(device, commandEncoder, piplines[987], [buf_2, buf_4, buf_641], [64, 10, 2]);
        addComputePass(device, commandEncoder, piplines[988], [buf_9, buf_2, buf_642], [80, 64, 1]);
        addComputePass(device, commandEncoder, piplines[989], [buf_2, buf_9], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[990], [buf_4, buf_9, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[991], [buf_5, buf_9, buf_2, buf_4, buf_643, buf_644], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[992], [buf_4, buf_5, buf_645], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[993], [buf_31, buf_5, buf_646], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[994], [buf_2, buf_4, buf_31], [8192, 8, 2]);
        addComputePass(device, commandEncoder, piplines[995], [buf_31, buf_2], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[996], [buf_4, buf_2, buf_31], [64, 8192, 1]);
        addComputePass(device, commandEncoder, piplines[997], [buf_31, buf_4], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[998], [buf_2, buf_4, buf_31], [64, 8192, 1]);
        addComputePass(device, commandEncoder, piplines[999], [buf_4, buf_5, buf_647], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[1000], [buf_5, buf_2, buf_4], [320, 2, 2]);
        addComputePass(device, commandEncoder, piplines[1001], [buf_31, buf_5, buf_648, buf_649, buf_9], [5, 128, 2]);
        addComputePass(device, commandEncoder, piplines[1002], [buf_4, buf_31], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1003], [buf_9, buf_31, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1004], [buf_2, buf_31, buf_4, buf_9, buf_650, buf_651], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[1005], [buf_4, buf_2, buf_652], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[1006], [buf_9, buf_39, buf_653], [5, 77, 1]);
        addComputePass(device, commandEncoder, piplines[1007], [buf_2, buf_4, buf_9], [77, 64, 2]);
        addComputePass(device, commandEncoder, piplines[1008], [buf_9, buf_2], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1009], [buf_4, buf_2, buf_9], [77, 512, 1]);
        addComputePass(device, commandEncoder, piplines[1010], [buf_9, buf_4], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1011], [buf_2, buf_4, buf_9], [77, 2048, 1]);
        addComputePass(device, commandEncoder, piplines[1012], [buf_9, buf_39, buf_654], [5, 77, 1]);
        addComputePass(device, commandEncoder, piplines[1013], [buf_4, buf_2, buf_9], [320, 2, 2]);
        addComputePass(device, commandEncoder, piplines[1014], [buf_42, buf_4, buf_655, buf_656, buf_31], [5, 128, 2]);
        addComputePass(device, commandEncoder, piplines[1015], [buf_2, buf_42], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1016], [buf_9, buf_42, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1017], [buf_4, buf_42, buf_2, buf_9, buf_657, buf_658], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[1018], [buf_2, buf_4, buf_659], [40, 256, 1]);
        addComputePass(device, commandEncoder, piplines[1019], [buf_4, buf_2, buf_660], [80, 256, 1]);
        addComputePass(device, commandEncoder, piplines[1020], [buf_9, buf_2, buf_660], [80, 256, 1]);
        addComputePass(device, commandEncoder, piplines[1021], [buf_5, buf_2, buf_660, buf_4, buf_9], [320, 64, 1]);
        addComputePass(device, commandEncoder, piplines[1022], [buf_2, buf_5, buf_661], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[1023], [buf_4, buf_2, buf_662, buf_42], [64, 80, 1]);
        addComputePass(device, commandEncoder, piplines[1024], [buf_9, buf_4, buf_663], [64, 10, 2]);
        addComputePass(device, commandEncoder, piplines[1025], [buf_2, buf_9, buf_664, buf_6, buf_637, buf_11, buf_638], [64, 80, 2]);
        addComputePass(device, commandEncoder, piplines[1026], [buf_4, buf_0, buf_3], [64, 80, 2]);
        addComputePass(device, commandEncoder, piplines[1027], [buf_9, buf_2, buf_4], [40960, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1028], [buf_6, buf_9, buf_665], [64, 10, 2]);
        addComputePass(device, commandEncoder, piplines[1029], [buf_9, buf_2, buf_4], [40960, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1030], [buf_5, buf_9], [640, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1031], [buf_0, buf_5], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1032], [buf_5, buf_9, buf_0], [5, 8, 1]);
        addComputePass(device, commandEncoder, piplines[1033], [buf_11, buf_5], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1034], [buf_9, buf_2, buf_4, buf_0, buf_11, buf_666, buf_667], [64, 160, 1]);
        addComputePass(device, commandEncoder, piplines[1035], [buf_5, buf_2, buf_4, buf_0, buf_11, buf_666, buf_667], [64, 80, 2]);
        addComputePass(device, commandEncoder, piplines[1036], [buf_2, buf_9, buf_5], [40960, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1037], [buf_4, buf_2, buf_668], [8, 80, 2]);
        addComputePass(device, commandEncoder, piplines[1038], [buf_2, buf_14, buf_16], [10, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1039], [buf_9, buf_2, buf_669, buf_670], [20, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1040], [buf_2, buf_4, buf_671, buf_9], [10, 4, 2]);
        addComputePass(device, commandEncoder, piplines[1041], [buf_5, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1042], [buf_2, buf_4, buf_671, buf_9, buf_5], [640, 4, 2]);
        addComputePass(device, commandEncoder, piplines[1043], [buf_4, buf_2], [640, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1044], [buf_5, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1045], [buf_4, buf_2, buf_5, buf_672, buf_673], [64, 80, 1]);
        addComputePass(device, commandEncoder, piplines[1046], [buf_9, buf_2, buf_5, buf_672, buf_673], [64, 40, 2]);
        addComputePass(device, commandEncoder, piplines[1047], [buf_2, buf_4, buf_9], [20480, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1048], [buf_0, buf_2, buf_674], [8, 80, 2]);
        addComputePass(device, commandEncoder, piplines[1049], [buf_11, buf_6, buf_675, buf_0, buf_676], [80, 32, 2]);
        addComputePass(device, commandEncoder, piplines[1050], [buf_2, buf_11], [320, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1051], [buf_4, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1052], [buf_2, buf_6, buf_675, buf_0, buf_676, buf_4], [640, 4, 2]);
        addComputePass(device, commandEncoder, piplines[1053], [buf_4, buf_2], [640, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1054], [buf_9, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1055], [buf_4, buf_2, buf_9, buf_677, buf_678], [64, 80, 1]);
        addComputePass(device, commandEncoder, piplines[1056], [buf_2, buf_4, buf_679], [64, 10, 2]);
        addComputePass(device, commandEncoder, piplines[1057], [buf_9, buf_2, buf_680], [80, 64, 1]);
        addComputePass(device, commandEncoder, piplines[1058], [buf_2, buf_9], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1059], [buf_4, buf_9, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1060], [buf_5, buf_9, buf_2, buf_4, buf_681, buf_682], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[1061], [buf_4, buf_5, buf_683], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[1062], [buf_31, buf_5, buf_684], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[1063], [buf_2, buf_4, buf_31], [8192, 8, 2]);
        addComputePass(device, commandEncoder, piplines[1064], [buf_31, buf_2], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1065], [buf_4, buf_2, buf_31], [64, 8192, 1]);
        addComputePass(device, commandEncoder, piplines[1066], [buf_31, buf_4], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1067], [buf_2, buf_4, buf_31], [64, 8192, 1]);
        addComputePass(device, commandEncoder, piplines[1068], [buf_4, buf_5, buf_685], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[1069], [buf_5, buf_2, buf_4], [320, 2, 2]);
        addComputePass(device, commandEncoder, piplines[1070], [buf_31, buf_5, buf_686, buf_687, buf_9], [5, 128, 2]);
        addComputePass(device, commandEncoder, piplines[1071], [buf_4, buf_31], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1072], [buf_9, buf_31, buf_4], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1073], [buf_2, buf_31, buf_4, buf_9, buf_688, buf_689], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[1074], [buf_4, buf_2, buf_690], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[1075], [buf_9, buf_39, buf_691], [5, 77, 1]);
        addComputePass(device, commandEncoder, piplines[1076], [buf_2, buf_4, buf_9], [77, 64, 2]);
        addComputePass(device, commandEncoder, piplines[1077], [buf_9, buf_2], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1078], [buf_4, buf_2, buf_9], [77, 512, 1]);
        addComputePass(device, commandEncoder, piplines[1079], [buf_9, buf_4], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1080], [buf_2, buf_4, buf_9], [77, 2048, 1]);
        addComputePass(device, commandEncoder, piplines[1081], [buf_9, buf_39, buf_692], [5, 77, 1]);
        addComputePass(device, commandEncoder, piplines[1082], [buf_4, buf_2, buf_9], [320, 2, 2]);
        addComputePass(device, commandEncoder, piplines[1083], [buf_42, buf_4, buf_693, buf_694, buf_31], [5, 128, 2]);
        addComputePass(device, commandEncoder, piplines[1084], [buf_2, buf_42], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1085], [buf_9, buf_42, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1086], [buf_4, buf_42, buf_2, buf_9, buf_695, buf_696], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[1087], [buf_2, buf_4, buf_697], [40, 256, 1]);
        addComputePass(device, commandEncoder, piplines[1088], [buf_4, buf_2, buf_698], [80, 256, 1]);
        addComputePass(device, commandEncoder, piplines[1089], [buf_9, buf_2, buf_698], [80, 256, 1]);
        addComputePass(device, commandEncoder, piplines[1090], [buf_5, buf_2, buf_698, buf_4, buf_9], [320, 64, 1]);
        addComputePass(device, commandEncoder, piplines[1091], [buf_2, buf_5, buf_699], [5, 256, 1]);
        addComputePass(device, commandEncoder, piplines[1092], [buf_4, buf_2, buf_700, buf_42], [64, 80, 1]);
        addComputePass(device, commandEncoder, piplines[1093], [buf_2, buf_4, buf_701], [64, 10, 2]);
        addComputePass(device, commandEncoder, piplines[1094], [buf_4, buf_2, buf_702, buf_6, buf_675, buf_0, buf_676], [640, 4, 2]);
        addComputePass(device, commandEncoder, piplines[1095], [buf_9, buf_2, buf_702, buf_11], [10, 4, 2]);
        addComputePass(device, commandEncoder, piplines[1096], [buf_5, buf_9], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1097], [buf_2, buf_4, buf_5], [5, 4, 1]);
        addComputePass(device, commandEncoder, piplines[1098], [buf_6, buf_2], [64, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1099], [buf_2, buf_4, buf_5, buf_6, buf_703, buf_704], [64, 80, 1]);
        addComputePass(device, commandEncoder, piplines[1100], [buf_9, buf_4, buf_5, buf_6, buf_703, buf_704], [64, 40, 2]);
        addComputePass(device, commandEncoder, piplines[1101], [buf_4, buf_2, buf_9], [20480, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1102], [buf_2, buf_4, buf_705], [8, 2, 1]);
        addComputePass(device, commandEncoder, piplines[1103], [outputs, buf_2, buf_706], [64, 1, 1]);
            commandEncoder.copyBufferToBuffer(outputs, 0, gpuReadBuffer, 0, outputs.size);
            const gpuCommands = commandEncoder.finish();
            device.queue.submit([gpuCommands]);

            await gpuReadBuffer.mapAsync(GPUMapMode.READ);
            const resultBuffer = new Float32Array(gpuReadBuffer.size);
            resultBuffer.set(new Float32Array(gpuReadBuffer.getMappedRange()));
            gpuReadBuffer.unmap();
            return resultBuffer;
        }
      } 
    }
  }
  
    var get_x_prev_and_pred_x0Model = function() {
    
    const E_n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(1) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  var  val0 = f32(data1[0]);
  data0[0] = sqrt(val0);
}`;

const E_n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(1) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  var  val0 = f32(data1[0]);
  data0[0] = sqrt(((1.0f)-val0));
}`;

const E_128_32_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 128 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[0]);
  var  val1 = f32(data2[(gidx0*(128))+(lidx1*(4))]);
  var  val2 = f32(data2[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val3 = f32(data2[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  val5 = f32(data3[0]);
  var  val6 = f32(data4[(gidx0*(128))+(lidx1*(4))]);
  var  val7 = f32(data4[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val8 = f32(data4[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val9 = f32(data4[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  val10 = f32(data5[0]);
  data0[(gidx0*(128))+(lidx1*(4))] = (val0*((val1-(val5*val6))/val10));
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (val0*((val2-(val5*val7))/val10));
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (val0*((val3-(val5*val8))/val10));
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (val0*((val4-(val5*val9))/val10));
}`;

const E_128_32_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 128 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[0]);
  var  val1 = f32(data2[(gidx0*(128))+(lidx1*(4))]);
  var  val2 = f32(data2[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val3 = f32(data2[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx1*(4))+(3)]);
  data0[(gidx0*(128))+(lidx1*(4))] = (val0*val1);
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (val0*val2);
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (val0*val3);
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (val0*val4);
}`;

const E_128_32_4n3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 128 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx1*(4))+(3)]);
  data0[(gidx0*(128))+(lidx1*(4))] = (val0+val4);
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (val1+val5);
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (val2+val6);
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (val3+val7);
}`;

    return {
      "setup": async (device, safetensor) => {
        const metadata = getTensorMetadata(safetensor[0]);

        const buf_0 = createEmptyBuf(device, 65536);;
    const input3 = createEmptyBuf(device, 4);;
    const buf_1 = createEmptyBuf(device, 4);;
    const input2 = createEmptyBuf(device, 4);;
    const buf_2 = createEmptyBuf(device, 4);;
    const buf_3 = createEmptyBuf(device, 65536);;
    const input0 = createEmptyBuf(device, 65536);;
    const input1 = createEmptyBuf(device, 65536);;
    const outputs = createEmptyBuf(device, 65536);;

        
        const gpuWriteBuffer0 = device.createBuffer({size:input0.size, usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE });
    const gpuWriteBuffer1 = device.createBuffer({size:input1.size, usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE });
    const gpuWriteBuffer2 = device.createBuffer({size:input2.size, usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE });
    const gpuWriteBuffer3 = device.createBuffer({size:input3.size, usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE });
        const gpuReadBuffer = device.createBuffer({ size: outputs.size, usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ });

        const kernels = [E_n1, E_n2, E_n1, E_128_32_4n1, E_n2, E_128_32_4n2, E_128_32_4n3];
        const piplines = await Promise.all(kernels.map(name => device.createComputePipelineAsync({layout: "auto", compute: { module: device.createShaderModule({ code: name }), entryPoint: "main" }})));

        return async (data0,data1,data2,data3) => {
            const commandEncoder = device.createCommandEncoder();

            await gpuWriteBuffer0.mapAsync(GPUMapMode.WRITE);
    new Float32Array(gpuWriteBuffer0.getMappedRange()).set(data0);
    gpuWriteBuffer0.unmap();
commandEncoder.copyBufferToBuffer(gpuWriteBuffer0, 0, input0, 0, gpuWriteBuffer0.size);
    await gpuWriteBuffer1.mapAsync(GPUMapMode.WRITE);
    new Float32Array(gpuWriteBuffer1.getMappedRange()).set(data1);
    gpuWriteBuffer1.unmap();
commandEncoder.copyBufferToBuffer(gpuWriteBuffer1, 0, input1, 0, gpuWriteBuffer1.size);
    await gpuWriteBuffer2.mapAsync(GPUMapMode.WRITE);
    new Float32Array(gpuWriteBuffer2.getMappedRange()).set(data2);
    gpuWriteBuffer2.unmap();
commandEncoder.copyBufferToBuffer(gpuWriteBuffer2, 0, input2, 0, gpuWriteBuffer2.size);
    await gpuWriteBuffer3.mapAsync(GPUMapMode.WRITE);
    new Float32Array(gpuWriteBuffer3.getMappedRange()).set(data3);
    gpuWriteBuffer3.unmap();
commandEncoder.copyBufferToBuffer(gpuWriteBuffer3, 0, input3, 0, gpuWriteBuffer3.size);

            addComputePass(device, commandEncoder, piplines[0], [buf_0, input3], [1, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1], [buf_1, input2], [1, 1, 1]);
        addComputePass(device, commandEncoder, piplines[2], [buf_2, input2], [1, 1, 1]);
        addComputePass(device, commandEncoder, piplines[3], [buf_3, buf_0, input0, buf_1, input1, buf_2], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[4], [buf_1, input3], [1, 1, 1]);
        addComputePass(device, commandEncoder, piplines[5], [buf_0, buf_1, input1], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[6], [outputs, buf_3, buf_0], [128, 1, 1]);
            commandEncoder.copyBufferToBuffer(outputs, 0, gpuReadBuffer, 0, outputs.size);
            const gpuCommands = commandEncoder.finish();
            device.queue.submit([gpuCommands]);

            await gpuReadBuffer.mapAsync(GPUMapMode.READ);
            const resultBuffer = new Float32Array(gpuReadBuffer.size);
            resultBuffer.set(new Float32Array(gpuReadBuffer.getMappedRange()));
            gpuReadBuffer.unmap();
            return resultBuffer;
        }
      } 
    }
  }
  
    var decoderModel = function() {
    
    const E_128_32_4n4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 128 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(3)]);
  data0[(gidx0*(128))+(lidx1*(4))] = ((5.489980785067252f)*val0);
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = ((5.489980785067252f)*val1);
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = ((5.489980785067252f)*val2);
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = ((5.489980785067252f)*val3);
}`;

const r_32_32_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 32 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(4096)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(8192)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(12288)]);
  var  val4 = f32(data1[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val5 = f32(data1[(gidx0*(128))+(lidx1*(4))+(4097)]);
  var  val6 = f32(data1[(gidx0*(128))+(lidx1*(4))+(8193)]);
  var  val7 = f32(data1[(gidx0*(128))+(lidx1*(4))+(12289)]);
  var  val8 = f32(data1[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val9 = f32(data1[(gidx0*(128))+(lidx1*(4))+(4098)]);
  var  val10 = f32(data1[(gidx0*(128))+(lidx1*(4))+(8194)]);
  var  val11 = f32(data1[(gidx0*(128))+(lidx1*(4))+(12290)]);
  var  val12 = f32(data1[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  val13 = f32(data1[(gidx0*(128))+(lidx1*(4))+(4099)]);
  var  val14 = f32(data1[(gidx0*(128))+(lidx1*(4))+(8195)]);
  var  val15 = f32(data1[(gidx0*(128))+(lidx1*(4))+(12291)]);
  var  val16 = f32(data2[0]);
  var  val17 = f32(data2[1]);
  var  val18 = f32(data2[2]);
  var  val19 = f32(data2[3]);
  var  val20 = f32(data2[4]);
  var  val21 = f32(data2[5]);
  var  val22 = f32(data2[6]);
  var  val23 = f32(data2[7]);
  var  val24 = f32(data2[8]);
  var  val25 = f32(data2[9]);
  var  val26 = f32(data2[10]);
  var  val27 = f32(data2[11]);
  var  val28 = f32(data2[12]);
  var  val29 = f32(data2[13]);
  var  val30 = f32(data2[14]);
  var  val31 = f32(data2[15]);
  acc0 = fma(val0,val16,acc0);
  acc0 = fma(val1,val17,acc0);
  acc0 = fma(val2,val18,acc0);
  acc0 = fma(val3,val19,acc0);
  acc1 = fma(val4,val16,acc1);
  acc1 = fma(val5,val17,acc1);
  acc1 = fma(val6,val18,acc1);
  acc1 = fma(val7,val19,acc1);
  acc2 = fma(val8,val16,acc2);
  acc2 = fma(val9,val17,acc2);
  acc2 = fma(val10,val18,acc2);
  acc2 = fma(val11,val19,acc2);
  acc3 = fma(val12,val16,acc3);
  acc3 = fma(val13,val17,acc3);
  acc3 = fma(val14,val18,acc3);
  acc3 = fma(val15,val19,acc3);
  acc4 = fma(val0,val20,acc4);
  acc4 = fma(val1,val21,acc4);
  acc4 = fma(val2,val22,acc4);
  acc4 = fma(val3,val23,acc4);
  acc5 = fma(val4,val20,acc5);
  acc5 = fma(val5,val21,acc5);
  acc5 = fma(val6,val22,acc5);
  acc5 = fma(val7,val23,acc5);
  acc6 = fma(val8,val20,acc6);
  acc6 = fma(val9,val21,acc6);
  acc6 = fma(val10,val22,acc6);
  acc6 = fma(val11,val23,acc6);
  acc7 = fma(val12,val20,acc7);
  acc7 = fma(val13,val21,acc7);
  acc7 = fma(val14,val22,acc7);
  acc7 = fma(val15,val23,acc7);
  acc8 = fma(val0,val24,acc8);
  acc8 = fma(val1,val25,acc8);
  acc8 = fma(val2,val26,acc8);
  acc8 = fma(val3,val27,acc8);
  acc9 = fma(val4,val24,acc9);
  acc9 = fma(val5,val25,acc9);
  acc9 = fma(val6,val26,acc9);
  acc9 = fma(val7,val27,acc9);
  acc10 = fma(val8,val24,acc10);
  acc10 = fma(val9,val25,acc10);
  acc10 = fma(val10,val26,acc10);
  acc10 = fma(val11,val27,acc10);
  acc11 = fma(val12,val24,acc11);
  acc11 = fma(val13,val25,acc11);
  acc11 = fma(val14,val26,acc11);
  acc11 = fma(val15,val27,acc11);
  acc12 = fma(val0,val28,acc12);
  acc12 = fma(val1,val29,acc12);
  acc12 = fma(val2,val30,acc12);
  acc12 = fma(val3,val31,acc12);
  acc13 = fma(val4,val28,acc13);
  acc13 = fma(val5,val29,acc13);
  acc13 = fma(val6,val30,acc13);
  acc13 = fma(val7,val31,acc13);
  acc14 = fma(val8,val28,acc14);
  acc14 = fma(val9,val29,acc14);
  acc14 = fma(val10,val30,acc14);
  acc14 = fma(val11,val31,acc14);
  acc15 = fma(val12,val28,acc15);
  acc15 = fma(val13,val29,acc15);
  acc15 = fma(val14,val30,acc15);
  acc15 = fma(val15,val31,acc15);
  var  val32 = f32(data3[0]);
  var  val33 = f32(data3[1]);
  var  val34 = f32(data3[2]);
  var  val35 = f32(data3[3]);
  data0[(gidx0*(128))+(lidx1*(4))] = (acc0+val32);
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (acc1+val32);
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (acc2+val32);
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (acc3+val32);
  data0[(gidx0*(128))+(lidx1*(4))+(4096)] = (acc4+val33);
  data0[(gidx0*(128))+(lidx1*(4))+(4097)] = (acc5+val33);
  data0[(gidx0*(128))+(lidx1*(4))+(4098)] = (acc6+val33);
  data0[(gidx0*(128))+(lidx1*(4))+(4099)] = (acc7+val33);
  data0[(gidx0*(128))+(lidx1*(4))+(8192)] = (acc8+val34);
  data0[(gidx0*(128))+(lidx1*(4))+(8193)] = (acc9+val34);
  data0[(gidx0*(128))+(lidx1*(4))+(8194)] = (acc10+val34);
  data0[(gidx0*(128))+(lidx1*(4))+(8195)] = (acc11+val34);
  data0[(gidx0*(128))+(lidx1*(4))+(12288)] = (acc12+val35);
  data0[(gidx0*(128))+(lidx1*(4))+(12289)] = (acc13+val35);
  data0[(gidx0*(128))+(lidx1*(4))+(12290)] = (acc14+val35);
  data0[(gidx0*(128))+(lidx1*(4))+(12291)] = (acc15+val35);
}`;

const r_128_8_8_16_4_3_3_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 128 */
  let gidx1 = i32(gindex.x); /* 8 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (4); ridx0++) {
    var  alu0 = f32((lidx3*((-4)))<(0));
    var  alu1 = f32(((gidx1*((-8)))+(lidx2*((-1))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+((-65))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+((-1))]), bool(alu0));
    var  alu2 = f32(((gidx1*(8))+lidx2)<(63));
    var  val2 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+(63)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+((-64))]), bool(alu1));
    var  val4 = f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))]);
    var  val5 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+(64)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+((-63))]), bool(alu1));
    var  val7 = f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+(65)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+((-62))]), bool(alu1));
    var  val10 = f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+(66)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+((-61))]), bool(alu1));
    var  val13 = f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+(67)]), bool(alu2));
    var  alu3 = f32((lidx3*(4))<(60));
    var  val15 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+((-60))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+(68)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx0*(144))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx0*(144))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx0*(144))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx0*(144))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx0*(144))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx0*(144))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx0*(144))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx0*(144))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx0*(144))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx0*(144))+(ridx0*(9))+(36)]);
    var  val28 = f32(data2[(gidx0*(144))+(ridx0*(9))+(39)]);
    var  val29 = f32(data2[(gidx0*(144))+(ridx0*(9))+(42)]);
    var  val30 = f32(data2[(gidx0*(144))+(ridx0*(9))+(37)]);
    var  val31 = f32(data2[(gidx0*(144))+(ridx0*(9))+(40)]);
    var  val32 = f32(data2[(gidx0*(144))+(ridx0*(9))+(43)]);
    var  val33 = f32(data2[(gidx0*(144))+(ridx0*(9))+(38)]);
    var  val34 = f32(data2[(gidx0*(144))+(ridx0*(9))+(41)]);
    var  val35 = f32(data2[(gidx0*(144))+(ridx0*(9))+(44)]);
    var  val36 = f32(data2[(gidx0*(144))+(ridx0*(9))+(72)]);
    var  val37 = f32(data2[(gidx0*(144))+(ridx0*(9))+(75)]);
    var  val38 = f32(data2[(gidx0*(144))+(ridx0*(9))+(78)]);
    var  val39 = f32(data2[(gidx0*(144))+(ridx0*(9))+(73)]);
    var  val40 = f32(data2[(gidx0*(144))+(ridx0*(9))+(76)]);
    var  val41 = f32(data2[(gidx0*(144))+(ridx0*(9))+(79)]);
    var  val42 = f32(data2[(gidx0*(144))+(ridx0*(9))+(74)]);
    var  val43 = f32(data2[(gidx0*(144))+(ridx0*(9))+(77)]);
    var  val44 = f32(data2[(gidx0*(144))+(ridx0*(9))+(80)]);
    var  val45 = f32(data2[(gidx0*(144))+(ridx0*(9))+(108)]);
    var  val46 = f32(data2[(gidx0*(144))+(ridx0*(9))+(111)]);
    var  val47 = f32(data2[(gidx0*(144))+(ridx0*(9))+(114)]);
    var  val48 = f32(data2[(gidx0*(144))+(ridx0*(9))+(109)]);
    var  val49 = f32(data2[(gidx0*(144))+(ridx0*(9))+(112)]);
    var  val50 = f32(data2[(gidx0*(144))+(ridx0*(9))+(115)]);
    var  val51 = f32(data2[(gidx0*(144))+(ridx0*(9))+(110)]);
    var  val52 = f32(data2[(gidx0*(144))+(ridx0*(9))+(113)]);
    var  val53 = f32(data2[(gidx0*(144))+(ridx0*(9))+(116)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))] = acc0;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(3)] = acc3;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(4096)] = acc4;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(4097)] = acc5;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(4098)] = acc6;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(4099)] = acc7;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(8192)] = acc8;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(8193)] = acc9;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(8194)] = acc10;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(8195)] = acc11;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(12288)] = acc12;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(12289)] = acc13;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(12290)] = acc14;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(12291)] = acc15;
}`;

const E_32_32_4_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 32 */
  let gidx1 = i32(gindex.y); /* 32 */
  let gidx2 = i32(gindex.x); /* 4 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(65536))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(65536))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(65536))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(65536))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(16))+(gidx1/(2))]);
  data0[(gidx0*(65536))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))] = (val0+val4);
  data0[(gidx0*(65536))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)] = (val1+val4);
  data0[(gidx0*(65536))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)] = (val2+val4);
  data0[(gidx0*(65536))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)] = (val3+val4);
}`;

const r_256_32_64_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 256 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))+(3)]);
    acc0 = (val0+acc0);
    acc0 = (val1+acc0);
    acc0 = (val2+acc0);
    acc0 = (val3+acc0);
  }
  data0[(gidx0*(32))+lidx1] = acc0;
}`;

const r_32_256 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,256>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(256) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 32 */
  let lidx1 = i32(lindex.x); /* 256 */
  var  acc0 = (0.0f);
  var  val0 = f32(data1[(gidx0*(256))+lidx1]);
  acc0 = (val0+acc0);
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx0 = (0); ridx0 < (256); ridx0++) {
    var  val1 = f32(temp[ridx0]);
    acc1 = (val1+acc1);
  }
  data0[gidx0] = (acc1*(1.52587890625e-05f));
}`;

const r_4_4_8_16_64_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 4 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))+(256)]);
    var  val5 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))+(257)]);
    var  val6 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))+(258)]);
    var  val7 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))+(259)]);
    var  val8 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))+(512)]);
    var  val9 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))+(513)]);
    var  val10 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))+(514)]);
    var  val11 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))+(515)]);
    var  val12 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))+(768)]);
    var  val13 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))+(769)]);
    var  val14 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))+(770)]);
    var  val15 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))+(771)]);
    var  val16 = f32(data2[(gidx0*(128))+(gidx1*(4))+(lidx2*(16))+(lidx3/(4))]);
    var  val17 = f32(data3[(gidx0*(8))+lidx2]);
    var  alu0 = ((val0+val16)-val17);
    var  alu1 = ((val1+val16)-val17);
    var  alu2 = ((val2+val16)-val17);
    var  alu3 = ((val3+val16)-val17);
    var  alu4 = ((val4+val16)-val17);
    var  alu5 = ((val5+val16)-val17);
    var  alu6 = ((val6+val16)-val17);
    var  alu7 = ((val7+val16)-val17);
    var  alu8 = ((val8+val16)-val17);
    var  alu9 = ((val9+val16)-val17);
    var  alu10 = ((val10+val16)-val17);
    var  alu11 = ((val11+val16)-val17);
    var  alu12 = ((val12+val16)-val17);
    var  alu13 = ((val13+val16)-val17);
    var  alu14 = ((val14+val16)-val17);
    var  alu15 = ((val15+val16)-val17);
    acc0 = fma(alu0,alu0,acc0);
    acc0 = fma(alu1,alu1,acc0);
    acc0 = fma(alu2,alu2,acc0);
    acc0 = fma(alu3,alu3,acc0);
    acc1 = fma(alu4,alu4,acc1);
    acc1 = fma(alu5,alu5,acc1);
    acc1 = fma(alu6,alu6,acc1);
    acc1 = fma(alu7,alu7,acc1);
    acc2 = fma(alu8,alu8,acc2);
    acc2 = fma(alu9,alu9,acc2);
    acc2 = fma(alu10,alu10,acc2);
    acc2 = fma(alu11,alu11,acc2);
    acc3 = fma(alu12,alu12,acc3);
    acc3 = fma(alu13,alu13,acc3);
    acc3 = fma(alu14,alu14,acc3);
    acc3 = fma(alu15,alu15,acc3);
  }
  data0[(gidx0*(2048))+(gidx1*(64))+(lidx2*(256))+(lidx3*(4))] = acc0;
  data0[(gidx0*(2048))+(gidx1*(64))+(lidx2*(256))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(2048))+(gidx1*(64))+(lidx2*(256))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(2048))+(gidx1*(64))+(lidx2*(256))+(lidx3*(4))+(3)] = acc3;
}`;

const r_32_256n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,256>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(256) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 32 */
  let lidx1 = i32(lindex.x); /* 256 */
  var  acc0 = (0.0f);
  var  val0 = f32(data1[(gidx0*(256))+lidx1]);
  acc0 = (val0+acc0);
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx0 = (0); ridx0 < (256); ridx0++) {
    var  val1 = f32(temp[ridx0]);
    acc1 = (val1+acc1);
  }
  data0[gidx0] = sqrt(((1.0f)/((acc1*(1.52587890625e-05f))+(1e-05f))));
}`;

const E_64_64_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 64 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(8))+lidx2]);
  var  val5 = f32(data3[gidx0/(2)]);
  var  val6 = f32(data4[gidx0/(2)]);
  var  val7 = f32(data5[(gidx0*(8))+lidx2]);
  var  val8 = f32(data6[(gidx0*(8))+lidx2]);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))] = ((((val0+val4)-val5)*val6*val7)+val8);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)] = ((((val1+val4)-val5)*val6*val7)+val8);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)] = ((((val2+val4)-val5)*val6*val7)+val8);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)] = ((((val3+val4)-val5)*val6*val7)+val8);
}`;

const E_64_64_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 64 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(8))+lidx2]);
  var  val5 = f32(data3[gidx0/(2)]);
  var  val6 = f32(data4[gidx0/(2)]);
  var  val7 = f32(data5[(gidx0*(8))+lidx2]);
  var  val8 = f32(data6[(gidx0*(8))+lidx2]);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))] = ((1.0f)/((1.0f)+exp2((((((val0+val4)-val5)*val6*val7)+val8)*((-1.4426950408889634f))))));
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)] = ((1.0f)/((1.0f)+exp2((((((val1+val4)-val5)*val6*val7)+val8)*((-1.4426950408889634f))))));
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)] = ((1.0f)/((1.0f)+exp2((((((val2+val4)-val5)*val6*val7)+val8)*((-1.4426950408889634f))))));
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)] = ((1.0f)/((1.0f)+exp2((((((val3+val4)-val5)*val6*val7)+val8)*((-1.4426950408889634f))))));
}`;

const E_16384_32_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 16384 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx1*(4))+(3)]);
  data0[(gidx0*(128))+(lidx1*(4))] = (val0*val4);
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (val1*val5);
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (val2*val6);
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (val3*val7);
}`;

const r_128_8_8_16_512_3_3_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 128 */
  let gidx1 = i32(gindex.x); /* 8 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (512); ridx0++) {
    var  alu0 = f32((lidx3*((-4)))<(0));
    var  alu1 = f32(((gidx1*((-8)))+(lidx2*((-1))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+((-65))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+((-1))]), bool(alu0));
    var  alu2 = f32(((gidx1*(8))+lidx2)<(63));
    var  val2 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+(63)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+((-64))]), bool(alu1));
    var  val4 = f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))]);
    var  val5 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+(64)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+((-63))]), bool(alu1));
    var  val7 = f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+(65)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+((-62))]), bool(alu1));
    var  val10 = f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+(66)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+((-61))]), bool(alu1));
    var  val13 = f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+(67)]), bool(alu2));
    var  alu3 = f32((lidx3*(4))<(60));
    var  val15 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+((-60))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+(68)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx0*(18432))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4608)]);
    var  val28 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4611)]);
    var  val29 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4614)]);
    var  val30 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4609)]);
    var  val31 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4612)]);
    var  val32 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4615)]);
    var  val33 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4610)]);
    var  val34 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4613)]);
    var  val35 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4616)]);
    var  val36 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9216)]);
    var  val37 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9219)]);
    var  val38 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9222)]);
    var  val39 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9217)]);
    var  val40 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9220)]);
    var  val41 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9223)]);
    var  val42 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9218)]);
    var  val43 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9221)]);
    var  val44 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9224)]);
    var  val45 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13824)]);
    var  val46 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13827)]);
    var  val47 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13830)]);
    var  val48 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13825)]);
    var  val49 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13828)]);
    var  val50 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13831)]);
    var  val51 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13826)]);
    var  val52 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13829)]);
    var  val53 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13832)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))] = acc0;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(3)] = acc3;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(4096)] = acc4;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(4097)] = acc5;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(4098)] = acc6;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(4099)] = acc7;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(8192)] = acc8;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(8193)] = acc9;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(8194)] = acc10;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(8195)] = acc11;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(12288)] = acc12;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(12289)] = acc13;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(12290)] = acc14;
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(12291)] = acc15;
}`;

const r_4_16_8_16_64_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 16 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(524288))+(gidx1*(4096))+(lidx2*(65536))+(lidx3*(256))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(524288))+(gidx1*(4096))+(lidx2*(65536))+(lidx3*(256))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(524288))+(gidx1*(4096))+(lidx2*(65536))+(lidx3*(256))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(524288))+(gidx1*(4096))+(lidx2*(65536))+(lidx3*(256))+(ridx0*(4))+(3)]);
    var  val4 = f32(data2[(gidx0*(128))+gidx1+(lidx2*(16))]);
    acc0 = (val0+val4+acc0);
    acc0 = (val1+val4+acc0);
    acc0 = (val2+val4+acc0);
    acc0 = (val3+val4+acc0);
  }
  data0[(gidx0*(2048))+(gidx1*(16))+(lidx2*(256))+lidx3] = acc0;
}`;

const E_32_32_4_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 32 */
  let gidx1 = i32(gindex.y); /* 32 */
  let gidx2 = i32(gindex.x); /* 4 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(65536))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(65536))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(65536))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(65536))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(65536))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))]);
  var  val5 = f32(data2[(gidx0*(65536))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(65536))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(65536))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)]);
  var  val8 = f32(data3[(gidx0*(16))+(gidx1/(2))]);
  data0[(gidx0*(65536))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))] = (val0+(val4+val8));
  data0[(gidx0*(65536))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)] = (val1+(val5+val8));
  data0[(gidx0*(65536))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)] = (val2+(val6+val8));
  data0[(gidx0*(65536))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)] = (val3+(val7+val8));
}`;

const E_4_1024_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 1024 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx2*(16))+(gidx1/(64))]);
  var  val5 = f32(data3[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))]);
  var  val6 = f32(data3[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)]);
  var  val7 = f32(data3[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)]);
  var  val8 = f32(data3[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)]);
  var  val9 = f32(data4[(gidx0*(128))+(lidx2*(16))+(gidx1/(64))]);
  var  val10 = f32(data5[(gidx0*(8))+lidx2]);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))] = ((val0+val4+(val5+val9))-val10);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)] = ((val1+val4+(val6+val9))-val10);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)] = ((val2+val4+(val7+val9))-val10);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)] = ((val3+val4+(val8+val9))-val10);
}`;

const r_512_4_8_32_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,128>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(8,4) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 512 */
  let lidx1 = i32(lindex.y); /* 4 */
  let lidx2 = i32(lindex.x); /* 8 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (32); ridx0++) {
    var  val0 = f32(data1[(gidx0*(4096))+(lidx1*(256))+lidx2+(ridx0*(8))]);
    var  val1 = f32(data1[(gidx0*(4096))+(lidx1*(256))+lidx2+(ridx0*(8))+(1024)]);
    var  val2 = f32(data1[(gidx0*(4096))+(lidx1*(256))+lidx2+(ridx0*(8))+(2048)]);
    var  val3 = f32(data1[(gidx0*(4096))+(lidx1*(256))+lidx2+(ridx0*(8))+(3072)]);
    acc0 = fma(val0,val0,acc0);
    acc1 = fma(val1,val1,acc1);
    acc2 = fma(val2,val2,acc2);
    acc3 = fma(val3,val3,acc3);
  }
  temp[(lidx1*(32))+(lidx2*(4))] = acc0;
  temp[(lidx1*(32))+(lidx2*(4))+(1)] = acc1;
  temp[(lidx1*(32))+(lidx2*(4))+(2)] = acc2;
  temp[(lidx1*(32))+(lidx2*(4))+(3)] = acc3;
  workgroupBarrier();
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  for(var ridx1 = (0); ridx1 < (8); ridx1++) {
    var  val4 = f32(temp[(lidx1*(32))+(ridx1*(4))]);
    var  val5 = f32(temp[(lidx1*(32))+(ridx1*(4))+(1)]);
    var  val6 = f32(temp[(lidx1*(32))+(ridx1*(4))+(2)]);
    var  val7 = f32(temp[(lidx1*(32))+(ridx1*(4))+(3)]);
    acc4 = (val4+acc4);
    acc5 = (val5+acc5);
    acc6 = (val6+acc6);
    acc7 = (val7+acc7);
  }
  data0[(gidx0*(16))+lidx1] = acc4;
  data0[(gidx0*(16))+lidx1+(4)] = acc5;
  data0[(gidx0*(16))+lidx1+(8)] = acc6;
  data0[(gidx0*(16))+lidx1+(12)] = acc7;
}`;

const E_64_64_8_16_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 64 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[gidx0/(2)]);
  var  val5 = f32(data3[(gidx0*(8))+lidx2]);
  var  val6 = f32(data4[(gidx0*(8))+lidx2]);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))] = ((val0*val4*val5)+val6);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)] = ((val1*val4*val5)+val6);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)] = ((val2*val4*val5)+val6);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)] = ((val3*val4*val5)+val6);
}`;

const r_16_64_8_16_128_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 16 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (128); ridx0++) {
    var  val0 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))]);
    var  val1 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))+(4096)]);
    var  val2 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))+(8192)]);
    var  val3 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))+(12288)]);
    var  val4 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))+(1)]);
    var  val5 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))+(4097)]);
    var  val6 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))+(8193)]);
    var  val7 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))+(12289)]);
    var  val8 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))+(2)]);
    var  val9 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))+(4098)]);
    var  val10 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))+(8194)]);
    var  val11 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))+(12290)]);
    var  val12 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))+(3)]);
    var  val13 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))+(4099)]);
    var  val14 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))+(8195)]);
    var  val15 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))+(12291)]);
    var  val16 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(512)]);
    var  val21 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(513)]);
    var  val22 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(514)]);
    var  val23 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(515)]);
    var  val24 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(1024)]);
    var  val25 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(1025)]);
    var  val26 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(1026)]);
    var  val27 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(1027)]);
    var  val28 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(1536)]);
    var  val29 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(1537)]);
    var  val30 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(1538)]);
    var  val31 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(1539)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  var  val32 = f32(data3[(gidx0*(32))+(lidx2*(4))]);
  var  val33 = f32(data3[(gidx0*(32))+(lidx2*(4))+(1)]);
  var  val34 = f32(data3[(gidx0*(32))+(lidx2*(4))+(2)]);
  var  val35 = f32(data3[(gidx0*(32))+(lidx2*(4))+(3)]);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))] = (acc0+val32);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(1)] = (acc1+val32);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(2)] = (acc2+val32);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(3)] = (acc3+val32);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(4096)] = (acc4+val33);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(4097)] = (acc5+val33);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(4098)] = (acc6+val33);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(4099)] = (acc7+val33);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(8192)] = (acc8+val34);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(8193)] = (acc9+val34);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(8194)] = (acc10+val34);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(8195)] = (acc11+val34);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(12288)] = (acc12+val35);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(12289)] = (acc13+val35);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(12290)] = (acc14+val35);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(12291)] = (acc15+val35);
}`;

const r_128_64_8_16_128_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 128 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (128); ridx0++) {
    var  val0 = f32(data1[(gidx0*(32))+(lidx2*(4))+(ridx0*(16384))]);
    var  val1 = f32(data1[(gidx0*(32))+(lidx2*(4))+(ridx0*(16384))+(4096)]);
    var  val2 = f32(data1[(gidx0*(32))+(lidx2*(4))+(ridx0*(16384))+(8192)]);
    var  val3 = f32(data1[(gidx0*(32))+(lidx2*(4))+(ridx0*(16384))+(12288)]);
    var  val4 = f32(data1[(gidx0*(32))+(lidx2*(4))+(ridx0*(16384))+(1)]);
    var  val5 = f32(data1[(gidx0*(32))+(lidx2*(4))+(ridx0*(16384))+(4097)]);
    var  val6 = f32(data1[(gidx0*(32))+(lidx2*(4))+(ridx0*(16384))+(8193)]);
    var  val7 = f32(data1[(gidx0*(32))+(lidx2*(4))+(ridx0*(16384))+(12289)]);
    var  val8 = f32(data1[(gidx0*(32))+(lidx2*(4))+(ridx0*(16384))+(2)]);
    var  val9 = f32(data1[(gidx0*(32))+(lidx2*(4))+(ridx0*(16384))+(4098)]);
    var  val10 = f32(data1[(gidx0*(32))+(lidx2*(4))+(ridx0*(16384))+(8194)]);
    var  val11 = f32(data1[(gidx0*(32))+(lidx2*(4))+(ridx0*(16384))+(12290)]);
    var  val12 = f32(data1[(gidx0*(32))+(lidx2*(4))+(ridx0*(16384))+(3)]);
    var  val13 = f32(data1[(gidx0*(32))+(lidx2*(4))+(ridx0*(16384))+(4099)]);
    var  val14 = f32(data1[(gidx0*(32))+(lidx2*(4))+(ridx0*(16384))+(8195)]);
    var  val15 = f32(data1[(gidx0*(32))+(lidx2*(4))+(ridx0*(16384))+(12291)]);
    var  val16 = f32(data2[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))]);
    var  val17 = f32(data2[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))+(4096)]);
    var  val18 = f32(data2[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))+(8192)]);
    var  val19 = f32(data2[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))+(12288)]);
    var  val20 = f32(data2[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))+(1)]);
    var  val21 = f32(data2[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))+(4097)]);
    var  val22 = f32(data2[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))+(8193)]);
    var  val23 = f32(data2[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))+(12289)]);
    var  val24 = f32(data2[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))+(2)]);
    var  val25 = f32(data2[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))+(4098)]);
    var  val26 = f32(data2[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))+(8194)]);
    var  val27 = f32(data2[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))+(12290)]);
    var  val28 = f32(data2[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))+(3)]);
    var  val29 = f32(data2[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))+(4099)]);
    var  val30 = f32(data2[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))+(8195)]);
    var  val31 = f32(data2[(gidx1*(64))+(lidx3*(4))+(ridx0*(16384))+(12291)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val0,val20,acc1);
    acc1 = fma(val1,val21,acc1);
    acc1 = fma(val2,val22,acc1);
    acc1 = fma(val3,val23,acc1);
    acc2 = fma(val0,val24,acc2);
    acc2 = fma(val1,val25,acc2);
    acc2 = fma(val2,val26,acc2);
    acc2 = fma(val3,val27,acc2);
    acc3 = fma(val0,val28,acc3);
    acc3 = fma(val1,val29,acc3);
    acc3 = fma(val2,val30,acc3);
    acc3 = fma(val3,val31,acc3);
    acc4 = fma(val4,val16,acc4);
    acc4 = fma(val5,val17,acc4);
    acc4 = fma(val6,val18,acc4);
    acc4 = fma(val7,val19,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val4,val24,acc6);
    acc6 = fma(val5,val25,acc6);
    acc6 = fma(val6,val26,acc6);
    acc6 = fma(val7,val27,acc6);
    acc7 = fma(val4,val28,acc7);
    acc7 = fma(val5,val29,acc7);
    acc7 = fma(val6,val30,acc7);
    acc7 = fma(val7,val31,acc7);
    acc8 = fma(val8,val16,acc8);
    acc8 = fma(val9,val17,acc8);
    acc8 = fma(val10,val18,acc8);
    acc8 = fma(val11,val19,acc8);
    acc9 = fma(val8,val20,acc9);
    acc9 = fma(val9,val21,acc9);
    acc9 = fma(val10,val22,acc9);
    acc9 = fma(val11,val23,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val8,val28,acc11);
    acc11 = fma(val9,val29,acc11);
    acc11 = fma(val10,val30,acc11);
    acc11 = fma(val11,val31,acc11);
    acc12 = fma(val12,val16,acc12);
    acc12 = fma(val13,val17,acc12);
    acc12 = fma(val14,val18,acc12);
    acc12 = fma(val15,val19,acc12);
    acc13 = fma(val12,val20,acc13);
    acc13 = fma(val13,val21,acc13);
    acc13 = fma(val14,val22,acc13);
    acc13 = fma(val15,val23,acc13);
    acc14 = fma(val12,val24,acc14);
    acc14 = fma(val13,val25,acc14);
    acc14 = fma(val14,val26,acc14);
    acc14 = fma(val15,val27,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))] = (acc0*(0.044194173824159216f));
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(1)] = (acc1*(0.044194173824159216f));
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(2)] = (acc2*(0.044194173824159216f));
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(3)] = (acc3*(0.044194173824159216f));
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(4096)] = (acc4*(0.044194173824159216f));
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(4097)] = (acc5*(0.044194173824159216f));
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(4098)] = (acc6*(0.044194173824159216f));
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(4099)] = (acc7*(0.044194173824159216f));
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(8192)] = (acc8*(0.044194173824159216f));
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(8193)] = (acc9*(0.044194173824159216f));
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(8194)] = (acc10*(0.044194173824159216f));
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(8195)] = (acc11*(0.044194173824159216f));
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(12288)] = (acc12*(0.044194173824159216f));
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(12289)] = (acc13*(0.044194173824159216f));
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(12290)] = (acc14*(0.044194173824159216f));
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(12291)] = (acc15*(0.044194173824159216f));
}`;

const r_128_32_1024_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 128 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  acc0 = -0x1.fffffep+127f;
  for(var ridx0 = (0); ridx0 < (1024); ridx0++) {
    var  val0 = f32(data1[(gidx0*(131072))+(lidx1*(4096))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(131072))+(lidx1*(4096))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(131072))+(lidx1*(4096))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(131072))+(lidx1*(4096))+(ridx0*(4))+(3)]);
    acc0 = max(val0,acc0);
    acc0 = max(val1,acc0);
    acc0 = max(val2,acc0);
    acc0 = max(val3,acc0);
  }
  data0[(gidx0*(32))+lidx1] = acc0;
}`;

const E_512_64_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 512 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(8))+lidx2]);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))] = exp2(((val0-val4)*(1.4426950408889634f)));
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)] = exp2(((val1-val4)*(1.4426950408889634f)));
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)] = exp2(((val2-val4)*(1.4426950408889634f)));
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)] = exp2(((val3-val4)*(1.4426950408889634f)));
}`;

const r_128_32_1024_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 128 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (1024); ridx0++) {
    var  val0 = f32(data1[(gidx0*(131072))+(lidx1*(4096))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(131072))+(lidx1*(4096))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(131072))+(lidx1*(4096))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(131072))+(lidx1*(4096))+(ridx0*(4))+(3)]);
    acc0 = (val0+acc0);
    acc0 = (val1+acc0);
    acc0 = (val2+acc0);
    acc0 = (val3+acc0);
  }
  data0[(gidx0*(32))+lidx1] = acc0;
}`;

const E_512_64_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 512 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(8))+lidx2]);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))] = (val0/val4);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)] = (val1/val4);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)] = (val2/val4);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)] = (val3/val4);
}`;

const r_128_8_8_16_1024_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 128 */
  let gidx1 = i32(gindex.x); /* 8 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (1024); ridx0++) {
    var  val0 = f32(data1[(gidx0*(131072))+(lidx2*(16384))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(131072))+(lidx2*(16384))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(131072))+(lidx2*(16384))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(131072))+(lidx2*(16384))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(131072))+(lidx2*(16384))+(ridx0*(4))+(4096)]);
    var  val5 = f32(data1[(gidx0*(131072))+(lidx2*(16384))+(ridx0*(4))+(4097)]);
    var  val6 = f32(data1[(gidx0*(131072))+(lidx2*(16384))+(ridx0*(4))+(4098)]);
    var  val7 = f32(data1[(gidx0*(131072))+(lidx2*(16384))+(ridx0*(4))+(4099)]);
    var  val8 = f32(data1[(gidx0*(131072))+(lidx2*(16384))+(ridx0*(4))+(8192)]);
    var  val9 = f32(data1[(gidx0*(131072))+(lidx2*(16384))+(ridx0*(4))+(8193)]);
    var  val10 = f32(data1[(gidx0*(131072))+(lidx2*(16384))+(ridx0*(4))+(8194)]);
    var  val11 = f32(data1[(gidx0*(131072))+(lidx2*(16384))+(ridx0*(4))+(8195)]);
    var  val12 = f32(data1[(gidx0*(131072))+(lidx2*(16384))+(ridx0*(4))+(12288)]);
    var  val13 = f32(data1[(gidx0*(131072))+(lidx2*(16384))+(ridx0*(4))+(12289)]);
    var  val14 = f32(data1[(gidx0*(131072))+(lidx2*(16384))+(ridx0*(4))+(12290)]);
    var  val15 = f32(data1[(gidx0*(131072))+(lidx2*(16384))+(ridx0*(4))+(12291)]);
    var  val16 = f32(data2[(gidx1*(262144))+(lidx3*(16384))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx1*(262144))+(lidx3*(16384))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx1*(262144))+(lidx3*(16384))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx1*(262144))+(lidx3*(16384))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx1*(262144))+(lidx3*(16384))+(ridx0*(4))+(4096)]);
    var  val21 = f32(data2[(gidx1*(262144))+(lidx3*(16384))+(ridx0*(4))+(4097)]);
    var  val22 = f32(data2[(gidx1*(262144))+(lidx3*(16384))+(ridx0*(4))+(4098)]);
    var  val23 = f32(data2[(gidx1*(262144))+(lidx3*(16384))+(ridx0*(4))+(4099)]);
    var  val24 = f32(data2[(gidx1*(262144))+(lidx3*(16384))+(ridx0*(4))+(8192)]);
    var  val25 = f32(data2[(gidx1*(262144))+(lidx3*(16384))+(ridx0*(4))+(8193)]);
    var  val26 = f32(data2[(gidx1*(262144))+(lidx3*(16384))+(ridx0*(4))+(8194)]);
    var  val27 = f32(data2[(gidx1*(262144))+(lidx3*(16384))+(ridx0*(4))+(8195)]);
    var  val28 = f32(data2[(gidx1*(262144))+(lidx3*(16384))+(ridx0*(4))+(12288)]);
    var  val29 = f32(data2[(gidx1*(262144))+(lidx3*(16384))+(ridx0*(4))+(12289)]);
    var  val30 = f32(data2[(gidx1*(262144))+(lidx3*(16384))+(ridx0*(4))+(12290)]);
    var  val31 = f32(data2[(gidx1*(262144))+(lidx3*(16384))+(ridx0*(4))+(12291)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val0,val20,acc1);
    acc1 = fma(val1,val21,acc1);
    acc1 = fma(val2,val22,acc1);
    acc1 = fma(val3,val23,acc1);
    acc2 = fma(val0,val24,acc2);
    acc2 = fma(val1,val25,acc2);
    acc2 = fma(val2,val26,acc2);
    acc2 = fma(val3,val27,acc2);
    acc3 = fma(val0,val28,acc3);
    acc3 = fma(val1,val29,acc3);
    acc3 = fma(val2,val30,acc3);
    acc3 = fma(val3,val31,acc3);
    acc4 = fma(val4,val16,acc4);
    acc4 = fma(val5,val17,acc4);
    acc4 = fma(val6,val18,acc4);
    acc4 = fma(val7,val19,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val4,val24,acc6);
    acc6 = fma(val5,val25,acc6);
    acc6 = fma(val6,val26,acc6);
    acc6 = fma(val7,val27,acc6);
    acc7 = fma(val4,val28,acc7);
    acc7 = fma(val5,val29,acc7);
    acc7 = fma(val6,val30,acc7);
    acc7 = fma(val7,val31,acc7);
    acc8 = fma(val8,val16,acc8);
    acc8 = fma(val9,val17,acc8);
    acc8 = fma(val10,val18,acc8);
    acc8 = fma(val11,val19,acc8);
    acc9 = fma(val8,val20,acc9);
    acc9 = fma(val9,val21,acc9);
    acc9 = fma(val10,val22,acc9);
    acc9 = fma(val11,val23,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val8,val28,acc11);
    acc11 = fma(val9,val29,acc11);
    acc11 = fma(val10,val30,acc11);
    acc11 = fma(val11,val31,acc11);
    acc12 = fma(val12,val16,acc12);
    acc12 = fma(val13,val17,acc12);
    acc12 = fma(val14,val18,acc12);
    acc12 = fma(val15,val19,acc12);
    acc13 = fma(val12,val20,acc13);
    acc13 = fma(val13,val21,acc13);
    acc13 = fma(val14,val22,acc13);
    acc13 = fma(val15,val23,acc13);
    acc14 = fma(val12,val24,acc14);
    acc14 = fma(val13,val25,acc14);
    acc14 = fma(val14,val26,acc14);
    acc14 = fma(val15,val27,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2048))+(lidx3*(4))] = acc0;
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2048))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2048))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2048))+(lidx3*(4))+(3)] = acc3;
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2048))+(lidx3*(4))+(512)] = acc4;
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2048))+(lidx3*(4))+(513)] = acc5;
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2048))+(lidx3*(4))+(514)] = acc6;
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2048))+(lidx3*(4))+(515)] = acc7;
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2048))+(lidx3*(4))+(1024)] = acc8;
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2048))+(lidx3*(4))+(1025)] = acc9;
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2048))+(lidx3*(4))+(1026)] = acc10;
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2048))+(lidx3*(4))+(1027)] = acc11;
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2048))+(lidx3*(4))+(1536)] = acc12;
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2048))+(lidx3*(4))+(1537)] = acc13;
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2048))+(lidx3*(4))+(1538)] = acc14;
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2048))+(lidx3*(4))+(1539)] = acc15;
}`;

const r_16_64_8_16_128_4_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 16 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (128); ridx0++) {
    var  val0 = f32(data1[(gidx1*(32768))+(lidx3*(2048))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx1*(32768))+(lidx3*(2048))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx1*(32768))+(lidx3*(2048))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx1*(32768))+(lidx3*(2048))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx1*(32768))+(lidx3*(2048))+(ridx0*(4))+(512)]);
    var  val5 = f32(data1[(gidx1*(32768))+(lidx3*(2048))+(ridx0*(4))+(513)]);
    var  val6 = f32(data1[(gidx1*(32768))+(lidx3*(2048))+(ridx0*(4))+(514)]);
    var  val7 = f32(data1[(gidx1*(32768))+(lidx3*(2048))+(ridx0*(4))+(515)]);
    var  val8 = f32(data1[(gidx1*(32768))+(lidx3*(2048))+(ridx0*(4))+(1024)]);
    var  val9 = f32(data1[(gidx1*(32768))+(lidx3*(2048))+(ridx0*(4))+(1025)]);
    var  val10 = f32(data1[(gidx1*(32768))+(lidx3*(2048))+(ridx0*(4))+(1026)]);
    var  val11 = f32(data1[(gidx1*(32768))+(lidx3*(2048))+(ridx0*(4))+(1027)]);
    var  val12 = f32(data1[(gidx1*(32768))+(lidx3*(2048))+(ridx0*(4))+(1536)]);
    var  val13 = f32(data1[(gidx1*(32768))+(lidx3*(2048))+(ridx0*(4))+(1537)]);
    var  val14 = f32(data1[(gidx1*(32768))+(lidx3*(2048))+(ridx0*(4))+(1538)]);
    var  val15 = f32(data1[(gidx1*(32768))+(lidx3*(2048))+(ridx0*(4))+(1539)]);
    var  val16 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(512)]);
    var  val21 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(513)]);
    var  val22 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(514)]);
    var  val23 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(515)]);
    var  val24 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(1024)]);
    var  val25 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(1025)]);
    var  val26 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(1026)]);
    var  val27 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(1027)]);
    var  val28 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(1536)]);
    var  val29 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(1537)]);
    var  val30 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(1538)]);
    var  val31 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(1539)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))] = acc0;
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(3)] = acc3;
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(4096)] = acc4;
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(4097)] = acc5;
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(4098)] = acc6;
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(4099)] = acc7;
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(8192)] = acc8;
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(8193)] = acc9;
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(8194)] = acc10;
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(8195)] = acc11;
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(12288)] = acc12;
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(12289)] = acc13;
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(12290)] = acc14;
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(12291)] = acc15;
}`;

const E_64_64_8_16_4n3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 64 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(8))+lidx2]);
  var  val5 = f32(data3[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))]);
  var  val6 = f32(data3[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)]);
  var  val7 = f32(data3[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)]);
  var  val8 = f32(data3[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)]);
  var  val9 = f32(data4[(gidx0*(8))+lidx2]);
  var  val10 = f32(data5[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))]);
  var  val11 = f32(data5[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)]);
  var  val12 = f32(data5[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)]);
  var  val13 = f32(data5[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)]);
  var  val14 = f32(data6[(gidx0*(8))+lidx2]);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))] = (val0+val4+(val5+val9)+(val10+val14));
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)] = (val1+val4+(val6+val9)+(val11+val14));
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)] = (val2+val4+(val7+val9)+(val12+val14));
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)] = (val3+val4+(val8+val9)+(val13+val14));
}`;

const E_4_1024_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 1024 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx2*(16))+(gidx1/(64))]);
  var  val5 = f32(data3[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))]);
  var  val6 = f32(data3[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)]);
  var  val7 = f32(data3[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)]);
  var  val8 = f32(data3[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)]);
  var  val9 = f32(data4[(gidx0*(128))+(lidx2*(16))+(gidx1/(64))]);
  var  val10 = f32(data5[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))]);
  var  val11 = f32(data5[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)]);
  var  val12 = f32(data5[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)]);
  var  val13 = f32(data5[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)]);
  var  val14 = f32(data6[(gidx0*(128))+(lidx2*(16))+(gidx1/(64))]);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))] = (val0+val4+(val5+val9)+(val10+val14));
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)] = (val1+val4+(val6+val9)+(val11+val14));
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)] = (val2+val4+(val7+val9)+(val12+val14));
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)] = (val3+val4+(val8+val9)+(val13+val14));
}`;

const r_4_16_8_16_64_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 16 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(524288))+(gidx1*(4096))+(lidx2*(65536))+(lidx3*(256))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(524288))+(gidx1*(4096))+(lidx2*(65536))+(lidx3*(256))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(524288))+(gidx1*(4096))+(lidx2*(65536))+(lidx3*(256))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(524288))+(gidx1*(4096))+(lidx2*(65536))+(lidx3*(256))+(ridx0*(4))+(3)]);
    var  val4 = f32(data2[(gidx0*(524288))+(gidx1*(4096))+(lidx2*(65536))+(lidx3*(256))+(ridx0*(4))]);
    var  val5 = f32(data2[(gidx0*(524288))+(gidx1*(4096))+(lidx2*(65536))+(lidx3*(256))+(ridx0*(4))+(1)]);
    var  val6 = f32(data2[(gidx0*(524288))+(gidx1*(4096))+(lidx2*(65536))+(lidx3*(256))+(ridx0*(4))+(2)]);
    var  val7 = f32(data2[(gidx0*(524288))+(gidx1*(4096))+(lidx2*(65536))+(lidx3*(256))+(ridx0*(4))+(3)]);
    var  val8 = f32(data3[(gidx0*(128))+gidx1+(lidx2*(16))]);
    acc0 = (val0+(val4+val8)+acc0);
    acc0 = (val1+(val5+val8)+acc0);
    acc0 = (val2+(val6+val8)+acc0);
    acc0 = (val3+(val7+val8)+acc0);
  }
  data0[(gidx0*(2048))+(gidx1*(16))+(lidx2*(256))+lidx3] = acc0;
}`;

const r_4_4_8_16_64_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 4 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))+(256)]);
    var  val5 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))+(257)]);
    var  val6 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))+(258)]);
    var  val7 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))+(259)]);
    var  val8 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))+(512)]);
    var  val9 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))+(513)]);
    var  val10 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))+(514)]);
    var  val11 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))+(515)]);
    var  val12 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))+(768)]);
    var  val13 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))+(769)]);
    var  val14 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))+(770)]);
    var  val15 = f32(data1[(gidx0*(524288))+(gidx1*(16384))+(lidx2*(65536))+(lidx3*(1024))+(ridx0*(4))+(771)]);
    var  val16 = f32(data2[(gidx0*(8))+lidx2]);
    var  alu0 = (val0-val16);
    var  alu1 = (val1-val16);
    var  alu2 = (val2-val16);
    var  alu3 = (val3-val16);
    var  alu4 = (val4-val16);
    var  alu5 = (val5-val16);
    var  alu6 = (val6-val16);
    var  alu7 = (val7-val16);
    var  alu8 = (val8-val16);
    var  alu9 = (val9-val16);
    var  alu10 = (val10-val16);
    var  alu11 = (val11-val16);
    var  alu12 = (val12-val16);
    var  alu13 = (val13-val16);
    var  alu14 = (val14-val16);
    var  alu15 = (val15-val16);
    acc0 = fma(alu0,alu0,acc0);
    acc0 = fma(alu1,alu1,acc0);
    acc0 = fma(alu2,alu2,acc0);
    acc0 = fma(alu3,alu3,acc0);
    acc1 = fma(alu4,alu4,acc1);
    acc1 = fma(alu5,alu5,acc1);
    acc1 = fma(alu6,alu6,acc1);
    acc1 = fma(alu7,alu7,acc1);
    acc2 = fma(alu8,alu8,acc2);
    acc2 = fma(alu9,alu9,acc2);
    acc2 = fma(alu10,alu10,acc2);
    acc2 = fma(alu11,alu11,acc2);
    acc3 = fma(alu12,alu12,acc3);
    acc3 = fma(alu13,alu13,acc3);
    acc3 = fma(alu14,alu14,acc3);
    acc3 = fma(alu15,alu15,acc3);
  }
  data0[(gidx0*(2048))+(gidx1*(64))+(lidx2*(256))+(lidx3*(4))] = acc0;
  data0[(gidx0*(2048))+(gidx1*(64))+(lidx2*(256))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(2048))+(gidx1*(64))+(lidx2*(256))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(2048))+(gidx1*(64))+(lidx2*(256))+(lidx3*(4))+(3)] = acc3;
}`;

const E_64_64_8_16_4n4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 64 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[gidx0/(2)]);
  var  val5 = f32(data3[gidx0/(2)]);
  var  val6 = f32(data4[(gidx0*(8))+lidx2]);
  var  val7 = f32(data5[(gidx0*(8))+lidx2]);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))] = (((val0-val4)*val5*val6)+val7);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)] = (((val1-val4)*val5*val6)+val7);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)] = (((val2-val4)*val5*val6)+val7);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)] = (((val3-val4)*val5*val6)+val7);
}`;

const E_64_64_8_16_4n5 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 64 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[gidx0/(2)]);
  var  val5 = f32(data3[gidx0/(2)]);
  var  val6 = f32(data4[(gidx0*(8))+lidx2]);
  var  val7 = f32(data5[(gidx0*(8))+lidx2]);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))] = ((1.0f)/((1.0f)+exp2(((((val0-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)] = ((1.0f)/((1.0f)+exp2(((((val1-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)] = ((1.0f)/((1.0f)+exp2(((((val2-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)] = ((1.0f)/((1.0f)+exp2(((((val3-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
}`;

const r_128_8_8_16_512_3_3_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 128 */
  let gidx1 = i32(gindex.x); /* 8 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (512); ridx0++) {
    var  alu0 = f32((lidx3*((-4)))<(0));
    var  alu1 = f32(((gidx1*((-8)))+(lidx2*((-1))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+((-65))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+((-1))]), bool(alu0));
    var  alu2 = f32(((gidx1*(8))+lidx2)<(63));
    var  val2 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+(63)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+((-64))]), bool(alu1));
    var  val4 = f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))]);
    var  val5 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+(64)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+((-63))]), bool(alu1));
    var  val7 = f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+(65)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+((-62))]), bool(alu1));
    var  val10 = f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+(66)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+((-61))]), bool(alu1));
    var  val13 = f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+(67)]), bool(alu2));
    var  alu3 = f32((lidx3*(4))<(60));
    var  val15 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+((-60))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(lidx3*(4))+(gidx1*(512))+(lidx2*(64))+(ridx0*(4096))+(68)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx0*(18432))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4608)]);
    var  val28 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4611)]);
    var  val29 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4614)]);
    var  val30 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4609)]);
    var  val31 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4612)]);
    var  val32 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4615)]);
    var  val33 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4610)]);
    var  val34 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4613)]);
    var  val35 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4616)]);
    var  val36 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9216)]);
    var  val37 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9219)]);
    var  val38 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9222)]);
    var  val39 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9217)]);
    var  val40 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9220)]);
    var  val41 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9223)]);
    var  val42 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9218)]);
    var  val43 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9221)]);
    var  val44 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9224)]);
    var  val45 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13824)]);
    var  val46 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13827)]);
    var  val47 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13830)]);
    var  val48 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13825)]);
    var  val49 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13828)]);
    var  val50 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13831)]);
    var  val51 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13826)]);
    var  val52 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13829)]);
    var  val53 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13832)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  var  val54 = f32(data3[gidx0*(4)]);
  var  val55 = f32(data3[(gidx0*(4))+(1)]);
  var  val56 = f32(data3[(gidx0*(4))+(2)]);
  var  val57 = f32(data3[(gidx0*(4))+(3)]);
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))] = (acc0+val54);
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(1)] = (acc1+val54);
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(2)] = (acc2+val54);
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(3)] = (acc3+val54);
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(4096)] = (acc4+val55);
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(4097)] = (acc5+val55);
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(4098)] = (acc6+val55);
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(4099)] = (acc7+val55);
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(8192)] = (acc8+val56);
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(8193)] = (acc9+val56);
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(8194)] = (acc10+val56);
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(8195)] = (acc11+val56);
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(12288)] = (acc12+val57);
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(12289)] = (acc13+val57);
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(12290)] = (acc14+val57);
  data0[(gidx0*(16384))+(gidx1*(512))+(lidx2*(64))+(lidx3*(4))+(12291)] = (acc15+val57);
}`;

const E_16384_32_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 16384 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx1*(4))+(3)]);
  data0[(gidx0*(128))+(lidx1*(4))] = (val0+val4);
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (val1+val5);
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (val2+val6);
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (val3+val7);
}`;

const E_64_64_8_16_4n6 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 64 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))]);
  var  val5 = f32(data2[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)]);
  var  val8 = f32(data3[gidx0/(2)]);
  var  val9 = f32(data4[gidx0/(2)]);
  var  val10 = f32(data5[(gidx0*(8))+lidx2]);
  var  val11 = f32(data6[(gidx0*(8))+lidx2]);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))] = ((((val0+val4)-val8)*val9*val10)+val11);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)] = ((((val1+val5)-val8)*val9*val10)+val11);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)] = ((((val2+val6)-val8)*val9*val10)+val11);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)] = ((((val3+val7)-val8)*val9*val10)+val11);
}`;

const E_64_64_8_16_4n7 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 64 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))]);
  var  val5 = f32(data2[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)]);
  var  val8 = f32(data3[gidx0/(2)]);
  var  val9 = f32(data4[gidx0/(2)]);
  var  val10 = f32(data5[(gidx0*(8))+lidx2]);
  var  val11 = f32(data6[(gidx0*(8))+lidx2]);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))] = ((1.0f)/((1.0f)+exp2((((((val0+val4)-val8)*val9*val10)+val11)*((-1.4426950408889634f))))));
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)] = ((1.0f)/((1.0f)+exp2((((((val1+val5)-val8)*val9*val10)+val11)*((-1.4426950408889634f))))));
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)] = ((1.0f)/((1.0f)+exp2((((((val2+val6)-val8)*val9*val10)+val11)*((-1.4426950408889634f))))));
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)] = ((1.0f)/((1.0f)+exp2((((((val3+val7)-val8)*val9*val10)+val11)*((-1.4426950408889634f))))));
}`;

const E_4_1024_8_16_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 1024 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))]);
  var  val5 = f32(data2[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)]);
  var  val8 = f32(data3[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))]);
  var  val9 = f32(data3[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)]);
  var  val10 = f32(data3[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)]);
  var  val11 = f32(data3[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)]);
  var  val12 = f32(data4[(gidx0*(128))+(lidx2*(16))+(gidx1/(64))]);
  var  val13 = f32(data5[(gidx0*(8))+lidx2]);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))] = ((val0+val4+(val8+val12))-val13);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)] = ((val1+val5+(val9+val12))-val13);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)] = ((val2+val6+(val10+val12))-val13);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)] = ((val3+val7+(val11+val12))-val13);
}`;

const E_64_64_8_16_4n8 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 64 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[gidx0/(2)]);
  var  val5 = f32(data3[(gidx0*(8))+lidx2]);
  var  val6 = f32(data4[(gidx0*(8))+lidx2]);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))] = ((1.0f)/((1.0f)+exp2((((val0*val4*val5)+val6)*((-1.4426950408889634f))))));
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)] = ((1.0f)/((1.0f)+exp2((((val1*val4*val5)+val6)*((-1.4426950408889634f))))));
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)] = ((1.0f)/((1.0f)+exp2((((val2*val4*val5)+val6)*((-1.4426950408889634f))))));
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)] = ((1.0f)/((1.0f)+exp2((((val3*val4*val5)+val6)*((-1.4426950408889634f))))));
}`;

const E_64_64_8_16_4n9 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 64 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))]);
  var  val5 = f32(data2[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)]);
  var  val8 = f32(data3[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))]);
  var  val9 = f32(data3[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)]);
  var  val10 = f32(data3[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)]);
  var  val11 = f32(data3[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)]);
  var  val12 = f32(data4[(gidx0*(8))+lidx2]);
  var  val13 = f32(data5[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))]);
  var  val14 = f32(data5[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)]);
  var  val15 = f32(data5[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)]);
  var  val16 = f32(data5[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)]);
  var  val17 = f32(data6[(gidx0*(8))+lidx2]);
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))] = (val0+val4+(val8+val12)+(val13+val17));
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)] = (val1+val5+(val9+val12)+(val14+val17));
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)] = (val2+val6+(val10+val12)+(val15+val17));
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)] = (val3+val7+(val11+val12)+(val16+val17));
}`;

const E_4_1024_8_16_4n3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 1024 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))]);
  var  val5 = f32(data2[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)]);
  var  val8 = f32(data3[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))]);
  var  val9 = f32(data3[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)]);
  var  val10 = f32(data3[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)]);
  var  val11 = f32(data3[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)]);
  var  val12 = f32(data4[(gidx0*(128))+(lidx2*(16))+(gidx1/(64))]);
  var  val13 = f32(data5[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))]);
  var  val14 = f32(data5[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)]);
  var  val15 = f32(data5[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)]);
  var  val16 = f32(data5[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)]);
  var  val17 = f32(data6[(gidx0*(128))+(lidx2*(16))+(gidx1/(64))]);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))] = (val0+val4+(val8+val12)+(val13+val17));
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)] = (val1+val5+(val9+val12)+(val14+val17));
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)] = (val2+val6+(val10+val12)+(val15+val17));
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)] = (val3+val7+(val11+val12)+(val16+val17));
}`;

const E_16384_32_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 16384 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(128))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(128))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(128))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(128))+(lidx1*(4))+(3)]);
  data0[(gidx0*(128))+(lidx1*(4))] = (val0+val4);
  data0[(gidx0*(128))+(lidx1*(4))+(1)] = (val1+val5);
  data0[(gidx0*(128))+(lidx1*(4))+(2)] = (val2+val6);
  data0[(gidx0*(128))+(lidx1*(4))+(3)] = (val3+val7);
}`;

const r_128_16_2_8_16_512_3_3_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 128 */
  let gidx1 = i32(gindex.y); /* 16 */
  let gidx2 = i32(gindex.x); /* 2 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (512); ridx0++) {
    var  alu0 = f32(((gidx2*((-64)))+(lidx4*((-4))))<(0));
    var  alu1 = f32(((gidx1*((-8)))+(lidx3*((-1))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(((gidx2*(32))+(lidx4*(2))+(63))%(64))+((((gidx1*(4))+(ridx0*(64))+((lidx3+((gidx2+((lidx4+(15))/(16))+(1))/(2)))/(2))+(32767))%(32768))*(64))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(((gidx2*(32))+(lidx4*(2))+(63))%(64))+((((gidx1*(4))+(ridx0*(64))+((lidx3+((gidx2+((lidx4+(15))/(16))+(1))/(2))+(1))/(2))+(32767))%(32768))*(64))]), bool(alu0));
    var  alu2 = f32(((gidx1*(8))+lidx3)<(127));
    var  val2 = select(f32((0.0f)), f32(data1[(((gidx2*(32))+(lidx4*(2))+(63))%(64))+((((gidx1*(4))+(ridx0*(64))+((lidx3+((gidx2+((lidx4+(15))/(16))+(1))/(2)))/(2)))%(32768))*(64))]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(gidx2*(32))+(lidx4*(2))+((((gidx1*(4))+(ridx0*(64))+((lidx3+(1))/(2))+(32767))%(32768))*(64))]), bool(alu1));
    var  val4 = f32(data1[(gidx2*(32))+(lidx4*(2))+(gidx1*(256))+(ridx0*(4096))+((lidx3/(2))*(64))]);
    var  val5 = select(f32((0.0f)), f32(data1[(gidx2*(32))+(lidx4*(2))+((((gidx1*(4))+(ridx0*(64))+((lidx3+(3))/(2))+(32767))%(32768))*(64))]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(gidx2*(32))+(lidx4*(2))+((((gidx1*(4))+(ridx0*(64))+((lidx3+(1))/(2))+(32767))%(32768))*(64))+(1)]), bool(alu1));
    var  val7 = f32(data1[(gidx2*(32))+(lidx4*(2))+(gidx1*(256))+(ridx0*(4096))+((lidx3/(2))*(64))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(gidx2*(32))+(lidx4*(2))+((((gidx1*(4))+(ridx0*(64))+((lidx3+(3))/(2))+(32767))%(32768))*(64))+(1)]), bool(alu2));
    var  alu3 = f32(((gidx2*(64))+(lidx4*(4)))<(124));
    var  val9 = select(f32((0.0f)), f32(data1[(((gidx2*(32))+(lidx4*(2))+(2))%(64))+((((gidx1*(4))+(ridx0*(64))+((lidx3+((gidx2+((lidx4+(17))/(16))+(1))/(2)))/(2))+(32767))%(32768))*(64))]), bool((alu3*alu1)));
    var  val10 = select(f32((0.0f)), f32(data1[(((gidx2*(32))+(lidx4*(2))+(2))%(64))+((((gidx1*(4))+(ridx0*(64))+((lidx3+((gidx2+((lidx4+(17))/(16))+(1))/(2))+(1))/(2))+(32767))%(32768))*(64))]), bool(alu3));
    var  val11 = select(f32((0.0f)), f32(data1[(((gidx2*(32))+(lidx4*(2))+(2))%(64))+((((gidx1*(4))+(ridx0*(64))+((lidx3+((gidx2+((lidx4+(17))/(16))+(1))/(2)))/(2)))%(32768))*(64))]), bool((alu3*alu2)));
    var  val12 = f32(data2[(gidx0*(18432))+(ridx0*(9))]);
    var  val13 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(3)]);
    var  val14 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(6)]);
    var  val15 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(1)]);
    var  val16 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4)]);
    var  val17 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(7)]);
    var  val18 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(2)]);
    var  val19 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(5)]);
    var  val20 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(8)]);
    var  val21 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4608)]);
    var  val22 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4611)]);
    var  val23 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4614)]);
    var  val24 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4609)]);
    var  val25 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4612)]);
    var  val26 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4615)]);
    var  val27 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4610)]);
    var  val28 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4613)]);
    var  val29 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4616)]);
    var  val30 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9216)]);
    var  val31 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9219)]);
    var  val32 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9222)]);
    var  val33 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9217)]);
    var  val34 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9220)]);
    var  val35 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9223)]);
    var  val36 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9218)]);
    var  val37 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9221)]);
    var  val38 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9224)]);
    var  val39 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13824)]);
    var  val40 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13827)]);
    var  val41 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13830)]);
    var  val42 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13825)]);
    var  val43 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13828)]);
    var  val44 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13831)]);
    var  val45 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13826)]);
    var  val46 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13829)]);
    var  val47 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13832)]);
    acc0 = fma(val0,val12,acc0);
    acc0 = fma(val1,val13,acc0);
    acc0 = fma(val2,val14,acc0);
    acc0 = fma(val3,val15,acc0);
    acc0 = fma(val4,val16,acc0);
    acc0 = fma(val5,val17,acc0);
    acc0 = fma(val3,val18,acc0);
    acc0 = fma(val4,val19,acc0);
    acc0 = fma(val5,val20,acc0);
    acc1 = fma(val3,val12,acc1);
    acc1 = fma(val4,val13,acc1);
    acc1 = fma(val5,val14,acc1);
    acc1 = fma(val3,val15,acc1);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc1 = fma(val8,val20,acc1);
    acc2 = fma(val3,val12,acc2);
    acc2 = fma(val4,val13,acc2);
    acc2 = fma(val5,val14,acc2);
    acc2 = fma(val6,val15,acc2);
    acc2 = fma(val7,val16,acc2);
    acc2 = fma(val8,val17,acc2);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc3 = fma(val6,val12,acc3);
    acc3 = fma(val7,val13,acc3);
    acc3 = fma(val8,val14,acc3);
    acc3 = fma(val6,val15,acc3);
    acc3 = fma(val7,val16,acc3);
    acc3 = fma(val8,val17,acc3);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc4 = fma(val0,val21,acc4);
    acc4 = fma(val1,val22,acc4);
    acc4 = fma(val2,val23,acc4);
    acc4 = fma(val3,val24,acc4);
    acc4 = fma(val4,val25,acc4);
    acc4 = fma(val5,val26,acc4);
    acc4 = fma(val3,val27,acc4);
    acc4 = fma(val4,val28,acc4);
    acc4 = fma(val5,val29,acc4);
    acc5 = fma(val3,val21,acc5);
    acc5 = fma(val4,val22,acc5);
    acc5 = fma(val5,val23,acc5);
    acc5 = fma(val3,val24,acc5);
    acc5 = fma(val4,val25,acc5);
    acc5 = fma(val5,val26,acc5);
    acc5 = fma(val6,val27,acc5);
    acc5 = fma(val7,val28,acc5);
    acc5 = fma(val8,val29,acc5);
    acc6 = fma(val3,val21,acc6);
    acc6 = fma(val4,val22,acc6);
    acc6 = fma(val5,val23,acc6);
    acc6 = fma(val6,val24,acc6);
    acc6 = fma(val7,val25,acc6);
    acc6 = fma(val8,val26,acc6);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc7 = fma(val6,val21,acc7);
    acc7 = fma(val7,val22,acc7);
    acc7 = fma(val8,val23,acc7);
    acc7 = fma(val6,val24,acc7);
    acc7 = fma(val7,val25,acc7);
    acc7 = fma(val8,val26,acc7);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc8 = fma(val0,val30,acc8);
    acc8 = fma(val1,val31,acc8);
    acc8 = fma(val2,val32,acc8);
    acc8 = fma(val3,val33,acc8);
    acc8 = fma(val4,val34,acc8);
    acc8 = fma(val5,val35,acc8);
    acc8 = fma(val3,val36,acc8);
    acc8 = fma(val4,val37,acc8);
    acc8 = fma(val5,val38,acc8);
    acc9 = fma(val3,val30,acc9);
    acc9 = fma(val4,val31,acc9);
    acc9 = fma(val5,val32,acc9);
    acc9 = fma(val3,val33,acc9);
    acc9 = fma(val4,val34,acc9);
    acc9 = fma(val5,val35,acc9);
    acc9 = fma(val6,val36,acc9);
    acc9 = fma(val7,val37,acc9);
    acc9 = fma(val8,val38,acc9);
    acc10 = fma(val3,val30,acc10);
    acc10 = fma(val4,val31,acc10);
    acc10 = fma(val5,val32,acc10);
    acc10 = fma(val6,val33,acc10);
    acc10 = fma(val7,val34,acc10);
    acc10 = fma(val8,val35,acc10);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc11 = fma(val6,val30,acc11);
    acc11 = fma(val7,val31,acc11);
    acc11 = fma(val8,val32,acc11);
    acc11 = fma(val6,val33,acc11);
    acc11 = fma(val7,val34,acc11);
    acc11 = fma(val8,val35,acc11);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc12 = fma(val0,val39,acc12);
    acc12 = fma(val1,val40,acc12);
    acc12 = fma(val2,val41,acc12);
    acc12 = fma(val3,val42,acc12);
    acc12 = fma(val4,val43,acc12);
    acc12 = fma(val5,val44,acc12);
    acc12 = fma(val3,val45,acc12);
    acc12 = fma(val4,val46,acc12);
    acc12 = fma(val5,val47,acc12);
    acc13 = fma(val3,val39,acc13);
    acc13 = fma(val4,val40,acc13);
    acc13 = fma(val5,val41,acc13);
    acc13 = fma(val3,val42,acc13);
    acc13 = fma(val4,val43,acc13);
    acc13 = fma(val5,val44,acc13);
    acc13 = fma(val6,val45,acc13);
    acc13 = fma(val7,val46,acc13);
    acc13 = fma(val8,val47,acc13);
    acc14 = fma(val3,val39,acc14);
    acc14 = fma(val4,val40,acc14);
    acc14 = fma(val5,val41,acc14);
    acc14 = fma(val6,val42,acc14);
    acc14 = fma(val7,val43,acc14);
    acc14 = fma(val8,val44,acc14);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc15 = fma(val6,val39,acc15);
    acc15 = fma(val7,val40,acc15);
    acc15 = fma(val8,val41,acc15);
    acc15 = fma(val6,val42,acc15);
    acc15 = fma(val7,val43,acc15);
    acc15 = fma(val8,val44,acc15);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
  }
  var  val48 = f32(data3[gidx0*(4)]);
  var  val49 = f32(data3[(gidx0*(4))+(1)]);
  var  val50 = f32(data3[(gidx0*(4))+(2)]);
  var  val51 = f32(data3[(gidx0*(4))+(3)]);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))] = (acc0+val48);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(1)] = (acc1+val48);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(2)] = (acc2+val48);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(3)] = (acc3+val48);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(16384)] = (acc4+val49);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(16385)] = (acc5+val49);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(16386)] = (acc6+val49);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(16387)] = (acc7+val49);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(32768)] = (acc8+val50);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(32769)] = (acc9+val50);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(32770)] = (acc10+val50);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(32771)] = (acc11+val50);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(49152)] = (acc12+val51);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(49153)] = (acc13+val51);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(49154)] = (acc14+val51);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(49155)] = (acc15+val51);
}`;

const r_1024_32_64_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 1024 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))+(3)]);
    acc0 = (val0+acc0);
    acc0 = (val1+acc0);
    acc0 = (val2+acc0);
    acc0 = (val3+acc0);
  }
  data0[(gidx0*(32))+lidx1] = acc0;
}`;

const r_32_256_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,256>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(256) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 32 */
  let lidx1 = i32(lindex.x); /* 256 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (4); ridx0++) {
    var  val0 = f32(data1[(gidx0*(1024))+(lidx1*(4))+ridx0]);
    acc0 = (val0+acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (256); ridx1++) {
    var  val1 = f32(temp[ridx1]);
    acc1 = (val1+acc1);
  }
  data0[gidx0] = (acc1*(3.814697265625e-06f));
}`;

const r_4_16_8_16_64_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 16 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))+(256)]);
    var  val5 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))+(257)]);
    var  val6 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))+(258)]);
    var  val7 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))+(259)]);
    var  val8 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))+(512)]);
    var  val9 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))+(513)]);
    var  val10 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))+(514)]);
    var  val11 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))+(515)]);
    var  val12 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))+(768)]);
    var  val13 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))+(769)]);
    var  val14 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))+(770)]);
    var  val15 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))+(771)]);
    var  val16 = f32(data2[(gidx0*(8))+lidx2]);
    var  alu0 = (val0-val16);
    var  alu1 = (val1-val16);
    var  alu2 = (val2-val16);
    var  alu3 = (val3-val16);
    var  alu4 = (val4-val16);
    var  alu5 = (val5-val16);
    var  alu6 = (val6-val16);
    var  alu7 = (val7-val16);
    var  alu8 = (val8-val16);
    var  alu9 = (val9-val16);
    var  alu10 = (val10-val16);
    var  alu11 = (val11-val16);
    var  alu12 = (val12-val16);
    var  alu13 = (val13-val16);
    var  alu14 = (val14-val16);
    var  alu15 = (val15-val16);
    acc0 = fma(alu0,alu0,acc0);
    acc0 = fma(alu1,alu1,acc0);
    acc0 = fma(alu2,alu2,acc0);
    acc0 = fma(alu3,alu3,acc0);
    acc1 = fma(alu4,alu4,acc1);
    acc1 = fma(alu5,alu5,acc1);
    acc1 = fma(alu6,alu6,acc1);
    acc1 = fma(alu7,alu7,acc1);
    acc2 = fma(alu8,alu8,acc2);
    acc2 = fma(alu9,alu9,acc2);
    acc2 = fma(alu10,alu10,acc2);
    acc2 = fma(alu11,alu11,acc2);
    acc3 = fma(alu12,alu12,acc3);
    acc3 = fma(alu13,alu13,acc3);
    acc3 = fma(alu14,alu14,acc3);
    acc3 = fma(alu15,alu15,acc3);
  }
  data0[(gidx0*(8192))+(gidx1*(64))+(lidx2*(1024))+(lidx3*(4))] = acc0;
  data0[(gidx0*(8192))+(gidx1*(64))+(lidx2*(1024))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(8192))+(gidx1*(64))+(lidx2*(1024))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(8192))+(gidx1*(64))+(lidx2*(1024))+(lidx3*(4))+(3)] = acc3;
}`;

const r_32_256_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,256>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(256) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 32 */
  let lidx1 = i32(lindex.x); /* 256 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (4); ridx0++) {
    var  val0 = f32(data1[(gidx0*(1024))+(lidx1*(4))+ridx0]);
    acc0 = (val0+acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (256); ridx1++) {
    var  val1 = f32(temp[ridx1]);
    acc1 = (val1+acc1);
  }
  data0[gidx0] = sqrt(((1.0f)/((acc1*(3.814697265625e-06f))+(1e-05f))));
}`;

const E_64_256_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 64 */
  let gidx1 = i32(gindex.x); /* 256 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[gidx0/(2)]);
  var  val5 = f32(data3[gidx0/(2)]);
  var  val6 = f32(data4[(gidx0*(8))+lidx2]);
  var  val7 = f32(data5[(gidx0*(8))+lidx2]);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))] = (((val0-val4)*val5*val6)+val7);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(1)] = (((val1-val4)*val5*val6)+val7);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(2)] = (((val2-val4)*val5*val6)+val7);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(3)] = (((val3-val4)*val5*val6)+val7);
}`;

const E_64_256_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 64 */
  let gidx1 = i32(gindex.x); /* 256 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[gidx0/(2)]);
  var  val5 = f32(data3[gidx0/(2)]);
  var  val6 = f32(data4[(gidx0*(8))+lidx2]);
  var  val7 = f32(data5[(gidx0*(8))+lidx2]);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))] = ((1.0f)/((1.0f)+exp2(((((val0-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(1)] = ((1.0f)/((1.0f)+exp2(((((val1-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(2)] = ((1.0f)/((1.0f)+exp2(((((val2-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(3)] = ((1.0f)/((1.0f)+exp2(((((val3-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
}`;

const E_32768_64_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(64) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 32768 */
  let lidx1 = i32(lindex.x); /* 64 */
  var  val0 = f32(data1[(gidx0*(256))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(256))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(256))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(256))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(256))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(256))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(256))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(256))+(lidx1*(4))+(3)]);
  data0[(gidx0*(256))+(lidx1*(4))] = (val0*val4);
  data0[(gidx0*(256))+(lidx1*(4))+(1)] = (val1*val5);
  data0[(gidx0*(256))+(lidx1*(4))+(2)] = (val2*val6);
  data0[(gidx0*(256))+(lidx1*(4))+(3)] = (val3*val7);
}`;

const r_128_16_2_8_16_512_3_3_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 128 */
  let gidx1 = i32(gindex.y); /* 16 */
  let gidx2 = i32(gindex.x); /* 2 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (512); ridx0++) {
    var  alu0 = f32(((gidx2*((-64)))+(lidx4*((-4))))<(0));
    var  alu1 = f32(((gidx1*((-8)))+(lidx3*((-1))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+((-129))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+((-1))]), bool(alu0));
    var  alu2 = f32(((gidx1*(8))+lidx3)<(127));
    var  val2 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+(127)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+((-128))]), bool(alu1));
    var  val4 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))]);
    var  val5 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+(128)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+((-127))]), bool(alu1));
    var  val7 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+(129)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+((-126))]), bool(alu1));
    var  val10 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+(130)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+((-125))]), bool(alu1));
    var  val13 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+(131)]), bool(alu2));
    var  alu3 = f32(((gidx2*(64))+(lidx4*(4)))<(124));
    var  val15 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+((-124))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+(132)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx0*(18432))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4608)]);
    var  val28 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4611)]);
    var  val29 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4614)]);
    var  val30 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4609)]);
    var  val31 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4612)]);
    var  val32 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4615)]);
    var  val33 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4610)]);
    var  val34 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4613)]);
    var  val35 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4616)]);
    var  val36 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9216)]);
    var  val37 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9219)]);
    var  val38 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9222)]);
    var  val39 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9217)]);
    var  val40 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9220)]);
    var  val41 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9223)]);
    var  val42 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9218)]);
    var  val43 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9221)]);
    var  val44 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9224)]);
    var  val45 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13824)]);
    var  val46 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13827)]);
    var  val47 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13830)]);
    var  val48 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13825)]);
    var  val49 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13828)]);
    var  val50 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13831)]);
    var  val51 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13826)]);
    var  val52 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13829)]);
    var  val53 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13832)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))] = acc0;
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(3)] = acc3;
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(16384)] = acc4;
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(16385)] = acc5;
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(16386)] = acc6;
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(16387)] = acc7;
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(32768)] = acc8;
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(32769)] = acc9;
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(32770)] = acc10;
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(32771)] = acc11;
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(49152)] = acc12;
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(49153)] = acc13;
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(49154)] = acc14;
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(49155)] = acc15;
}`;

const r_4_64_8_16_64_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(2097152))+(gidx1*(4096))+(lidx2*(262144))+(lidx3*(256))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(2097152))+(gidx1*(4096))+(lidx2*(262144))+(lidx3*(256))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(2097152))+(gidx1*(4096))+(lidx2*(262144))+(lidx3*(256))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(2097152))+(gidx1*(4096))+(lidx2*(262144))+(lidx3*(256))+(ridx0*(4))+(3)]);
    var  val4 = f32(data2[(gidx0*(128))+(lidx2*(16))+(gidx1/(4))]);
    acc0 = (val0+val4+acc0);
    acc0 = (val1+val4+acc0);
    acc0 = (val2+val4+acc0);
    acc0 = (val3+val4+acc0);
  }
  data0[(gidx0*(8192))+(gidx1*(16))+(lidx2*(1024))+lidx3] = acc0;
}`;

const r_4_16_8_16_64_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 16 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))+(256)]);
    var  val5 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))+(257)]);
    var  val6 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))+(258)]);
    var  val7 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))+(259)]);
    var  val8 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))+(512)]);
    var  val9 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))+(513)]);
    var  val10 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))+(514)]);
    var  val11 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))+(515)]);
    var  val12 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))+(768)]);
    var  val13 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))+(769)]);
    var  val14 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))+(770)]);
    var  val15 = f32(data1[(gidx0*(2097152))+(gidx1*(16384))+(lidx2*(262144))+(lidx3*(1024))+(ridx0*(4))+(771)]);
    var  val16 = f32(data2[(gidx0*(128))+gidx1+(lidx2*(16))]);
    var  val17 = f32(data3[(gidx0*(8))+lidx2]);
    var  alu0 = ((val0+val16)-val17);
    var  alu1 = ((val1+val16)-val17);
    var  alu2 = ((val2+val16)-val17);
    var  alu3 = ((val3+val16)-val17);
    var  alu4 = ((val4+val16)-val17);
    var  alu5 = ((val5+val16)-val17);
    var  alu6 = ((val6+val16)-val17);
    var  alu7 = ((val7+val16)-val17);
    var  alu8 = ((val8+val16)-val17);
    var  alu9 = ((val9+val16)-val17);
    var  alu10 = ((val10+val16)-val17);
    var  alu11 = ((val11+val16)-val17);
    var  alu12 = ((val12+val16)-val17);
    var  alu13 = ((val13+val16)-val17);
    var  alu14 = ((val14+val16)-val17);
    var  alu15 = ((val15+val16)-val17);
    acc0 = fma(alu0,alu0,acc0);
    acc0 = fma(alu1,alu1,acc0);
    acc0 = fma(alu2,alu2,acc0);
    acc0 = fma(alu3,alu3,acc0);
    acc1 = fma(alu4,alu4,acc1);
    acc1 = fma(alu5,alu5,acc1);
    acc1 = fma(alu6,alu6,acc1);
    acc1 = fma(alu7,alu7,acc1);
    acc2 = fma(alu8,alu8,acc2);
    acc2 = fma(alu9,alu9,acc2);
    acc2 = fma(alu10,alu10,acc2);
    acc2 = fma(alu11,alu11,acc2);
    acc3 = fma(alu12,alu12,acc3);
    acc3 = fma(alu13,alu13,acc3);
    acc3 = fma(alu14,alu14,acc3);
    acc3 = fma(alu15,alu15,acc3);
  }
  data0[(gidx0*(8192))+(gidx1*(64))+(lidx2*(1024))+(lidx3*(4))] = acc0;
  data0[(gidx0*(8192))+(gidx1*(64))+(lidx2*(1024))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(8192))+(gidx1*(64))+(lidx2*(1024))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(8192))+(gidx1*(64))+(lidx2*(1024))+(lidx3*(4))+(3)] = acc3;
}`;

const E_64_256_8_16_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 64 */
  let gidx1 = i32(gindex.x); /* 256 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(8))+lidx2]);
  var  val5 = f32(data3[gidx0/(2)]);
  var  val6 = f32(data4[gidx0/(2)]);
  var  val7 = f32(data5[(gidx0*(8))+lidx2]);
  var  val8 = f32(data6[(gidx0*(8))+lidx2]);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))] = ((((val0+val4)-val5)*val6*val7)+val8);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(1)] = ((((val1+val4)-val5)*val6*val7)+val8);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(2)] = ((((val2+val4)-val5)*val6*val7)+val8);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(3)] = ((((val3+val4)-val5)*val6*val7)+val8);
}`;

const E_64_256_8_16_4n3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 64 */
  let gidx1 = i32(gindex.x); /* 256 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(8))+lidx2]);
  var  val5 = f32(data3[gidx0/(2)]);
  var  val6 = f32(data4[gidx0/(2)]);
  var  val7 = f32(data5[(gidx0*(8))+lidx2]);
  var  val8 = f32(data6[(gidx0*(8))+lidx2]);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))] = ((1.0f)/((1.0f)+exp2((((((val0+val4)-val5)*val6*val7)+val8)*((-1.4426950408889634f))))));
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(1)] = ((1.0f)/((1.0f)+exp2((((((val1+val4)-val5)*val6*val7)+val8)*((-1.4426950408889634f))))));
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(2)] = ((1.0f)/((1.0f)+exp2((((((val2+val4)-val5)*val6*val7)+val8)*((-1.4426950408889634f))))));
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(3)] = ((1.0f)/((1.0f)+exp2((((((val3+val4)-val5)*val6*val7)+val8)*((-1.4426950408889634f))))));
}`;

const E_32_128_4_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 32 */
  let gidx1 = i32(gindex.y); /* 128 */
  let gidx2 = i32(gindex.x); /* 4 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))]);
  var  val5 = f32(data2[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)]);
  var  val8 = f32(data3[(gidx0*(16))+(gidx1/(8))]);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))] = (val0+(val4+val8));
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)] = (val1+(val5+val8));
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)] = (val2+(val6+val8));
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)] = (val3+(val7+val8));
}`;

const E_4_4096_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 4096 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))]);
  var  val5 = f32(data2[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(3)]);
  var  val8 = f32(data3[(gidx0*(128))+(lidx2*(16))+(gidx1/(256))]);
  var  val9 = f32(data4[(gidx0*(8))+lidx2]);
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))] = ((val0+(val4+val8))-val9);
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(1)] = ((val1+(val5+val8))-val9);
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(2)] = ((val2+(val6+val8))-val9);
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(3)] = ((val3+(val7+val8))-val9);
}`;

const r_2048_4_8_32_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,128>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(8,4) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 2048 */
  let lidx1 = i32(lindex.y); /* 4 */
  let lidx2 = i32(lindex.x); /* 8 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (32); ridx0++) {
    var  val0 = f32(data1[(gidx0*(4096))+(lidx1*(256))+lidx2+(ridx0*(8))]);
    var  val1 = f32(data1[(gidx0*(4096))+(lidx1*(256))+lidx2+(ridx0*(8))+(1024)]);
    var  val2 = f32(data1[(gidx0*(4096))+(lidx1*(256))+lidx2+(ridx0*(8))+(2048)]);
    var  val3 = f32(data1[(gidx0*(4096))+(lidx1*(256))+lidx2+(ridx0*(8))+(3072)]);
    acc0 = fma(val0,val0,acc0);
    acc1 = fma(val1,val1,acc1);
    acc2 = fma(val2,val2,acc2);
    acc3 = fma(val3,val3,acc3);
  }
  temp[(lidx1*(32))+(lidx2*(4))] = acc0;
  temp[(lidx1*(32))+(lidx2*(4))+(1)] = acc1;
  temp[(lidx1*(32))+(lidx2*(4))+(2)] = acc2;
  temp[(lidx1*(32))+(lidx2*(4))+(3)] = acc3;
  workgroupBarrier();
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  for(var ridx1 = (0); ridx1 < (8); ridx1++) {
    var  val4 = f32(temp[(lidx1*(32))+(ridx1*(4))]);
    var  val5 = f32(temp[(lidx1*(32))+(ridx1*(4))+(1)]);
    var  val6 = f32(temp[(lidx1*(32))+(ridx1*(4))+(2)]);
    var  val7 = f32(temp[(lidx1*(32))+(ridx1*(4))+(3)]);
    acc4 = (val4+acc4);
    acc5 = (val5+acc5);
    acc6 = (val6+acc6);
    acc7 = (val7+acc7);
  }
  data0[(gidx0*(16))+lidx1] = acc4;
  data0[(gidx0*(16))+lidx1+(4)] = acc5;
  data0[(gidx0*(16))+lidx1+(8)] = acc6;
  data0[(gidx0*(16))+lidx1+(12)] = acc7;
}`;

const E_64_256_8_16_4n4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 64 */
  let gidx1 = i32(gindex.x); /* 256 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[gidx0/(2)]);
  var  val5 = f32(data3[(gidx0*(8))+lidx2]);
  var  val6 = f32(data4[(gidx0*(8))+lidx2]);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))] = ((val0*val4*val5)+val6);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(1)] = ((val1*val4*val5)+val6);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(2)] = ((val2*val4*val5)+val6);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(3)] = ((val3*val4*val5)+val6);
}`;

const E_64_256_8_16_4n5 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 64 */
  let gidx1 = i32(gindex.x); /* 256 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[gidx0/(2)]);
  var  val5 = f32(data3[(gidx0*(8))+lidx2]);
  var  val6 = f32(data4[(gidx0*(8))+lidx2]);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))] = ((1.0f)/((1.0f)+exp2((((val0*val4*val5)+val6)*((-1.4426950408889634f))))));
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(1)] = ((1.0f)/((1.0f)+exp2((((val1*val4*val5)+val6)*((-1.4426950408889634f))))));
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(2)] = ((1.0f)/((1.0f)+exp2((((val2*val4*val5)+val6)*((-1.4426950408889634f))))));
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(3)] = ((1.0f)/((1.0f)+exp2((((val3*val4*val5)+val6)*((-1.4426950408889634f))))));
}`;

const E_64_256_8_16_4n6 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 64 */
  let gidx1 = i32(gindex.x); /* 256 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))]);
  var  val5 = f32(data2[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(3)]);
  var  val8 = f32(data3[(gidx0*(8))+lidx2]);
  var  val9 = f32(data4[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))]);
  var  val10 = f32(data4[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(1)]);
  var  val11 = f32(data4[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(2)]);
  var  val12 = f32(data4[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(3)]);
  var  val13 = f32(data5[(gidx0*(8))+lidx2]);
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))] = (val0+(val4+val8)+(val9+val13));
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(1)] = (val1+(val5+val8)+(val10+val13));
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(2)] = (val2+(val6+val8)+(val11+val13));
  data0[(gidx0*(131072))+(gidx1*(64))+(lidx2*(16384))+(lidx3*(4))+(3)] = (val3+(val7+val8)+(val12+val13));
}`;

const r_4_64_8_16_64_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(2097152))+(gidx1*(4096))+(lidx2*(262144))+(lidx3*(256))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(2097152))+(gidx1*(4096))+(lidx2*(262144))+(lidx3*(256))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(2097152))+(gidx1*(4096))+(lidx2*(262144))+(lidx3*(256))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(2097152))+(gidx1*(4096))+(lidx2*(262144))+(lidx3*(256))+(ridx0*(4))+(3)]);
    var  val4 = f32(data2[(gidx0*(2097152))+(gidx1*(4096))+(lidx2*(262144))+(lidx3*(256))+(ridx0*(4))]);
    var  val5 = f32(data2[(gidx0*(2097152))+(gidx1*(4096))+(lidx2*(262144))+(lidx3*(256))+(ridx0*(4))+(1)]);
    var  val6 = f32(data2[(gidx0*(2097152))+(gidx1*(4096))+(lidx2*(262144))+(lidx3*(256))+(ridx0*(4))+(2)]);
    var  val7 = f32(data2[(gidx0*(2097152))+(gidx1*(4096))+(lidx2*(262144))+(lidx3*(256))+(ridx0*(4))+(3)]);
    var  val8 = f32(data3[(gidx0*(128))+(lidx2*(16))+(gidx1/(4))]);
    acc0 = (val0+(val4+val8)+acc0);
    acc0 = (val1+(val5+val8)+acc0);
    acc0 = (val2+(val6+val8)+acc0);
    acc0 = (val3+(val7+val8)+acc0);
  }
  data0[(gidx0*(8192))+(gidx1*(16))+(lidx2*(1024))+lidx3] = acc0;
}`;

const E_4_4096_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 4096 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))]);
  var  val5 = f32(data2[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(3)]);
  var  val8 = f32(data3[(gidx0*(128))+(lidx2*(16))+(gidx1/(256))]);
  var  val9 = f32(data4[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))]);
  var  val10 = f32(data4[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(1)]);
  var  val11 = f32(data4[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(2)]);
  var  val12 = f32(data4[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(3)]);
  var  val13 = f32(data5[(gidx0*(128))+(lidx2*(16))+(gidx1/(256))]);
  var  val14 = f32(data6[(gidx0*(8))+lidx2]);
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))] = ((val0+(val4+val8)+(val9+val13))-val14);
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(1)] = ((val1+(val5+val8)+(val10+val13))-val14);
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(2)] = ((val2+(val6+val8)+(val11+val13))-val14);
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(3)] = ((val3+(val7+val8)+(val12+val13))-val14);
}`;

const r_128_16_2_8_16_512_3_3_4_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 128 */
  let gidx1 = i32(gindex.y); /* 16 */
  let gidx2 = i32(gindex.x); /* 2 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (512); ridx0++) {
    var  alu0 = f32(((gidx2*((-64)))+(lidx4*((-4))))<(0));
    var  alu1 = f32(((gidx1*((-8)))+(lidx3*((-1))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+((-129))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+((-1))]), bool(alu0));
    var  alu2 = f32(((gidx1*(8))+lidx3)<(127));
    var  val2 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+(127)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+((-128))]), bool(alu1));
    var  val4 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))]);
    var  val5 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+(128)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+((-127))]), bool(alu1));
    var  val7 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+(129)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+((-126))]), bool(alu1));
    var  val10 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+(130)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+((-125))]), bool(alu1));
    var  val13 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+(131)]), bool(alu2));
    var  alu3 = f32(((gidx2*(64))+(lidx4*(4)))<(124));
    var  val15 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+((-124))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(1024))+(lidx3*(128))+(ridx0*(16384))+(132)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx0*(18432))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4608)]);
    var  val28 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4611)]);
    var  val29 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4614)]);
    var  val30 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4609)]);
    var  val31 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4612)]);
    var  val32 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4615)]);
    var  val33 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4610)]);
    var  val34 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4613)]);
    var  val35 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4616)]);
    var  val36 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9216)]);
    var  val37 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9219)]);
    var  val38 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9222)]);
    var  val39 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9217)]);
    var  val40 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9220)]);
    var  val41 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9223)]);
    var  val42 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9218)]);
    var  val43 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9221)]);
    var  val44 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9224)]);
    var  val45 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13824)]);
    var  val46 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13827)]);
    var  val47 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13830)]);
    var  val48 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13825)]);
    var  val49 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13828)]);
    var  val50 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13831)]);
    var  val51 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13826)]);
    var  val52 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13829)]);
    var  val53 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13832)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  var  val54 = f32(data3[gidx0*(4)]);
  var  val55 = f32(data3[(gidx0*(4))+(1)]);
  var  val56 = f32(data3[(gidx0*(4))+(2)]);
  var  val57 = f32(data3[(gidx0*(4))+(3)]);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))] = (acc0+val54);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(1)] = (acc1+val54);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(2)] = (acc2+val54);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(3)] = (acc3+val54);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(16384)] = (acc4+val55);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(16385)] = (acc5+val55);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(16386)] = (acc6+val55);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(16387)] = (acc7+val55);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(32768)] = (acc8+val56);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(32769)] = (acc9+val56);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(32770)] = (acc10+val56);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(32771)] = (acc11+val56);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(49152)] = (acc12+val57);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(49153)] = (acc13+val57);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(49154)] = (acc14+val57);
  data0[(gidx0*(65536))+(gidx1*(1024))+(gidx2*(64))+(lidx3*(128))+(lidx4*(4))+(49155)] = (acc15+val57);
}`;

const E_32768_64_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(64) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 32768 */
  let lidx1 = i32(lindex.x); /* 64 */
  var  val0 = f32(data1[(gidx0*(256))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(256))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(256))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(256))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(256))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(256))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(256))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(256))+(lidx1*(4))+(3)]);
  data0[(gidx0*(256))+(lidx1*(4))] = (val0+val4);
  data0[(gidx0*(256))+(lidx1*(4))+(1)] = (val1+val5);
  data0[(gidx0*(256))+(lidx1*(4))+(2)] = (val2+val6);
  data0[(gidx0*(256))+(lidx1*(4))+(3)] = (val3+val7);
}`;

const r_128_32_4_8_16_512_3_3_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 128 */
  let gidx1 = i32(gindex.y); /* 32 */
  let gidx2 = i32(gindex.x); /* 4 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (512); ridx0++) {
    var  alu0 = f32(((gidx2*((-64)))+(lidx4*((-4))))<(0));
    var  alu1 = f32(((gidx1*((-8)))+(lidx3*((-1))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(((gidx2*(32))+(lidx4*(2))+(127))%(128))+((((gidx1*(4))+(ridx0*(128))+((lidx3+((gidx2+((lidx4+(15))/(16))+(3))/(4)))/(2))+(65535))%(65536))*(128))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(((gidx2*(32))+(lidx4*(2))+(127))%(128))+((((gidx1*(4))+(ridx0*(128))+((lidx3+((gidx2+((lidx4+(15))/(16))+(3))/(4))+(1))/(2))+(65535))%(65536))*(128))]), bool(alu0));
    var  alu2 = f32(((gidx1*(8))+lidx3)<(255));
    var  val2 = select(f32((0.0f)), f32(data1[(((gidx2*(32))+(lidx4*(2))+(127))%(128))+((((gidx1*(4))+(ridx0*(128))+((lidx3+((gidx2+((lidx4+(15))/(16))+(3))/(4)))/(2)))%(65536))*(128))]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(gidx2*(32))+(lidx4*(2))+((((gidx1*(4))+(ridx0*(128))+((lidx3+(1))/(2))+(65535))%(65536))*(128))]), bool(alu1));
    var  val4 = f32(data1[(gidx2*(32))+(lidx4*(2))+(gidx1*(512))+(ridx0*(16384))+((lidx3/(2))*(128))]);
    var  val5 = select(f32((0.0f)), f32(data1[(gidx2*(32))+(lidx4*(2))+((((gidx1*(4))+(ridx0*(128))+((lidx3+(3))/(2))+(65535))%(65536))*(128))]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(gidx2*(32))+(lidx4*(2))+((((gidx1*(4))+(ridx0*(128))+((lidx3+(1))/(2))+(65535))%(65536))*(128))+(1)]), bool(alu1));
    var  val7 = f32(data1[(gidx2*(32))+(lidx4*(2))+(gidx1*(512))+(ridx0*(16384))+((lidx3/(2))*(128))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(gidx2*(32))+(lidx4*(2))+((((gidx1*(4))+(ridx0*(128))+((lidx3+(3))/(2))+(65535))%(65536))*(128))+(1)]), bool(alu2));
    var  alu3 = f32(((gidx2*(64))+(lidx4*(4)))<(252));
    var  val9 = select(f32((0.0f)), f32(data1[(((gidx2*(32))+(lidx4*(2))+(2))%(128))+((((gidx1*(4))+(ridx0*(128))+((lidx3+((gidx2+((lidx4+(17))/(16))+(3))/(4)))/(2))+(65535))%(65536))*(128))]), bool((alu3*alu1)));
    var  val10 = select(f32((0.0f)), f32(data1[(((gidx2*(32))+(lidx4*(2))+(2))%(128))+((((gidx1*(4))+(ridx0*(128))+((lidx3+((gidx2+((lidx4+(17))/(16))+(3))/(4))+(1))/(2))+(65535))%(65536))*(128))]), bool(alu3));
    var  val11 = select(f32((0.0f)), f32(data1[(((gidx2*(32))+(lidx4*(2))+(2))%(128))+((((gidx1*(4))+(ridx0*(128))+((lidx3+((gidx2+((lidx4+(17))/(16))+(3))/(4)))/(2)))%(65536))*(128))]), bool((alu3*alu2)));
    var  val12 = f32(data2[(gidx0*(18432))+(ridx0*(9))]);
    var  val13 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(3)]);
    var  val14 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(6)]);
    var  val15 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(1)]);
    var  val16 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4)]);
    var  val17 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(7)]);
    var  val18 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(2)]);
    var  val19 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(5)]);
    var  val20 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(8)]);
    var  val21 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4608)]);
    var  val22 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4611)]);
    var  val23 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4614)]);
    var  val24 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4609)]);
    var  val25 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4612)]);
    var  val26 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4615)]);
    var  val27 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4610)]);
    var  val28 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4613)]);
    var  val29 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4616)]);
    var  val30 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9216)]);
    var  val31 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9219)]);
    var  val32 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9222)]);
    var  val33 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9217)]);
    var  val34 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9220)]);
    var  val35 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9223)]);
    var  val36 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9218)]);
    var  val37 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9221)]);
    var  val38 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9224)]);
    var  val39 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13824)]);
    var  val40 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13827)]);
    var  val41 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13830)]);
    var  val42 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13825)]);
    var  val43 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13828)]);
    var  val44 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13831)]);
    var  val45 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13826)]);
    var  val46 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13829)]);
    var  val47 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13832)]);
    acc0 = fma(val0,val12,acc0);
    acc0 = fma(val1,val13,acc0);
    acc0 = fma(val2,val14,acc0);
    acc0 = fma(val3,val15,acc0);
    acc0 = fma(val4,val16,acc0);
    acc0 = fma(val5,val17,acc0);
    acc0 = fma(val3,val18,acc0);
    acc0 = fma(val4,val19,acc0);
    acc0 = fma(val5,val20,acc0);
    acc1 = fma(val3,val12,acc1);
    acc1 = fma(val4,val13,acc1);
    acc1 = fma(val5,val14,acc1);
    acc1 = fma(val3,val15,acc1);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc1 = fma(val8,val20,acc1);
    acc2 = fma(val3,val12,acc2);
    acc2 = fma(val4,val13,acc2);
    acc2 = fma(val5,val14,acc2);
    acc2 = fma(val6,val15,acc2);
    acc2 = fma(val7,val16,acc2);
    acc2 = fma(val8,val17,acc2);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc3 = fma(val6,val12,acc3);
    acc3 = fma(val7,val13,acc3);
    acc3 = fma(val8,val14,acc3);
    acc3 = fma(val6,val15,acc3);
    acc3 = fma(val7,val16,acc3);
    acc3 = fma(val8,val17,acc3);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc4 = fma(val0,val21,acc4);
    acc4 = fma(val1,val22,acc4);
    acc4 = fma(val2,val23,acc4);
    acc4 = fma(val3,val24,acc4);
    acc4 = fma(val4,val25,acc4);
    acc4 = fma(val5,val26,acc4);
    acc4 = fma(val3,val27,acc4);
    acc4 = fma(val4,val28,acc4);
    acc4 = fma(val5,val29,acc4);
    acc5 = fma(val3,val21,acc5);
    acc5 = fma(val4,val22,acc5);
    acc5 = fma(val5,val23,acc5);
    acc5 = fma(val3,val24,acc5);
    acc5 = fma(val4,val25,acc5);
    acc5 = fma(val5,val26,acc5);
    acc5 = fma(val6,val27,acc5);
    acc5 = fma(val7,val28,acc5);
    acc5 = fma(val8,val29,acc5);
    acc6 = fma(val3,val21,acc6);
    acc6 = fma(val4,val22,acc6);
    acc6 = fma(val5,val23,acc6);
    acc6 = fma(val6,val24,acc6);
    acc6 = fma(val7,val25,acc6);
    acc6 = fma(val8,val26,acc6);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc7 = fma(val6,val21,acc7);
    acc7 = fma(val7,val22,acc7);
    acc7 = fma(val8,val23,acc7);
    acc7 = fma(val6,val24,acc7);
    acc7 = fma(val7,val25,acc7);
    acc7 = fma(val8,val26,acc7);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc8 = fma(val0,val30,acc8);
    acc8 = fma(val1,val31,acc8);
    acc8 = fma(val2,val32,acc8);
    acc8 = fma(val3,val33,acc8);
    acc8 = fma(val4,val34,acc8);
    acc8 = fma(val5,val35,acc8);
    acc8 = fma(val3,val36,acc8);
    acc8 = fma(val4,val37,acc8);
    acc8 = fma(val5,val38,acc8);
    acc9 = fma(val3,val30,acc9);
    acc9 = fma(val4,val31,acc9);
    acc9 = fma(val5,val32,acc9);
    acc9 = fma(val3,val33,acc9);
    acc9 = fma(val4,val34,acc9);
    acc9 = fma(val5,val35,acc9);
    acc9 = fma(val6,val36,acc9);
    acc9 = fma(val7,val37,acc9);
    acc9 = fma(val8,val38,acc9);
    acc10 = fma(val3,val30,acc10);
    acc10 = fma(val4,val31,acc10);
    acc10 = fma(val5,val32,acc10);
    acc10 = fma(val6,val33,acc10);
    acc10 = fma(val7,val34,acc10);
    acc10 = fma(val8,val35,acc10);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc11 = fma(val6,val30,acc11);
    acc11 = fma(val7,val31,acc11);
    acc11 = fma(val8,val32,acc11);
    acc11 = fma(val6,val33,acc11);
    acc11 = fma(val7,val34,acc11);
    acc11 = fma(val8,val35,acc11);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc12 = fma(val0,val39,acc12);
    acc12 = fma(val1,val40,acc12);
    acc12 = fma(val2,val41,acc12);
    acc12 = fma(val3,val42,acc12);
    acc12 = fma(val4,val43,acc12);
    acc12 = fma(val5,val44,acc12);
    acc12 = fma(val3,val45,acc12);
    acc12 = fma(val4,val46,acc12);
    acc12 = fma(val5,val47,acc12);
    acc13 = fma(val3,val39,acc13);
    acc13 = fma(val4,val40,acc13);
    acc13 = fma(val5,val41,acc13);
    acc13 = fma(val3,val42,acc13);
    acc13 = fma(val4,val43,acc13);
    acc13 = fma(val5,val44,acc13);
    acc13 = fma(val6,val45,acc13);
    acc13 = fma(val7,val46,acc13);
    acc13 = fma(val8,val47,acc13);
    acc14 = fma(val3,val39,acc14);
    acc14 = fma(val4,val40,acc14);
    acc14 = fma(val5,val41,acc14);
    acc14 = fma(val6,val42,acc14);
    acc14 = fma(val7,val43,acc14);
    acc14 = fma(val8,val44,acc14);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc15 = fma(val6,val39,acc15);
    acc15 = fma(val7,val40,acc15);
    acc15 = fma(val8,val41,acc15);
    acc15 = fma(val6,val42,acc15);
    acc15 = fma(val7,val43,acc15);
    acc15 = fma(val8,val44,acc15);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
  }
  var  val48 = f32(data3[gidx0*(4)]);
  var  val49 = f32(data3[(gidx0*(4))+(1)]);
  var  val50 = f32(data3[(gidx0*(4))+(2)]);
  var  val51 = f32(data3[(gidx0*(4))+(3)]);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))] = (acc0+val48);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)] = (acc1+val48);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)] = (acc2+val48);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)] = (acc3+val48);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(65536)] = (acc4+val49);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(65537)] = (acc5+val49);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(65538)] = (acc6+val49);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(65539)] = (acc7+val49);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(131072)] = (acc8+val50);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(131073)] = (acc9+val50);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(131074)] = (acc10+val50);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(131075)] = (acc11+val50);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(196608)] = (acc12+val51);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(196609)] = (acc13+val51);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(196610)] = (acc14+val51);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(196611)] = (acc15+val51);
}`;

const r_8_1024_8_16_128_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 8 */
  let gidx1 = i32(gindex.x); /* 1024 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (128); ridx0++) {
    var  val0 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(262144))]);
    var  val1 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(262144))+(65536)]);
    var  val2 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(262144))+(131072)]);
    var  val3 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(262144))+(196608)]);
    var  val4 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(262144))+(1)]);
    var  val5 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(262144))+(65537)]);
    var  val6 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(262144))+(131073)]);
    var  val7 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(262144))+(196609)]);
    var  val8 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(262144))+(2)]);
    var  val9 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(262144))+(65538)]);
    var  val10 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(262144))+(131074)]);
    var  val11 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(262144))+(196610)]);
    var  val12 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(262144))+(3)]);
    var  val13 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(262144))+(65539)]);
    var  val14 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(262144))+(131075)]);
    var  val15 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(262144))+(196611)]);
    var  val16 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(512)]);
    var  val21 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(513)]);
    var  val22 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(514)]);
    var  val23 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(515)]);
    var  val24 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(1024)]);
    var  val25 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(1025)]);
    var  val26 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(1026)]);
    var  val27 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(1027)]);
    var  val28 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(1536)]);
    var  val29 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(1537)]);
    var  val30 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(1538)]);
    var  val31 = f32(data2[(gidx0*(16384))+(lidx2*(2048))+(ridx0*(4))+(1539)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))] = acc0;
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(3)] = acc3;
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(65536)] = acc4;
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(65537)] = acc5;
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(65538)] = acc6;
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(65539)] = acc7;
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(131072)] = acc8;
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(131073)] = acc9;
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(131074)] = acc10;
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(131075)] = acc11;
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(196608)] = acc12;
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(196609)] = acc13;
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(196610)] = acc14;
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(196611)] = acc15;
}`;

const r_4096_32_64_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 4096 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))+(3)]);
    acc0 = (val0+acc0);
    acc0 = (val1+acc0);
    acc0 = (val2+acc0);
    acc0 = (val3+acc0);
  }
  data0[(gidx0*(32))+lidx1] = acc0;
}`;

const r_32_256_16 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,256>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(256) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 32 */
  let lidx1 = i32(lindex.x); /* 256 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (16); ridx0++) {
    var  val0 = f32(data1[(gidx0*(4096))+(lidx1*(16))+ridx0]);
    acc0 = (val0+acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (256); ridx1++) {
    var  val1 = f32(temp[ridx1]);
    acc1 = (val1+acc1);
  }
  data0[gidx0] = (acc1*(9.5367431640625e-07f));
}`;

const r_4_64_8_16_64_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))+(256)]);
    var  val5 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))+(257)]);
    var  val6 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))+(258)]);
    var  val7 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))+(259)]);
    var  val8 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))+(512)]);
    var  val9 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))+(513)]);
    var  val10 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))+(514)]);
    var  val11 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))+(515)]);
    var  val12 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))+(768)]);
    var  val13 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))+(769)]);
    var  val14 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))+(770)]);
    var  val15 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))+(771)]);
    var  val16 = f32(data2[(gidx0*(8))+lidx2]);
    var  alu0 = (val0-val16);
    var  alu1 = (val1-val16);
    var  alu2 = (val2-val16);
    var  alu3 = (val3-val16);
    var  alu4 = (val4-val16);
    var  alu5 = (val5-val16);
    var  alu6 = (val6-val16);
    var  alu7 = (val7-val16);
    var  alu8 = (val8-val16);
    var  alu9 = (val9-val16);
    var  alu10 = (val10-val16);
    var  alu11 = (val11-val16);
    var  alu12 = (val12-val16);
    var  alu13 = (val13-val16);
    var  alu14 = (val14-val16);
    var  alu15 = (val15-val16);
    acc0 = fma(alu0,alu0,acc0);
    acc0 = fma(alu1,alu1,acc0);
    acc0 = fma(alu2,alu2,acc0);
    acc0 = fma(alu3,alu3,acc0);
    acc1 = fma(alu4,alu4,acc1);
    acc1 = fma(alu5,alu5,acc1);
    acc1 = fma(alu6,alu6,acc1);
    acc1 = fma(alu7,alu7,acc1);
    acc2 = fma(alu8,alu8,acc2);
    acc2 = fma(alu9,alu9,acc2);
    acc2 = fma(alu10,alu10,acc2);
    acc2 = fma(alu11,alu11,acc2);
    acc3 = fma(alu12,alu12,acc3);
    acc3 = fma(alu13,alu13,acc3);
    acc3 = fma(alu14,alu14,acc3);
    acc3 = fma(alu15,alu15,acc3);
  }
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))] = acc0;
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)] = acc3;
}`;

const r_32_256_16n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,256>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(256) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 32 */
  let lidx1 = i32(lindex.x); /* 256 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (16); ridx0++) {
    var  val0 = f32(data1[(gidx0*(4096))+(lidx1*(16))+ridx0]);
    acc0 = (val0+acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (256); ridx1++) {
    var  val1 = f32(temp[ridx1]);
    acc1 = (val1+acc1);
  }
  data0[gidx0] = sqrt(((1.0f)/((acc1*(9.5367431640625e-07f))+(1e-05f))));
}`;

const E_64_1024_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 64 */
  let gidx1 = i32(gindex.x); /* 1024 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[gidx0/(2)]);
  var  val5 = f32(data3[gidx0/(2)]);
  var  val6 = f32(data4[(gidx0*(8))+lidx2]);
  var  val7 = f32(data5[(gidx0*(8))+lidx2]);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))] = (((val0-val4)*val5*val6)+val7);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)] = (((val1-val4)*val5*val6)+val7);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)] = (((val2-val4)*val5*val6)+val7);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)] = (((val3-val4)*val5*val6)+val7);
}`;

const E_64_1024_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 64 */
  let gidx1 = i32(gindex.x); /* 1024 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[gidx0/(2)]);
  var  val5 = f32(data3[gidx0/(2)]);
  var  val6 = f32(data4[(gidx0*(8))+lidx2]);
  var  val7 = f32(data5[(gidx0*(8))+lidx2]);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))] = ((1.0f)/((1.0f)+exp2(((((val0-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)] = ((1.0f)/((1.0f)+exp2(((((val1-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)] = ((1.0f)/((1.0f)+exp2(((((val2-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)] = ((1.0f)/((1.0f)+exp2(((((val3-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
}`;

const E_32768_256_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(256) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 32768 */
  let lidx1 = i32(lindex.x); /* 256 */
  var  val0 = f32(data1[(gidx0*(1024))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(1024))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(1024))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(1024))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(1024))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(1024))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(1024))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(1024))+(lidx1*(4))+(3)]);
  data0[(gidx0*(1024))+(lidx1*(4))] = (val0*val4);
  data0[(gidx0*(1024))+(lidx1*(4))+(1)] = (val1*val5);
  data0[(gidx0*(1024))+(lidx1*(4))+(2)] = (val2*val6);
  data0[(gidx0*(1024))+(lidx1*(4))+(3)] = (val3*val7);
}`;

const r_64_32_4_8_16_512_3_3_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 64 */
  let gidx1 = i32(gindex.y); /* 32 */
  let gidx2 = i32(gindex.x); /* 4 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (512); ridx0++) {
    var  alu0 = f32(((gidx2*((-64)))+(lidx4*((-4))))<(0));
    var  alu1 = f32(((gidx1*((-8)))+(lidx3*((-1))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+((-257))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+((-1))]), bool(alu0));
    var  alu2 = f32(((gidx1*(8))+lidx3)<(255));
    var  val2 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+(255)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+((-256))]), bool(alu1));
    var  val4 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))]);
    var  val5 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+(256)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+((-255))]), bool(alu1));
    var  val7 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+(257)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+((-254))]), bool(alu1));
    var  val10 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+(258)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+((-253))]), bool(alu1));
    var  val13 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+(259)]), bool(alu2));
    var  alu3 = f32(((gidx2*(64))+(lidx4*(4)))<(252));
    var  val15 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+((-252))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+(260)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx0*(18432))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4608)]);
    var  val28 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4611)]);
    var  val29 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4614)]);
    var  val30 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4609)]);
    var  val31 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4612)]);
    var  val32 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4615)]);
    var  val33 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4610)]);
    var  val34 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4613)]);
    var  val35 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(4616)]);
    var  val36 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9216)]);
    var  val37 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9219)]);
    var  val38 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9222)]);
    var  val39 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9217)]);
    var  val40 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9220)]);
    var  val41 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9223)]);
    var  val42 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9218)]);
    var  val43 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9221)]);
    var  val44 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(9224)]);
    var  val45 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13824)]);
    var  val46 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13827)]);
    var  val47 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13830)]);
    var  val48 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13825)]);
    var  val49 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13828)]);
    var  val50 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13831)]);
    var  val51 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13826)]);
    var  val52 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13829)]);
    var  val53 = f32(data2[(gidx0*(18432))+(ridx0*(9))+(13832)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))] = acc0;
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)] = acc3;
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(65536)] = acc4;
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(65537)] = acc5;
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(65538)] = acc6;
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(65539)] = acc7;
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(131072)] = acc8;
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(131073)] = acc9;
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(131074)] = acc10;
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(131075)] = acc11;
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(196608)] = acc12;
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(196609)] = acc13;
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(196610)] = acc14;
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(196611)] = acc15;
}`;

const r_4_128_8_16_64_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 128 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(4194304))+(gidx1*(4096))+(lidx2*(524288))+(lidx3*(256))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(4194304))+(gidx1*(4096))+(lidx2*(524288))+(lidx3*(256))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(4194304))+(gidx1*(4096))+(lidx2*(524288))+(lidx3*(256))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(4194304))+(gidx1*(4096))+(lidx2*(524288))+(lidx3*(256))+(ridx0*(4))+(3)]);
    var  val4 = f32(data2[(gidx0*(64))+(lidx2*(8))+(gidx1/(16))]);
    acc0 = (val0+val4+acc0);
    acc0 = (val1+val4+acc0);
    acc0 = (val2+val4+acc0);
    acc0 = (val3+val4+acc0);
  }
  data0[(gidx0*(16384))+(gidx1*(16))+(lidx2*(2048))+lidx3] = acc0;
}`;

const r_32_256_8 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,256>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(256) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 32 */
  let lidx1 = i32(lindex.x); /* 256 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (8); ridx0++) {
    var  val0 = f32(data1[(gidx0*(2048))+(lidx1*(8))+ridx0]);
    acc0 = (val0+acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (256); ridx1++) {
    var  val1 = f32(temp[ridx1]);
    acc1 = (val1+acc1);
  }
  data0[gidx0] = (acc1*(1.9073486328125e-06f));
}`;

const r_4_32_8_16_64_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 32 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))+(256)]);
    var  val5 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))+(257)]);
    var  val6 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))+(258)]);
    var  val7 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))+(259)]);
    var  val8 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))+(512)]);
    var  val9 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))+(513)]);
    var  val10 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))+(514)]);
    var  val11 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))+(515)]);
    var  val12 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))+(768)]);
    var  val13 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))+(769)]);
    var  val14 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))+(770)]);
    var  val15 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))+(771)]);
    var  val16 = f32(data2[(gidx0*(64))+(lidx2*(8))+(gidx1/(4))]);
    var  val17 = f32(data3[(gidx0*(8))+lidx2]);
    var  alu0 = ((val0+val16)-val17);
    var  alu1 = ((val1+val16)-val17);
    var  alu2 = ((val2+val16)-val17);
    var  alu3 = ((val3+val16)-val17);
    var  alu4 = ((val4+val16)-val17);
    var  alu5 = ((val5+val16)-val17);
    var  alu6 = ((val6+val16)-val17);
    var  alu7 = ((val7+val16)-val17);
    var  alu8 = ((val8+val16)-val17);
    var  alu9 = ((val9+val16)-val17);
    var  alu10 = ((val10+val16)-val17);
    var  alu11 = ((val11+val16)-val17);
    var  alu12 = ((val12+val16)-val17);
    var  alu13 = ((val13+val16)-val17);
    var  alu14 = ((val14+val16)-val17);
    var  alu15 = ((val15+val16)-val17);
    acc0 = fma(alu0,alu0,acc0);
    acc0 = fma(alu1,alu1,acc0);
    acc0 = fma(alu2,alu2,acc0);
    acc0 = fma(alu3,alu3,acc0);
    acc1 = fma(alu4,alu4,acc1);
    acc1 = fma(alu5,alu5,acc1);
    acc1 = fma(alu6,alu6,acc1);
    acc1 = fma(alu7,alu7,acc1);
    acc2 = fma(alu8,alu8,acc2);
    acc2 = fma(alu9,alu9,acc2);
    acc2 = fma(alu10,alu10,acc2);
    acc2 = fma(alu11,alu11,acc2);
    acc3 = fma(alu12,alu12,acc3);
    acc3 = fma(alu13,alu13,acc3);
    acc3 = fma(alu14,alu14,acc3);
    acc3 = fma(alu15,alu15,acc3);
  }
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2048))+(lidx3*(4))] = acc0;
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2048))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2048))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2048))+(lidx3*(4))+(3)] = acc3;
}`;

const r_32_256_8n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,256>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(256) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 32 */
  let lidx1 = i32(lindex.x); /* 256 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (8); ridx0++) {
    var  val0 = f32(data1[(gidx0*(2048))+(lidx1*(8))+ridx0]);
    acc0 = (val0+acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (256); ridx1++) {
    var  val1 = f32(temp[ridx1]);
    acc1 = (val1+acc1);
  }
  data0[gidx0] = sqrt(((1.0f)/((acc1*(1.9073486328125e-06f))+(1e-05f))));
}`;

const E_32_1024_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 32 */
  let gidx1 = i32(gindex.x); /* 1024 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(8))+lidx2]);
  var  val5 = f32(data3[gidx0]);
  var  val6 = f32(data4[gidx0]);
  var  val7 = f32(data5[(gidx0*(8))+lidx2]);
  var  val8 = f32(data6[(gidx0*(8))+lidx2]);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))] = ((((val0+val4)-val5)*val6*val7)+val8);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)] = ((((val1+val4)-val5)*val6*val7)+val8);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)] = ((((val2+val4)-val5)*val6*val7)+val8);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)] = ((((val3+val4)-val5)*val6*val7)+val8);
}`;

const E_32_1024_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 32 */
  let gidx1 = i32(gindex.x); /* 1024 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(8))+lidx2]);
  var  val5 = f32(data3[gidx0]);
  var  val6 = f32(data4[gidx0]);
  var  val7 = f32(data5[(gidx0*(8))+lidx2]);
  var  val8 = f32(data6[(gidx0*(8))+lidx2]);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))] = ((1.0f)/((1.0f)+exp2((((((val0+val4)-val5)*val6*val7)+val8)*((-1.4426950408889634f))))));
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)] = ((1.0f)/((1.0f)+exp2((((((val1+val4)-val5)*val6*val7)+val8)*((-1.4426950408889634f))))));
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)] = ((1.0f)/((1.0f)+exp2((((((val2+val4)-val5)*val6*val7)+val8)*((-1.4426950408889634f))))));
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)] = ((1.0f)/((1.0f)+exp2((((((val3+val4)-val5)*val6*val7)+val8)*((-1.4426950408889634f))))));
}`;

const E_32768_128_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(128) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 32768 */
  let lidx1 = i32(lindex.x); /* 128 */
  var  val0 = f32(data1[(gidx0*(512))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(512))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(512))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(512))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(512))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(512))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(512))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(512))+(lidx1*(4))+(3)]);
  data0[(gidx0*(512))+(lidx1*(4))] = (val0*val4);
  data0[(gidx0*(512))+(lidx1*(4))+(1)] = (val1*val5);
  data0[(gidx0*(512))+(lidx1*(4))+(2)] = (val2*val6);
  data0[(gidx0*(512))+(lidx1*(4))+(3)] = (val3*val7);
}`;

const r_64_32_4_8_16_256_3_3_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 64 */
  let gidx1 = i32(gindex.y); /* 32 */
  let gidx2 = i32(gindex.x); /* 4 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (256); ridx0++) {
    var  alu0 = f32(((gidx2*((-64)))+(lidx4*((-4))))<(0));
    var  alu1 = f32(((gidx1*((-8)))+(lidx3*((-1))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+((-257))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+((-1))]), bool(alu0));
    var  alu2 = f32(((gidx1*(8))+lidx3)<(255));
    var  val2 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+(255)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+((-256))]), bool(alu1));
    var  val4 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))]);
    var  val5 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+(256)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+((-255))]), bool(alu1));
    var  val7 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+(257)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+((-254))]), bool(alu1));
    var  val10 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+(258)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+((-253))]), bool(alu1));
    var  val13 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+(259)]), bool(alu2));
    var  alu3 = f32(((gidx2*(64))+(lidx4*(4)))<(252));
    var  val15 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+((-252))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+(260)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx0*(9216))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2304)]);
    var  val28 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2307)]);
    var  val29 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2310)]);
    var  val30 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2305)]);
    var  val31 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2308)]);
    var  val32 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2311)]);
    var  val33 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2306)]);
    var  val34 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2309)]);
    var  val35 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2312)]);
    var  val36 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4608)]);
    var  val37 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4611)]);
    var  val38 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4614)]);
    var  val39 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4609)]);
    var  val40 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4612)]);
    var  val41 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4615)]);
    var  val42 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4610)]);
    var  val43 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4613)]);
    var  val44 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4616)]);
    var  val45 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6912)]);
    var  val46 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6915)]);
    var  val47 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6918)]);
    var  val48 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6913)]);
    var  val49 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6916)]);
    var  val50 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6919)]);
    var  val51 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6914)]);
    var  val52 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6917)]);
    var  val53 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6920)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))] = acc0;
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)] = acc3;
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(65536)] = acc4;
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(65537)] = acc5;
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(65538)] = acc6;
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(65539)] = acc7;
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(131072)] = acc8;
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(131073)] = acc9;
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(131074)] = acc10;
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(131075)] = acc11;
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(196608)] = acc12;
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(196609)] = acc13;
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(196610)] = acc14;
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(196611)] = acc15;
}`;

const E_32_256_4_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 32 */
  let gidx1 = i32(gindex.y); /* 256 */
  let gidx2 = i32(gindex.x); /* 4 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(524288))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(524288))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(524288))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(524288))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(8))+(gidx1/(32))]);
  var  val5 = f32(data3[(gidx0*(524288))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))]);
  var  val6 = f32(data3[(gidx0*(524288))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)]);
  var  val7 = f32(data3[(gidx0*(524288))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)]);
  var  val8 = f32(data3[(gidx0*(524288))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)]);
  var  val9 = f32(data4[(gidx0*(8))+(gidx1/(32))]);
  data0[(gidx0*(524288))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))] = (val0+val4+(val5+val9));
  data0[(gidx0*(524288))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)] = (val1+val4+(val6+val9));
  data0[(gidx0*(524288))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)] = (val2+val4+(val7+val9));
  data0[(gidx0*(524288))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)] = (val3+val4+(val8+val9));
}`;

const r_2048_32_64_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 2048 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))+(3)]);
    acc0 = (val0+acc0);
    acc0 = (val1+acc0);
    acc0 = (val2+acc0);
    acc0 = (val3+acc0);
  }
  data0[(gidx0*(32))+lidx1] = acc0;
}`;

const E_4_8192_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 8192 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(4194304))+(gidx1*(64))+(lidx2*(524288))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(4194304))+(gidx1*(64))+(lidx2*(524288))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(4194304))+(gidx1*(64))+(lidx2*(524288))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(4194304))+(gidx1*(64))+(lidx2*(524288))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(64))+(lidx2*(8))+(gidx1/(1024))]);
  var  val5 = f32(data3[(gidx0*(4194304))+(gidx1*(64))+(lidx2*(524288))+(lidx3*(4))]);
  var  val6 = f32(data3[(gidx0*(4194304))+(gidx1*(64))+(lidx2*(524288))+(lidx3*(4))+(1)]);
  var  val7 = f32(data3[(gidx0*(4194304))+(gidx1*(64))+(lidx2*(524288))+(lidx3*(4))+(2)]);
  var  val8 = f32(data3[(gidx0*(4194304))+(gidx1*(64))+(lidx2*(524288))+(lidx3*(4))+(3)]);
  var  val9 = f32(data4[(gidx0*(64))+(lidx2*(8))+(gidx1/(1024))]);
  var  val10 = f32(data5[(gidx0*(8))+lidx2]);
  data0[(gidx0*(4194304))+(gidx1*(64))+(lidx2*(524288))+(lidx3*(4))] = ((val0+val4+(val5+val9))-val10);
  data0[(gidx0*(4194304))+(gidx1*(64))+(lidx2*(524288))+(lidx3*(4))+(1)] = ((val1+val4+(val6+val9))-val10);
  data0[(gidx0*(4194304))+(gidx1*(64))+(lidx2*(524288))+(lidx3*(4))+(2)] = ((val2+val4+(val7+val9))-val10);
  data0[(gidx0*(4194304))+(gidx1*(64))+(lidx2*(524288))+(lidx3*(4))+(3)] = ((val3+val4+(val8+val9))-val10);
}`;

const r_4096_4_8_32_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,128>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(8,4) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 4096 */
  let lidx1 = i32(lindex.y); /* 4 */
  let lidx2 = i32(lindex.x); /* 8 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (32); ridx0++) {
    var  val0 = f32(data1[(gidx0*(4096))+(lidx1*(256))+lidx2+(ridx0*(8))]);
    var  val1 = f32(data1[(gidx0*(4096))+(lidx1*(256))+lidx2+(ridx0*(8))+(1024)]);
    var  val2 = f32(data1[(gidx0*(4096))+(lidx1*(256))+lidx2+(ridx0*(8))+(2048)]);
    var  val3 = f32(data1[(gidx0*(4096))+(lidx1*(256))+lidx2+(ridx0*(8))+(3072)]);
    acc0 = fma(val0,val0,acc0);
    acc1 = fma(val1,val1,acc1);
    acc2 = fma(val2,val2,acc2);
    acc3 = fma(val3,val3,acc3);
  }
  temp[(lidx1*(32))+(lidx2*(4))] = acc0;
  temp[(lidx1*(32))+(lidx2*(4))+(1)] = acc1;
  temp[(lidx1*(32))+(lidx2*(4))+(2)] = acc2;
  temp[(lidx1*(32))+(lidx2*(4))+(3)] = acc3;
  workgroupBarrier();
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  for(var ridx1 = (0); ridx1 < (8); ridx1++) {
    var  val4 = f32(temp[(lidx1*(32))+(ridx1*(4))]);
    var  val5 = f32(temp[(lidx1*(32))+(ridx1*(4))+(1)]);
    var  val6 = f32(temp[(lidx1*(32))+(ridx1*(4))+(2)]);
    var  val7 = f32(temp[(lidx1*(32))+(ridx1*(4))+(3)]);
    acc4 = (val4+acc4);
    acc5 = (val5+acc5);
    acc6 = (val6+acc6);
    acc7 = (val7+acc7);
  }
  data0[(gidx0*(16))+lidx1] = acc4;
  data0[(gidx0*(16))+lidx1+(4)] = acc5;
  data0[(gidx0*(16))+lidx1+(8)] = acc6;
  data0[(gidx0*(16))+lidx1+(12)] = acc7;
}`;

const E_32_1024_8_16_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 32 */
  let gidx1 = i32(gindex.x); /* 1024 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[gidx0]);
  var  val5 = f32(data3[(gidx0*(8))+lidx2]);
  var  val6 = f32(data4[(gidx0*(8))+lidx2]);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))] = ((val0*val4*val5)+val6);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)] = ((val1*val4*val5)+val6);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)] = ((val2*val4*val5)+val6);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)] = ((val3*val4*val5)+val6);
}`;

const E_32_1024_8_16_4n3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 32 */
  let gidx1 = i32(gindex.x); /* 1024 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[gidx0]);
  var  val5 = f32(data3[(gidx0*(8))+lidx2]);
  var  val6 = f32(data4[(gidx0*(8))+lidx2]);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))] = ((1.0f)/((1.0f)+exp2((((val0*val4*val5)+val6)*((-1.4426950408889634f))))));
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)] = ((1.0f)/((1.0f)+exp2((((val1*val4*val5)+val6)*((-1.4426950408889634f))))));
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)] = ((1.0f)/((1.0f)+exp2((((val2*val4*val5)+val6)*((-1.4426950408889634f))))));
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)] = ((1.0f)/((1.0f)+exp2((((val3*val4*val5)+val6)*((-1.4426950408889634f))))));
}`;

const E_32_1024_8_16_4n4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 32 */
  let gidx1 = i32(gindex.x); /* 1024 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(8))+lidx2]);
  var  val5 = f32(data3[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))]);
  var  val6 = f32(data3[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)]);
  var  val7 = f32(data3[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)]);
  var  val8 = f32(data3[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)]);
  var  val9 = f32(data4[(gidx0*(8))+lidx2]);
  var  val10 = f32(data5[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))]);
  var  val11 = f32(data5[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)]);
  var  val12 = f32(data5[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)]);
  var  val13 = f32(data5[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)]);
  var  val14 = f32(data6[(gidx0*(8))+lidx2]);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))] = (val0+val4+(val5+val9)+(val10+val14));
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)] = (val1+val4+(val6+val9)+(val11+val14));
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)] = (val2+val4+(val7+val9)+(val12+val14));
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)] = (val3+val4+(val8+val9)+(val13+val14));
}`;

const E_4_8192_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 8192 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(4194304))+(gidx1*(64))+(lidx2*(524288))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(4194304))+(gidx1*(64))+(lidx2*(524288))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(4194304))+(gidx1*(64))+(lidx2*(524288))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(4194304))+(gidx1*(64))+(lidx2*(524288))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(64))+(lidx2*(8))+(gidx1/(1024))]);
  var  val5 = f32(data3[(gidx0*(4194304))+(gidx1*(64))+(lidx2*(524288))+(lidx3*(4))]);
  var  val6 = f32(data3[(gidx0*(4194304))+(gidx1*(64))+(lidx2*(524288))+(lidx3*(4))+(1)]);
  var  val7 = f32(data3[(gidx0*(4194304))+(gidx1*(64))+(lidx2*(524288))+(lidx3*(4))+(2)]);
  var  val8 = f32(data3[(gidx0*(4194304))+(gidx1*(64))+(lidx2*(524288))+(lidx3*(4))+(3)]);
  var  val9 = f32(data4[(gidx0*(64))+(lidx2*(8))+(gidx1/(1024))]);
  var  val10 = f32(data5[(gidx0*(4194304))+(gidx1*(64))+(lidx2*(524288))+(lidx3*(4))]);
  var  val11 = f32(data5[(gidx0*(4194304))+(gidx1*(64))+(lidx2*(524288))+(lidx3*(4))+(1)]);
  var  val12 = f32(data5[(gidx0*(4194304))+(gidx1*(64))+(lidx2*(524288))+(lidx3*(4))+(2)]);
  var  val13 = f32(data5[(gidx0*(4194304))+(gidx1*(64))+(lidx2*(524288))+(lidx3*(4))+(3)]);
  var  val14 = f32(data6[(gidx0*(64))+(lidx2*(8))+(gidx1/(1024))]);
  data0[(gidx0*(4194304))+(gidx1*(64))+(lidx2*(524288))+(lidx3*(4))] = (val0+val4+(val5+val9)+(val10+val14));
  data0[(gidx0*(4194304))+(gidx1*(64))+(lidx2*(524288))+(lidx3*(4))+(1)] = (val1+val4+(val6+val9)+(val11+val14));
  data0[(gidx0*(4194304))+(gidx1*(64))+(lidx2*(524288))+(lidx3*(4))+(2)] = (val2+val4+(val7+val9)+(val12+val14));
  data0[(gidx0*(4194304))+(gidx1*(64))+(lidx2*(524288))+(lidx3*(4))+(3)] = (val3+val4+(val8+val9)+(val13+val14));
}`;

const r_4_128_8_16_64_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 128 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(4194304))+(gidx1*(4096))+(lidx2*(524288))+(lidx3*(256))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(4194304))+(gidx1*(4096))+(lidx2*(524288))+(lidx3*(256))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(4194304))+(gidx1*(4096))+(lidx2*(524288))+(lidx3*(256))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(4194304))+(gidx1*(4096))+(lidx2*(524288))+(lidx3*(256))+(ridx0*(4))+(3)]);
    var  val4 = f32(data2[(gidx0*(4194304))+(gidx1*(4096))+(lidx2*(524288))+(lidx3*(256))+(ridx0*(4))]);
    var  val5 = f32(data2[(gidx0*(4194304))+(gidx1*(4096))+(lidx2*(524288))+(lidx3*(256))+(ridx0*(4))+(1)]);
    var  val6 = f32(data2[(gidx0*(4194304))+(gidx1*(4096))+(lidx2*(524288))+(lidx3*(256))+(ridx0*(4))+(2)]);
    var  val7 = f32(data2[(gidx0*(4194304))+(gidx1*(4096))+(lidx2*(524288))+(lidx3*(256))+(ridx0*(4))+(3)]);
    var  val8 = f32(data3[(gidx0*(64))+(lidx2*(8))+(gidx1/(16))]);
    acc0 = (val0+(val4+val8)+acc0);
    acc0 = (val1+(val5+val8)+acc0);
    acc0 = (val2+(val6+val8)+acc0);
    acc0 = (val3+(val7+val8)+acc0);
  }
  data0[(gidx0*(16384))+(gidx1*(16))+(lidx2*(2048))+lidx3] = acc0;
}`;

const r_4_32_8_16_64_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 32 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))+(256)]);
    var  val5 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))+(257)]);
    var  val6 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))+(258)]);
    var  val7 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))+(259)]);
    var  val8 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))+(512)]);
    var  val9 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))+(513)]);
    var  val10 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))+(514)]);
    var  val11 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))+(515)]);
    var  val12 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))+(768)]);
    var  val13 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))+(769)]);
    var  val14 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))+(770)]);
    var  val15 = f32(data1[(gidx0*(4194304))+(gidx1*(16384))+(lidx2*(524288))+(lidx3*(1024))+(ridx0*(4))+(771)]);
    var  val16 = f32(data2[(gidx0*(8))+lidx2]);
    var  alu0 = (val0-val16);
    var  alu1 = (val1-val16);
    var  alu2 = (val2-val16);
    var  alu3 = (val3-val16);
    var  alu4 = (val4-val16);
    var  alu5 = (val5-val16);
    var  alu6 = (val6-val16);
    var  alu7 = (val7-val16);
    var  alu8 = (val8-val16);
    var  alu9 = (val9-val16);
    var  alu10 = (val10-val16);
    var  alu11 = (val11-val16);
    var  alu12 = (val12-val16);
    var  alu13 = (val13-val16);
    var  alu14 = (val14-val16);
    var  alu15 = (val15-val16);
    acc0 = fma(alu0,alu0,acc0);
    acc0 = fma(alu1,alu1,acc0);
    acc0 = fma(alu2,alu2,acc0);
    acc0 = fma(alu3,alu3,acc0);
    acc1 = fma(alu4,alu4,acc1);
    acc1 = fma(alu5,alu5,acc1);
    acc1 = fma(alu6,alu6,acc1);
    acc1 = fma(alu7,alu7,acc1);
    acc2 = fma(alu8,alu8,acc2);
    acc2 = fma(alu9,alu9,acc2);
    acc2 = fma(alu10,alu10,acc2);
    acc2 = fma(alu11,alu11,acc2);
    acc3 = fma(alu12,alu12,acc3);
    acc3 = fma(alu13,alu13,acc3);
    acc3 = fma(alu14,alu14,acc3);
    acc3 = fma(alu15,alu15,acc3);
  }
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2048))+(lidx3*(4))] = acc0;
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2048))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2048))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(16384))+(gidx1*(64))+(lidx2*(2048))+(lidx3*(4))+(3)] = acc3;
}`;

const E_32_1024_8_16_4n5 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 32 */
  let gidx1 = i32(gindex.x); /* 1024 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[gidx0]);
  var  val5 = f32(data3[gidx0]);
  var  val6 = f32(data4[(gidx0*(8))+lidx2]);
  var  val7 = f32(data5[(gidx0*(8))+lidx2]);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))] = (((val0-val4)*val5*val6)+val7);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)] = (((val1-val4)*val5*val6)+val7);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)] = (((val2-val4)*val5*val6)+val7);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)] = (((val3-val4)*val5*val6)+val7);
}`;

const E_32_1024_8_16_4n6 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 32 */
  let gidx1 = i32(gindex.x); /* 1024 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[gidx0]);
  var  val5 = f32(data3[gidx0]);
  var  val6 = f32(data4[(gidx0*(8))+lidx2]);
  var  val7 = f32(data5[(gidx0*(8))+lidx2]);
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))] = ((1.0f)/((1.0f)+exp2(((((val0-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(1)] = ((1.0f)/((1.0f)+exp2(((((val1-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(2)] = ((1.0f)/((1.0f)+exp2(((((val2-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(524288))+(gidx1*(64))+(lidx2*(65536))+(lidx3*(4))+(3)] = ((1.0f)/((1.0f)+exp2(((((val3-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
}`;

const r_64_32_4_8_16_256_3_3_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 64 */
  let gidx1 = i32(gindex.y); /* 32 */
  let gidx2 = i32(gindex.x); /* 4 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (256); ridx0++) {
    var  alu0 = f32(((gidx2*((-64)))+(lidx4*((-4))))<(0));
    var  alu1 = f32(((gidx1*((-8)))+(lidx3*((-1))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+((-257))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+((-1))]), bool(alu0));
    var  alu2 = f32(((gidx1*(8))+lidx3)<(255));
    var  val2 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+(255)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+((-256))]), bool(alu1));
    var  val4 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))]);
    var  val5 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+(256)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+((-255))]), bool(alu1));
    var  val7 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+(257)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+((-254))]), bool(alu1));
    var  val10 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+(258)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+((-253))]), bool(alu1));
    var  val13 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+(259)]), bool(alu2));
    var  alu3 = f32(((gidx2*(64))+(lidx4*(4)))<(252));
    var  val15 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+((-252))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(2048))+(lidx3*(256))+(ridx0*(65536))+(260)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx0*(9216))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2304)]);
    var  val28 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2307)]);
    var  val29 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2310)]);
    var  val30 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2305)]);
    var  val31 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2308)]);
    var  val32 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2311)]);
    var  val33 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2306)]);
    var  val34 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2309)]);
    var  val35 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2312)]);
    var  val36 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4608)]);
    var  val37 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4611)]);
    var  val38 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4614)]);
    var  val39 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4609)]);
    var  val40 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4612)]);
    var  val41 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4615)]);
    var  val42 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4610)]);
    var  val43 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4613)]);
    var  val44 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4616)]);
    var  val45 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6912)]);
    var  val46 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6915)]);
    var  val47 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6918)]);
    var  val48 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6913)]);
    var  val49 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6916)]);
    var  val50 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6919)]);
    var  val51 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6914)]);
    var  val52 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6917)]);
    var  val53 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6920)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  var  val54 = f32(data3[gidx0*(4)]);
  var  val55 = f32(data3[(gidx0*(4))+(1)]);
  var  val56 = f32(data3[(gidx0*(4))+(2)]);
  var  val57 = f32(data3[(gidx0*(4))+(3)]);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))] = (acc0+val54);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)] = (acc1+val54);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)] = (acc2+val54);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)] = (acc3+val54);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(65536)] = (acc4+val55);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(65537)] = (acc5+val55);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(65538)] = (acc6+val55);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(65539)] = (acc7+val55);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(131072)] = (acc8+val56);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(131073)] = (acc9+val56);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(131074)] = (acc10+val56);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(131075)] = (acc11+val56);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(196608)] = (acc12+val57);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(196609)] = (acc13+val57);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(196610)] = (acc14+val57);
  data0[(gidx0*(262144))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(196611)] = (acc15+val57);
}`;

const E_32768_128_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(128) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 32768 */
  let lidx1 = i32(lindex.x); /* 128 */
  var  val0 = f32(data1[(gidx0*(512))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(512))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(512))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(512))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(512))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(512))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(512))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(512))+(lidx1*(4))+(3)]);
  data0[(gidx0*(512))+(lidx1*(4))] = (val0+val4);
  data0[(gidx0*(512))+(lidx1*(4))+(1)] = (val1+val5);
  data0[(gidx0*(512))+(lidx1*(4))+(2)] = (val2+val6);
  data0[(gidx0*(512))+(lidx1*(4))+(3)] = (val3+val7);
}`;

const r_64_64_8_8_16_256_3_3_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 64 */
  let gidx1 = i32(gindex.y); /* 64 */
  let gidx2 = i32(gindex.x); /* 8 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (256); ridx0++) {
    var  alu0 = f32(((gidx2*((-64)))+(lidx4*((-4))))<(0));
    var  alu1 = f32(((gidx1*((-8)))+(lidx3*((-1))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(((gidx2*(32))+(lidx4*(2))+(255))%(256))+((((gidx1*(4))+(ridx0*(256))+((lidx3+((gidx2+((lidx4+(15))/(16))+(7))/(8)))/(2))+(65535))%(65536))*(256))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(((gidx2*(32))+(lidx4*(2))+(255))%(256))+((((gidx1*(4))+(ridx0*(256))+((lidx3+((gidx2+((lidx4+(15))/(16))+(7))/(8))+(1))/(2))+(65535))%(65536))*(256))]), bool(alu0));
    var  alu2 = f32(((gidx1*(8))+lidx3)<(511));
    var  val2 = select(f32((0.0f)), f32(data1[(((gidx2*(32))+(lidx4*(2))+(255))%(256))+((((gidx1*(4))+(ridx0*(256))+((lidx3+((gidx2+((lidx4+(15))/(16))+(7))/(8)))/(2)))%(65536))*(256))]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(gidx2*(32))+(lidx4*(2))+((((gidx1*(4))+(ridx0*(256))+((lidx3+(1))/(2))+(65535))%(65536))*(256))]), bool(alu1));
    var  val4 = f32(data1[(gidx2*(32))+(lidx4*(2))+(gidx1*(1024))+(ridx0*(65536))+((lidx3/(2))*(256))]);
    var  val5 = select(f32((0.0f)), f32(data1[(gidx2*(32))+(lidx4*(2))+((((gidx1*(4))+(ridx0*(256))+((lidx3+(3))/(2))+(65535))%(65536))*(256))]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(gidx2*(32))+(lidx4*(2))+((((gidx1*(4))+(ridx0*(256))+((lidx3+(1))/(2))+(65535))%(65536))*(256))+(1)]), bool(alu1));
    var  val7 = f32(data1[(gidx2*(32))+(lidx4*(2))+(gidx1*(1024))+(ridx0*(65536))+((lidx3/(2))*(256))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(gidx2*(32))+(lidx4*(2))+((((gidx1*(4))+(ridx0*(256))+((lidx3+(3))/(2))+(65535))%(65536))*(256))+(1)]), bool(alu2));
    var  alu3 = f32(((gidx2*(64))+(lidx4*(4)))<(508));
    var  val9 = select(f32((0.0f)), f32(data1[(((gidx2*(32))+(lidx4*(2))+(2))%(256))+((((gidx1*(4))+(ridx0*(256))+((lidx3+((gidx2+((lidx4+(17))/(16))+(7))/(8)))/(2))+(65535))%(65536))*(256))]), bool((alu3*alu1)));
    var  val10 = select(f32((0.0f)), f32(data1[(((gidx2*(32))+(lidx4*(2))+(2))%(256))+((((gidx1*(4))+(ridx0*(256))+((lidx3+((gidx2+((lidx4+(17))/(16))+(7))/(8))+(1))/(2))+(65535))%(65536))*(256))]), bool(alu3));
    var  val11 = select(f32((0.0f)), f32(data1[(((gidx2*(32))+(lidx4*(2))+(2))%(256))+((((gidx1*(4))+(ridx0*(256))+((lidx3+((gidx2+((lidx4+(17))/(16))+(7))/(8)))/(2)))%(65536))*(256))]), bool((alu3*alu2)));
    var  val12 = f32(data2[(gidx0*(9216))+(ridx0*(9))]);
    var  val13 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(3)]);
    var  val14 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6)]);
    var  val15 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(1)]);
    var  val16 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4)]);
    var  val17 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(7)]);
    var  val18 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2)]);
    var  val19 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(5)]);
    var  val20 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(8)]);
    var  val21 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2304)]);
    var  val22 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2307)]);
    var  val23 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2310)]);
    var  val24 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2305)]);
    var  val25 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2308)]);
    var  val26 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2311)]);
    var  val27 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2306)]);
    var  val28 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2309)]);
    var  val29 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2312)]);
    var  val30 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4608)]);
    var  val31 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4611)]);
    var  val32 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4614)]);
    var  val33 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4609)]);
    var  val34 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4612)]);
    var  val35 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4615)]);
    var  val36 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4610)]);
    var  val37 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4613)]);
    var  val38 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4616)]);
    var  val39 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6912)]);
    var  val40 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6915)]);
    var  val41 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6918)]);
    var  val42 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6913)]);
    var  val43 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6916)]);
    var  val44 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6919)]);
    var  val45 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6914)]);
    var  val46 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6917)]);
    var  val47 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6920)]);
    acc0 = fma(val0,val12,acc0);
    acc0 = fma(val1,val13,acc0);
    acc0 = fma(val2,val14,acc0);
    acc0 = fma(val3,val15,acc0);
    acc0 = fma(val4,val16,acc0);
    acc0 = fma(val5,val17,acc0);
    acc0 = fma(val3,val18,acc0);
    acc0 = fma(val4,val19,acc0);
    acc0 = fma(val5,val20,acc0);
    acc1 = fma(val3,val12,acc1);
    acc1 = fma(val4,val13,acc1);
    acc1 = fma(val5,val14,acc1);
    acc1 = fma(val3,val15,acc1);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc1 = fma(val8,val20,acc1);
    acc2 = fma(val3,val12,acc2);
    acc2 = fma(val4,val13,acc2);
    acc2 = fma(val5,val14,acc2);
    acc2 = fma(val6,val15,acc2);
    acc2 = fma(val7,val16,acc2);
    acc2 = fma(val8,val17,acc2);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc3 = fma(val6,val12,acc3);
    acc3 = fma(val7,val13,acc3);
    acc3 = fma(val8,val14,acc3);
    acc3 = fma(val6,val15,acc3);
    acc3 = fma(val7,val16,acc3);
    acc3 = fma(val8,val17,acc3);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc4 = fma(val0,val21,acc4);
    acc4 = fma(val1,val22,acc4);
    acc4 = fma(val2,val23,acc4);
    acc4 = fma(val3,val24,acc4);
    acc4 = fma(val4,val25,acc4);
    acc4 = fma(val5,val26,acc4);
    acc4 = fma(val3,val27,acc4);
    acc4 = fma(val4,val28,acc4);
    acc4 = fma(val5,val29,acc4);
    acc5 = fma(val3,val21,acc5);
    acc5 = fma(val4,val22,acc5);
    acc5 = fma(val5,val23,acc5);
    acc5 = fma(val3,val24,acc5);
    acc5 = fma(val4,val25,acc5);
    acc5 = fma(val5,val26,acc5);
    acc5 = fma(val6,val27,acc5);
    acc5 = fma(val7,val28,acc5);
    acc5 = fma(val8,val29,acc5);
    acc6 = fma(val3,val21,acc6);
    acc6 = fma(val4,val22,acc6);
    acc6 = fma(val5,val23,acc6);
    acc6 = fma(val6,val24,acc6);
    acc6 = fma(val7,val25,acc6);
    acc6 = fma(val8,val26,acc6);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc7 = fma(val6,val21,acc7);
    acc7 = fma(val7,val22,acc7);
    acc7 = fma(val8,val23,acc7);
    acc7 = fma(val6,val24,acc7);
    acc7 = fma(val7,val25,acc7);
    acc7 = fma(val8,val26,acc7);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc8 = fma(val0,val30,acc8);
    acc8 = fma(val1,val31,acc8);
    acc8 = fma(val2,val32,acc8);
    acc8 = fma(val3,val33,acc8);
    acc8 = fma(val4,val34,acc8);
    acc8 = fma(val5,val35,acc8);
    acc8 = fma(val3,val36,acc8);
    acc8 = fma(val4,val37,acc8);
    acc8 = fma(val5,val38,acc8);
    acc9 = fma(val3,val30,acc9);
    acc9 = fma(val4,val31,acc9);
    acc9 = fma(val5,val32,acc9);
    acc9 = fma(val3,val33,acc9);
    acc9 = fma(val4,val34,acc9);
    acc9 = fma(val5,val35,acc9);
    acc9 = fma(val6,val36,acc9);
    acc9 = fma(val7,val37,acc9);
    acc9 = fma(val8,val38,acc9);
    acc10 = fma(val3,val30,acc10);
    acc10 = fma(val4,val31,acc10);
    acc10 = fma(val5,val32,acc10);
    acc10 = fma(val6,val33,acc10);
    acc10 = fma(val7,val34,acc10);
    acc10 = fma(val8,val35,acc10);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc11 = fma(val6,val30,acc11);
    acc11 = fma(val7,val31,acc11);
    acc11 = fma(val8,val32,acc11);
    acc11 = fma(val6,val33,acc11);
    acc11 = fma(val7,val34,acc11);
    acc11 = fma(val8,val35,acc11);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc12 = fma(val0,val39,acc12);
    acc12 = fma(val1,val40,acc12);
    acc12 = fma(val2,val41,acc12);
    acc12 = fma(val3,val42,acc12);
    acc12 = fma(val4,val43,acc12);
    acc12 = fma(val5,val44,acc12);
    acc12 = fma(val3,val45,acc12);
    acc12 = fma(val4,val46,acc12);
    acc12 = fma(val5,val47,acc12);
    acc13 = fma(val3,val39,acc13);
    acc13 = fma(val4,val40,acc13);
    acc13 = fma(val5,val41,acc13);
    acc13 = fma(val3,val42,acc13);
    acc13 = fma(val4,val43,acc13);
    acc13 = fma(val5,val44,acc13);
    acc13 = fma(val6,val45,acc13);
    acc13 = fma(val7,val46,acc13);
    acc13 = fma(val8,val47,acc13);
    acc14 = fma(val3,val39,acc14);
    acc14 = fma(val4,val40,acc14);
    acc14 = fma(val5,val41,acc14);
    acc14 = fma(val6,val42,acc14);
    acc14 = fma(val7,val43,acc14);
    acc14 = fma(val8,val44,acc14);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc15 = fma(val6,val39,acc15);
    acc15 = fma(val7,val40,acc15);
    acc15 = fma(val8,val41,acc15);
    acc15 = fma(val6,val42,acc15);
    acc15 = fma(val7,val43,acc15);
    acc15 = fma(val8,val44,acc15);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
  }
  var  val48 = f32(data3[gidx0*(4)]);
  var  val49 = f32(data3[(gidx0*(4))+(1)]);
  var  val50 = f32(data3[(gidx0*(4))+(2)]);
  var  val51 = f32(data3[(gidx0*(4))+(3)]);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))] = (acc0+val48);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(1)] = (acc1+val48);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(2)] = (acc2+val48);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(3)] = (acc3+val48);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(262144)] = (acc4+val49);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(262145)] = (acc5+val49);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(262146)] = (acc6+val49);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(262147)] = (acc7+val49);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(524288)] = (acc8+val50);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(524289)] = (acc9+val50);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(524290)] = (acc10+val50);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(524291)] = (acc11+val50);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(786432)] = (acc12+val51);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(786433)] = (acc13+val51);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(786434)] = (acc14+val51);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(786435)] = (acc15+val51);
}`;

const r_4_4096_8_16_64_4_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 4096 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(1048576))]);
    var  val1 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(1048576))+(262144)]);
    var  val2 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(1048576))+(524288)]);
    var  val3 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(1048576))+(786432)]);
    var  val4 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(1048576))+(1)]);
    var  val5 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(1048576))+(262145)]);
    var  val6 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(1048576))+(524289)]);
    var  val7 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(1048576))+(786433)]);
    var  val8 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(1048576))+(2)]);
    var  val9 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(1048576))+(262146)]);
    var  val10 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(1048576))+(524290)]);
    var  val11 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(1048576))+(786434)]);
    var  val12 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(1048576))+(3)]);
    var  val13 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(1048576))+(262147)]);
    var  val14 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(1048576))+(524291)]);
    var  val15 = f32(data1[(gidx1*(64))+(lidx3*(4))+(ridx0*(1048576))+(786435)]);
    var  val16 = f32(data2[(gidx0*(8192))+(lidx2*(1024))+(ridx0*(4))]);
    var  val17 = f32(data2[(gidx0*(8192))+(lidx2*(1024))+(ridx0*(4))+(1)]);
    var  val18 = f32(data2[(gidx0*(8192))+(lidx2*(1024))+(ridx0*(4))+(2)]);
    var  val19 = f32(data2[(gidx0*(8192))+(lidx2*(1024))+(ridx0*(4))+(3)]);
    var  val20 = f32(data2[(gidx0*(8192))+(lidx2*(1024))+(ridx0*(4))+(256)]);
    var  val21 = f32(data2[(gidx0*(8192))+(lidx2*(1024))+(ridx0*(4))+(257)]);
    var  val22 = f32(data2[(gidx0*(8192))+(lidx2*(1024))+(ridx0*(4))+(258)]);
    var  val23 = f32(data2[(gidx0*(8192))+(lidx2*(1024))+(ridx0*(4))+(259)]);
    var  val24 = f32(data2[(gidx0*(8192))+(lidx2*(1024))+(ridx0*(4))+(512)]);
    var  val25 = f32(data2[(gidx0*(8192))+(lidx2*(1024))+(ridx0*(4))+(513)]);
    var  val26 = f32(data2[(gidx0*(8192))+(lidx2*(1024))+(ridx0*(4))+(514)]);
    var  val27 = f32(data2[(gidx0*(8192))+(lidx2*(1024))+(ridx0*(4))+(515)]);
    var  val28 = f32(data2[(gidx0*(8192))+(lidx2*(1024))+(ridx0*(4))+(768)]);
    var  val29 = f32(data2[(gidx0*(8192))+(lidx2*(1024))+(ridx0*(4))+(769)]);
    var  val30 = f32(data2[(gidx0*(8192))+(lidx2*(1024))+(ridx0*(4))+(770)]);
    var  val31 = f32(data2[(gidx0*(8192))+(lidx2*(1024))+(ridx0*(4))+(771)]);
    acc0 = fma(val0,val16,acc0);
    acc0 = fma(val1,val17,acc0);
    acc0 = fma(val2,val18,acc0);
    acc0 = fma(val3,val19,acc0);
    acc1 = fma(val4,val16,acc1);
    acc1 = fma(val5,val17,acc1);
    acc1 = fma(val6,val18,acc1);
    acc1 = fma(val7,val19,acc1);
    acc2 = fma(val8,val16,acc2);
    acc2 = fma(val9,val17,acc2);
    acc2 = fma(val10,val18,acc2);
    acc2 = fma(val11,val19,acc2);
    acc3 = fma(val12,val16,acc3);
    acc3 = fma(val13,val17,acc3);
    acc3 = fma(val14,val18,acc3);
    acc3 = fma(val15,val19,acc3);
    acc4 = fma(val0,val20,acc4);
    acc4 = fma(val1,val21,acc4);
    acc4 = fma(val2,val22,acc4);
    acc4 = fma(val3,val23,acc4);
    acc5 = fma(val4,val20,acc5);
    acc5 = fma(val5,val21,acc5);
    acc5 = fma(val6,val22,acc5);
    acc5 = fma(val7,val23,acc5);
    acc6 = fma(val8,val20,acc6);
    acc6 = fma(val9,val21,acc6);
    acc6 = fma(val10,val22,acc6);
    acc6 = fma(val11,val23,acc6);
    acc7 = fma(val12,val20,acc7);
    acc7 = fma(val13,val21,acc7);
    acc7 = fma(val14,val22,acc7);
    acc7 = fma(val15,val23,acc7);
    acc8 = fma(val0,val24,acc8);
    acc8 = fma(val1,val25,acc8);
    acc8 = fma(val2,val26,acc8);
    acc8 = fma(val3,val27,acc8);
    acc9 = fma(val4,val24,acc9);
    acc9 = fma(val5,val25,acc9);
    acc9 = fma(val6,val26,acc9);
    acc9 = fma(val7,val27,acc9);
    acc10 = fma(val8,val24,acc10);
    acc10 = fma(val9,val25,acc10);
    acc10 = fma(val10,val26,acc10);
    acc10 = fma(val11,val27,acc10);
    acc11 = fma(val12,val24,acc11);
    acc11 = fma(val13,val25,acc11);
    acc11 = fma(val14,val26,acc11);
    acc11 = fma(val15,val27,acc11);
    acc12 = fma(val0,val28,acc12);
    acc12 = fma(val1,val29,acc12);
    acc12 = fma(val2,val30,acc12);
    acc12 = fma(val3,val31,acc12);
    acc13 = fma(val4,val28,acc13);
    acc13 = fma(val5,val29,acc13);
    acc13 = fma(val6,val30,acc13);
    acc13 = fma(val7,val31,acc13);
    acc14 = fma(val8,val28,acc14);
    acc14 = fma(val9,val29,acc14);
    acc14 = fma(val10,val30,acc14);
    acc14 = fma(val11,val31,acc14);
    acc15 = fma(val12,val28,acc15);
    acc15 = fma(val13,val29,acc15);
    acc15 = fma(val14,val30,acc15);
    acc15 = fma(val15,val31,acc15);
  }
  data0[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))] = acc0;
  data0[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(3)] = acc3;
  data0[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(262144)] = acc4;
  data0[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(262145)] = acc5;
  data0[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(262146)] = acc6;
  data0[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(262147)] = acc7;
  data0[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(524288)] = acc8;
  data0[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(524289)] = acc9;
  data0[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(524290)] = acc10;
  data0[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(524291)] = acc11;
  data0[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(786432)] = acc12;
  data0[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(786433)] = acc13;
  data0[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(786434)] = acc14;
  data0[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(786435)] = acc15;
}`;

const r_8192_32_64_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 8192 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(8192))+(lidx1*(256))+(ridx0*(4))+(3)]);
    acc0 = (val0+acc0);
    acc0 = (val1+acc0);
    acc0 = (val2+acc0);
    acc0 = (val3+acc0);
  }
  data0[(gidx0*(32))+lidx1] = acc0;
}`;

const r_32_256_32 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,256>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(256) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 32 */
  let lidx1 = i32(lindex.x); /* 256 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (32); ridx0++) {
    var  val0 = f32(data1[(gidx0*(8192))+(lidx1*(32))+ridx0]);
    acc0 = (val0+acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (256); ridx1++) {
    var  val1 = f32(temp[ridx1]);
    acc1 = (val1+acc1);
  }
  data0[gidx0] = (acc1*(4.76837158203125e-07f));
}`;

const r_4_128_8_16_64_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 128 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(16777216))+(gidx1*(16384))+(lidx2*(2097152))+(lidx3*(1024))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(16777216))+(gidx1*(16384))+(lidx2*(2097152))+(lidx3*(1024))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(16777216))+(gidx1*(16384))+(lidx2*(2097152))+(lidx3*(1024))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(16777216))+(gidx1*(16384))+(lidx2*(2097152))+(lidx3*(1024))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(16777216))+(gidx1*(16384))+(lidx2*(2097152))+(lidx3*(1024))+(ridx0*(4))+(256)]);
    var  val5 = f32(data1[(gidx0*(16777216))+(gidx1*(16384))+(lidx2*(2097152))+(lidx3*(1024))+(ridx0*(4))+(257)]);
    var  val6 = f32(data1[(gidx0*(16777216))+(gidx1*(16384))+(lidx2*(2097152))+(lidx3*(1024))+(ridx0*(4))+(258)]);
    var  val7 = f32(data1[(gidx0*(16777216))+(gidx1*(16384))+(lidx2*(2097152))+(lidx3*(1024))+(ridx0*(4))+(259)]);
    var  val8 = f32(data1[(gidx0*(16777216))+(gidx1*(16384))+(lidx2*(2097152))+(lidx3*(1024))+(ridx0*(4))+(512)]);
    var  val9 = f32(data1[(gidx0*(16777216))+(gidx1*(16384))+(lidx2*(2097152))+(lidx3*(1024))+(ridx0*(4))+(513)]);
    var  val10 = f32(data1[(gidx0*(16777216))+(gidx1*(16384))+(lidx2*(2097152))+(lidx3*(1024))+(ridx0*(4))+(514)]);
    var  val11 = f32(data1[(gidx0*(16777216))+(gidx1*(16384))+(lidx2*(2097152))+(lidx3*(1024))+(ridx0*(4))+(515)]);
    var  val12 = f32(data1[(gidx0*(16777216))+(gidx1*(16384))+(lidx2*(2097152))+(lidx3*(1024))+(ridx0*(4))+(768)]);
    var  val13 = f32(data1[(gidx0*(16777216))+(gidx1*(16384))+(lidx2*(2097152))+(lidx3*(1024))+(ridx0*(4))+(769)]);
    var  val14 = f32(data1[(gidx0*(16777216))+(gidx1*(16384))+(lidx2*(2097152))+(lidx3*(1024))+(ridx0*(4))+(770)]);
    var  val15 = f32(data1[(gidx0*(16777216))+(gidx1*(16384))+(lidx2*(2097152))+(lidx3*(1024))+(ridx0*(4))+(771)]);
    var  val16 = f32(data2[(gidx0*(8))+lidx2]);
    var  alu0 = (val0-val16);
    var  alu1 = (val1-val16);
    var  alu2 = (val2-val16);
    var  alu3 = (val3-val16);
    var  alu4 = (val4-val16);
    var  alu5 = (val5-val16);
    var  alu6 = (val6-val16);
    var  alu7 = (val7-val16);
    var  alu8 = (val8-val16);
    var  alu9 = (val9-val16);
    var  alu10 = (val10-val16);
    var  alu11 = (val11-val16);
    var  alu12 = (val12-val16);
    var  alu13 = (val13-val16);
    var  alu14 = (val14-val16);
    var  alu15 = (val15-val16);
    acc0 = fma(alu0,alu0,acc0);
    acc0 = fma(alu1,alu1,acc0);
    acc0 = fma(alu2,alu2,acc0);
    acc0 = fma(alu3,alu3,acc0);
    acc1 = fma(alu4,alu4,acc1);
    acc1 = fma(alu5,alu5,acc1);
    acc1 = fma(alu6,alu6,acc1);
    acc1 = fma(alu7,alu7,acc1);
    acc2 = fma(alu8,alu8,acc2);
    acc2 = fma(alu9,alu9,acc2);
    acc2 = fma(alu10,alu10,acc2);
    acc2 = fma(alu11,alu11,acc2);
    acc3 = fma(alu12,alu12,acc3);
    acc3 = fma(alu13,alu13,acc3);
    acc3 = fma(alu14,alu14,acc3);
    acc3 = fma(alu15,alu15,acc3);
  }
  data0[(gidx0*(65536))+(gidx1*(64))+(lidx2*(8192))+(lidx3*(4))] = acc0;
  data0[(gidx0*(65536))+(gidx1*(64))+(lidx2*(8192))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(65536))+(gidx1*(64))+(lidx2*(8192))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(65536))+(gidx1*(64))+(lidx2*(8192))+(lidx3*(4))+(3)] = acc3;
}`;

const r_32_256_32n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,256>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(256) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 32 */
  let lidx1 = i32(lindex.x); /* 256 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (32); ridx0++) {
    var  val0 = f32(data1[(gidx0*(8192))+(lidx1*(32))+ridx0]);
    acc0 = (val0+acc0);
  }
  temp[lidx1] = acc0;
  workgroupBarrier();
  var  acc1 = (0.0f);
  for(var ridx1 = (0); ridx1 < (256); ridx1++) {
    var  val1 = f32(temp[ridx1]);
    acc1 = (val1+acc1);
  }
  data0[gidx0] = sqrt(((1.0f)/((acc1*(4.76837158203125e-07f))+(1e-05f))));
}`;

const E_32_4096_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 32 */
  let gidx1 = i32(gindex.x); /* 4096 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[gidx0]);
  var  val5 = f32(data3[gidx0]);
  var  val6 = f32(data4[(gidx0*(8))+lidx2]);
  var  val7 = f32(data5[(gidx0*(8))+lidx2]);
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))] = (((val0-val4)*val5*val6)+val7);
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(1)] = (((val1-val4)*val5*val6)+val7);
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(2)] = (((val2-val4)*val5*val6)+val7);
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(3)] = (((val3-val4)*val5*val6)+val7);
}`;

const E_32_4096_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 32 */
  let gidx1 = i32(gindex.x); /* 4096 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[gidx0]);
  var  val5 = f32(data3[gidx0]);
  var  val6 = f32(data4[(gidx0*(8))+lidx2]);
  var  val7 = f32(data5[(gidx0*(8))+lidx2]);
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))] = ((1.0f)/((1.0f)+exp2(((((val0-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(1)] = ((1.0f)/((1.0f)+exp2(((((val1-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(2)] = ((1.0f)/((1.0f)+exp2(((((val2-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(3)] = ((1.0f)/((1.0f)+exp2(((((val3-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
}`;

const E_32768_256_8 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(256) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 32768 */
  let lidx1 = i32(lindex.x); /* 256 */
  var  val0 = f32(data1[(gidx0*(2048))+(lidx1*(8))]);
  var  val1 = f32(data1[(gidx0*(2048))+(lidx1*(8))+(1)]);
  var  val2 = f32(data1[(gidx0*(2048))+(lidx1*(8))+(2)]);
  var  val3 = f32(data1[(gidx0*(2048))+(lidx1*(8))+(3)]);
  var  val4 = f32(data1[(gidx0*(2048))+(lidx1*(8))+(4)]);
  var  val5 = f32(data1[(gidx0*(2048))+(lidx1*(8))+(5)]);
  var  val6 = f32(data1[(gidx0*(2048))+(lidx1*(8))+(6)]);
  var  val7 = f32(data1[(gidx0*(2048))+(lidx1*(8))+(7)]);
  var  val8 = f32(data2[(gidx0*(2048))+(lidx1*(8))]);
  var  val9 = f32(data2[(gidx0*(2048))+(lidx1*(8))+(1)]);
  var  val10 = f32(data2[(gidx0*(2048))+(lidx1*(8))+(2)]);
  var  val11 = f32(data2[(gidx0*(2048))+(lidx1*(8))+(3)]);
  var  val12 = f32(data2[(gidx0*(2048))+(lidx1*(8))+(4)]);
  var  val13 = f32(data2[(gidx0*(2048))+(lidx1*(8))+(5)]);
  var  val14 = f32(data2[(gidx0*(2048))+(lidx1*(8))+(6)]);
  var  val15 = f32(data2[(gidx0*(2048))+(lidx1*(8))+(7)]);
  data0[(gidx0*(2048))+(lidx1*(8))] = (val0*val8);
  data0[(gidx0*(2048))+(lidx1*(8))+(1)] = (val1*val9);
  data0[(gidx0*(2048))+(lidx1*(8))+(2)] = (val2*val10);
  data0[(gidx0*(2048))+(lidx1*(8))+(3)] = (val3*val11);
  data0[(gidx0*(2048))+(lidx1*(8))+(4)] = (val4*val12);
  data0[(gidx0*(2048))+(lidx1*(8))+(5)] = (val5*val13);
  data0[(gidx0*(2048))+(lidx1*(8))+(6)] = (val6*val14);
  data0[(gidx0*(2048))+(lidx1*(8))+(7)] = (val7*val15);
}`;

const r_32_64_8_8_16_256_3_3_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 32 */
  let gidx1 = i32(gindex.y); /* 64 */
  let gidx2 = i32(gindex.x); /* 8 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (256); ridx0++) {
    var  alu0 = f32(((gidx2*((-64)))+(lidx4*((-4))))<(0));
    var  alu1 = f32(((gidx1*((-8)))+(lidx3*((-1))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+((-513))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+((-1))]), bool(alu0));
    var  alu2 = f32(((gidx1*(8))+lidx3)<(511));
    var  val2 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+(511)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+((-512))]), bool(alu1));
    var  val4 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))]);
    var  val5 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+(512)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+((-511))]), bool(alu1));
    var  val7 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+(513)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+((-510))]), bool(alu1));
    var  val10 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+(514)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+((-509))]), bool(alu1));
    var  val13 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+(515)]), bool(alu2));
    var  alu3 = f32(((gidx2*(64))+(lidx4*(4)))<(508));
    var  val15 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+((-508))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+(516)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx0*(9216))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2304)]);
    var  val28 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2307)]);
    var  val29 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2310)]);
    var  val30 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2305)]);
    var  val31 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2308)]);
    var  val32 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2311)]);
    var  val33 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2306)]);
    var  val34 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2309)]);
    var  val35 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(2312)]);
    var  val36 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4608)]);
    var  val37 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4611)]);
    var  val38 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4614)]);
    var  val39 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4609)]);
    var  val40 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4612)]);
    var  val41 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4615)]);
    var  val42 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4610)]);
    var  val43 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4613)]);
    var  val44 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(4616)]);
    var  val45 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6912)]);
    var  val46 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6915)]);
    var  val47 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6918)]);
    var  val48 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6913)]);
    var  val49 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6916)]);
    var  val50 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6919)]);
    var  val51 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6914)]);
    var  val52 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6917)]);
    var  val53 = f32(data2[(gidx0*(9216))+(ridx0*(9))+(6920)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))] = acc0;
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(3)] = acc3;
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(262144)] = acc4;
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(262145)] = acc5;
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(262146)] = acc6;
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(262147)] = acc7;
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(524288)] = acc8;
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(524289)] = acc9;
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(524290)] = acc10;
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(524291)] = acc11;
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(786432)] = acc12;
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(786433)] = acc13;
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(786434)] = acc14;
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(786435)] = acc15;
}`;

const r_4_256_8_16_64_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 256 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(8388608))+(gidx1*(4096))+(lidx2*(1048576))+(lidx3*(256))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(8388608))+(gidx1*(4096))+(lidx2*(1048576))+(lidx3*(256))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(8388608))+(gidx1*(4096))+(lidx2*(1048576))+(lidx3*(256))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(8388608))+(gidx1*(4096))+(lidx2*(1048576))+(lidx3*(256))+(ridx0*(4))+(3)]);
    var  val4 = f32(data2[(gidx0*(32))+(lidx2*(4))+(gidx1/(64))]);
    acc0 = (val0+val4+acc0);
    acc0 = (val1+val4+acc0);
    acc0 = (val2+val4+acc0);
    acc0 = (val3+val4+acc0);
  }
  data0[(gidx0*(32768))+(gidx1*(16))+(lidx2*(4096))+lidx3] = acc0;
}`;

const r_4_64_8_16_64_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 64 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))+(3)]);
    var  val4 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))+(256)]);
    var  val5 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))+(257)]);
    var  val6 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))+(258)]);
    var  val7 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))+(259)]);
    var  val8 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))+(512)]);
    var  val9 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))+(513)]);
    var  val10 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))+(514)]);
    var  val11 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))+(515)]);
    var  val12 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))+(768)]);
    var  val13 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))+(769)]);
    var  val14 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))+(770)]);
    var  val15 = f32(data1[(gidx0*(8388608))+(gidx1*(16384))+(lidx2*(1048576))+(lidx3*(1024))+(ridx0*(4))+(771)]);
    var  val16 = f32(data2[(gidx0*(32))+(lidx2*(4))+(gidx1/(16))]);
    var  val17 = f32(data3[(gidx0*(8))+lidx2]);
    var  alu0 = ((val0+val16)-val17);
    var  alu1 = ((val1+val16)-val17);
    var  alu2 = ((val2+val16)-val17);
    var  alu3 = ((val3+val16)-val17);
    var  alu4 = ((val4+val16)-val17);
    var  alu5 = ((val5+val16)-val17);
    var  alu6 = ((val6+val16)-val17);
    var  alu7 = ((val7+val16)-val17);
    var  alu8 = ((val8+val16)-val17);
    var  alu9 = ((val9+val16)-val17);
    var  alu10 = ((val10+val16)-val17);
    var  alu11 = ((val11+val16)-val17);
    var  alu12 = ((val12+val16)-val17);
    var  alu13 = ((val13+val16)-val17);
    var  alu14 = ((val14+val16)-val17);
    var  alu15 = ((val15+val16)-val17);
    acc0 = fma(alu0,alu0,acc0);
    acc0 = fma(alu1,alu1,acc0);
    acc0 = fma(alu2,alu2,acc0);
    acc0 = fma(alu3,alu3,acc0);
    acc1 = fma(alu4,alu4,acc1);
    acc1 = fma(alu5,alu5,acc1);
    acc1 = fma(alu6,alu6,acc1);
    acc1 = fma(alu7,alu7,acc1);
    acc2 = fma(alu8,alu8,acc2);
    acc2 = fma(alu9,alu9,acc2);
    acc2 = fma(alu10,alu10,acc2);
    acc2 = fma(alu11,alu11,acc2);
    acc3 = fma(alu12,alu12,acc3);
    acc3 = fma(alu13,alu13,acc3);
    acc3 = fma(alu14,alu14,acc3);
    acc3 = fma(alu15,alu15,acc3);
  }
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))] = acc0;
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(32768))+(gidx1*(64))+(lidx2*(4096))+(lidx3*(4))+(3)] = acc3;
}`;

const E_16_4096_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 16 */
  let gidx1 = i32(gindex.x); /* 4096 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(8))+lidx2]);
  var  val5 = f32(data3[(gidx0*(2))+(lidx2/(4))]);
  var  val6 = f32(data4[(gidx0*(2))+(lidx2/(4))]);
  var  val7 = f32(data5[(gidx0*(8))+lidx2]);
  var  val8 = f32(data6[(gidx0*(8))+lidx2]);
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))] = ((((val0+val4)-val5)*val6*val7)+val8);
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(1)] = ((((val1+val4)-val5)*val6*val7)+val8);
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(2)] = ((((val2+val4)-val5)*val6*val7)+val8);
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(3)] = ((((val3+val4)-val5)*val6*val7)+val8);
}`;

const E_16_4096_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 16 */
  let gidx1 = i32(gindex.x); /* 4096 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(8))+lidx2]);
  var  val5 = f32(data3[(gidx0*(2))+(lidx2/(4))]);
  var  val6 = f32(data4[(gidx0*(2))+(lidx2/(4))]);
  var  val7 = f32(data5[(gidx0*(8))+lidx2]);
  var  val8 = f32(data6[(gidx0*(8))+lidx2]);
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))] = ((1.0f)/((1.0f)+exp2((((((val0+val4)-val5)*val6*val7)+val8)*((-1.4426950408889634f))))));
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(1)] = ((1.0f)/((1.0f)+exp2((((((val1+val4)-val5)*val6*val7)+val8)*((-1.4426950408889634f))))));
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(2)] = ((1.0f)/((1.0f)+exp2((((((val2+val4)-val5)*val6*val7)+val8)*((-1.4426950408889634f))))));
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(3)] = ((1.0f)/((1.0f)+exp2((((((val3+val4)-val5)*val6*val7)+val8)*((-1.4426950408889634f))))));
}`;

const E_32768_256_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(256) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 32768 */
  let lidx1 = i32(lindex.x); /* 256 */
  var  val0 = f32(data1[(gidx0*(1024))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(1024))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(1024))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(1024))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(1024))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(1024))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(1024))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(1024))+(lidx1*(4))+(3)]);
  data0[(gidx0*(1024))+(lidx1*(4))] = (val0*val4);
  data0[(gidx0*(1024))+(lidx1*(4))+(1)] = (val1*val5);
  data0[(gidx0*(1024))+(lidx1*(4))+(2)] = (val2*val6);
  data0[(gidx0*(1024))+(lidx1*(4))+(3)] = (val3*val7);
}`;

const r_32_64_8_8_16_128_3_3_4_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 32 */
  let gidx1 = i32(gindex.y); /* 64 */
  let gidx2 = i32(gindex.x); /* 8 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (128); ridx0++) {
    var  alu0 = f32(((gidx2*((-64)))+(lidx4*((-4))))<(0));
    var  alu1 = f32(((gidx1*((-8)))+(lidx3*((-1))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+((-513))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+((-1))]), bool(alu0));
    var  alu2 = f32(((gidx1*(8))+lidx3)<(511));
    var  val2 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+(511)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+((-512))]), bool(alu1));
    var  val4 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))]);
    var  val5 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+(512)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+((-511))]), bool(alu1));
    var  val7 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+(513)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+((-510))]), bool(alu1));
    var  val10 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+(514)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+((-509))]), bool(alu1));
    var  val13 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+(515)]), bool(alu2));
    var  alu3 = f32(((gidx2*(64))+(lidx4*(4)))<(508));
    var  val15 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+((-508))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+(516)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx0*(4608))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(1152)]);
    var  val28 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(1155)]);
    var  val29 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(1158)]);
    var  val30 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(1153)]);
    var  val31 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(1156)]);
    var  val32 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(1159)]);
    var  val33 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(1154)]);
    var  val34 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(1157)]);
    var  val35 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(1160)]);
    var  val36 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(2304)]);
    var  val37 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(2307)]);
    var  val38 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(2310)]);
    var  val39 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(2305)]);
    var  val40 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(2308)]);
    var  val41 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(2311)]);
    var  val42 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(2306)]);
    var  val43 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(2309)]);
    var  val44 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(2312)]);
    var  val45 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(3456)]);
    var  val46 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(3459)]);
    var  val47 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(3462)]);
    var  val48 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(3457)]);
    var  val49 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(3460)]);
    var  val50 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(3463)]);
    var  val51 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(3458)]);
    var  val52 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(3461)]);
    var  val53 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(3464)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))] = acc0;
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(1)] = acc1;
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(2)] = acc2;
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(3)] = acc3;
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(262144)] = acc4;
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(262145)] = acc5;
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(262146)] = acc6;
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(262147)] = acc7;
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(524288)] = acc8;
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(524289)] = acc9;
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(524290)] = acc10;
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(524291)] = acc11;
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(786432)] = acc12;
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(786433)] = acc13;
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(786434)] = acc14;
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(786435)] = acc15;
}`;

const E_32_512_4_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 32 */
  let gidx1 = i32(gindex.y); /* 512 */
  let gidx2 = i32(gindex.x); /* 4 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(1048576))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))]);
  var  val1 = f32(data1[(gidx0*(1048576))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(1048576))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(1048576))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(4))+(gidx1/(128))]);
  var  val5 = f32(data3[(gidx0*(1048576))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))]);
  var  val6 = f32(data3[(gidx0*(1048576))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)]);
  var  val7 = f32(data3[(gidx0*(1048576))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)]);
  var  val8 = f32(data3[(gidx0*(1048576))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)]);
  var  val9 = f32(data4[(gidx0*(4))+(gidx1/(128))]);
  data0[(gidx0*(1048576))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))] = (val0+val4+(val5+val9));
  data0[(gidx0*(1048576))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(1)] = (val1+val4+(val6+val9));
  data0[(gidx0*(1048576))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(2)] = (val2+val4+(val7+val9));
  data0[(gidx0*(1048576))+(gidx1*(2048))+(gidx2*(64))+(lidx3*(256))+(lidx4*(4))+(3)] = (val3+val4+(val8+val9));
}`;

const E_4_16384_8_16_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 16384 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(32))+(lidx2*(4))+(gidx1/(4096))]);
  var  val5 = f32(data3[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))]);
  var  val6 = f32(data3[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(1)]);
  var  val7 = f32(data3[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(2)]);
  var  val8 = f32(data3[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(3)]);
  var  val9 = f32(data4[(gidx0*(32))+(lidx2*(4))+(gidx1/(4096))]);
  var  val10 = f32(data5[(gidx0*(8))+lidx2]);
  data0[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))] = ((val0+val4+(val5+val9))-val10);
  data0[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(1)] = ((val1+val4+(val6+val9))-val10);
  data0[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(2)] = ((val2+val4+(val7+val9))-val10);
  data0[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(3)] = ((val3+val4+(val8+val9))-val10);
}`;

const r_8192_4_8_32_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
var<workgroup> temp: array<f32,128>;
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@compute @workgroup_size(8,4) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 8192 */
  let lidx1 = i32(lindex.y); /* 4 */
  let lidx2 = i32(lindex.x); /* 8 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  for(var ridx0 = (0); ridx0 < (32); ridx0++) {
    var  val0 = f32(data1[(gidx0*(4096))+(lidx1*(256))+lidx2+(ridx0*(8))]);
    var  val1 = f32(data1[(gidx0*(4096))+(lidx1*(256))+lidx2+(ridx0*(8))+(1024)]);
    var  val2 = f32(data1[(gidx0*(4096))+(lidx1*(256))+lidx2+(ridx0*(8))+(2048)]);
    var  val3 = f32(data1[(gidx0*(4096))+(lidx1*(256))+lidx2+(ridx0*(8))+(3072)]);
    acc0 = fma(val0,val0,acc0);
    acc1 = fma(val1,val1,acc1);
    acc2 = fma(val2,val2,acc2);
    acc3 = fma(val3,val3,acc3);
  }
  temp[(lidx1*(32))+(lidx2*(4))] = acc0;
  temp[(lidx1*(32))+(lidx2*(4))+(1)] = acc1;
  temp[(lidx1*(32))+(lidx2*(4))+(2)] = acc2;
  temp[(lidx1*(32))+(lidx2*(4))+(3)] = acc3;
  workgroupBarrier();
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  for(var ridx1 = (0); ridx1 < (8); ridx1++) {
    var  val4 = f32(temp[(lidx1*(32))+(ridx1*(4))]);
    var  val5 = f32(temp[(lidx1*(32))+(ridx1*(4))+(1)]);
    var  val6 = f32(temp[(lidx1*(32))+(ridx1*(4))+(2)]);
    var  val7 = f32(temp[(lidx1*(32))+(ridx1*(4))+(3)]);
    acc4 = (val4+acc4);
    acc5 = (val5+acc5);
    acc6 = (val6+acc6);
    acc7 = (val7+acc7);
  }
  data0[(gidx0*(16))+lidx1] = acc4;
  data0[(gidx0*(16))+lidx1+(4)] = acc5;
  data0[(gidx0*(16))+lidx1+(8)] = acc6;
  data0[(gidx0*(16))+lidx1+(12)] = acc7;
}`;

const E_16_4096_8_16_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 16 */
  let gidx1 = i32(gindex.x); /* 4096 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(2))+(lidx2/(4))]);
  var  val5 = f32(data3[(gidx0*(8))+lidx2]);
  var  val6 = f32(data4[(gidx0*(8))+lidx2]);
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))] = ((val0*val4*val5)+val6);
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(1)] = ((val1*val4*val5)+val6);
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(2)] = ((val2*val4*val5)+val6);
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(3)] = ((val3*val4*val5)+val6);
}`;

const E_16_4096_8_16_4n3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 16 */
  let gidx1 = i32(gindex.x); /* 4096 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(2))+(lidx2/(4))]);
  var  val5 = f32(data3[(gidx0*(8))+lidx2]);
  var  val6 = f32(data4[(gidx0*(8))+lidx2]);
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))] = ((1.0f)/((1.0f)+exp2((((val0*val4*val5)+val6)*((-1.4426950408889634f))))));
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(1)] = ((1.0f)/((1.0f)+exp2((((val1*val4*val5)+val6)*((-1.4426950408889634f))))));
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(2)] = ((1.0f)/((1.0f)+exp2((((val2*val4*val5)+val6)*((-1.4426950408889634f))))));
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(3)] = ((1.0f)/((1.0f)+exp2((((val3*val4*val5)+val6)*((-1.4426950408889634f))))));
}`;

const E_16_4096_8_16_4n4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 16 */
  let gidx1 = i32(gindex.x); /* 4096 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(8))+lidx2]);
  var  val5 = f32(data3[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))]);
  var  val6 = f32(data3[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(1)]);
  var  val7 = f32(data3[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(2)]);
  var  val8 = f32(data3[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(3)]);
  var  val9 = f32(data4[(gidx0*(8))+lidx2]);
  var  val10 = f32(data5[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))]);
  var  val11 = f32(data5[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(1)]);
  var  val12 = f32(data5[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(2)]);
  var  val13 = f32(data5[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(3)]);
  var  val14 = f32(data6[(gidx0*(8))+lidx2]);
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))] = (val0+val4+(val5+val9)+(val10+val14));
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(1)] = (val1+val4+(val6+val9)+(val11+val14));
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(2)] = (val2+val4+(val7+val9)+(val12+val14));
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(3)] = (val3+val4+(val8+val9)+(val13+val14));
}`;

const E_4_16384_8_16_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@group(0) @binding(6) var<storage,read_write> data6: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 16384 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(32))+(lidx2*(4))+(gidx1/(4096))]);
  var  val5 = f32(data3[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))]);
  var  val6 = f32(data3[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(1)]);
  var  val7 = f32(data3[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(2)]);
  var  val8 = f32(data3[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(3)]);
  var  val9 = f32(data4[(gidx0*(32))+(lidx2*(4))+(gidx1/(4096))]);
  var  val10 = f32(data5[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))]);
  var  val11 = f32(data5[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(1)]);
  var  val12 = f32(data5[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(2)]);
  var  val13 = f32(data5[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(3)]);
  var  val14 = f32(data6[(gidx0*(32))+(lidx2*(4))+(gidx1/(4096))]);
  data0[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))] = (val0+val4+(val5+val9)+(val10+val14));
  data0[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(1)] = (val1+val4+(val6+val9)+(val11+val14));
  data0[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(2)] = (val2+val4+(val7+val9)+(val12+val14));
  data0[(gidx0*(8388608))+(gidx1*(64))+(lidx2*(1048576))+(lidx3*(4))+(3)] = (val3+val4+(val8+val9)+(val13+val14));
}`;

const r_4_256_8_16_64_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 4 */
  let gidx1 = i32(gindex.x); /* 256 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  for(var ridx0 = (0); ridx0 < (64); ridx0++) {
    var  val0 = f32(data1[(gidx0*(8388608))+(gidx1*(4096))+(lidx2*(1048576))+(lidx3*(256))+(ridx0*(4))]);
    var  val1 = f32(data1[(gidx0*(8388608))+(gidx1*(4096))+(lidx2*(1048576))+(lidx3*(256))+(ridx0*(4))+(1)]);
    var  val2 = f32(data1[(gidx0*(8388608))+(gidx1*(4096))+(lidx2*(1048576))+(lidx3*(256))+(ridx0*(4))+(2)]);
    var  val3 = f32(data1[(gidx0*(8388608))+(gidx1*(4096))+(lidx2*(1048576))+(lidx3*(256))+(ridx0*(4))+(3)]);
    var  val4 = f32(data2[(gidx0*(8388608))+(gidx1*(4096))+(lidx2*(1048576))+(lidx3*(256))+(ridx0*(4))]);
    var  val5 = f32(data2[(gidx0*(8388608))+(gidx1*(4096))+(lidx2*(1048576))+(lidx3*(256))+(ridx0*(4))+(1)]);
    var  val6 = f32(data2[(gidx0*(8388608))+(gidx1*(4096))+(lidx2*(1048576))+(lidx3*(256))+(ridx0*(4))+(2)]);
    var  val7 = f32(data2[(gidx0*(8388608))+(gidx1*(4096))+(lidx2*(1048576))+(lidx3*(256))+(ridx0*(4))+(3)]);
    var  val8 = f32(data3[(gidx0*(32))+(lidx2*(4))+(gidx1/(64))]);
    acc0 = (val0+(val4+val8)+acc0);
    acc0 = (val1+(val5+val8)+acc0);
    acc0 = (val2+(val6+val8)+acc0);
    acc0 = (val3+(val7+val8)+acc0);
  }
  data0[(gidx0*(32768))+(gidx1*(16))+(lidx2*(4096))+lidx3] = acc0;
}`;

const E_16_4096_8_16_4n5 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 16 */
  let gidx1 = i32(gindex.x); /* 4096 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(2))+(lidx2/(4))]);
  var  val5 = f32(data3[(gidx0*(2))+(lidx2/(4))]);
  var  val6 = f32(data4[(gidx0*(8))+lidx2]);
  var  val7 = f32(data5[(gidx0*(8))+lidx2]);
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))] = (((val0-val4)*val5*val6)+val7);
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(1)] = (((val1-val4)*val5*val6)+val7);
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(2)] = (((val2-val4)*val5*val6)+val7);
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(3)] = (((val3-val4)*val5*val6)+val7);
}`;

const E_16_4096_8_16_4n6 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@group(0) @binding(4) var<storage,read_write> data4: array<f32>;
@group(0) @binding(5) var<storage,read_write> data5: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 16 */
  let gidx1 = i32(gindex.x); /* 4096 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  val0 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))]);
  var  val1 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(2))+(lidx2/(4))]);
  var  val5 = f32(data3[(gidx0*(2))+(lidx2/(4))]);
  var  val6 = f32(data4[(gidx0*(8))+lidx2]);
  var  val7 = f32(data5[(gidx0*(8))+lidx2]);
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))] = ((1.0f)/((1.0f)+exp2(((((val0-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(1)] = ((1.0f)/((1.0f)+exp2(((((val1-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(2)] = ((1.0f)/((1.0f)+exp2(((((val2-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
  data0[(gidx0*(2097152))+(gidx1*(64))+(lidx2*(262144))+(lidx3*(4))+(3)] = ((1.0f)/((1.0f)+exp2(((((val3-val4)*val5*val6)+val7)*((-1.4426950408889634f))))));
}`;

const r_32_64_8_8_16_128_3_3_4_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@group(0) @binding(3) var<storage,read_write> data3: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.z); /* 32 */
  let gidx1 = i32(gindex.y); /* 64 */
  let gidx2 = i32(gindex.x); /* 8 */
  let lidx3 = i32(lindex.y); /* 8 */
  let lidx4 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  var  acc12 = (0.0f);
  var  acc13 = (0.0f);
  var  acc14 = (0.0f);
  var  acc15 = (0.0f);
  for(var ridx0 = (0); ridx0 < (128); ridx0++) {
    var  alu0 = f32(((gidx2*((-64)))+(lidx4*((-4))))<(0));
    var  alu1 = f32(((gidx1*((-8)))+(lidx3*((-1))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+((-513))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+((-1))]), bool(alu0));
    var  alu2 = f32(((gidx1*(8))+lidx3)<(511));
    var  val2 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+(511)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+((-512))]), bool(alu1));
    var  val4 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))]);
    var  val5 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+(512)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+((-511))]), bool(alu1));
    var  val7 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+(513)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+((-510))]), bool(alu1));
    var  val10 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+(514)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+((-509))]), bool(alu1));
    var  val13 = f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+(515)]), bool(alu2));
    var  alu3 = f32(((gidx2*(64))+(lidx4*(4)))<(508));
    var  val15 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+((-508))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(gidx2*(64))+(lidx4*(4))+(gidx1*(4096))+(lidx3*(512))+(ridx0*(262144))+(516)]), bool((alu3*alu2)));
    var  val18 = f32(data2[(gidx0*(4608))+(ridx0*(9))]);
    var  val19 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(1152)]);
    var  val28 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(1155)]);
    var  val29 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(1158)]);
    var  val30 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(1153)]);
    var  val31 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(1156)]);
    var  val32 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(1159)]);
    var  val33 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(1154)]);
    var  val34 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(1157)]);
    var  val35 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(1160)]);
    var  val36 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(2304)]);
    var  val37 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(2307)]);
    var  val38 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(2310)]);
    var  val39 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(2305)]);
    var  val40 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(2308)]);
    var  val41 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(2311)]);
    var  val42 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(2306)]);
    var  val43 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(2309)]);
    var  val44 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(2312)]);
    var  val45 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(3456)]);
    var  val46 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(3459)]);
    var  val47 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(3462)]);
    var  val48 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(3457)]);
    var  val49 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(3460)]);
    var  val50 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(3463)]);
    var  val51 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(3458)]);
    var  val52 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(3461)]);
    var  val53 = f32(data2[(gidx0*(4608))+(ridx0*(9))+(3464)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
    acc12 = fma(val0,val45,acc12);
    acc12 = fma(val1,val46,acc12);
    acc12 = fma(val2,val47,acc12);
    acc12 = fma(val3,val48,acc12);
    acc12 = fma(val4,val49,acc12);
    acc12 = fma(val5,val50,acc12);
    acc12 = fma(val6,val51,acc12);
    acc12 = fma(val7,val52,acc12);
    acc12 = fma(val8,val53,acc12);
    acc13 = fma(val3,val45,acc13);
    acc13 = fma(val4,val46,acc13);
    acc13 = fma(val5,val47,acc13);
    acc13 = fma(val6,val48,acc13);
    acc13 = fma(val7,val49,acc13);
    acc13 = fma(val8,val50,acc13);
    acc13 = fma(val9,val51,acc13);
    acc13 = fma(val10,val52,acc13);
    acc13 = fma(val11,val53,acc13);
    acc14 = fma(val6,val45,acc14);
    acc14 = fma(val7,val46,acc14);
    acc14 = fma(val8,val47,acc14);
    acc14 = fma(val9,val48,acc14);
    acc14 = fma(val10,val49,acc14);
    acc14 = fma(val11,val50,acc14);
    acc14 = fma(val12,val51,acc14);
    acc14 = fma(val13,val52,acc14);
    acc14 = fma(val14,val53,acc14);
    acc15 = fma(val9,val45,acc15);
    acc15 = fma(val10,val46,acc15);
    acc15 = fma(val11,val47,acc15);
    acc15 = fma(val12,val48,acc15);
    acc15 = fma(val13,val49,acc15);
    acc15 = fma(val14,val50,acc15);
    acc15 = fma(val15,val51,acc15);
    acc15 = fma(val16,val52,acc15);
    acc15 = fma(val17,val53,acc15);
  }
  var  val54 = f32(data3[gidx0*(4)]);
  var  val55 = f32(data3[(gidx0*(4))+(1)]);
  var  val56 = f32(data3[(gidx0*(4))+(2)]);
  var  val57 = f32(data3[(gidx0*(4))+(3)]);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))] = (acc0+val54);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(1)] = (acc1+val54);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(2)] = (acc2+val54);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(3)] = (acc3+val54);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(262144)] = (acc4+val55);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(262145)] = (acc5+val55);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(262146)] = (acc6+val55);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(262147)] = (acc7+val55);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(524288)] = (acc8+val56);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(524289)] = (acc9+val56);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(524290)] = (acc10+val56);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(524291)] = (acc11+val56);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(786432)] = (acc12+val57);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(786433)] = (acc13+val57);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(786434)] = (acc14+val57);
  data0[(gidx0*(1048576))+(gidx1*(4096))+(gidx2*(64))+(lidx3*(512))+(lidx4*(4))+(786435)] = (acc15+val57);
}`;

const E_32768_256_4n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(256) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 32768 */
  let lidx1 = i32(lindex.x); /* 256 */
  var  val0 = f32(data1[(gidx0*(1024))+(lidx1*(4))]);
  var  val1 = f32(data1[(gidx0*(1024))+(lidx1*(4))+(1)]);
  var  val2 = f32(data1[(gidx0*(1024))+(lidx1*(4))+(2)]);
  var  val3 = f32(data1[(gidx0*(1024))+(lidx1*(4))+(3)]);
  var  val4 = f32(data2[(gidx0*(1024))+(lidx1*(4))]);
  var  val5 = f32(data2[(gidx0*(1024))+(lidx1*(4))+(1)]);
  var  val6 = f32(data2[(gidx0*(1024))+(lidx1*(4))+(2)]);
  var  val7 = f32(data2[(gidx0*(1024))+(lidx1*(4))+(3)]);
  data0[(gidx0*(1024))+(lidx1*(4))] = (val0+val4);
  data0[(gidx0*(1024))+(lidx1*(4))+(1)] = (val1+val5);
  data0[(gidx0*(1024))+(lidx1*(4))+(2)] = (val2+val6);
  data0[(gidx0*(1024))+(lidx1*(4))+(3)] = (val3+val7);
}`;

const r_64_8_8_16_128_3_3_4_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(16,8) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.y); /* 64 */
  let gidx1 = i32(gindex.x); /* 8 */
  let lidx2 = i32(lindex.y); /* 8 */
  let lidx3 = i32(lindex.x); /* 16 */
  var  acc0 = (0.0f);
  var  acc1 = (0.0f);
  var  acc2 = (0.0f);
  var  acc3 = (0.0f);
  var  acc4 = (0.0f);
  var  acc5 = (0.0f);
  var  acc6 = (0.0f);
  var  acc7 = (0.0f);
  var  acc8 = (0.0f);
  var  acc9 = (0.0f);
  var  acc10 = (0.0f);
  var  acc11 = (0.0f);
  for(var ridx0 = (0); ridx0 < (128); ridx0++) {
    var  alu0 = f32(((gidx1*((-64)))+(lidx3*((-4))))<(0));
    var  alu1 = f32(((gidx0*((-8)))+(lidx2*((-1))))<(0));
    var  val0 = select(f32((0.0f)), f32(data1[(gidx1*(64))+(lidx3*(4))+(gidx0*(4096))+(lidx2*(512))+(ridx0*(262144))+((-513))]), bool((alu0*alu1)));
    var  val1 = select(f32((0.0f)), f32(data1[(gidx1*(64))+(lidx3*(4))+(gidx0*(4096))+(lidx2*(512))+(ridx0*(262144))+((-1))]), bool(alu0));
    var  alu2 = f32(((gidx0*(8))+lidx2)<(511));
    var  val2 = select(f32((0.0f)), f32(data1[(gidx1*(64))+(lidx3*(4))+(gidx0*(4096))+(lidx2*(512))+(ridx0*(262144))+(511)]), bool((alu0*alu2)));
    var  val3 = select(f32((0.0f)), f32(data1[(gidx1*(64))+(lidx3*(4))+(gidx0*(4096))+(lidx2*(512))+(ridx0*(262144))+((-512))]), bool(alu1));
    var  val4 = f32(data1[(gidx1*(64))+(lidx3*(4))+(gidx0*(4096))+(lidx2*(512))+(ridx0*(262144))]);
    var  val5 = select(f32((0.0f)), f32(data1[(gidx1*(64))+(lidx3*(4))+(gidx0*(4096))+(lidx2*(512))+(ridx0*(262144))+(512)]), bool(alu2));
    var  val6 = select(f32((0.0f)), f32(data1[(gidx1*(64))+(lidx3*(4))+(gidx0*(4096))+(lidx2*(512))+(ridx0*(262144))+((-511))]), bool(alu1));
    var  val7 = f32(data1[(gidx1*(64))+(lidx3*(4))+(gidx0*(4096))+(lidx2*(512))+(ridx0*(262144))+(1)]);
    var  val8 = select(f32((0.0f)), f32(data1[(gidx1*(64))+(lidx3*(4))+(gidx0*(4096))+(lidx2*(512))+(ridx0*(262144))+(513)]), bool(alu2));
    var  val9 = select(f32((0.0f)), f32(data1[(gidx1*(64))+(lidx3*(4))+(gidx0*(4096))+(lidx2*(512))+(ridx0*(262144))+((-510))]), bool(alu1));
    var  val10 = f32(data1[(gidx1*(64))+(lidx3*(4))+(gidx0*(4096))+(lidx2*(512))+(ridx0*(262144))+(2)]);
    var  val11 = select(f32((0.0f)), f32(data1[(gidx1*(64))+(lidx3*(4))+(gidx0*(4096))+(lidx2*(512))+(ridx0*(262144))+(514)]), bool(alu2));
    var  val12 = select(f32((0.0f)), f32(data1[(gidx1*(64))+(lidx3*(4))+(gidx0*(4096))+(lidx2*(512))+(ridx0*(262144))+((-509))]), bool(alu1));
    var  val13 = f32(data1[(gidx1*(64))+(lidx3*(4))+(gidx0*(4096))+(lidx2*(512))+(ridx0*(262144))+(3)]);
    var  val14 = select(f32((0.0f)), f32(data1[(gidx1*(64))+(lidx3*(4))+(gidx0*(4096))+(lidx2*(512))+(ridx0*(262144))+(515)]), bool(alu2));
    var  alu3 = f32(((gidx1*(64))+(lidx3*(4)))<(508));
    var  val15 = select(f32((0.0f)), f32(data1[(gidx1*(64))+(lidx3*(4))+(gidx0*(4096))+(lidx2*(512))+(ridx0*(262144))+((-508))]), bool((alu3*alu1)));
    var  val16 = select(f32((0.0f)), f32(data1[(gidx1*(64))+(lidx3*(4))+(gidx0*(4096))+(lidx2*(512))+(ridx0*(262144))+(4)]), bool(alu3));
    var  val17 = select(f32((0.0f)), f32(data1[(gidx1*(64))+(lidx3*(4))+(gidx0*(4096))+(lidx2*(512))+(ridx0*(262144))+(516)]), bool((alu3*alu2)));
    var  val18 = f32(data2[ridx0*(9)]);
    var  val19 = f32(data2[(ridx0*(9))+(3)]);
    var  val20 = f32(data2[(ridx0*(9))+(6)]);
    var  val21 = f32(data2[(ridx0*(9))+(1)]);
    var  val22 = f32(data2[(ridx0*(9))+(4)]);
    var  val23 = f32(data2[(ridx0*(9))+(7)]);
    var  val24 = f32(data2[(ridx0*(9))+(2)]);
    var  val25 = f32(data2[(ridx0*(9))+(5)]);
    var  val26 = f32(data2[(ridx0*(9))+(8)]);
    var  val27 = f32(data2[(ridx0*(9))+(1152)]);
    var  val28 = f32(data2[(ridx0*(9))+(1155)]);
    var  val29 = f32(data2[(ridx0*(9))+(1158)]);
    var  val30 = f32(data2[(ridx0*(9))+(1153)]);
    var  val31 = f32(data2[(ridx0*(9))+(1156)]);
    var  val32 = f32(data2[(ridx0*(9))+(1159)]);
    var  val33 = f32(data2[(ridx0*(9))+(1154)]);
    var  val34 = f32(data2[(ridx0*(9))+(1157)]);
    var  val35 = f32(data2[(ridx0*(9))+(1160)]);
    var  val36 = f32(data2[(ridx0*(9))+(2304)]);
    var  val37 = f32(data2[(ridx0*(9))+(2307)]);
    var  val38 = f32(data2[(ridx0*(9))+(2310)]);
    var  val39 = f32(data2[(ridx0*(9))+(2305)]);
    var  val40 = f32(data2[(ridx0*(9))+(2308)]);
    var  val41 = f32(data2[(ridx0*(9))+(2311)]);
    var  val42 = f32(data2[(ridx0*(9))+(2306)]);
    var  val43 = f32(data2[(ridx0*(9))+(2309)]);
    var  val44 = f32(data2[(ridx0*(9))+(2312)]);
    acc0 = fma(val0,val18,acc0);
    acc0 = fma(val1,val19,acc0);
    acc0 = fma(val2,val20,acc0);
    acc0 = fma(val3,val21,acc0);
    acc0 = fma(val4,val22,acc0);
    acc0 = fma(val5,val23,acc0);
    acc0 = fma(val6,val24,acc0);
    acc0 = fma(val7,val25,acc0);
    acc0 = fma(val8,val26,acc0);
    acc1 = fma(val3,val18,acc1);
    acc1 = fma(val4,val19,acc1);
    acc1 = fma(val5,val20,acc1);
    acc1 = fma(val6,val21,acc1);
    acc1 = fma(val7,val22,acc1);
    acc1 = fma(val8,val23,acc1);
    acc1 = fma(val9,val24,acc1);
    acc1 = fma(val10,val25,acc1);
    acc1 = fma(val11,val26,acc1);
    acc2 = fma(val6,val18,acc2);
    acc2 = fma(val7,val19,acc2);
    acc2 = fma(val8,val20,acc2);
    acc2 = fma(val9,val21,acc2);
    acc2 = fma(val10,val22,acc2);
    acc2 = fma(val11,val23,acc2);
    acc2 = fma(val12,val24,acc2);
    acc2 = fma(val13,val25,acc2);
    acc2 = fma(val14,val26,acc2);
    acc3 = fma(val9,val18,acc3);
    acc3 = fma(val10,val19,acc3);
    acc3 = fma(val11,val20,acc3);
    acc3 = fma(val12,val21,acc3);
    acc3 = fma(val13,val22,acc3);
    acc3 = fma(val14,val23,acc3);
    acc3 = fma(val15,val24,acc3);
    acc3 = fma(val16,val25,acc3);
    acc3 = fma(val17,val26,acc3);
    acc4 = fma(val0,val27,acc4);
    acc4 = fma(val1,val28,acc4);
    acc4 = fma(val2,val29,acc4);
    acc4 = fma(val3,val30,acc4);
    acc4 = fma(val4,val31,acc4);
    acc4 = fma(val5,val32,acc4);
    acc4 = fma(val6,val33,acc4);
    acc4 = fma(val7,val34,acc4);
    acc4 = fma(val8,val35,acc4);
    acc5 = fma(val3,val27,acc5);
    acc5 = fma(val4,val28,acc5);
    acc5 = fma(val5,val29,acc5);
    acc5 = fma(val6,val30,acc5);
    acc5 = fma(val7,val31,acc5);
    acc5 = fma(val8,val32,acc5);
    acc5 = fma(val9,val33,acc5);
    acc5 = fma(val10,val34,acc5);
    acc5 = fma(val11,val35,acc5);
    acc6 = fma(val6,val27,acc6);
    acc6 = fma(val7,val28,acc6);
    acc6 = fma(val8,val29,acc6);
    acc6 = fma(val9,val30,acc6);
    acc6 = fma(val10,val31,acc6);
    acc6 = fma(val11,val32,acc6);
    acc6 = fma(val12,val33,acc6);
    acc6 = fma(val13,val34,acc6);
    acc6 = fma(val14,val35,acc6);
    acc7 = fma(val9,val27,acc7);
    acc7 = fma(val10,val28,acc7);
    acc7 = fma(val11,val29,acc7);
    acc7 = fma(val12,val30,acc7);
    acc7 = fma(val13,val31,acc7);
    acc7 = fma(val14,val32,acc7);
    acc7 = fma(val15,val33,acc7);
    acc7 = fma(val16,val34,acc7);
    acc7 = fma(val17,val35,acc7);
    acc8 = fma(val0,val36,acc8);
    acc8 = fma(val1,val37,acc8);
    acc8 = fma(val2,val38,acc8);
    acc8 = fma(val3,val39,acc8);
    acc8 = fma(val4,val40,acc8);
    acc8 = fma(val5,val41,acc8);
    acc8 = fma(val6,val42,acc8);
    acc8 = fma(val7,val43,acc8);
    acc8 = fma(val8,val44,acc8);
    acc9 = fma(val3,val36,acc9);
    acc9 = fma(val4,val37,acc9);
    acc9 = fma(val5,val38,acc9);
    acc9 = fma(val6,val39,acc9);
    acc9 = fma(val7,val40,acc9);
    acc9 = fma(val8,val41,acc9);
    acc9 = fma(val9,val42,acc9);
    acc9 = fma(val10,val43,acc9);
    acc9 = fma(val11,val44,acc9);
    acc10 = fma(val6,val36,acc10);
    acc10 = fma(val7,val37,acc10);
    acc10 = fma(val8,val38,acc10);
    acc10 = fma(val9,val39,acc10);
    acc10 = fma(val10,val40,acc10);
    acc10 = fma(val11,val41,acc10);
    acc10 = fma(val12,val42,acc10);
    acc10 = fma(val13,val43,acc10);
    acc10 = fma(val14,val44,acc10);
    acc11 = fma(val9,val36,acc11);
    acc11 = fma(val10,val37,acc11);
    acc11 = fma(val11,val38,acc11);
    acc11 = fma(val12,val39,acc11);
    acc11 = fma(val13,val40,acc11);
    acc11 = fma(val14,val41,acc11);
    acc11 = fma(val15,val42,acc11);
    acc11 = fma(val16,val43,acc11);
    acc11 = fma(val17,val44,acc11);
  }
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(512))+(lidx3*(4))] = acc0;
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(512))+(lidx3*(4))+(1)] = acc1;
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(512))+(lidx3*(4))+(2)] = acc2;
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(512))+(lidx3*(4))+(3)] = acc3;
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(512))+(lidx3*(4))+(262144)] = acc4;
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(512))+(lidx3*(4))+(262145)] = acc5;
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(512))+(lidx3*(4))+(262146)] = acc6;
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(512))+(lidx3*(4))+(262147)] = acc7;
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(512))+(lidx3*(4))+(524288)] = acc8;
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(512))+(lidx3*(4))+(524289)] = acc9;
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(512))+(lidx3*(4))+(524290)] = acc10;
  data0[(gidx0*(4096))+(gidx1*(64))+(lidx2*(512))+(lidx3*(4))+(524291)] = acc11;
}`;

const E_2048_32_3_4 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(3,32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 2048 */
  let lidx1 = i32(lindex.y); /* 32 */
  let lidx2 = i32(lindex.x); /* 3 */
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))+(lidx2*(262144))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(lidx2*(262144))+(1)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(lidx2*(262144))+(2)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(lidx2*(262144))+(3)]);
  var  val4 = f32(data2[lidx2]);
  data0[(gidx0*(384))+(lidx1*(12))+lidx2] = f32(((val0+val4+(1.0f))*(0.5f))<(0.0f));
  data0[(gidx0*(384))+(lidx1*(12))+lidx2+(3)] = f32(((val1+val4+(1.0f))*(0.5f))<(0.0f));
  data0[(gidx0*(384))+(lidx1*(12))+lidx2+(6)] = f32(((val2+val4+(1.0f))*(0.5f))<(0.0f));
  data0[(gidx0*(384))+(lidx1*(12))+lidx2+(9)] = f32(((val3+val4+(1.0f))*(0.5f))<(0.0f));
}`;

const E_2048_32_3_4n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(3,32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 2048 */
  let lidx1 = i32(lindex.y); /* 32 */
  let lidx2 = i32(lindex.x); /* 3 */
  var  val0 = f32(data1[(gidx0*(128))+(lidx1*(4))+(lidx2*(262144))]);
  var  val1 = f32(data1[(gidx0*(128))+(lidx1*(4))+(lidx2*(262144))+(1)]);
  var  val2 = f32(data1[(gidx0*(128))+(lidx1*(4))+(lidx2*(262144))+(2)]);
  var  val3 = f32(data1[(gidx0*(128))+(lidx1*(4))+(lidx2*(262144))+(3)]);
  var  val4 = f32(data2[lidx2]);
  var  alu0 = ((val0+val4+(1.0f))*(0.5f));
  var  alu1 = ((val1+val4+(1.0f))*(0.5f));
  var  alu2 = ((val2+val4+(1.0f))*(0.5f));
  var  alu3 = ((val3+val4+(1.0f))*(0.5f));
  data0[(gidx0*(384))+(lidx1*(12))+lidx2] = select((alu0*(0.5f)),alu0,f32((0.0f)<alu0)!=0.);
  data0[(gidx0*(384))+(lidx1*(12))+lidx2+(3)] = select((alu1*(0.5f)),alu1,f32((0.0f)<alu1)!=0.);
  data0[(gidx0*(384))+(lidx1*(12))+lidx2+(6)] = select((alu2*(0.5f)),alu2,f32((0.0f)<alu2)!=0.);
  data0[(gidx0*(384))+(lidx1*(12))+lidx2+(9)] = select((alu3*(0.5f)),alu3,f32((0.0f)<alu3)!=0.);
}`;

const E_8192_32_3 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 8192 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(96))+(lidx1*(3))]);
  var  val1 = f32(data1[(gidx0*(96))+(lidx1*(3))+(1)]);
  var  val2 = f32(data1[(gidx0*(96))+(lidx1*(3))+(2)]);
  var  val3 = f32(data2[(gidx0*(96))+(lidx1*(3))]);
  var  val4 = f32(data2[(gidx0*(96))+(lidx1*(3))+(1)]);
  var  val5 = f32(data2[(gidx0*(96))+(lidx1*(3))+(2)]);
  data0[(gidx0*(96))+(lidx1*(3))] = f32((-select(val3,(0.0f),val0!=0.))<((-1.0f)));
  data0[(gidx0*(96))+(lidx1*(3))+(1)] = f32((-select(val4,(0.0f),val1!=0.))<((-1.0f)));
  data0[(gidx0*(96))+(lidx1*(3))+(2)] = f32((-select(val5,(0.0f),val2!=0.))<((-1.0f)));
}`;

const E_8192_32_3n1 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 8192 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(96))+(lidx1*(3))]);
  var  val1 = f32(data1[(gidx0*(96))+(lidx1*(3))+(1)]);
  var  val2 = f32(data1[(gidx0*(96))+(lidx1*(3))+(2)]);
  var  val3 = f32(data2[(gidx0*(96))+(lidx1*(3))]);
  var  val4 = f32(data2[(gidx0*(96))+(lidx1*(3))+(1)]);
  var  val5 = f32(data2[(gidx0*(96))+(lidx1*(3))+(2)]);
  var  alu0 = (-select(val3,(0.0f),val0!=0.));
  var  alu1 = (-select(val4,(0.0f),val1!=0.));
  var  alu2 = (-select(val5,(0.0f),val2!=0.));
  data0[(gidx0*(96))+(lidx1*(3))] = select(((alu0+((-1.0f)))*(0.5f)),alu0,f32(((-1.0f))<alu0)!=0.);
  data0[(gidx0*(96))+(lidx1*(3))+(1)] = select(((alu1+((-1.0f)))*(0.5f)),alu1,f32(((-1.0f))<alu1)!=0.);
  data0[(gidx0*(96))+(lidx1*(3))+(2)] = select(((alu2+((-1.0f)))*(0.5f)),alu2,f32(((-1.0f))<alu2)!=0.);
}`;

const E_8192_32_3n2 = `fn nan() -> f32 { let bits = 0xffffffffu; return bitcast<f32>(bits); }
@group(0) @binding(0) var<storage,read_write> data0: array<f32>;
@group(0) @binding(1) var<storage,read_write> data1: array<f32>;
@group(0) @binding(2) var<storage,read_write> data2: array<f32>;
@compute @workgroup_size(32) fn main(@builtin(workgroup_id) gindex: vec3<u32>, @builtin(local_invocation_id) lindex: vec3<u32>) {
  let gidx0 = i32(gindex.x); /* 8192 */
  let lidx1 = i32(lindex.x); /* 32 */
  var  val0 = f32(data1[(gidx0*(96))+(lidx1*(3))]);
  var  val1 = f32(data1[(gidx0*(96))+(lidx1*(3))+(1)]);
  var  val2 = f32(data1[(gidx0*(96))+(lidx1*(3))+(2)]);
  var  val3 = f32(data2[(gidx0*(96))+(lidx1*(3))]);
  var  val4 = f32(data2[(gidx0*(96))+(lidx1*(3))+(1)]);
  var  val5 = f32(data2[(gidx0*(96))+(lidx1*(3))+(2)]);
  data0[(gidx0*(96))+(lidx1*(3))] = ((-select(val3,((-1.0f)),val0!=0.))*(255.0f));
  data0[(gidx0*(96))+(lidx1*(3))+(1)] = ((-select(val4,((-1.0f)),val1!=0.))*(255.0f));
  data0[(gidx0*(96))+(lidx1*(3))+(2)] = ((-select(val5,((-1.0f)),val2!=0.))*(255.0f));
}`;

    return {
      "setup": async (device, safetensor) => {
        const metadata = getTensorMetadata(safetensor[0]);

        const buf_0 = createEmptyBuf(device, 268435456);;
    const input0 = createEmptyBuf(device, 65536);;
    const buf_1 = createEmptyBuf(device, 268435456);;
    const buf_2 = createWeightBuf(device, 64, getTensorBuffer(safetensor, metadata['first_stage_model.post_quant_conv.weight'], 'first_stage_model.post_quant_conv.weight'));
    const buf_3 = createWeightBuf(device, 16, getTensorBuffer(safetensor, metadata['first_stage_model.post_quant_conv.bias'], 'first_stage_model.post_quant_conv.bias'));
    const buf_4 = createEmptyBuf(device, 268435456);;
    const buf_5 = createWeightBuf(device, 73728, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.conv_in.weight'], 'first_stage_model.decoder.conv_in.weight'));
    const buf_6 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.conv_in.bias'], 'first_stage_model.decoder.conv_in.bias'));
    const buf_7 = createEmptyBuf(device, 134217728);;
    const buf_8 = createEmptyBuf(device, 134217728);;
    const buf_9 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_1.norm1.weight'], 'first_stage_model.decoder.mid.block_1.norm1.weight'));
    const buf_10 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_1.norm1.bias'], 'first_stage_model.decoder.mid.block_1.norm1.bias'));
    const buf_11 = createEmptyBuf(device, 134217728);;
    const buf_12 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_1.conv1.weight'], 'first_stage_model.decoder.mid.block_1.conv1.weight'));
    const buf_13 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_1.conv1.bias'], 'first_stage_model.decoder.mid.block_1.conv1.bias'));
    const buf_14 = createEmptyBuf(device, 8388608);;
    const buf_15 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_1.norm2.weight'], 'first_stage_model.decoder.mid.block_1.norm2.weight'));
    const buf_16 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_1.norm2.bias'], 'first_stage_model.decoder.mid.block_1.norm2.bias'));
    const buf_17 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_1.conv2.weight'], 'first_stage_model.decoder.mid.block_1.conv2.weight'));
    const buf_18 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_1.conv2.bias'], 'first_stage_model.decoder.mid.block_1.conv2.bias'));
    const buf_19 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.attn_1.norm.weight'], 'first_stage_model.decoder.mid.attn_1.norm.weight'));
    const buf_20 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.attn_1.norm.bias'], 'first_stage_model.decoder.mid.attn_1.norm.bias'));
    const buf_21 = createWeightBuf(device, 1048576, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.attn_1.q.weight'], 'first_stage_model.decoder.mid.attn_1.q.weight'));
    const buf_22 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.attn_1.q.bias'], 'first_stage_model.decoder.mid.attn_1.q.bias'));
    const buf_23 = createWeightBuf(device, 1048576, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.attn_1.k.weight'], 'first_stage_model.decoder.mid.attn_1.k.weight'));
    const buf_24 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.attn_1.k.bias'], 'first_stage_model.decoder.mid.attn_1.k.bias'));
    const buf_25 = createWeightBuf(device, 1048576, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.attn_1.v.weight'], 'first_stage_model.decoder.mid.attn_1.v.weight'));
    const buf_26 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.attn_1.v.bias'], 'first_stage_model.decoder.mid.attn_1.v.bias'));
    const buf_27 = createWeightBuf(device, 1048576, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.attn_1.proj_out.weight'], 'first_stage_model.decoder.mid.attn_1.proj_out.weight'));
    const buf_28 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.attn_1.proj_out.bias'], 'first_stage_model.decoder.mid.attn_1.proj_out.bias'));
    const buf_29 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_2.norm1.weight'], 'first_stage_model.decoder.mid.block_2.norm1.weight'));
    const buf_30 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_2.norm1.bias'], 'first_stage_model.decoder.mid.block_2.norm1.bias'));
    const buf_31 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_2.conv1.weight'], 'first_stage_model.decoder.mid.block_2.conv1.weight'));
    const buf_32 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_2.conv1.bias'], 'first_stage_model.decoder.mid.block_2.conv1.bias'));
    const buf_33 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_2.norm2.weight'], 'first_stage_model.decoder.mid.block_2.norm2.weight'));
    const buf_34 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_2.norm2.bias'], 'first_stage_model.decoder.mid.block_2.norm2.bias'));
    const buf_35 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_2.conv2.weight'], 'first_stage_model.decoder.mid.block_2.conv2.weight'));
    const buf_36 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.mid.block_2.conv2.bias'], 'first_stage_model.decoder.mid.block_2.conv2.bias'));
    const buf_37 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.0.norm1.weight'], 'first_stage_model.decoder.up.3.block.0.norm1.weight'));
    const buf_38 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.0.norm1.bias'], 'first_stage_model.decoder.up.3.block.0.norm1.bias'));
    const buf_39 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.0.conv1.weight'], 'first_stage_model.decoder.up.3.block.0.conv1.weight'));
    const buf_40 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.0.conv1.bias'], 'first_stage_model.decoder.up.3.block.0.conv1.bias'));
    const buf_41 = createEmptyBuf(device, 128);;
    const buf_42 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.0.norm2.weight'], 'first_stage_model.decoder.up.3.block.0.norm2.weight'));
    const buf_43 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.0.norm2.bias'], 'first_stage_model.decoder.up.3.block.0.norm2.bias'));
    const buf_44 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.0.conv2.weight'], 'first_stage_model.decoder.up.3.block.0.conv2.weight'));
    const buf_45 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.0.conv2.bias'], 'first_stage_model.decoder.up.3.block.0.conv2.bias'));
    const buf_46 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.1.norm1.weight'], 'first_stage_model.decoder.up.3.block.1.norm1.weight'));
    const buf_47 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.1.norm1.bias'], 'first_stage_model.decoder.up.3.block.1.norm1.bias'));
    const buf_48 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.1.conv1.weight'], 'first_stage_model.decoder.up.3.block.1.conv1.weight'));
    const buf_49 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.1.conv1.bias'], 'first_stage_model.decoder.up.3.block.1.conv1.bias'));
    const buf_50 = createEmptyBuf(device, 128);;
    const buf_51 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.1.norm2.weight'], 'first_stage_model.decoder.up.3.block.1.norm2.weight'));
    const buf_52 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.1.norm2.bias'], 'first_stage_model.decoder.up.3.block.1.norm2.bias'));
    const buf_53 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.1.conv2.weight'], 'first_stage_model.decoder.up.3.block.1.conv2.weight'));
    const buf_54 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.1.conv2.bias'], 'first_stage_model.decoder.up.3.block.1.conv2.bias'));
    const buf_55 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.2.norm1.weight'], 'first_stage_model.decoder.up.3.block.2.norm1.weight'));
    const buf_56 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.2.norm1.bias'], 'first_stage_model.decoder.up.3.block.2.norm1.bias'));
    const buf_57 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.2.conv1.weight'], 'first_stage_model.decoder.up.3.block.2.conv1.weight'));
    const buf_58 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.2.conv1.bias'], 'first_stage_model.decoder.up.3.block.2.conv1.bias'));
    const buf_59 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.2.norm2.weight'], 'first_stage_model.decoder.up.3.block.2.norm2.weight'));
    const buf_60 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.2.norm2.bias'], 'first_stage_model.decoder.up.3.block.2.norm2.bias'));
    const buf_61 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.2.conv2.weight'], 'first_stage_model.decoder.up.3.block.2.conv2.weight'));
    const buf_62 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.block.2.conv2.bias'], 'first_stage_model.decoder.up.3.block.2.conv2.bias'));
    const buf_63 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.upsample.conv.weight'], 'first_stage_model.decoder.up.3.upsample.conv.weight'));
    const buf_64 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.3.upsample.conv.bias'], 'first_stage_model.decoder.up.3.upsample.conv.bias'));
    const buf_65 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.0.norm1.weight'], 'first_stage_model.decoder.up.2.block.0.norm1.weight'));
    const buf_66 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.0.norm1.bias'], 'first_stage_model.decoder.up.2.block.0.norm1.bias'));
    const buf_67 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.0.conv1.weight'], 'first_stage_model.decoder.up.2.block.0.conv1.weight'));
    const buf_68 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.0.conv1.bias'], 'first_stage_model.decoder.up.2.block.0.conv1.bias'));
    const buf_69 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.0.norm2.weight'], 'first_stage_model.decoder.up.2.block.0.norm2.weight'));
    const buf_70 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.0.norm2.bias'], 'first_stage_model.decoder.up.2.block.0.norm2.bias'));
    const buf_71 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.0.conv2.weight'], 'first_stage_model.decoder.up.2.block.0.conv2.weight'));
    const buf_72 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.0.conv2.bias'], 'first_stage_model.decoder.up.2.block.0.conv2.bias'));
    const buf_73 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.1.norm1.weight'], 'first_stage_model.decoder.up.2.block.1.norm1.weight'));
    const buf_74 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.1.norm1.bias'], 'first_stage_model.decoder.up.2.block.1.norm1.bias'));
    const buf_75 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.1.conv1.weight'], 'first_stage_model.decoder.up.2.block.1.conv1.weight'));
    const buf_76 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.1.conv1.bias'], 'first_stage_model.decoder.up.2.block.1.conv1.bias'));
    const buf_77 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.1.norm2.weight'], 'first_stage_model.decoder.up.2.block.1.norm2.weight'));
    const buf_78 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.1.norm2.bias'], 'first_stage_model.decoder.up.2.block.1.norm2.bias'));
    const buf_79 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.1.conv2.weight'], 'first_stage_model.decoder.up.2.block.1.conv2.weight'));
    const buf_80 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.1.conv2.bias'], 'first_stage_model.decoder.up.2.block.1.conv2.bias'));
    const buf_81 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.2.norm1.weight'], 'first_stage_model.decoder.up.2.block.2.norm1.weight'));
    const buf_82 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.2.norm1.bias'], 'first_stage_model.decoder.up.2.block.2.norm1.bias'));
    const buf_83 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.2.conv1.weight'], 'first_stage_model.decoder.up.2.block.2.conv1.weight'));
    const buf_84 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.2.conv1.bias'], 'first_stage_model.decoder.up.2.block.2.conv1.bias'));
    const buf_85 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.2.norm2.weight'], 'first_stage_model.decoder.up.2.block.2.norm2.weight'));
    const buf_86 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.2.norm2.bias'], 'first_stage_model.decoder.up.2.block.2.norm2.bias'));
    const buf_87 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.2.conv2.weight'], 'first_stage_model.decoder.up.2.block.2.conv2.weight'));
    const buf_88 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.block.2.conv2.bias'], 'first_stage_model.decoder.up.2.block.2.conv2.bias'));
    const buf_89 = createWeightBuf(device, 9437184, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.upsample.conv.weight'], 'first_stage_model.decoder.up.2.upsample.conv.weight'));
    const buf_90 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.2.upsample.conv.bias'], 'first_stage_model.decoder.up.2.upsample.conv.bias'));
    const buf_91 = createWeightBuf(device, 524288, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.0.nin_shortcut.weight'], 'first_stage_model.decoder.up.1.block.0.nin_shortcut.weight'));
    const buf_92 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.0.norm1.weight'], 'first_stage_model.decoder.up.1.block.0.norm1.weight'));
    const buf_93 = createWeightBuf(device, 2048, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.0.norm1.bias'], 'first_stage_model.decoder.up.1.block.0.norm1.bias'));
    const buf_94 = createWeightBuf(device, 4718592, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.0.conv1.weight'], 'first_stage_model.decoder.up.1.block.0.conv1.weight'));
    const buf_95 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.0.conv1.bias'], 'first_stage_model.decoder.up.1.block.0.conv1.bias'));
    const buf_96 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.0.norm2.weight'], 'first_stage_model.decoder.up.1.block.0.norm2.weight'));
    const buf_97 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.0.norm2.bias'], 'first_stage_model.decoder.up.1.block.0.norm2.bias'));
    const buf_98 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.0.conv2.weight'], 'first_stage_model.decoder.up.1.block.0.conv2.weight'));
    const buf_99 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.0.nin_shortcut.bias'], 'first_stage_model.decoder.up.1.block.0.nin_shortcut.bias'));
    const buf_100 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.0.conv2.bias'], 'first_stage_model.decoder.up.1.block.0.conv2.bias'));
    const buf_101 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.1.norm1.weight'], 'first_stage_model.decoder.up.1.block.1.norm1.weight'));
    const buf_102 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.1.norm1.bias'], 'first_stage_model.decoder.up.1.block.1.norm1.bias'));
    const buf_103 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.1.conv1.weight'], 'first_stage_model.decoder.up.1.block.1.conv1.weight'));
    const buf_104 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.1.conv1.bias'], 'first_stage_model.decoder.up.1.block.1.conv1.bias'));
    const buf_105 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.1.norm2.weight'], 'first_stage_model.decoder.up.1.block.1.norm2.weight'));
    const buf_106 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.1.norm2.bias'], 'first_stage_model.decoder.up.1.block.1.norm2.bias'));
    const buf_107 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.1.conv2.weight'], 'first_stage_model.decoder.up.1.block.1.conv2.weight'));
    const buf_108 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.1.conv2.bias'], 'first_stage_model.decoder.up.1.block.1.conv2.bias'));
    const buf_109 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.2.norm1.weight'], 'first_stage_model.decoder.up.1.block.2.norm1.weight'));
    const buf_110 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.2.norm1.bias'], 'first_stage_model.decoder.up.1.block.2.norm1.bias'));
    const buf_111 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.2.conv1.weight'], 'first_stage_model.decoder.up.1.block.2.conv1.weight'));
    const buf_112 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.2.conv1.bias'], 'first_stage_model.decoder.up.1.block.2.conv1.bias'));
    const buf_113 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.2.norm2.weight'], 'first_stage_model.decoder.up.1.block.2.norm2.weight'));
    const buf_114 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.2.norm2.bias'], 'first_stage_model.decoder.up.1.block.2.norm2.bias'));
    const buf_115 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.2.conv2.weight'], 'first_stage_model.decoder.up.1.block.2.conv2.weight'));
    const buf_116 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.block.2.conv2.bias'], 'first_stage_model.decoder.up.1.block.2.conv2.bias'));
    const buf_117 = createWeightBuf(device, 2359296, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.upsample.conv.weight'], 'first_stage_model.decoder.up.1.upsample.conv.weight'));
    const buf_118 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.1.upsample.conv.bias'], 'first_stage_model.decoder.up.1.upsample.conv.bias'));
    const buf_119 = createWeightBuf(device, 131072, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.0.nin_shortcut.weight'], 'first_stage_model.decoder.up.0.block.0.nin_shortcut.weight'));
    const buf_120 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.0.norm1.weight'], 'first_stage_model.decoder.up.0.block.0.norm1.weight'));
    const buf_121 = createWeightBuf(device, 1024, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.0.norm1.bias'], 'first_stage_model.decoder.up.0.block.0.norm1.bias'));
    const buf_122 = createWeightBuf(device, 1179648, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.0.conv1.weight'], 'first_stage_model.decoder.up.0.block.0.conv1.weight'));
    const buf_123 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.0.conv1.bias'], 'first_stage_model.decoder.up.0.block.0.conv1.bias'));
    const buf_124 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.0.norm2.weight'], 'first_stage_model.decoder.up.0.block.0.norm2.weight'));
    const buf_125 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.0.norm2.bias'], 'first_stage_model.decoder.up.0.block.0.norm2.bias'));
    const buf_126 = createWeightBuf(device, 589824, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.0.conv2.weight'], 'first_stage_model.decoder.up.0.block.0.conv2.weight'));
    const buf_127 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.0.nin_shortcut.bias'], 'first_stage_model.decoder.up.0.block.0.nin_shortcut.bias'));
    const buf_128 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.0.conv2.bias'], 'first_stage_model.decoder.up.0.block.0.conv2.bias'));
    const buf_129 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.1.norm1.weight'], 'first_stage_model.decoder.up.0.block.1.norm1.weight'));
    const buf_130 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.1.norm1.bias'], 'first_stage_model.decoder.up.0.block.1.norm1.bias'));
    const buf_131 = createWeightBuf(device, 589824, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.1.conv1.weight'], 'first_stage_model.decoder.up.0.block.1.conv1.weight'));
    const buf_132 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.1.conv1.bias'], 'first_stage_model.decoder.up.0.block.1.conv1.bias'));
    const buf_133 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.1.norm2.weight'], 'first_stage_model.decoder.up.0.block.1.norm2.weight'));
    const buf_134 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.1.norm2.bias'], 'first_stage_model.decoder.up.0.block.1.norm2.bias'));
    const buf_135 = createWeightBuf(device, 589824, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.1.conv2.weight'], 'first_stage_model.decoder.up.0.block.1.conv2.weight'));
    const buf_136 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.1.conv2.bias'], 'first_stage_model.decoder.up.0.block.1.conv2.bias'));
    const buf_137 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.2.norm1.weight'], 'first_stage_model.decoder.up.0.block.2.norm1.weight'));
    const buf_138 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.2.norm1.bias'], 'first_stage_model.decoder.up.0.block.2.norm1.bias'));
    const buf_139 = createWeightBuf(device, 589824, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.2.conv1.weight'], 'first_stage_model.decoder.up.0.block.2.conv1.weight'));
    const buf_140 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.2.conv1.bias'], 'first_stage_model.decoder.up.0.block.2.conv1.bias'));
    const buf_141 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.2.norm2.weight'], 'first_stage_model.decoder.up.0.block.2.norm2.weight'));
    const buf_142 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.2.norm2.bias'], 'first_stage_model.decoder.up.0.block.2.norm2.bias'));
    const buf_143 = createWeightBuf(device, 589824, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.2.conv2.weight'], 'first_stage_model.decoder.up.0.block.2.conv2.weight'));
    const buf_144 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.up.0.block.2.conv2.bias'], 'first_stage_model.decoder.up.0.block.2.conv2.bias'));
    const buf_145 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.norm_out.weight'], 'first_stage_model.decoder.norm_out.weight'));
    const buf_146 = createWeightBuf(device, 512, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.norm_out.bias'], 'first_stage_model.decoder.norm_out.bias'));
    const buf_147 = createWeightBuf(device, 13824, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.conv_out.weight'], 'first_stage_model.decoder.conv_out.weight'));
    const buf_148 = createWeightBuf(device, 12, getTensorBuffer(safetensor, metadata['first_stage_model.decoder.conv_out.bias'], 'first_stage_model.decoder.conv_out.bias'));
    const outputs = createEmptyBuf(device, 3145728);;

        
        const gpuWriteBuffer0 = device.createBuffer({size:input0.size, usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE });
        const gpuReadBuffer = device.createBuffer({ size: outputs.size, usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ });

        const kernels = [E_128_32_4n4, r_32_32_4_4_4, r_128_8_8_16_4_3_3_4_4, E_32_32_4_8_16_4, r_256_32_64_4, r_32_256, r_4_4_8_16_64_4_4, r_32_256n1, E_64_64_8_16_4, E_64_64_8_16_4n1, E_16384_32_4, r_128_8_8_16_512_3_3_4_4, r_4_16_8_16_64_4, r_32_256, r_4_4_8_16_64_4_4, r_32_256n1, E_64_64_8_16_4, E_64_64_8_16_4n1, E_16384_32_4, r_128_8_8_16_512_3_3_4_4, E_32_32_4_8_16_4n1, r_256_32_64_4, r_32_256, E_4_1024_8_16_4, r_512_4_8_32_4, r_32_256n1, E_64_64_8_16_4n2, r_16_64_8_16_128_4_4_4, r_16_64_8_16_128_4_4_4, r_128_64_8_16_128_4_4_4, r_128_32_1024_4, E_512_64_8_16_4, r_128_32_1024_4n1, E_512_64_8_16_4n1, r_16_64_8_16_128_4_4_4, r_128_8_8_16_1024_4_4_4, r_16_64_8_16_128_4_4_4n1, E_64_64_8_16_4n3, E_4_1024_8_16_4n1, r_4_16_8_16_64_4n1, r_32_256, r_4_4_8_16_64_4_4n1, r_32_256n1, E_64_64_8_16_4n4, E_64_64_8_16_4n5, E_16384_32_4, r_128_8_8_16_512_3_3_4_4, r_4_16_8_16_64_4, r_32_256, r_4_4_8_16_64_4_4, r_32_256n1, E_64_64_8_16_4, E_64_64_8_16_4n1, E_16384_32_4, r_128_8_8_16_512_3_3_4_4n1, E_16384_32_4n1, r_256_32_64_4, r_32_256, r_4_4_8_16_64_4_4n1, r_32_256n1, E_64_64_8_16_4n6, E_64_64_8_16_4n7, E_16384_32_4, r_128_8_8_16_512_3_3_4_4, r_4_16_8_16_64_4, r_32_256, r_4_4_8_16_64_4_4, r_32_256n1, E_64_64_8_16_4, E_64_64_8_16_4n1, E_16384_32_4, r_128_8_8_16_512_3_3_4_4, E_32_32_4_8_16_4n1, r_256_32_64_4, r_32_256, E_4_1024_8_16_4n2, r_512_4_8_32_4, r_32_256n1, E_64_64_8_16_4n2, E_64_64_8_16_4n8, E_16384_32_4, r_128_8_8_16_512_3_3_4_4, r_4_16_8_16_64_4, r_32_256, r_4_4_8_16_64_4_4, r_32_256n1, E_64_64_8_16_4, E_64_64_8_16_4n1, E_16384_32_4, r_128_8_8_16_512_3_3_4_4, E_64_64_8_16_4n9, E_4_1024_8_16_4n3, r_4_16_8_16_64_4n1, r_32_256, r_4_4_8_16_64_4_4n1, r_32_256n1, E_64_64_8_16_4n4, E_64_64_8_16_4n5, E_16384_32_4, r_128_8_8_16_512_3_3_4_4, r_4_16_8_16_64_4, r_32_256, r_4_4_8_16_64_4_4, r_32_256n1, E_64_64_8_16_4, E_64_64_8_16_4n1, E_16384_32_4, r_128_8_8_16_512_3_3_4_4n1, E_16384_32_4n2, r_128_16_2_8_16_512_3_3_4_4, r_1024_32_64_4, r_32_256_4, r_4_16_8_16_64_4_4, r_32_256_4n1, E_64_256_8_16_4, E_64_256_8_16_4n1, E_32768_64_4, r_128_16_2_8_16_512_3_3_4_4n1, r_4_64_8_16_64_4, r_32_256_4, r_4_16_8_16_64_4_4n1, r_32_256_4n1, E_64_256_8_16_4n2, E_64_256_8_16_4n3, E_32768_64_4, r_128_16_2_8_16_512_3_3_4_4n1, E_32_128_4_8_16_4, r_1024_32_64_4, r_32_256_4, E_4_4096_8_16_4, r_2048_4_8_32_4, r_32_256_4n1, E_64_256_8_16_4n4, E_64_256_8_16_4n5, E_32768_64_4, r_128_16_2_8_16_512_3_3_4_4n1, r_4_64_8_16_64_4, r_32_256_4, r_4_16_8_16_64_4_4n1, r_32_256_4n1, E_64_256_8_16_4n2, E_64_256_8_16_4n3, E_32768_64_4, r_128_16_2_8_16_512_3_3_4_4n1, E_64_256_8_16_4n6, r_4_64_8_16_64_4n1, r_32_256_4, E_4_4096_8_16_4n1, r_2048_4_8_32_4, r_32_256_4n1, E_64_256_8_16_4n4, E_64_256_8_16_4n5, E_32768_64_4, r_128_16_2_8_16_512_3_3_4_4n1, r_4_64_8_16_64_4, r_32_256_4, r_4_16_8_16_64_4_4n1, r_32_256_4n1, E_64_256_8_16_4n2, E_64_256_8_16_4n3, E_32768_64_4, r_128_16_2_8_16_512_3_3_4_4n2, E_32768_64_4n1, r_128_32_4_8_16_512_3_3_4_4, r_8_1024_8_16_128_4_4_4, r_4096_32_64_4, r_32_256_16, r_4_64_8_16_64_4_4, r_32_256_16n1, E_64_1024_8_16_4, E_64_1024_8_16_4n1, E_32768_256_4, r_64_32_4_8_16_512_3_3_4_4, r_4_128_8_16_64_4, r_32_256_8, r_4_32_8_16_64_4_4, r_32_256_8n1, E_32_1024_8_16_4, E_32_1024_8_16_4n1, E_32768_128_4, r_64_32_4_8_16_256_3_3_4_4, E_32_256_4_8_16_4, r_2048_32_64_4, r_32_256_8, E_4_8192_8_16_4, r_4096_4_8_32_4, r_32_256_8n1, E_32_1024_8_16_4n2, E_32_1024_8_16_4n3, E_32768_128_4, r_64_32_4_8_16_256_3_3_4_4, r_4_128_8_16_64_4, r_32_256_8, r_4_32_8_16_64_4_4, r_32_256_8n1, E_32_1024_8_16_4, E_32_1024_8_16_4n1, E_32768_128_4, r_64_32_4_8_16_256_3_3_4_4, E_32_1024_8_16_4n4, E_4_8192_8_16_4n1, r_4_128_8_16_64_4n1, r_32_256_8, r_4_32_8_16_64_4_4n1, r_32_256_8n1, E_32_1024_8_16_4n5, E_32_1024_8_16_4n6, E_32768_128_4, r_64_32_4_8_16_256_3_3_4_4, r_4_128_8_16_64_4, r_32_256_8, r_4_32_8_16_64_4_4, r_32_256_8n1, E_32_1024_8_16_4, E_32_1024_8_16_4n1, E_32768_128_4, r_64_32_4_8_16_256_3_3_4_4n1, E_32768_128_4n1, r_64_64_8_8_16_256_3_3_4_4, r_4_4096_8_16_64_4_4_4, r_8192_32_64_4, r_32_256_32, r_4_128_8_16_64_4_4, r_32_256_32n1, E_32_4096_8_16_4, E_32_4096_8_16_4n1, E_32768_256_8, r_32_64_8_8_16_256_3_3_4_4, r_4_256_8_16_64_4, r_32_256_16, r_4_64_8_16_64_4_4n1, r_32_256_16n1, E_16_4096_8_16_4, E_16_4096_8_16_4n1, E_32768_256_4n1, r_32_64_8_8_16_128_3_3_4_4, E_32_512_4_8_16_4, r_4096_32_64_4, r_32_256_16, E_4_16384_8_16_4, r_8192_4_8_32_4, r_32_256_16n1, E_16_4096_8_16_4n2, E_16_4096_8_16_4n3, E_32768_256_4n1, r_32_64_8_8_16_128_3_3_4_4, r_4_256_8_16_64_4, r_32_256_16, r_4_64_8_16_64_4_4n1, r_32_256_16n1, E_16_4096_8_16_4, E_16_4096_8_16_4n1, E_32768_256_4n1, r_32_64_8_8_16_128_3_3_4_4, E_16_4096_8_16_4n4, E_4_16384_8_16_4n1, r_4_256_8_16_64_4n1, r_32_256_16, r_4_64_8_16_64_4_4, r_32_256_16n1, E_16_4096_8_16_4n5, E_16_4096_8_16_4n6, E_32768_256_4n1, r_32_64_8_8_16_128_3_3_4_4, r_4_256_8_16_64_4, r_32_256_16, r_4_64_8_16_64_4_4n1, r_32_256_16n1, E_16_4096_8_16_4, E_16_4096_8_16_4n1, E_32768_256_4n1, r_32_64_8_8_16_128_3_3_4_4n1, E_32768_256_4n2, r_4096_32_64_4, r_32_256_16, r_4_64_8_16_64_4_4, r_32_256_16n1, E_16_4096_8_16_4n5, E_16_4096_8_16_4n6, E_32768_256_4n1, r_64_8_8_16_128_3_3_4_3, E_2048_32_3_4, E_2048_32_3_4n1, E_8192_32_3, E_8192_32_3n1, E_8192_32_3n2];
        const piplines = await Promise.all(kernels.map(name => device.createComputePipelineAsync({layout: "auto", compute: { module: device.createShaderModule({ code: name }), entryPoint: "main" }})));

        return async (data0) => {
            const commandEncoder = device.createCommandEncoder();

            await gpuWriteBuffer0.mapAsync(GPUMapMode.WRITE);
    new Float32Array(gpuWriteBuffer0.getMappedRange()).set(data0);
    gpuWriteBuffer0.unmap();
commandEncoder.copyBufferToBuffer(gpuWriteBuffer0, 0, input0, 0, gpuWriteBuffer0.size);

            addComputePass(device, commandEncoder, piplines[0], [buf_0, input0], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[1], [buf_1, buf_0, buf_2, buf_3], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[2], [buf_4, buf_1, buf_5], [8, 128, 1]);
        addComputePass(device, commandEncoder, piplines[3], [buf_0, buf_4, buf_6], [4, 32, 32]);
        addComputePass(device, commandEncoder, piplines[4], [buf_1, buf_0], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[5], [buf_7, buf_1], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[6], [buf_1, buf_4, buf_6, buf_7], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[7], [buf_8, buf_1], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[8], [buf_1, buf_4, buf_6, buf_7, buf_8, buf_9, buf_10], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[9], [buf_11, buf_4, buf_6, buf_7, buf_8, buf_9, buf_10], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[10], [buf_7, buf_1, buf_11], [16384, 1, 1]);
        addComputePass(device, commandEncoder, piplines[11], [buf_1, buf_7, buf_12], [8, 128, 1]);
        addComputePass(device, commandEncoder, piplines[12], [buf_11, buf_1, buf_13], [16, 4, 1]);
        addComputePass(device, commandEncoder, piplines[13], [buf_8, buf_11], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[14], [buf_11, buf_1, buf_13, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[15], [buf_14, buf_11], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[16], [buf_11, buf_1, buf_13, buf_8, buf_14, buf_15, buf_16], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[17], [buf_7, buf_1, buf_13, buf_8, buf_14, buf_15, buf_16], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[18], [buf_1, buf_11, buf_7], [16384, 1, 1]);
        addComputePass(device, commandEncoder, piplines[19], [buf_11, buf_1, buf_17], [8, 128, 1]);
        addComputePass(device, commandEncoder, piplines[20], [buf_7, buf_0, buf_11, buf_18], [4, 32, 32]);
        addComputePass(device, commandEncoder, piplines[21], [buf_0, buf_7], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[22], [buf_1, buf_0], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[23], [buf_0, buf_4, buf_6, buf_11, buf_18, buf_1], [1024, 4, 1]);
        addComputePass(device, commandEncoder, piplines[24], [buf_1, buf_0], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[25], [buf_14, buf_1], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[26], [buf_8, buf_0, buf_14, buf_19, buf_20], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[27], [buf_1, buf_8, buf_21, buf_22], [64, 16, 1]);
        addComputePass(device, commandEncoder, piplines[28], [buf_14, buf_8, buf_23, buf_24], [64, 16, 1]);
        addComputePass(device, commandEncoder, piplines[29], [buf_0, buf_1, buf_14], [64, 128, 1]);
        addComputePass(device, commandEncoder, piplines[30], [buf_14, buf_0], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[31], [buf_1, buf_0, buf_14], [64, 512, 1]);
        addComputePass(device, commandEncoder, piplines[32], [buf_14, buf_1], [128, 1, 1]);
        addComputePass(device, commandEncoder, piplines[33], [buf_0, buf_1, buf_14], [64, 512, 1]);
        addComputePass(device, commandEncoder, piplines[34], [buf_1, buf_8, buf_25, buf_26], [64, 16, 1]);
        addComputePass(device, commandEncoder, piplines[35], [buf_8, buf_0, buf_1], [8, 128, 1]);
        addComputePass(device, commandEncoder, piplines[36], [buf_0, buf_8, buf_27], [64, 16, 1]);
        addComputePass(device, commandEncoder, piplines[37], [buf_1, buf_4, buf_6, buf_11, buf_18, buf_0, buf_28], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[38], [buf_8, buf_4, buf_6, buf_11, buf_18, buf_0, buf_28], [1024, 4, 1]);
        addComputePass(device, commandEncoder, piplines[39], [buf_4, buf_7, buf_0, buf_28], [16, 4, 1]);
        addComputePass(device, commandEncoder, piplines[40], [buf_11, buf_4], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[41], [buf_0, buf_8, buf_11], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[42], [buf_7, buf_0], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[43], [buf_0, buf_8, buf_11, buf_7, buf_29, buf_30], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[44], [buf_4, buf_8, buf_11, buf_7, buf_29, buf_30], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[45], [buf_11, buf_0, buf_4], [16384, 1, 1]);
        addComputePass(device, commandEncoder, piplines[46], [buf_0, buf_11, buf_31], [8, 128, 1]);
        addComputePass(device, commandEncoder, piplines[47], [buf_4, buf_0, buf_32], [16, 4, 1]);
        addComputePass(device, commandEncoder, piplines[48], [buf_7, buf_4], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[49], [buf_4, buf_0, buf_32, buf_7], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[50], [buf_8, buf_4], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[51], [buf_4, buf_0, buf_32, buf_7, buf_8, buf_33, buf_34], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[52], [buf_11, buf_0, buf_32, buf_7, buf_8, buf_33, buf_34], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[53], [buf_0, buf_4, buf_11], [16384, 1, 1]);
        addComputePass(device, commandEncoder, piplines[54], [buf_4, buf_0, buf_35, buf_36], [8, 128, 1]);
        addComputePass(device, commandEncoder, piplines[55], [buf_0, buf_1, buf_4], [16384, 1, 1]);
        addComputePass(device, commandEncoder, piplines[56], [buf_11, buf_0], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[57], [buf_8, buf_11], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[58], [buf_11, buf_0, buf_8], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[59], [buf_14, buf_11], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[60], [buf_11, buf_1, buf_4, buf_8, buf_14, buf_37, buf_38], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[61], [buf_7, buf_1, buf_4, buf_8, buf_14, buf_37, buf_38], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[62], [buf_8, buf_11, buf_7], [16384, 1, 1]);
        addComputePass(device, commandEncoder, piplines[63], [buf_11, buf_8, buf_39], [8, 128, 1]);
        addComputePass(device, commandEncoder, piplines[64], [buf_7, buf_11, buf_40], [16, 4, 1]);
        addComputePass(device, commandEncoder, piplines[65], [buf_14, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[66], [buf_7, buf_11, buf_40, buf_14], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[67], [buf_41, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[68], [buf_7, buf_11, buf_40, buf_14, buf_41, buf_42, buf_43], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[69], [buf_8, buf_11, buf_40, buf_14, buf_41, buf_42, buf_43], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[70], [buf_11, buf_7, buf_8], [16384, 1, 1]);
        addComputePass(device, commandEncoder, piplines[71], [buf_7, buf_11, buf_44], [8, 128, 1]);
        addComputePass(device, commandEncoder, piplines[72], [buf_11, buf_0, buf_7, buf_45], [4, 32, 32]);
        addComputePass(device, commandEncoder, piplines[73], [buf_0, buf_11], [256, 1, 1]);
        addComputePass(device, commandEncoder, piplines[74], [buf_8, buf_0], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[75], [buf_0, buf_1, buf_4, buf_7, buf_45, buf_8], [1024, 4, 1]);
        addComputePass(device, commandEncoder, piplines[76], [buf_8, buf_0], [512, 1, 1]);
        addComputePass(device, commandEncoder, piplines[77], [buf_41, buf_8], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[78], [buf_8, buf_0, buf_41, buf_46, buf_47], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[79], [buf_14, buf_0, buf_41, buf_46, buf_47], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[80], [buf_0, buf_8, buf_14], [16384, 1, 1]);
        addComputePass(device, commandEncoder, piplines[81], [buf_8, buf_0, buf_48], [8, 128, 1]);
        addComputePass(device, commandEncoder, piplines[82], [buf_0, buf_8, buf_49], [16, 4, 1]);
        addComputePass(device, commandEncoder, piplines[83], [buf_41, buf_0], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[84], [buf_0, buf_8, buf_49, buf_41], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[85], [buf_50, buf_0], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[86], [buf_0, buf_8, buf_49, buf_41, buf_50, buf_51, buf_52], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[87], [buf_14, buf_8, buf_49, buf_41, buf_50, buf_51, buf_52], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[88], [buf_8, buf_0, buf_14], [16384, 1, 1]);
        addComputePass(device, commandEncoder, piplines[89], [buf_0, buf_8, buf_53], [8, 128, 1]);
        addComputePass(device, commandEncoder, piplines[90], [buf_8, buf_1, buf_4, buf_7, buf_45, buf_0, buf_54], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[91], [buf_14, buf_1, buf_4, buf_7, buf_45, buf_0, buf_54], [1024, 4, 1]);
        addComputePass(device, commandEncoder, piplines[92], [buf_1, buf_11, buf_0, buf_54], [16, 4, 1]);
        addComputePass(device, commandEncoder, piplines[93], [buf_4, buf_1], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[94], [buf_0, buf_14, buf_4], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[95], [buf_11, buf_0], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[96], [buf_0, buf_14, buf_4, buf_11, buf_55, buf_56], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[97], [buf_1, buf_14, buf_4, buf_11, buf_55, buf_56], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[98], [buf_4, buf_0, buf_1], [16384, 1, 1]);
        addComputePass(device, commandEncoder, piplines[99], [buf_0, buf_4, buf_57], [8, 128, 1]);
        addComputePass(device, commandEncoder, piplines[100], [buf_1, buf_0, buf_58], [16, 4, 1]);
        addComputePass(device, commandEncoder, piplines[101], [buf_11, buf_1], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[102], [buf_1, buf_0, buf_58, buf_11], [4, 4, 1]);
        addComputePass(device, commandEncoder, piplines[103], [buf_7, buf_1], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[104], [buf_1, buf_0, buf_58, buf_11, buf_7, buf_59, buf_60], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[105], [buf_4, buf_0, buf_58, buf_11, buf_7, buf_59, buf_60], [64, 64, 1]);
        addComputePass(device, commandEncoder, piplines[106], [buf_0, buf_1, buf_4], [16384, 1, 1]);
        addComputePass(device, commandEncoder, piplines[107], [buf_1, buf_0, buf_61, buf_62], [8, 128, 1]);
        addComputePass(device, commandEncoder, piplines[108], [buf_4, buf_8, buf_1], [16384, 1, 1]);
        addComputePass(device, commandEncoder, piplines[109], [buf_0, buf_4, buf_63, buf_64], [2, 16, 128]);
        addComputePass(device, commandEncoder, piplines[110], [buf_1, buf_0], [1024, 1, 1]);
        addComputePass(device, commandEncoder, piplines[111], [buf_11, buf_1], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[112], [buf_1, buf_0, buf_11], [16, 4, 1]);
        addComputePass(device, commandEncoder, piplines[113], [buf_7, buf_1], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[114], [buf_1, buf_0, buf_11, buf_7, buf_65, buf_66], [256, 64, 1]);
        addComputePass(device, commandEncoder, piplines[115], [buf_4, buf_0, buf_11, buf_7, buf_65, buf_66], [256, 64, 1]);
        addComputePass(device, commandEncoder, piplines[116], [buf_11, buf_1, buf_4], [32768, 1, 1]);
        addComputePass(device, commandEncoder, piplines[117], [buf_1, buf_11, buf_67], [2, 16, 128]);
        addComputePass(device, commandEncoder, piplines[118], [buf_4, buf_1, buf_68], [64, 4, 1]);
        addComputePass(device, commandEncoder, piplines[119], [buf_7, buf_4], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[120], [buf_4, buf_1, buf_68, buf_7], [16, 4, 1]);
        addComputePass(device, commandEncoder, piplines[121], [buf_8, buf_4], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[122], [buf_4, buf_1, buf_68, buf_7, buf_8, buf_69, buf_70], [256, 64, 1]);
        addComputePass(device, commandEncoder, piplines[123], [buf_11, buf_1, buf_68, buf_7, buf_8, buf_69, buf_70], [256, 64, 1]);
        addComputePass(device, commandEncoder, piplines[124], [buf_1, buf_4, buf_11], [32768, 1, 1]);
        addComputePass(device, commandEncoder, piplines[125], [buf_4, buf_1, buf_71], [2, 16, 128]);
        addComputePass(device, commandEncoder, piplines[126], [buf_1, buf_0, buf_4, buf_72], [4, 128, 32]);
        addComputePass(device, commandEncoder, piplines[127], [buf_11, buf_1], [1024, 1, 1]);
        addComputePass(device, commandEncoder, piplines[128], [buf_7, buf_11], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[129], [buf_11, buf_0, buf_4, buf_72, buf_7], [4096, 4, 1]);
        addComputePass(device, commandEncoder, piplines[130], [buf_7, buf_11], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[131], [buf_14, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[132], [buf_7, buf_11, buf_14, buf_73, buf_74], [256, 64, 1]);
        addComputePass(device, commandEncoder, piplines[133], [buf_8, buf_11, buf_14, buf_73, buf_74], [256, 64, 1]);
        addComputePass(device, commandEncoder, piplines[134], [buf_11, buf_7, buf_8], [32768, 1, 1]);
        addComputePass(device, commandEncoder, piplines[135], [buf_7, buf_11, buf_75], [2, 16, 128]);
        addComputePass(device, commandEncoder, piplines[136], [buf_11, buf_7, buf_76], [64, 4, 1]);
        addComputePass(device, commandEncoder, piplines[137], [buf_14, buf_11], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[138], [buf_11, buf_7, buf_76, buf_14], [16, 4, 1]);
        addComputePass(device, commandEncoder, piplines[139], [buf_41, buf_11], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[140], [buf_11, buf_7, buf_76, buf_14, buf_41, buf_77, buf_78], [256, 64, 1]);
        addComputePass(device, commandEncoder, piplines[141], [buf_8, buf_7, buf_76, buf_14, buf_41, buf_77, buf_78], [256, 64, 1]);
        addComputePass(device, commandEncoder, piplines[142], [buf_7, buf_11, buf_8], [32768, 1, 1]);
        addComputePass(device, commandEncoder, piplines[143], [buf_11, buf_7, buf_79], [2, 16, 128]);
        addComputePass(device, commandEncoder, piplines[144], [buf_7, buf_0, buf_4, buf_72, buf_11, buf_80], [256, 64, 1]);
        addComputePass(device, commandEncoder, piplines[145], [buf_8, buf_1, buf_11, buf_80], [64, 4, 1]);
        addComputePass(device, commandEncoder, piplines[146], [buf_14, buf_8], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[147], [buf_1, buf_0, buf_4, buf_72, buf_11, buf_80, buf_14], [4096, 4, 1]);
        addComputePass(device, commandEncoder, piplines[148], [buf_0, buf_1], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[149], [buf_11, buf_0], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[150], [buf_0, buf_1, buf_11, buf_81, buf_82], [256, 64, 1]);
        addComputePass(device, commandEncoder, piplines[151], [buf_4, buf_1, buf_11, buf_81, buf_82], [256, 64, 1]);
        addComputePass(device, commandEncoder, piplines[152], [buf_1, buf_0, buf_4], [32768, 1, 1]);
        addComputePass(device, commandEncoder, piplines[153], [buf_0, buf_1, buf_83], [2, 16, 128]);
        addComputePass(device, commandEncoder, piplines[154], [buf_1, buf_0, buf_84], [64, 4, 1]);
        addComputePass(device, commandEncoder, piplines[155], [buf_11, buf_1], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[156], [buf_1, buf_0, buf_84, buf_11], [16, 4, 1]);
        addComputePass(device, commandEncoder, piplines[157], [buf_8, buf_1], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[158], [buf_1, buf_0, buf_84, buf_11, buf_8, buf_85, buf_86], [256, 64, 1]);
        addComputePass(device, commandEncoder, piplines[159], [buf_4, buf_0, buf_84, buf_11, buf_8, buf_85, buf_86], [256, 64, 1]);
        addComputePass(device, commandEncoder, piplines[160], [buf_0, buf_1, buf_4], [32768, 1, 1]);
        addComputePass(device, commandEncoder, piplines[161], [buf_1, buf_0, buf_87, buf_88], [2, 16, 128]);
        addComputePass(device, commandEncoder, piplines[162], [buf_4, buf_7, buf_1], [32768, 1, 1]);
        addComputePass(device, commandEncoder, piplines[163], [buf_0, buf_4, buf_89, buf_90], [4, 32, 128]);
        addComputePass(device, commandEncoder, piplines[164], [buf_11, buf_0, buf_91], [1024, 8, 1]);
        addComputePass(device, commandEncoder, piplines[165], [buf_1, buf_0], [4096, 1, 1]);
        addComputePass(device, commandEncoder, piplines[166], [buf_7, buf_1], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[167], [buf_1, buf_0, buf_7], [64, 4, 1]);
        addComputePass(device, commandEncoder, piplines[168], [buf_8, buf_1], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[169], [buf_1, buf_0, buf_7, buf_8, buf_92, buf_93], [1024, 64, 1]);
        addComputePass(device, commandEncoder, piplines[170], [buf_4, buf_0, buf_7, buf_8, buf_92, buf_93], [1024, 64, 1]);
        addComputePass(device, commandEncoder, piplines[171], [buf_0, buf_1, buf_4], [32768, 1, 1]);
        addComputePass(device, commandEncoder, piplines[172], [buf_1, buf_0, buf_94], [4, 32, 64]);
        addComputePass(device, commandEncoder, piplines[173], [buf_0, buf_1, buf_95], [128, 4, 1]);
        addComputePass(device, commandEncoder, piplines[174], [buf_7, buf_0], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[175], [buf_0, buf_1, buf_95, buf_7], [32, 4, 1]);
        addComputePass(device, commandEncoder, piplines[176], [buf_8, buf_0], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[177], [buf_0, buf_1, buf_95, buf_7, buf_8, buf_96, buf_97], [1024, 32, 1]);
        addComputePass(device, commandEncoder, piplines[178], [buf_4, buf_1, buf_95, buf_7, buf_8, buf_96, buf_97], [1024, 32, 1]);
        addComputePass(device, commandEncoder, piplines[179], [buf_1, buf_0, buf_4], [32768, 1, 1]);
        addComputePass(device, commandEncoder, piplines[180], [buf_0, buf_1, buf_98], [4, 32, 64]);
        addComputePass(device, commandEncoder, piplines[181], [buf_1, buf_11, buf_99, buf_0, buf_100], [4, 256, 32]);
        addComputePass(device, commandEncoder, piplines[182], [buf_4, buf_1], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[183], [buf_7, buf_4], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[184], [buf_4, buf_11, buf_99, buf_0, buf_100, buf_7], [8192, 4, 1]);
        addComputePass(device, commandEncoder, piplines[185], [buf_7, buf_4], [4096, 1, 1]);
        addComputePass(device, commandEncoder, piplines[186], [buf_14, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[187], [buf_7, buf_4, buf_14, buf_101, buf_102], [1024, 32, 1]);
        addComputePass(device, commandEncoder, piplines[188], [buf_8, buf_4, buf_14, buf_101, buf_102], [1024, 32, 1]);
        addComputePass(device, commandEncoder, piplines[189], [buf_4, buf_7, buf_8], [32768, 1, 1]);
        addComputePass(device, commandEncoder, piplines[190], [buf_7, buf_4, buf_103], [4, 32, 64]);
        addComputePass(device, commandEncoder, piplines[191], [buf_4, buf_7, buf_104], [128, 4, 1]);
        addComputePass(device, commandEncoder, piplines[192], [buf_14, buf_4], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[193], [buf_4, buf_7, buf_104, buf_14], [32, 4, 1]);
        addComputePass(device, commandEncoder, piplines[194], [buf_41, buf_4], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[195], [buf_4, buf_7, buf_104, buf_14, buf_41, buf_105, buf_106], [1024, 32, 1]);
        addComputePass(device, commandEncoder, piplines[196], [buf_8, buf_7, buf_104, buf_14, buf_41, buf_105, buf_106], [1024, 32, 1]);
        addComputePass(device, commandEncoder, piplines[197], [buf_7, buf_4, buf_8], [32768, 1, 1]);
        addComputePass(device, commandEncoder, piplines[198], [buf_4, buf_7, buf_107], [4, 32, 64]);
        addComputePass(device, commandEncoder, piplines[199], [buf_7, buf_11, buf_99, buf_0, buf_100, buf_4, buf_108], [1024, 32, 1]);
        addComputePass(device, commandEncoder, piplines[200], [buf_8, buf_11, buf_99, buf_0, buf_100, buf_4, buf_108], [8192, 4, 1]);
        addComputePass(device, commandEncoder, piplines[201], [buf_0, buf_1, buf_4, buf_108], [128, 4, 1]);
        addComputePass(device, commandEncoder, piplines[202], [buf_4, buf_0], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[203], [buf_0, buf_8, buf_4], [32, 4, 1]);
        addComputePass(device, commandEncoder, piplines[204], [buf_11, buf_0], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[205], [buf_0, buf_8, buf_4, buf_11, buf_109, buf_110], [1024, 32, 1]);
        addComputePass(device, commandEncoder, piplines[206], [buf_1, buf_8, buf_4, buf_11, buf_109, buf_110], [1024, 32, 1]);
        addComputePass(device, commandEncoder, piplines[207], [buf_4, buf_0, buf_1], [32768, 1, 1]);
        addComputePass(device, commandEncoder, piplines[208], [buf_0, buf_4, buf_111], [4, 32, 64]);
        addComputePass(device, commandEncoder, piplines[209], [buf_1, buf_0, buf_112], [128, 4, 1]);
        addComputePass(device, commandEncoder, piplines[210], [buf_11, buf_1], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[211], [buf_1, buf_0, buf_112, buf_11], [32, 4, 1]);
        addComputePass(device, commandEncoder, piplines[212], [buf_8, buf_1], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[213], [buf_1, buf_0, buf_112, buf_11, buf_8, buf_113, buf_114], [1024, 32, 1]);
        addComputePass(device, commandEncoder, piplines[214], [buf_4, buf_0, buf_112, buf_11, buf_8, buf_113, buf_114], [1024, 32, 1]);
        addComputePass(device, commandEncoder, piplines[215], [buf_0, buf_1, buf_4], [32768, 1, 1]);
        addComputePass(device, commandEncoder, piplines[216], [buf_1, buf_0, buf_115, buf_116], [4, 32, 64]);
        addComputePass(device, commandEncoder, piplines[217], [buf_4, buf_7, buf_1], [32768, 1, 1]);
        addComputePass(device, commandEncoder, piplines[218], [buf_0, buf_4, buf_117, buf_118], [8, 64, 64]);
        addComputePass(device, commandEncoder, piplines[219], [buf_11, buf_0, buf_119], [4096, 4, 1]);
        addComputePass(device, commandEncoder, piplines[220], [buf_1, buf_0], [8192, 1, 1]);
        addComputePass(device, commandEncoder, piplines[221], [buf_7, buf_1], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[222], [buf_1, buf_0, buf_7], [128, 4, 1]);
        addComputePass(device, commandEncoder, piplines[223], [buf_8, buf_1], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[224], [buf_1, buf_0, buf_7, buf_8, buf_120, buf_121], [4096, 32, 1]);
        addComputePass(device, commandEncoder, piplines[225], [buf_4, buf_0, buf_7, buf_8, buf_120, buf_121], [4096, 32, 1]);
        addComputePass(device, commandEncoder, piplines[226], [buf_0, buf_1, buf_4], [32768, 1, 1]);
        addComputePass(device, commandEncoder, piplines[227], [buf_1, buf_0, buf_122], [8, 64, 32]);
        addComputePass(device, commandEncoder, piplines[228], [buf_0, buf_1, buf_123], [256, 4, 1]);
        addComputePass(device, commandEncoder, piplines[229], [buf_7, buf_0], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[230], [buf_0, buf_1, buf_123, buf_7], [64, 4, 1]);
        addComputePass(device, commandEncoder, piplines[231], [buf_8, buf_0], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[232], [buf_0, buf_1, buf_123, buf_7, buf_8, buf_124, buf_125], [4096, 16, 1]);
        addComputePass(device, commandEncoder, piplines[233], [buf_4, buf_1, buf_123, buf_7, buf_8, buf_124, buf_125], [4096, 16, 1]);
        addComputePass(device, commandEncoder, piplines[234], [buf_1, buf_0, buf_4], [32768, 1, 1]);
        addComputePass(device, commandEncoder, piplines[235], [buf_0, buf_1, buf_126], [8, 64, 32]);
        addComputePass(device, commandEncoder, piplines[236], [buf_1, buf_11, buf_127, buf_0, buf_128], [4, 512, 32]);
        addComputePass(device, commandEncoder, piplines[237], [buf_4, buf_1], [4096, 1, 1]);
        addComputePass(device, commandEncoder, piplines[238], [buf_7, buf_4], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[239], [buf_4, buf_11, buf_127, buf_0, buf_128, buf_7], [16384, 4, 1]);
        addComputePass(device, commandEncoder, piplines[240], [buf_7, buf_4], [8192, 1, 1]);
        addComputePass(device, commandEncoder, piplines[241], [buf_14, buf_7], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[242], [buf_7, buf_4, buf_14, buf_129, buf_130], [4096, 16, 1]);
        addComputePass(device, commandEncoder, piplines[243], [buf_8, buf_4, buf_14, buf_129, buf_130], [4096, 16, 1]);
        addComputePass(device, commandEncoder, piplines[244], [buf_4, buf_7, buf_8], [32768, 1, 1]);
        addComputePass(device, commandEncoder, piplines[245], [buf_7, buf_4, buf_131], [8, 64, 32]);
        addComputePass(device, commandEncoder, piplines[246], [buf_4, buf_7, buf_132], [256, 4, 1]);
        addComputePass(device, commandEncoder, piplines[247], [buf_14, buf_4], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[248], [buf_4, buf_7, buf_132, buf_14], [64, 4, 1]);
        addComputePass(device, commandEncoder, piplines[249], [buf_41, buf_4], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[250], [buf_4, buf_7, buf_132, buf_14, buf_41, buf_133, buf_134], [4096, 16, 1]);
        addComputePass(device, commandEncoder, piplines[251], [buf_8, buf_7, buf_132, buf_14, buf_41, buf_133, buf_134], [4096, 16, 1]);
        addComputePass(device, commandEncoder, piplines[252], [buf_7, buf_4, buf_8], [32768, 1, 1]);
        addComputePass(device, commandEncoder, piplines[253], [buf_4, buf_7, buf_135], [8, 64, 32]);
        addComputePass(device, commandEncoder, piplines[254], [buf_7, buf_11, buf_127, buf_0, buf_128, buf_4, buf_136], [4096, 16, 1]);
        addComputePass(device, commandEncoder, piplines[255], [buf_8, buf_11, buf_127, buf_0, buf_128, buf_4, buf_136], [16384, 4, 1]);
        addComputePass(device, commandEncoder, piplines[256], [buf_0, buf_1, buf_4, buf_136], [256, 4, 1]);
        addComputePass(device, commandEncoder, piplines[257], [buf_4, buf_0], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[258], [buf_0, buf_8, buf_4], [64, 4, 1]);
        addComputePass(device, commandEncoder, piplines[259], [buf_11, buf_0], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[260], [buf_0, buf_8, buf_4, buf_11, buf_137, buf_138], [4096, 16, 1]);
        addComputePass(device, commandEncoder, piplines[261], [buf_1, buf_8, buf_4, buf_11, buf_137, buf_138], [4096, 16, 1]);
        addComputePass(device, commandEncoder, piplines[262], [buf_4, buf_0, buf_1], [32768, 1, 1]);
        addComputePass(device, commandEncoder, piplines[263], [buf_0, buf_4, buf_139], [8, 64, 32]);
        addComputePass(device, commandEncoder, piplines[264], [buf_1, buf_0, buf_140], [256, 4, 1]);
        addComputePass(device, commandEncoder, piplines[265], [buf_11, buf_1], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[266], [buf_1, buf_0, buf_140, buf_11], [64, 4, 1]);
        addComputePass(device, commandEncoder, piplines[267], [buf_8, buf_1], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[268], [buf_1, buf_0, buf_140, buf_11, buf_8, buf_141, buf_142], [4096, 16, 1]);
        addComputePass(device, commandEncoder, piplines[269], [buf_4, buf_0, buf_140, buf_11, buf_8, buf_141, buf_142], [4096, 16, 1]);
        addComputePass(device, commandEncoder, piplines[270], [buf_0, buf_1, buf_4], [32768, 1, 1]);
        addComputePass(device, commandEncoder, piplines[271], [buf_1, buf_0, buf_143, buf_144], [8, 64, 32]);
        addComputePass(device, commandEncoder, piplines[272], [buf_0, buf_7, buf_1], [32768, 1, 1]);
        addComputePass(device, commandEncoder, piplines[273], [buf_1, buf_0], [4096, 1, 1]);
        addComputePass(device, commandEncoder, piplines[274], [buf_11, buf_1], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[275], [buf_1, buf_0, buf_11], [64, 4, 1]);
        addComputePass(device, commandEncoder, piplines[276], [buf_7, buf_1], [32, 1, 1]);
        addComputePass(device, commandEncoder, piplines[277], [buf_1, buf_0, buf_11, buf_7, buf_145, buf_146], [4096, 16, 1]);
        addComputePass(device, commandEncoder, piplines[278], [buf_4, buf_0, buf_11, buf_7, buf_145, buf_146], [4096, 16, 1]);
        addComputePass(device, commandEncoder, piplines[279], [buf_0, buf_1, buf_4], [32768, 1, 1]);
        addComputePass(device, commandEncoder, piplines[280], [buf_1, buf_0, buf_147], [8, 64, 1]);
        addComputePass(device, commandEncoder, piplines[281], [buf_0, buf_1, buf_148], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[282], [buf_4, buf_1, buf_148], [2048, 1, 1]);
        addComputePass(device, commandEncoder, piplines[283], [buf_1, buf_0, buf_4], [8192, 1, 1]);
        addComputePass(device, commandEncoder, piplines[284], [buf_11, buf_0, buf_4], [8192, 1, 1]);
        addComputePass(device, commandEncoder, piplines[285], [outputs, buf_1, buf_11], [8192, 1, 1]);
            commandEncoder.copyBufferToBuffer(outputs, 0, gpuReadBuffer, 0, outputs.size);
            const gpuCommands = commandEncoder.finish();
            device.queue.submit([gpuCommands]);

            await gpuReadBuffer.mapAsync(GPUMapMode.READ);
            const resultBuffer = new Float32Array(gpuReadBuffer.size);
            resultBuffer.set(new Float32Array(gpuReadBuffer.getMappedRange()));
            gpuReadBuffer.unmap();
            return resultBuffer;
        }
      } 
    }
  }
  